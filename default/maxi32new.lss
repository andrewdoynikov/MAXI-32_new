
maxi32new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004586  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000042a  00800060  00004586  0000461a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013b  0080048a  0080048a  00004a44  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00004a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  00005278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000053c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f71  00000000  00000000  00005543  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003bde  00000000  00000000  000064b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000118d  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005189  00000000  00000000  0000b21f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ad0  00000000  00000000  000103a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f12  00000000  00000000  00010e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022c8  00000000  00000000  00011d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000290  00000000  00000000  00014052  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  000142e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
       4:	0c 94 38 1e 	jmp	0x3c70	; 0x3c70 <__vector_1>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 c8 08 	jmp	0x1190	; 0x1190 <__vector_5>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 e8 1d 	jmp	0x3bd0	; 0x3bd0 <__vector_11>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 00 00 15 00 00 00 00 10 10 10 15 10 10 10 00     ................
      64:	18 18 18 1d 18 18 18 00 1c 1c 1c 1d 1c 1c 1c 00     ................
      74:	1e 1e 1e 1f 1e 1e 1e 00 1f 1f 1f 1f 1f 1f 1f 00     ................
      84:	0e 15 15 17 11 11 0e 00 03 05 19 11 19 05 03 00     ................

00000094 <LcdBigNum>:
      94:	1f 1f 1f 00 00 00 00 00 00 00 00 00 00 1f 1f 1f     ................
      a4:	1f 1f 00 00 00 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
      b4:	00 00 00 00 18 18 18 00 1f 1b 13 1b 1b 1b 1f 00     ................
      c4:	1f 11 1d 11 17 11 1f 00 1f 11 1d 11 1d 11 1f 00     ................

000000d4 <__ctors_end>:
      d4:	11 24       	eor	r1, r1
      d6:	1f be       	out	0x3f, r1	; 63
      d8:	cf e5       	ldi	r28, 0x5F	; 95
      da:	d8 e0       	ldi	r29, 0x08	; 8
      dc:	de bf       	out	0x3e, r29	; 62
      de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
      e0:	14 e0       	ldi	r17, 0x04	; 4
      e2:	a0 e6       	ldi	r26, 0x60	; 96
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	e6 e8       	ldi	r30, 0x86	; 134
      e8:	f5 e4       	ldi	r31, 0x45	; 69
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
      ec:	05 90       	lpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	aa 38       	cpi	r26, 0x8A	; 138
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
      f6:	15 e0       	ldi	r17, 0x05	; 5
      f8:	aa e8       	ldi	r26, 0x8A	; 138
      fa:	b4 e0       	ldi	r27, 0x04	; 4
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a5 3c       	cpi	r26, 0xC5	; 197
     102:	b1 07       	cpc	r27, r17
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 89 00 	call	0x112	; 0x112 <main>
     10a:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <main>:
#include "tuner.h"
#include "interface.h"
//=============================================================================
int main(void)
{
  LED_STB_OUT_init();
     112:	ba 9a       	sbi	0x17, 2	; 23
  if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
     114:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	11 f4       	brne	.+4      	; 0x120 <main+0xe>
     11c:	c2 9a       	sbi	0x18, 2	; 24
     11e:	01 c0       	rjmp	.+2      	; 0x122 <main+0x10>
     120:	c2 98       	cbi	0x18, 2	; 24
  LED_AC_WAIT_init();
     122:	bb 9a       	sbi	0x17, 3	; 23
     124:	c3 98       	cbi	0x18, 3	; 24
  LED_VENTIL_init();
     126:	89 9a       	sbi	0x11, 1	; 17
     128:	91 98       	cbi	0x12, 1	; 18
  LED_STANDBY_init();
     12a:	b8 9a       	sbi	0x17, 0	; 23
     12c:	c0 98       	cbi	0x18, 0	; 24
  LED_STANDBY_on();
     12e:	c0 98       	cbi	0x18, 0	; 24
  LCD_init();
     130:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_init>
  LCD_load_defchar();
     134:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_load_defchar>
  LIGHT_init();
     138:	a4 9a       	sbi	0x14, 4	; 20
  LIGHT_on();
     13a:	ac 9a       	sbi	0x15, 4	; 21
  I2C_init();
     13c:	0e 94 95 02 	call	0x52a	; 0x52a <I2C_init>
  RC5_init(RC5_ALL);
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <RC5_init>
  RTC_init();
     146:	0e 94 66 03 	call	0x6cc	; 0x6cc <RTC_init>
  KBD_init();
     14a:	0e 94 57 05 	call	0xaae	; 0xaae <KBD_init>
  BEEP_init();
     14e:	8f 9a       	sbi	0x11, 7	; 17
     150:	97 9a       	sbi	0x12, 7	; 18
  ENC_init();
     152:	0e 94 b5 06 	call	0xd6a	; 0xd6a <ENC_init>
  LED_RC5_CMD_init();
     156:	b9 9a       	sbi	0x17, 1	; 23
     158:	c1 9a       	sbi	0x18, 1	; 24
  tda7313SetMute(1);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
  tuner_Init();
     160:	89 e7       	ldi	r24, 0x79	; 121
     162:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <tea5767Init>
     166:	0e 94 85 21 	call	0x430a	; 0x430a <tuner_Init_stations>
  tuner_PowerOn();
     16a:	0e 94 71 21 	call	0x42e2	; 0x42e2 <tea5767PowerOn>
  RTOS_init();
     16e:	0e 94 02 07 	call	0xe04	; 0xe04 <RTOS_init>
  BEEP();
     172:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     174:	8f e3       	ldi	r24, 0x3F	; 63
     176:	9c e9       	ldi	r25, 0x9C	; 156
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x66>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x6c>
     17e:	00 00       	nop
     180:	97 9a       	sbi	0x12, 7	; 18
//-----------------------------------------------------------------------------
  ds18x20SearchDevices();
     182:	0e 94 88 1c 	call	0x3910	; 0x3910 <ds18x20SearchDevices>
  ds18x20Process();
     186:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <ds18x20Process>
//-----------------------------------------------------------------------------
  sei(); 				        			 // Разрешили прерывания
     18a:	78 94       	sei
  RTOS_setTask(EVENT_START, 0, 0);
     18c:	81 ea       	ldi	r24, 0xA1	; 161
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
//-----------------------------------------------------------------------------
  while(1) {
    RTOS_dispatchTask();    			     // Вызываем диспетчер в цикле.    
     19a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <RTOS_dispatchTask>
     19e:	fd cf       	rjmp	.-6      	; 0x19a <main+0x88>

000001a0 <lcd>:
  0x1F, 0x11, 0x1D, 0x11, 0x1D, 0x11, 0x1F, 0x00
};
//=============================================================================
void lcd(unsigned char p)
{ 
  PORT(LCD_PORT_CTRL) |= (1 << LCD_EN_PIN);
     1a0:	dc 9a       	sbi	0x1b, 4	; 27
  if (p & 0x80) { PORT(LCD_PORT_DATA) |= (1 << LCD_D7_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D7_PIN)); }
     1a2:	87 ff       	sbrs	r24, 7
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <lcd+0xa>
     1a6:	db 9a       	sbi	0x1b, 3	; 27
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <lcd+0xc>
     1aa:	db 98       	cbi	0x1b, 3	; 27
  if (p & 0x40) { PORT(LCD_PORT_DATA) |= (1 << LCD_D6_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D6_PIN)); }
     1ac:	86 ff       	sbrs	r24, 6
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <lcd+0x14>
     1b0:	da 9a       	sbi	0x1b, 2	; 27
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <lcd+0x16>
     1b4:	da 98       	cbi	0x1b, 2	; 27
  if (p & 0x20) { PORT(LCD_PORT_DATA) |= (1 << LCD_D5_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D5_PIN)); }
     1b6:	85 ff       	sbrs	r24, 5
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <lcd+0x1e>
     1ba:	d9 9a       	sbi	0x1b, 1	; 27
     1bc:	01 c0       	rjmp	.+2      	; 0x1c0 <lcd+0x20>
     1be:	d9 98       	cbi	0x1b, 1	; 27
  if (p & 0x10) { PORT(LCD_PORT_DATA) |= (1 << LCD_D4_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D4_PIN)); }
     1c0:	84 ff       	sbrs	r24, 4
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <lcd+0x28>
     1c4:	d8 9a       	sbi	0x1b, 0	; 27
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <lcd+0x2a>
     1c8:	d8 98       	cbi	0x1b, 0	; 27
  PORT(LCD_PORT_CTRL) &= ~_BV(LCD_EN_PIN);
     1ca:	dc 98       	cbi	0x1b, 4	; 27
     1cc:	ef e9       	ldi	r30, 0x9F	; 159
     1ce:	ff e0       	ldi	r31, 0x0F	; 15
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd+0x30>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd+0x36>
     1d6:	00 00       	nop
  _delay_ms(1);
  PORT(LCD_PORT_CTRL) |= (1 << LCD_EN_PIN);
     1d8:	dc 9a       	sbi	0x1b, 4	; 27
  if (p & 0x08) { PORT(LCD_PORT_DATA) |= (1 << LCD_D7_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D7_PIN)); }
     1da:	83 ff       	sbrs	r24, 3
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <lcd+0x42>
     1de:	db 9a       	sbi	0x1b, 3	; 27
     1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <lcd+0x44>
     1e2:	db 98       	cbi	0x1b, 3	; 27
  if (p & 0x04) { PORT(LCD_PORT_DATA) |= (1 << LCD_D6_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D6_PIN)); }
     1e4:	82 ff       	sbrs	r24, 2
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <lcd+0x4c>
     1e8:	da 9a       	sbi	0x1b, 2	; 27
     1ea:	01 c0       	rjmp	.+2      	; 0x1ee <lcd+0x4e>
     1ec:	da 98       	cbi	0x1b, 2	; 27
  if (p & 0x02) { PORT(LCD_PORT_DATA) |= (1 << LCD_D5_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D5_PIN)); }
     1ee:	81 ff       	sbrs	r24, 1
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <lcd+0x56>
     1f2:	d9 9a       	sbi	0x1b, 1	; 27
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <lcd+0x58>
     1f6:	d9 98       	cbi	0x1b, 1	; 27
  if (p & 0x01) { PORT(LCD_PORT_DATA) |= (1 << LCD_D4_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D4_PIN)); }
     1f8:	80 ff       	sbrs	r24, 0
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <lcd+0x60>
     1fc:	d8 9a       	sbi	0x1b, 0	; 27
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <lcd+0x62>
     200:	d8 98       	cbi	0x1b, 0	; 27
  PORT(LCD_PORT_CTRL) &= (~(1 << LCD_EN_PIN));
     202:	dc 98       	cbi	0x1b, 4	; 27
     204:	8f e9       	ldi	r24, 0x9F	; 159
     206:	9f e0       	ldi	r25, 0x0F	; 15
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <lcd+0x68>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <lcd+0x6e>
     20e:	00 00       	nop
  _delay_ms(1);
  PORT(LCD_PORT_CTRL) |= (1 << LCD_EN_PIN);
     210:	dc 9a       	sbi	0x1b, 4	; 27
}                
     212:	08 95       	ret

00000214 <LCD_com>:
//=============================================================================
void LCD_com(unsigned char p)
{
  PORT(LCD_PORT_CTRL) &= ~_BV(LCD_RS_PIN);
     214:	dd 98       	cbi	0x1b, 5	; 27
  PORT(LCD_PORT_CTRL) |= _BV(LCD_EN_PIN);
     216:	dc 9a       	sbi	0x1b, 4	; 27
  lcd(p);
     218:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd>
}
     21c:	08 95       	ret

0000021e <LCD_dat>:
//=============================================================================
void LCD_dat(unsigned char p)
{
  PORT(LCD_PORT_CTRL) |= (1 << LCD_RS_PIN) | (1 << LCD_EN_PIN);
     21e:	9b b3       	in	r25, 0x1b	; 27
     220:	90 63       	ori	r25, 0x30	; 48
     222:	9b bb       	out	0x1b, r25	; 27
  if ((p > 0x80) && (p != 0xED)) {
     224:	81 38       	cpi	r24, 0x81	; 129
     226:	48 f0       	brcs	.+18     	; 0x23a <LCD_dat+0x1c>
     228:	8d 3e       	cpi	r24, 0xED	; 237
     22a:	39 f0       	breq	.+14     	; 0x23a <LCD_dat+0x1c>
    p = TransTable[(p & 0x7F) - 0x40];
     22c:	e8 2f       	mov	r30, r24
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	ef 77       	andi	r30, 0x7F	; 127
     232:	f0 70       	andi	r31, 0x00	; 0
     234:	e0 5e       	subi	r30, 0xE0	; 224
     236:	ff 4f       	sbci	r31, 0xFF	; 255
     238:	80 81       	ld	r24, Z
  }
  lcd(p);
     23a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <lcd>
}
     23e:	08 95       	ret

00000240 <LCD_puts>:
  LCD_com(0x0C);
  LCD_load_bignum();
}
//=============================================================================
void LCD_puts(char *data)
{
     240:	ef 92       	push	r14
     242:	ff 92       	push	r15
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	e8 2e       	mov	r14, r24
     24a:	e7 01       	movw	r28, r14
     24c:	7e 01       	movw	r14, r28
     24e:	f9 2e       	mov	r15, r25
     250:	e7 01       	movw	r28, r14
  while(*data) LCD_dat(*(data++));
     252:	02 c0       	rjmp	.+4      	; 0x258 <LCD_puts+0x18>
     254:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
     258:	89 91       	ld	r24, Y+
     25a:	88 23       	and	r24, r24
     25c:	d9 f7       	brne	.-10     	; 0x254 <LCD_puts+0x14>
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	ff 90       	pop	r15
     264:	ef 90       	pop	r14
     266:	08 95       	ret

00000268 <LCD_SetXY>:
//=============================================================================
void LCD_SetXY(unsigned char x, unsigned char y)
{
     268:	64 30       	cpi	r22, 0x04	; 4
     26a:	30 f4       	brcc	.+12     	; 0x278 <LCD_SetXY+0x10>
     26c:	e6 2f       	mov	r30, r22
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	e0 56       	subi	r30, 0x60	; 96
     272:	ff 4f       	sbci	r31, 0xFF	; 255
     274:	90 81       	ld	r25, Z
     276:	01 c0       	rjmp	.+2      	; 0x27a <LCD_SetXY+0x12>
     278:	90 e8       	ldi	r25, 0x80	; 128
    case 0: i = 0x80; break;
    case 1: i = 0xC0; break;
    case 2: i = 0x94; break;
    case 3: i = 0xD4; break;
  }
  LCD_com(i + x);
     27a:	89 0f       	add	r24, r25
     27c:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
}
     280:	08 95       	ret

00000282 <LCD_clear>:
//=============================================================================
void LCD_clear(void)
{
  LCD_com(1 << LCD_CLR);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
     288:	8f ef       	ldi	r24, 0xFF	; 255
     28a:	93 ec       	ldi	r25, 0xC3	; 195
     28c:	a9 e0       	ldi	r26, 0x09	; 9
     28e:	81 50       	subi	r24, 0x01	; 1
     290:	90 40       	sbci	r25, 0x00	; 0
     292:	a0 40       	sbci	r26, 0x00	; 0
     294:	e1 f7       	brne	.-8      	; 0x28e <LCD_clear+0xc>
     296:	00 c0       	rjmp	.+0      	; 0x298 <LCD_clear+0x16>
     298:	00 00       	nop
  _delay_ms(200);
}
     29a:	08 95       	ret

0000029c <LCD_definechar>:
//=============================================================================
void LCD_definechar(const unsigned char *pc,uint8_t char_code)
{
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	0f 92       	push	r0
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	6c 01       	movw	r12, r24
  uint8_t a, pcc;
  uint16_t i;
  a = (char_code << 3) | 0x40;
     2b2:	66 0f       	add	r22, r22
     2b4:	66 0f       	add	r22, r22
     2b6:	66 0f       	add	r22, r22
     2b8:	60 64       	ori	r22, 0x40	; 64
  for (i = 0; i < 8; i++) {
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	10 e0       	ldi	r17, 0x00	; 0
    pcc = pgm_read_byte(&pc[i]);
     2be:	f6 01       	movw	r30, r12
     2c0:	e0 0f       	add	r30, r16
     2c2:	f1 1f       	adc	r31, r17
     2c4:	f4 90       	lpm	r15, Z+
	LCD_com(a++); LCD_dat(pcc);
     2c6:	86 2f       	mov	r24, r22
     2c8:	80 0f       	add	r24, r16
     2ca:	69 83       	std	Y+1, r22	; 0x01
     2cc:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
     2d0:	8f 2d       	mov	r24, r15
     2d2:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
void LCD_definechar(const unsigned char *pc,uint8_t char_code)
{
  uint8_t a, pcc;
  uint16_t i;
  a = (char_code << 3) | 0x40;
  for (i = 0; i < 8; i++) {
     2d6:	0f 5f       	subi	r16, 0xFF	; 255
     2d8:	1f 4f       	sbci	r17, 0xFF	; 255
     2da:	69 81       	ldd	r22, Y+1	; 0x01
     2dc:	08 30       	cpi	r16, 0x08	; 8
     2de:	11 05       	cpc	r17, r1
     2e0:	71 f7       	brne	.-36     	; 0x2be <LCD_definechar+0x22>
    pcc = pgm_read_byte(&pc[i]);
	LCD_com(a++); LCD_dat(pcc);
  }
}
     2e2:	0f 90       	pop	r0
     2e4:	cf 91       	pop	r28
     2e6:	df 91       	pop	r29
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	df 90       	pop	r13
     2f0:	cf 90       	pop	r12
     2f2:	08 95       	ret

000002f4 <LCD_progress_bar>:
//=============================================================================
void LCD_progress_bar(unsigned char progress, unsigned char maxprogress, unsigned char length)
{
     2f4:	cf 92       	push	r12
     2f6:	df 92       	push	r13
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	df 93       	push	r29
     302:	cf 93       	push	r28
     304:	0f 92       	push	r0
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
uint8_t i;
uint16_t pixelprogress;
uint8_t c;
pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
     30a:	e6 e0       	ldi	r30, 0x06	; 6
     30c:	8e 9f       	mul	r24, r30
     30e:	f0 01       	movw	r30, r0
     310:	11 24       	eor	r1, r1
     312:	24 2f       	mov	r18, r20
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	e2 9f       	mul	r30, r18
     318:	c0 01       	movw	r24, r0
     31a:	e3 9f       	mul	r30, r19
     31c:	90 0d       	add	r25, r0
     31e:	f2 9f       	mul	r31, r18
     320:	90 0d       	add	r25, r0
     322:	11 24       	eor	r1, r1
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
     32a:	6b 01       	movw	r12, r22
  {
    if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    {
      c = 0;
    } else {
      c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     32c:	cb 01       	movw	r24, r22
     32e:	66 e0       	ldi	r22, 0x06	; 6
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	0e 94 63 22 	call	0x44c6	; 0x44c6 <__udivmodhi4>
     336:	e8 2e       	mov	r14, r24
{
uint8_t i;
uint16_t pixelprogress;
uint8_t c;
pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
for(i=0; i<length; i++)
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	ff 24       	eor	r15, r15
     33e:	15 c0       	rjmp	.+42     	; 0x36a <LCD_progress_bar+0x76>
{
  if( ((i * (uint16_t)PROGRESSPIXELS_PER_CHAR) + 5) > pixelprogress )
     340:	98 01       	movw	r18, r16
     342:	2b 5f       	subi	r18, 0xFB	; 251
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	c2 16       	cp	r12, r18
     348:	d3 06       	cpc	r13, r19
     34a:	28 f4       	brcc	.+10     	; 0x356 <LCD_progress_bar+0x62>
  {
    if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     34c:	c0 16       	cp	r12, r16
     34e:	d1 06       	cpc	r13, r17
     350:	20 f4       	brcc	.+8      	; 0x35a <LCD_progress_bar+0x66>
    {
      c = 0;
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	03 c0       	rjmp	.+6      	; 0x35c <LCD_progress_bar+0x68>
    } else {
      c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    }
  } else {
    c = 5;
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	01 c0       	rjmp	.+2      	; 0x35c <LCD_progress_bar+0x68>
  {
    if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    {
      c = 0;
    } else {
      c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     35a:	8e 2d       	mov	r24, r14
    }
  } else {
    c = 5;
  }
  LCD_dat(c);
     35c:	49 83       	std	Y+1, r20	; 0x01
     35e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
{
uint8_t i;
uint16_t pixelprogress;
uint8_t c;
pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
for(i=0; i<length; i++)
     362:	f3 94       	inc	r15
     364:	0a 5f       	subi	r16, 0xFA	; 250
     366:	1f 4f       	sbci	r17, 0xFF	; 255
     368:	49 81       	ldd	r20, Y+1	; 0x01
     36a:	f4 16       	cp	r15, r20
     36c:	48 f3       	brcs	.-46     	; 0x340 <LCD_progress_bar+0x4c>
    c = 5;
  }
  LCD_dat(c);
}

}
     36e:	0f 90       	pop	r0
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	08 95       	ret

00000382 <LCD_space>:
//=============================================================================
void LCD_space(unsigned char n_sp)
{
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	08 2f       	mov	r16, r24
unsigned char i;
for (i = 1; i <= n_sp; i++) {
     388:	11 e0       	ldi	r17, 0x01	; 1
     38a:	04 c0       	rjmp	.+8      	; 0x394 <LCD_space+0x12>
  LCD_dat(' ');
     38c:	80 e2       	ldi	r24, 0x20	; 32
     38e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
}
//=============================================================================
void LCD_space(unsigned char n_sp)
{
unsigned char i;
for (i = 1; i <= n_sp; i++) {
     392:	1f 5f       	subi	r17, 0xFF	; 255
     394:	01 17       	cp	r16, r17
     396:	d0 f7       	brcc	.-12     	; 0x38c <LCD_space+0xa>
  LCD_dat(' ');
}
}
     398:	1f 91       	pop	r17
     39a:	0f 91       	pop	r16
     39c:	08 95       	ret

0000039e <LCD_load_defchar>:
//=============================================================================
void LCD_load_defchar(void)
{
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	c0 e0       	ldi	r28, 0x00	; 0
     3a4:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char ch = 0, chn = 0;
while(ch < 64)
{
  LCD_definechar((LcdCustomChar + ch),chn++);
     3a6:	ce 01       	movw	r24, r28
     3a8:	23 e0       	ldi	r18, 0x03	; 3
     3aa:	88 0f       	add	r24, r24
     3ac:	99 1f       	adc	r25, r25
     3ae:	2a 95       	dec	r18
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <LCD_load_defchar+0xc>
     3b2:	8c 5a       	subi	r24, 0xAC	; 172
     3b4:	9f 4f       	sbci	r25, 0xFF	; 255
     3b6:	6c 2f       	mov	r22, r28
     3b8:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_definechar>
     3bc:	8f e9       	ldi	r24, 0x9F	; 159
     3be:	9f e0       	ldi	r25, 0x0F	; 15
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <LCD_load_defchar+0x22>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LCD_load_defchar+0x28>
     3c6:	00 00       	nop
     3c8:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void LCD_load_defchar(void)
{
unsigned char ch = 0, chn = 0;
while(ch < 64)
     3ca:	c8 30       	cpi	r28, 0x08	; 8
     3cc:	d1 05       	cpc	r29, r1
     3ce:	59 f7       	brne	.-42     	; 0x3a6 <LCD_load_defchar+0x8>
{
  LCD_definechar((LcdCustomChar + ch),chn++);
  _delay_ms(1);
  ch = ch + 8;
}
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <LCD_load_bignum>:
//=============================================================================
void LCD_load_bignum(void)
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	c0 e0       	ldi	r28, 0x00	; 0
     3dc:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char ch = 0, chn = 0;
while(ch < 64)
{
  LCD_definechar((LcdBigNum + ch),chn++);
     3de:	ce 01       	movw	r24, r28
     3e0:	33 e0       	ldi	r19, 0x03	; 3
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	3a 95       	dec	r19
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <LCD_load_bignum+0xc>
     3ea:	8c 56       	subi	r24, 0x6C	; 108
     3ec:	9f 4f       	sbci	r25, 0xFF	; 255
     3ee:	6c 2f       	mov	r22, r28
     3f0:	0e 94 4e 01 	call	0x29c	; 0x29c <LCD_definechar>
     3f4:	8f e9       	ldi	r24, 0x9F	; 159
     3f6:	9f e0       	ldi	r25, 0x0F	; 15
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <LCD_load_bignum+0x22>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_load_bignum+0x28>
     3fe:	00 00       	nop
     400:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void LCD_load_bignum(void)
{
unsigned char ch = 0, chn = 0;
while(ch < 64)
     402:	c8 30       	cpi	r28, 0x08	; 8
     404:	d1 05       	cpc	r29, r1
     406:	59 f7       	brne	.-42     	; 0x3de <LCD_load_bignum+0x8>
{
  LCD_definechar((LcdBigNum + ch),chn++);
  _delay_ms(1);
  ch = ch + 8;
}
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <LCD_init>:
}
//=============================================================================
void LCD_init(void)
{
  // настройка портов
  LIGHT_init();
     40e:	a4 9a       	sbi	0x14, 4	; 20
  LIGHT_on(); 
     410:	ac 9a       	sbi	0x15, 4	; 21
  DDR(LCD_PORT_DATA) |= ((1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN));
     412:	8a b3       	in	r24, 0x1a	; 26
     414:	8f 60       	ori	r24, 0x0F	; 15
     416:	8a bb       	out	0x1a, r24	; 26
  PORT(LCD_PORT_DATA) &= (~(1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN));
     418:	d8 98       	cbi	0x1b, 0	; 27
  DDR(LCD_PORT_CTRL) |= ((1 << LCD_RS_PIN) | (1 << LCD_EN_PIN) | (1 << LCD_RW_PIN)); 
     41a:	8a b3       	in	r24, 0x1a	; 26
     41c:	80 6b       	ori	r24, 0xB0	; 176
     41e:	8a bb       	out	0x1a, r24	; 26
  PORT(LCD_PORT_CTRL) &= (~(1 << LCD_RS_PIN) | (1 << LCD_EN_PIN) | (1 << LCD_RW_PIN));
     420:	dd 98       	cbi	0x1b, 5	; 27
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	93 ec       	ldi	r25, 0xC3	; 195
     426:	a9 e0       	ldi	r26, 0x09	; 9
     428:	81 50       	subi	r24, 0x01	; 1
     42a:	90 40       	sbci	r25, 0x00	; 0
     42c:	a0 40       	sbci	r26, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <LCD_init+0x1a>
     430:	00 c0       	rjmp	.+0      	; 0x432 <LCD_init+0x24>
     432:	00 00       	nop
  _delay_ms(200);
  LCD_com(0x33);
     434:	83 e3       	ldi	r24, 0x33	; 51
     436:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	99 ef       	ldi	r25, 0xF9	; 249
     43e:	a0 e0       	ldi	r26, 0x00	; 0
     440:	81 50       	subi	r24, 0x01	; 1
     442:	90 40       	sbci	r25, 0x00	; 0
     444:	a0 40       	sbci	r26, 0x00	; 0
     446:	e1 f7       	brne	.-8      	; 0x440 <LCD_init+0x32>
     448:	00 c0       	rjmp	.+0      	; 0x44a <LCD_init+0x3c>
     44a:	00 00       	nop
  _delay_ms(20);
  LCD_com(0x32);
     44c:	82 e3       	ldi	r24, 0x32	; 50
     44e:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
     452:	af e9       	ldi	r26, 0x9F	; 159
     454:	bf e0       	ldi	r27, 0x0F	; 15
     456:	11 97       	sbiw	r26, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <LCD_init+0x48>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <LCD_init+0x4e>
     45c:	00 00       	nop
  _delay_ms(1);
  LCD_com(0x28);
     45e:	88 e2       	ldi	r24, 0x28	; 40
     460:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
     464:	8f e9       	ldi	r24, 0x9F	; 159
     466:	9f e0       	ldi	r25, 0x0F	; 15
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <LCD_init+0x5a>
     46c:	00 c0       	rjmp	.+0      	; 0x46e <LCD_init+0x60>
     46e:	00 00       	nop
  _delay_ms(1);
  LCD_com(0x08);
     470:	88 e0       	ldi	r24, 0x08	; 8
     472:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
     476:	af e9       	ldi	r26, 0x9F	; 159
     478:	bf e0       	ldi	r27, 0x0F	; 15
     47a:	11 97       	sbiw	r26, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <LCD_init+0x6c>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <LCD_init+0x72>
     480:	00 00       	nop
  _delay_ms(1);
  LCD_com(0x01);
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	90 e7       	ldi	r25, 0x70	; 112
     48c:	a2 e0       	ldi	r26, 0x02	; 2
     48e:	81 50       	subi	r24, 0x01	; 1
     490:	90 40       	sbci	r25, 0x00	; 0
     492:	a0 40       	sbci	r26, 0x00	; 0
     494:	e1 f7       	brne	.-8      	; 0x48e <LCD_init+0x80>
     496:	00 c0       	rjmp	.+0      	; 0x498 <LCD_init+0x8a>
     498:	00 00       	nop
  _delay_ms(50);
  LCD_com(0x06);
     49a:	86 e0       	ldi	r24, 0x06	; 6
     49c:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
  LCD_com(0x0C);
     4a0:	8c e0       	ldi	r24, 0x0C	; 12
     4a2:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_com>
  LCD_load_bignum();
     4a6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
}
     4aa:	08 95       	ret

000004ac <delay>:
#include <avr/io.h>
#include "i2c.h"
// ============================================================================
void delay(unsigned long us)
{
  us = us * 2;
     4ac:	66 0f       	add	r22, r22
     4ae:	77 1f       	adc	r23, r23
     4b0:	88 1f       	adc	r24, r24
     4b2:	99 1f       	adc	r25, r25
  while (us)
     4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <delay+0x16>
  {
	asm volatile("nop\n\t"::);
     4b6:	00 00       	nop
	asm volatile("nop\n\t"::);
     4b8:	00 00       	nop
	us--;
     4ba:	61 50       	subi	r22, 0x01	; 1
     4bc:	70 40       	sbci	r23, 0x00	; 0
     4be:	80 40       	sbci	r24, 0x00	; 0
     4c0:	90 40       	sbci	r25, 0x00	; 0
#include "i2c.h"
// ============================================================================
void delay(unsigned long us)
{
  us = us * 2;
  while (us)
     4c2:	61 15       	cp	r22, r1
     4c4:	71 05       	cpc	r23, r1
     4c6:	81 05       	cpc	r24, r1
     4c8:	91 05       	cpc	r25, r1
     4ca:	a9 f7       	brne	.-22     	; 0x4b6 <delay+0xa>
  {
	asm volatile("nop\n\t"::);
	asm volatile("nop\n\t"::);
	us--;
  }
}
     4cc:	08 95       	ret

000004ce <I2C_start>:
  return;
}
// ============================================================================
void I2C_start(void)
{
  RELEASE_I2C_BUS();
     4ce:	a0 98       	cbi	0x14, 0	; 20
     4d0:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_DELAY);
     4d2:	6d e0       	ldi	r22, 0x0D	; 13
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  SDA_0();
     4de:	a1 9a       	sbi	0x14, 1	; 20
  delay(I2C_DELAY);
     4e0:	6d e0       	ldi	r22, 0x0D	; 13
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  SCL_0();
     4ec:	a0 9a       	sbi	0x14, 0	; 20
  delay(I2C_DELAY);
     4ee:	6d e0       	ldi	r22, 0x0D	; 13
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  return;
}
     4fa:	08 95       	ret

000004fc <I2C_stop>:
// ============================================================================
void I2C_stop(void)
{
  SDA_0();
     4fc:	a1 9a       	sbi	0x14, 1	; 20
  SCL_1();
     4fe:	a0 98       	cbi	0x14, 0	; 20
  delay(I2C_DELAY);
     500:	6d e0       	ldi	r22, 0x0D	; 13
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  SDA_1();
     50c:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_DELAY);
     50e:	6d e0       	ldi	r22, 0x0D	; 13
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  SCL_0();
     51a:	a0 9a       	sbi	0x14, 0	; 20
  delay(I2C_DELAY);
     51c:	6d e0       	ldi	r22, 0x0D	; 13
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  return;
}
     528:	08 95       	ret

0000052a <I2C_init>:
  }
}
// ============================================================================
void I2C_init(void)
{
  I2C_SDA_OUT_REG &= ~(_BV(SDA_PIN));
     52a:	a9 98       	cbi	0x15, 1	; 21
  I2C_SCL_OUT_REG &= ~(_BV(SCL_PIN));
     52c:	a8 98       	cbi	0x15, 0	; 21
  RELEASE_I2C_BUS();
     52e:	a0 98       	cbi	0x14, 0	; 20
     530:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_TIMEOUT);
     532:	64 e6       	ldi	r22, 0x64	; 100
     534:	7a e0       	ldi	r23, 0x0A	; 10
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  I2C_start();
     53e:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  delay(I2C_TIMEOUT);
     542:	64 e6       	ldi	r22, 0x64	; 100
     544:	7a e0       	ldi	r23, 0x0A	; 10
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  I2C_stop();
     54e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  delay(I2C_TIMEOUT);
     552:	64 e6       	ldi	r22, 0x64	; 100
     554:	7a e0       	ldi	r23, 0x0A	; 10
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  return;
}
     55e:	08 95       	ret

00000560 <I2C_write>:
  delay(I2C_DELAY);
  return;
}
// ============================================================================
unsigned char I2C_write(unsigned char data)
{
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	08 2f       	mov	r16, r24
     566:	18 e0       	ldi	r17, 0x08	; 8
register unsigned char bit = 0;
for(bit = 0; bit <= 7; bit++)
{
  if( data & 0x80 ) { SDA_1(); } else { SDA_0(); }
     568:	07 ff       	sbrs	r16, 7
     56a:	02 c0       	rjmp	.+4      	; 0x570 <I2C_write+0x10>
     56c:	a1 98       	cbi	0x14, 1	; 20
     56e:	01 c0       	rjmp	.+2      	; 0x572 <I2C_write+0x12>
     570:	a1 9a       	sbi	0x14, 1	; 20
    SCL_1();
     572:	a0 98       	cbi	0x14, 0	; 20
    delay(I2C_DELAY);
     574:	6d e0       	ldi	r22, 0x0D	; 13
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
    SCL_0();
     580:	a0 9a       	sbi	0x14, 0	; 20
    delay(I2C_DELAY);
     582:	6d e0       	ldi	r22, 0x0D	; 13
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
     58e:	11 50       	subi	r17, 0x01	; 1
}
// ============================================================================
unsigned char I2C_write(unsigned char data)
{
register unsigned char bit = 0;
for(bit = 0; bit <= 7; bit++)
     590:	11 f0       	breq	.+4      	; 0x596 <I2C_write+0x36>
  if( data & 0x80 ) { SDA_1(); } else { SDA_0(); }
    SCL_1();
    delay(I2C_DELAY);
    SCL_0();
    delay(I2C_DELAY);
    data = (data<<1);
     592:	00 0f       	add	r16, r16
     594:	e9 cf       	rjmp	.-46     	; 0x568 <I2C_write+0x8>
  }
  RELEASE_I2C_BUS();
     596:	a0 98       	cbi	0x14, 0	; 20
     598:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_DELAY);
     59a:	6d e0       	ldi	r22, 0x0D	; 13
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) )
     5a6:	99 9b       	sbis	0x13, 1	; 19
     5a8:	08 c0       	rjmp	.+16     	; 0x5ba <I2C_write+0x5a>
  {
    SCL_0();
    delay(I2C_DELAY);
  }	else {
    delay(I2C_TIMEOUT);
     5aa:	64 e6       	ldi	r22, 0x64	; 100
     5ac:	7a e0       	ldi	r23, 0x0A	; 10
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
	if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) )
     5b6:	99 99       	sbic	0x13, 1	; 19
     5b8:	13 c0       	rjmp	.+38     	; 0x5e0 <I2C_write+0x80>
	{
	  SCL_0();
     5ba:	a0 9a       	sbi	0x14, 0	; 20
	  delay(I2C_DELAY);
     5bc:	6d e0       	ldi	r22, 0x0D	; 13
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
	} else { return(I2C_ERROR_DEVICE_NOT_RESPONDING); }
  }
  if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) ) 
     5c8:	99 99       	sbic	0x13, 1	; 19
     5ca:	0c c0       	rjmp	.+24     	; 0x5e4 <I2C_write+0x84>
  { 
    delay(I2C_TIMEOUT);
     5cc:	64 e6       	ldi	r22, 0x64	; 100
     5ce:	7a e0       	ldi	r23, 0x0A	; 10
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  SCL_0();
  delay(I2C_DELAY);
  return;
}
// ============================================================================
unsigned char I2C_write(unsigned char data)
     5d8:	81 e0       	ldi	r24, 0x01	; 1
     5da:	99 9b       	sbis	0x13, 1	; 19
     5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <I2C_write+0x86>
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <I2C_write+0x84>
    delay(I2C_TIMEOUT);
	if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) )
	{
	  SCL_0();
	  delay(I2C_DELAY);
	} else { return(I2C_ERROR_DEVICE_NOT_RESPONDING); }
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <I2C_write+0x86>
  if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) ) 
  { 
    delay(I2C_TIMEOUT);
    if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) ) { return(I2C_ERROR_DEVICE_BUSY); }
  }   
return(I2C_NO_ERROR);	  
     5e4:	80 e0       	ldi	r24, 0x00	; 0
}
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <I2C_read>:
// ============================================================================
unsigned char I2C_read(unsigned char ack)
{
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	f8 2e       	mov	r15, r24
register unsigned char bit = 0, data = 0;
SDA_1();
     5f4:	a1 98       	cbi	0x14, 1	; 20
     5f6:	08 e0       	ldi	r16, 0x08	; 8
return(I2C_NO_ERROR);	  
}
// ============================================================================
unsigned char I2C_read(unsigned char ack)
{
register unsigned char bit = 0, data = 0;
     5f8:	10 e0       	ldi	r17, 0x00	; 0
SDA_1();
for(bit = 0; bit <= 7; bit++)
{
  SCL_1();
     5fa:	a0 98       	cbi	0x14, 0	; 20
  delay(I2C_DELAY);
     5fc:	6d e0       	ldi	r22, 0x0D	; 13
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  data = (data << 1);
     608:	11 0f       	add	r17, r17
  if( bit_is_set(I2C_SDA_PIN_REG, SDA_PIN) ) { data++; }
     60a:	99 99       	sbic	0x13, 1	; 19
     60c:	1f 5f       	subi	r17, 0xFF	; 255
    SCL_0();
     60e:	a0 9a       	sbi	0x14, 0	; 20
    delay(I2C_DELAY);
     610:	6d e0       	ldi	r22, 0x0D	; 13
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
     61c:	01 50       	subi	r16, 0x01	; 1
// ============================================================================
unsigned char I2C_read(unsigned char ack)
{
register unsigned char bit = 0, data = 0;
SDA_1();
for(bit = 0; bit <= 7; bit++)
     61e:	69 f7       	brne	.-38     	; 0x5fa <I2C_read+0xe>
  data = (data << 1);
  if( bit_is_set(I2C_SDA_PIN_REG, SDA_PIN) ) { data++; }
    SCL_0();
    delay(I2C_DELAY);
  }
  if(ack == 1) { SDA_0(); }  else { SDA_1(); }
     620:	8f 2d       	mov	r24, r15
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	11 f4       	brne	.+4      	; 0x62a <I2C_read+0x3e>
     626:	a1 9a       	sbi	0x14, 1	; 20
     628:	01 c0       	rjmp	.+2      	; 0x62c <I2C_read+0x40>
     62a:	a1 98       	cbi	0x14, 1	; 20
  SCL_1();
     62c:	a0 98       	cbi	0x14, 0	; 20
  delay(I2C_DELAY);
     62e:	6d e0       	ldi	r22, 0x0D	; 13
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  SCL_0();
     63a:	a0 9a       	sbi	0x14, 0	; 20
  delay(I2C_DELAY);
     63c:	6d e0       	ldi	r22, 0x0D	; 13
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 56 02 	call	0x4ac	; 0x4ac <delay>
  return data;
}
     648:	81 2f       	mov	r24, r17
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	08 95       	ret

00000652 <RTC_write_reg>:
#include "i2c.h"
#include "lcd_lib.h"
#include "ds1307.h"
//=============================================================================
void RTC_write_reg(unsigned char addr,unsigned char data)
{
     652:	1f 93       	push	r17
     654:	df 93       	push	r29
     656:	cf 93       	push	r28
     658:	0f 92       	push	r0
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	18 2f       	mov	r17, r24
  I2C_start();
     660:	69 83       	std	Y+1, r22	; 0x01
     662:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     666:	80 ed       	ldi	r24, 0xD0	; 208
     668:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(addr);
     66c:	81 2f       	mov	r24, r17
     66e:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(data);
     672:	69 81       	ldd	r22, Y+1	; 0x01
     674:	86 2f       	mov	r24, r22
     676:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
     67a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
}
     67e:	0f 90       	pop	r0
     680:	cf 91       	pop	r28
     682:	df 91       	pop	r29
     684:	1f 91       	pop	r17
     686:	08 95       	ret

00000688 <RTC_read_reg>:
//=============================================================================
unsigned char RTC_read_reg(unsigned char addr)
{
     688:	1f 93       	push	r17
     68a:	df 93       	push	r29
     68c:	cf 93       	push	r28
     68e:	0f 92       	push	r0
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	18 2f       	mov	r17, r24
  unsigned char temp = 0; 
  I2C_start();
     696:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     69a:	80 ed       	ldi	r24, 0xD0	; 208
     69c:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(addr);
     6a0:	81 2f       	mov	r24, r17
     6a2:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
     6a6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  I2C_start();
     6aa:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(DS1307_ADDR_READ);
     6ae:	81 ed       	ldi	r24, 0xD1	; 209
     6b0:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  temp = I2C_read(I2C_NOACK);
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <I2C_read>
  I2C_stop();
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  return temp;
}
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	0f 90       	pop	r0
     6c4:	cf 91       	pop	r28
     6c6:	df 91       	pop	r29
     6c8:	1f 91       	pop	r17
     6ca:	08 95       	ret

000006cc <RTC_init>:
//=============================================================================
void RTC_init(void)
{
  unsigned temp = 0; 
  temp = RTC_read_reg(0x00);
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 44 03 	call	0x688	; 0x688 <RTC_read_reg>
  if ((temp & 0x80) != 0) {
     6d2:	87 ff       	sbrs	r24, 7
     6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <RTC_init+0x14>
    RTC_write_reg(0x00, temp & ~0x80);
     6d6:	68 2f       	mov	r22, r24
     6d8:	6f 77       	andi	r22, 0x7F	; 127
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	0e 94 29 03 	call	0x652	; 0x652 <RTC_write_reg>
  }
  RTC_write_reg(DS1307_CONTROL, 0x90);
     6e0:	87 e0       	ldi	r24, 0x07	; 7
     6e2:	60 e9       	ldi	r22, 0x90	; 144
     6e4:	0e 94 29 03 	call	0x652	; 0x652 <RTC_write_reg>
}
     6e8:	08 95       	ret

000006ea <bcd2bin>:
  I2C_stop();
}
//=============================================================================
unsigned char bcd2bin(unsigned char bcd)
{
  unsigned char temp = bcd & 0x0F; 
     6ea:	28 2f       	mov	r18, r24
     6ec:	2f 70       	andi	r18, 0x0F	; 15
  *month = bcd2bin(I2C_read(I2C_ACK));
  *year = bcd2bin(I2C_read(I2C_NOACK));
  I2C_stop();
}
//=============================================================================
unsigned char bcd2bin(unsigned char bcd)
     6ee:	98 2f       	mov	r25, r24
     6f0:	92 95       	swap	r25
     6f2:	9f 70       	andi	r25, 0x0F	; 15
     6f4:	99 0f       	add	r25, r25
     6f6:	89 2f       	mov	r24, r25
     6f8:	88 0f       	add	r24, r24
     6fa:	88 0f       	add	r24, r24
     6fc:	89 0f       	add	r24, r25
  { 
    temp += 10; 
    bcd -= 0x10; 
  } 
  return temp; 
}
     6fe:	82 0f       	add	r24, r18
     700:	08 95       	ret

00000702 <RTC_get_date>:
  I2C_write(bin2bcd(year));
  I2C_stop();
}
//=============================================================================
void RTC_get_date(unsigned char *date,unsigned char *month, unsigned char *year)
{
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	ec 01       	movw	r28, r24
     710:	8b 01       	movw	r16, r22
     712:	7a 01       	movw	r14, r20
  I2C_start();
     714:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     718:	80 ed       	ldi	r24, 0xD0	; 208
     71a:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(DS1307_DATE);
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
     724:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  I2C_start();
     728:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(DS1307_ADDR_READ);
     72c:	81 ed       	ldi	r24, 0xD1	; 209
     72e:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  *date = bcd2bin(I2C_read(I2C_ACK));
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	0e 94 f6 02 	call	0x5ec	; 0x5ec <I2C_read>
     738:	0e 94 75 03 	call	0x6ea	; 0x6ea <bcd2bin>
     73c:	88 83       	st	Y, r24
  *month = bcd2bin(I2C_read(I2C_ACK));
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	0e 94 f6 02 	call	0x5ec	; 0x5ec <I2C_read>
     744:	0e 94 75 03 	call	0x6ea	; 0x6ea <bcd2bin>
     748:	f8 01       	movw	r30, r16
     74a:	80 83       	st	Z, r24
  *year = bcd2bin(I2C_read(I2C_NOACK));
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <I2C_read>
     752:	0e 94 75 03 	call	0x6ea	; 0x6ea <bcd2bin>
     756:	f7 01       	movw	r30, r14
     758:	80 83       	st	Z, r24
  I2C_stop();
     75a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	08 95       	ret

0000076c <RTC_get_time>:
  I2C_write(bin2bcd(hour));
  I2C_stop();
}
//=============================================================================
void RTC_get_time(unsigned char *hour,unsigned char *min,unsigned char *sec)
{
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	ec 01       	movw	r28, r24
     77a:	8b 01       	movw	r16, r22
     77c:	7a 01       	movw	r14, r20
  I2C_start();
     77e:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     782:	80 ed       	ldi	r24, 0xD0	; 208
     784:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(0);
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
     78e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  I2C_start();
     792:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(DS1307_ADDR_READ);
     796:	81 ed       	ldi	r24, 0xD1	; 209
     798:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  *sec = bcd2bin(I2C_read(I2C_ACK));
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <I2C_read>
     7a2:	0e 94 75 03 	call	0x6ea	; 0x6ea <bcd2bin>
     7a6:	f7 01       	movw	r30, r14
     7a8:	80 83       	st	Z, r24
  *min = bcd2bin(I2C_read(I2C_ACK));
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	0e 94 f6 02 	call	0x5ec	; 0x5ec <I2C_read>
     7b0:	0e 94 75 03 	call	0x6ea	; 0x6ea <bcd2bin>
     7b4:	f8 01       	movw	r30, r16
     7b6:	80 83       	st	Z, r24
  *hour = bcd2bin(I2C_read(I2C_NOACK));
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 f6 02 	call	0x5ec	; 0x5ec <I2C_read>
     7be:	0e 94 75 03 	call	0x6ea	; 0x6ea <bcd2bin>
     7c2:	88 83       	st	Y, r24
  I2C_stop();
     7c4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
}
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	08 95       	ret

000007d6 <bin2bcd>:
  return temp; 
}
//=============================================================================
unsigned char bin2bcd(unsigned char bin)
{
  unsigned temp = 0; 
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
  while(bin > 9) 
     7da:	03 c0       	rjmp	.+6      	; 0x7e2 <bin2bcd+0xc>
  { 
    temp += 0x10; 
     7dc:	20 5f       	subi	r18, 0xF0	; 240
     7de:	3f 4f       	sbci	r19, 0xFF	; 255
    bin -= 10; 
     7e0:	8a 50       	subi	r24, 0x0A	; 10
}
//=============================================================================
unsigned char bin2bcd(unsigned char bin)
{
  unsigned temp = 0; 
  while(bin > 9) 
     7e2:	8a 30       	cpi	r24, 0x0A	; 10
     7e4:	d8 f7       	brcc	.-10     	; 0x7dc <bin2bcd+0x6>
  { 
    temp += 0x10; 
    bin -= 10; 
  } 
  return temp + bin; 
}
     7e6:	82 0f       	add	r24, r18
     7e8:	08 95       	ret

000007ea <RTC_set_date>:
  *hour = bcd2bin(I2C_read(I2C_NOACK));
  I2C_stop();
}
//=============================================================================
void RTC_set_date(unsigned char date,unsigned char month,unsigned char year)
{
     7ea:	1f 93       	push	r17
     7ec:	df 93       	push	r29
     7ee:	cf 93       	push	r28
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <RTC_set_date+0x8>
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	18 2f       	mov	r17, r24
  I2C_start();
     7f8:	4a 83       	std	Y+2, r20	; 0x02
     7fa:	69 83       	std	Y+1, r22	; 0x01
     7fc:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     800:	80 ed       	ldi	r24, 0xD0	; 208
     802:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(DS1307_DATE);
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(bin2bcd(date));
     80c:	81 2f       	mov	r24, r17
     80e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <bin2bcd>
     812:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(bin2bcd(month));
     816:	69 81       	ldd	r22, Y+1	; 0x01
     818:	86 2f       	mov	r24, r22
     81a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <bin2bcd>
     81e:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(bin2bcd(year));
     822:	4a 81       	ldd	r20, Y+2	; 0x02
     824:	84 2f       	mov	r24, r20
     826:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <bin2bcd>
     82a:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
     82e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
}
     832:	0f 90       	pop	r0
     834:	0f 90       	pop	r0
     836:	cf 91       	pop	r28
     838:	df 91       	pop	r29
     83a:	1f 91       	pop	r17
     83c:	08 95       	ret

0000083e <RTC_set_time>:
  }
  RTC_write_reg(DS1307_CONTROL, 0x90);
}
//=============================================================================
void RTC_set_time(unsigned char hour, unsigned char min, unsigned char sec)
{
     83e:	1f 93       	push	r17
     840:	df 93       	push	r29
     842:	cf 93       	push	r28
     844:	00 d0       	rcall	.+0      	; 0x846 <RTC_set_time+0x8>
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
     84a:	18 2f       	mov	r17, r24
  I2C_start();
     84c:	49 83       	std	Y+1, r20	; 0x01
     84e:	6a 83       	std	Y+2, r22	; 0x02
     850:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     854:	80 ed       	ldi	r24, 0xD0	; 208
     856:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(0);
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(bin2bcd(sec));
     860:	49 81       	ldd	r20, Y+1	; 0x01
     862:	84 2f       	mov	r24, r20
     864:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <bin2bcd>
     868:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(bin2bcd(min));
     86c:	6a 81       	ldd	r22, Y+2	; 0x02
     86e:	86 2f       	mov	r24, r22
     870:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <bin2bcd>
     874:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(bin2bcd(hour));
     878:	81 2f       	mov	r24, r17
     87a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <bin2bcd>
     87e:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
     882:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
}
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	cf 91       	pop	r28
     88c:	df 91       	pop	r29
     88e:	1f 91       	pop	r17
     890:	08 95       	ret

00000892 <RTC_dayofweek>:
  RTC_get_date(&d,&m,&y);
  print_dec(d,2,'0'); LCD_dat('/'); print_dec(m,2,'0'); LCD_dat('/'); print_dec(20,2,'0'); print_dec(y,2,'0');
}
//=============================================================================
uint8_t RTC_dayofweek(void)
{
     892:	df 93       	push	r29
     894:	cf 93       	push	r28
     896:	00 d0       	rcall	.+0      	; 0x898 <RTC_dayofweek+0x6>
     898:	0f 92       	push	r0
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
  uint8_t d, m, y;
  RTC_get_date(&d,&m,&y);
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	be 01       	movw	r22, r28
     8a4:	6e 5f       	subi	r22, 0xFE	; 254
     8a6:	7f 4f       	sbci	r23, 0xFF	; 255
     8a8:	ae 01       	movw	r20, r28
     8aa:	4d 5f       	subi	r20, 0xFD	; 253
     8ac:	5f 4f       	sbci	r21, 0xFF	; 255
     8ae:	0e 94 81 03 	call	0x702	; 0x702 <RTC_get_date>
  if (m < 3) {
     8b2:	8a 81       	ldd	r24, Y+2	; 0x02
     8b4:	83 30       	cpi	r24, 0x03	; 3
     8b6:	28 f4       	brcc	.+10     	; 0x8c2 <RTC_dayofweek+0x30>
    m += 12;
     8b8:	84 5f       	subi	r24, 0xF4	; 244
     8ba:	8a 83       	std	Y+2, r24	; 0x02
    y--;
     8bc:	8b 81       	ldd	r24, Y+3	; 0x03
     8be:	81 50       	subi	r24, 0x01	; 1
     8c0:	8b 83       	std	Y+3, r24	; 0x03
  }
  return ( (13 * m + 3) / 5 + d + y + y / 4 - y / 100 + y / 400) % 7;
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	29 81       	ldd	r18, Y+1	; 0x01
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	28 0f       	add	r18, r24
     8ca:	31 1d       	adc	r19, r1
     8cc:	98 2f       	mov	r25, r24
     8ce:	96 95       	lsr	r25
     8d0:	96 95       	lsr	r25
     8d2:	29 0f       	add	r18, r25
     8d4:	31 1d       	adc	r19, r1
     8d6:	64 e6       	ldi	r22, 0x64	; 100
     8d8:	0e 94 57 22 	call	0x44ae	; 0x44ae <__udivmodqi4>
     8dc:	28 1b       	sub	r18, r24
     8de:	31 09       	sbc	r19, r1
     8e0:	9a 81       	ldd	r25, Y+2	; 0x02
     8e2:	8d e0       	ldi	r24, 0x0D	; 13
     8e4:	98 9f       	mul	r25, r24
     8e6:	c0 01       	movw	r24, r0
     8e8:	11 24       	eor	r1, r1
     8ea:	03 96       	adiw	r24, 0x03	; 3
     8ec:	65 e0       	ldi	r22, 0x05	; 5
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
     8f4:	26 0f       	add	r18, r22
     8f6:	37 1f       	adc	r19, r23
     8f8:	c9 01       	movw	r24, r18
     8fa:	67 e0       	ldi	r22, 0x07	; 7
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
}
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	cf 91       	pop	r28
     90a:	df 91       	pop	r29
     90c:	08 95       	ret

0000090e <print_dec>:
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
{
     90e:	ff 92       	push	r15
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	2b 97       	sbiw	r28, 0x0b	; 11
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
     928:	f6 2e       	mov	r15, r22
    y--;
  }
  return ( (13 * m + 3) / 5 + d + y + y / 4 - y / 100 + y / 400) % 7;
}
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
     92a:	e6 2f       	mov	r30, r22
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	9e 01       	movw	r18, r28
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	e2 0f       	add	r30, r18
     936:	f3 1f       	adc	r31, r19
{
  unsigned char i;
  unsigned char s[10];
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
     938:	0a e0       	ldi	r16, 0x0A	; 10
     93a:	10 e0       	ldi	r17, 0x00	; 0
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
{
  unsigned char i;
  unsigned char s[10];
  for (i = 0; i < n; i++) {
     93c:	07 c0       	rjmp	.+14     	; 0x94c <print_dec+0x3e>
     93e:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
     940:	b8 01       	movw	r22, r16
     942:	0e 94 63 22 	call	0x44c6	; 0x44c6 <__udivmodhi4>
     946:	80 5d       	subi	r24, 0xD0	; 208
     948:	80 83       	st	Z, r24
    x /= 10;
     94a:	cb 01       	movw	r24, r22
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
{
  unsigned char i;
  unsigned char s[10];
  for (i = 0; i < n; i++) {
     94c:	e2 17       	cp	r30, r18
     94e:	f3 07       	cpc	r31, r19
     950:	b1 f7       	brne	.-20     	; 0x93e <print_dec+0x30>
     952:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i=0; i<(n - 1); i++) {
     954:	8f 2d       	mov	r24, r15
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	08 c0       	rjmp	.+16     	; 0x972 <print_dec+0x64>
     962:	fb 01       	movw	r30, r22
     964:	e2 0f       	add	r30, r18
     966:	f3 1f       	adc	r31, r19
     968:	20 81       	ld	r18, Z
     96a:	20 33       	cpi	r18, 0x30	; 48
     96c:	91 f4       	brne	.+36     	; 0x992 <print_dec+0x84>
     96e:	40 83       	st	Z, r20
  unsigned char s[10];
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i=0; i<(n - 1); i++) {
     970:	5f 5f       	subi	r21, 0xFF	; 255
     972:	25 2f       	mov	r18, r21
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	28 17       	cp	r18, r24
     978:	39 07       	cpc	r19, r25
     97a:	9c f3       	brlt	.-26     	; 0x962 <print_dec+0x54>
     97c:	0a c0       	rjmp	.+20     	; 0x992 <print_dec+0x84>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i=0; i<n; i++) LCD_dat(s[i]);
     97e:	f8 01       	movw	r30, r16
     980:	e9 0f       	add	r30, r25
     982:	f1 1d       	adc	r31, r1
     984:	80 81       	ld	r24, Z
     986:	9b 87       	std	Y+11, r25	; 0x0b
     988:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
     98c:	9b 85       	ldd	r25, Y+11	; 0x0b
     98e:	9f 5f       	subi	r25, 0xFF	; 255
     990:	04 c0       	rjmp	.+8      	; 0x99a <print_dec+0x8c>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i=0; i<(n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
     992:	90 e0       	ldi	r25, 0x00	; 0
  }
  for (i=0; i<n; i++) LCD_dat(s[i]);
     994:	8e 01       	movw	r16, r28
     996:	0f 5f       	subi	r16, 0xFF	; 255
     998:	1f 4f       	sbci	r17, 0xFF	; 255
     99a:	9f 15       	cp	r25, r15
     99c:	80 f3       	brcs	.-32     	; 0x97e <print_dec+0x70>
}
     99e:	2b 96       	adiw	r28, 0x0b	; 11
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	cf 91       	pop	r28
     9ac:	df 91       	pop	r29
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	08 95       	ret

000009b6 <RTC_print_date>:
  RTC_get_time(&h,&m,&s);
  print_dec(h,2,'0'); LCD_dat(':'); print_dec(m,2,'0'); LCD_dat(':'); print_dec(s,2,'0');
}
//=============================================================================
void RTC_print_date(void)
{
     9b6:	df 93       	push	r29
     9b8:	cf 93       	push	r28
     9ba:	00 d0       	rcall	.+0      	; 0x9bc <RTC_print_date+0x6>
     9bc:	0f 92       	push	r0
     9be:	cd b7       	in	r28, 0x3d	; 61
     9c0:	de b7       	in	r29, 0x3e	; 62
  unsigned char d,m,y;
  RTC_get_date(&d,&m,&y);
     9c2:	ce 01       	movw	r24, r28
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	be 01       	movw	r22, r28
     9c8:	6e 5f       	subi	r22, 0xFE	; 254
     9ca:	7f 4f       	sbci	r23, 0xFF	; 255
     9cc:	ae 01       	movw	r20, r28
     9ce:	4d 5f       	subi	r20, 0xFD	; 253
     9d0:	5f 4f       	sbci	r21, 0xFF	; 255
     9d2:	0e 94 81 03 	call	0x702	; 0x702 <RTC_get_date>
  print_dec(d,2,'0'); LCD_dat('/'); print_dec(m,2,'0'); LCD_dat('/'); print_dec(20,2,'0'); print_dec(y,2,'0');
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	62 e0       	ldi	r22, 0x02	; 2
     9dc:	40 e3       	ldi	r20, 0x30	; 48
     9de:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
     9e2:	8f e2       	ldi	r24, 0x2F	; 47
     9e4:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
     9e8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	62 e0       	ldi	r22, 0x02	; 2
     9ee:	40 e3       	ldi	r20, 0x30	; 48
     9f0:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
     9f4:	8f e2       	ldi	r24, 0x2F	; 47
     9f6:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
     9fa:	84 e1       	ldi	r24, 0x14	; 20
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	62 e0       	ldi	r22, 0x02	; 2
     a00:	40 e3       	ldi	r20, 0x30	; 48
     a02:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
     a06:	8b 81       	ldd	r24, Y+3	; 0x03
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	62 e0       	ldi	r22, 0x02	; 2
     a0c:	40 e3       	ldi	r20, 0x30	; 48
     a0e:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
}
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	0f 90       	pop	r0
     a18:	cf 91       	pop	r28
     a1a:	df 91       	pop	r29
     a1c:	08 95       	ret

00000a1e <RTC_print_time>:
  } 
  return temp + bin; 
}
//=============================================================================
void RTC_print_time(void)
{
     a1e:	df 93       	push	r29
     a20:	cf 93       	push	r28
     a22:	00 d0       	rcall	.+0      	; 0xa24 <RTC_print_time+0x6>
     a24:	0f 92       	push	r0
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
  unsigned char h,m,s;
  RTC_get_time(&h,&m,&s);
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	be 01       	movw	r22, r28
     a30:	6e 5f       	subi	r22, 0xFE	; 254
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	ae 01       	movw	r20, r28
     a36:	4d 5f       	subi	r20, 0xFD	; 253
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	0e 94 b6 03 	call	0x76c	; 0x76c <RTC_get_time>
  print_dec(h,2,'0'); LCD_dat(':'); print_dec(m,2,'0'); LCD_dat(':'); print_dec(s,2,'0');
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	62 e0       	ldi	r22, 0x02	; 2
     a44:	40 e3       	ldi	r20, 0x30	; 48
     a46:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
     a4a:	8a e3       	ldi	r24, 0x3A	; 58
     a4c:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	62 e0       	ldi	r22, 0x02	; 2
     a56:	40 e3       	ldi	r20, 0x30	; 48
     a58:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
     a5c:	8a e3       	ldi	r24, 0x3A	; 58
     a5e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	62 e0       	ldi	r22, 0x02	; 2
     a68:	40 e3       	ldi	r20, 0x30	; 48
     a6a:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
}
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	cf 91       	pop	r28
     a76:	df 91       	pop	r29
     a78:	08 95       	ret

00000a7a <print_hex>:
  }
  for (i=0; i<n; i++) LCD_dat(s[i]);
}
//=============================================================================
void print_hex(unsigned char x)
{
     a7a:	1f 93       	push	r17
  unsigned char hi, lo;
  hi = x & 0xF0;
  hi = hi >> 4;
     a7c:	28 2f       	mov	r18, r24
     a7e:	22 95       	swap	r18
     a80:	2f 70       	andi	r18, 0x0F	; 15
  hi = hi + '0';
     a82:	92 2f       	mov	r25, r18
     a84:	90 5d       	subi	r25, 0xD0	; 208
  if (hi >'9') hi = hi + 7;
     a86:	9a 33       	cpi	r25, 0x3A	; 58
     a88:	08 f0       	brcs	.+2      	; 0xa8c <print_hex+0x12>
     a8a:	99 5f       	subi	r25, 0xF9	; 249
  lo = (x & 0x0F) + '0';
     a8c:	8f 70       	andi	r24, 0x0F	; 15
     a8e:	18 2f       	mov	r17, r24
     a90:	10 5d       	subi	r17, 0xD0	; 208
  if (lo > '9') lo = lo + 7;
     a92:	1a 33       	cpi	r17, 0x3A	; 58
     a94:	08 f0       	brcs	.+2      	; 0xa98 <print_hex+0x1e>
     a96:	19 5f       	subi	r17, 0xF9	; 249
  LCD_dat(hi); LCD_dat(lo);
     a98:	89 2f       	mov	r24, r25
     a9a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
     a9e:	81 2f       	mov	r24, r17
     aa0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
}
     aa4:	1f 91       	pop	r17
     aa6:	08 95       	ret

00000aa8 <KBD_set_type>:
//=============================================================================
unsigned char kbd_type = 1;
//=============================================================================
void KBD_set_type(uint8_t val)
{
  kbd_type = val;
     aa8:	80 93 a4 00 	sts	0x00A4, r24
}
     aac:	08 95       	ret

00000aae <KBD_init>:
  }
}
//=============================================================================
void KBD_init(void)
{
  DDR(BUT_STANDBY) &= ~BUT_STANDBY_LINE;
     aae:	bd 98       	cbi	0x17, 5	; 23
  PORT(BUT_STANDBY) |= BUT_STANDBY_LINE;
     ab0:	c5 9a       	sbi	0x18, 5	; 24
  DDR(BUT_SET) &= ~BUT_SET_LINE;
     ab2:	be 98       	cbi	0x17, 6	; 23
  PORT(BUT_SET) |= BUT_SET_LINE;
     ab4:	c6 9a       	sbi	0x18, 6	; 24
  DDR(BUT_MENU) &= ~BUT_MENU_LINE;
     ab6:	bf 98       	cbi	0x17, 7	; 23
  PORT(BUT_MENU) |= BUT_MENU_LINE;
     ab8:	c7 9a       	sbi	0x18, 7	; 24
  DDR(BUT_SELECT) &= ~BUT_SELECT_LINE;
     aba:	a3 98       	cbi	0x14, 3	; 20
  PORT(BUT_SELECT) |= BUT_SELECT_LINE;
     abc:	ab 9a       	sbi	0x15, 3	; 21
  DDR(BUT_UP) &= ~BUT_UP_LINE;
     abe:	8c 98       	cbi	0x11, 4	; 17
  PORT(BUT_UP) |= BUT_UP_LINE;
     ac0:	94 9a       	sbi	0x12, 4	; 18
  DDR(BUT_DOWN) &= ~BUT_DOWN_LINE;
     ac2:	8d 98       	cbi	0x11, 5	; 17
  PORT(BUT_DOWN) |= BUT_DOWN_LINE;
     ac4:	95 9a       	sbi	0x12, 5	; 18
  DDR(BUT_LEFT) &= ~BUT_LEFT_LINE;
     ac6:	a2 98       	cbi	0x14, 2	; 20
  PORT(BUT_LEFT) |= BUT_LEFT_LINE;
     ac8:	aa 9a       	sbi	0x15, 2	; 21
  DDR(BUT_RIGHT) &= ~BUT_RIGHT_LINE;
     aca:	8e 98       	cbi	0x11, 6	; 17
  PORT(BUT_RIGHT) |= BUT_RIGHT_LINE;
     acc:	96 9a       	sbi	0x12, 6	; 18
  DDR(BEEPER) |= BEEPER_LINE;
     ace:	8f 9a       	sbi	0x11, 7	; 17
  PORT(BEEPER) |= BEEPER_LINE;
     ad0:	97 9a       	sbi	0x12, 7	; 18
//-----------------------------------------------------------------------------
  DDR(LED_FAULT_IN) &= ~LED_FAULT_IN_LINE;
     ad2:	a7 98       	cbi	0x14, 7	; 20
  PORT(LED_FAULT_IN) |= LED_FAULT_IN_LINE;
     ad4:	af 9a       	sbi	0x15, 7	; 21
  DDR(LED_FAULT_IMPULS0) |= LED_FAULT_IMPULS0_LINE;
     ad6:	a6 9a       	sbi	0x14, 6	; 20
  LED_FAULT_IMPULS0_off();
     ad8:	ae 98       	cbi	0x15, 6	; 21
  DDR(LED_FAULT_IMPULS1) |= LED_FAULT_IMPULS1_LINE;
     ada:	a5 9a       	sbi	0x14, 5	; 20
  LED_FAULT_IMPULS1_off();
     adc:	ad 9a       	sbi	0x15, 5	; 21
  DDR(LED_MUTE_DUBLE) |= LED_MUTE_DUBLE_LINE;
     ade:	d7 9a       	sbi	0x1a, 7	; 26
  LED_MUTE_DUBLE_1;
     ae0:	df 9a       	sbi	0x1b, 7	; 27
  DDR(LED_STB_IMPULS) |= LED_STB_IMPULS_LINE;
     ae2:	d6 9a       	sbi	0x1a, 6	; 26
//-----------------------------------------------------------------------------
}
     ae4:	08 95       	ret

00000ae6 <debounce_sw_standby>:
//=============================================================================
unsigned char debounce_sw_standby(void)
{
static uint16_t state1 = 0; //holds present state
state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_STANDBY), BUT_STANDBY_PIN)) | 0xE000;
     ae6:	80 91 98 04 	lds	r24, 0x0498
     aea:	90 91 99 04 	lds	r25, 0x0499
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	90 6e       	ori	r25, 0xE0	; 224
     af4:	21 e0       	ldi	r18, 0x01	; 1
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	b5 99       	sbic	0x16, 5	; 22
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <debounce_sw_standby+0x1a>
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	28 2b       	or	r18, r24
     b02:	39 2b       	or	r19, r25
     b04:	30 93 99 04 	sts	0x0499, r19
     b08:	20 93 98 04 	sts	0x0498, r18
if (state1 == 0xF000) return 1;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 ef       	ldi	r25, 0xF0	; 240
     b10:	20 30       	cpi	r18, 0x00	; 0
     b12:	39 07       	cpc	r19, r25
     b14:	09 f0       	breq	.+2      	; 0xb18 <debounce_sw_standby+0x32>
     b16:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     b18:	08 95       	ret

00000b1a <debounce_sw_left>:
//=============================================================================
unsigned char debounce_sw_left(void)
{
static uint16_t state2 = 0; //holds present state
state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_LEFT), BUT_LEFT_PIN)) | 0xE000;
     b1a:	80 91 96 04 	lds	r24, 0x0496
     b1e:	90 91 97 04 	lds	r25, 0x0497
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	90 6e       	ori	r25, 0xE0	; 224
     b28:	21 e0       	ldi	r18, 0x01	; 1
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	9a 99       	sbic	0x13, 2	; 19
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <debounce_sw_left+0x1a>
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	82 2b       	or	r24, r18
     b36:	93 2b       	or	r25, r19
     b38:	90 93 97 04 	sts	0x0497, r25
     b3c:	80 93 96 04 	sts	0x0496, r24
if (state2 == 0xF000) return 1;
     b40:	20 ef       	ldi	r18, 0xF0	; 240
     b42:	80 30       	cpi	r24, 0x00	; 0
     b44:	92 07       	cpc	r25, r18
     b46:	31 f0       	breq	.+12     	; 0xb54 <debounce_sw_left+0x3a>
if (state2 == 0xE000) return 2;
     b48:	20 ee       	ldi	r18, 0xE0	; 224
     b4a:	80 30       	cpi	r24, 0x00	; 0
     b4c:	92 07       	cpc	r25, r18
     b4e:	21 f4       	brne	.+8      	; 0xb58 <debounce_sw_left+0x3e>
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_left(void)
{
static uint16_t state2 = 0; //holds present state
state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_LEFT), BUT_LEFT_PIN)) | 0xE000;
if (state2 == 0xF000) return 1;
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	08 95       	ret
if (state2 == 0xE000) return 2;
return 0;
     b58:	80 e0       	ldi	r24, 0x00	; 0
}
     b5a:	08 95       	ret

00000b5c <debounce_sw_right>:
//=============================================================================
unsigned char debounce_sw_right(void)
{
static uint16_t state3 = 0; //holds present state
state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_RIGHT), BUT_RIGHT_PIN)) | 0xE000;
     b5c:	80 91 94 04 	lds	r24, 0x0494
     b60:	90 91 95 04 	lds	r25, 0x0495
     b64:	88 0f       	add	r24, r24
     b66:	99 1f       	adc	r25, r25
     b68:	90 6e       	ori	r25, 0xE0	; 224
     b6a:	21 e0       	ldi	r18, 0x01	; 1
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	86 99       	sbic	0x10, 6	; 16
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <debounce_sw_right+0x1a>
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	82 2b       	or	r24, r18
     b78:	93 2b       	or	r25, r19
     b7a:	90 93 95 04 	sts	0x0495, r25
     b7e:	80 93 94 04 	sts	0x0494, r24
if (state3 == 0xF000) return 1;
     b82:	20 ef       	ldi	r18, 0xF0	; 240
     b84:	80 30       	cpi	r24, 0x00	; 0
     b86:	92 07       	cpc	r25, r18
     b88:	31 f0       	breq	.+12     	; 0xb96 <debounce_sw_right+0x3a>
if (state3 == 0xE000) return 2;
     b8a:	20 ee       	ldi	r18, 0xE0	; 224
     b8c:	80 30       	cpi	r24, 0x00	; 0
     b8e:	92 07       	cpc	r25, r18
     b90:	21 f4       	brne	.+8      	; 0xb9a <debounce_sw_right+0x3e>
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_right(void)
{
static uint16_t state3 = 0; //holds present state
state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_RIGHT), BUT_RIGHT_PIN)) | 0xE000;
if (state3 == 0xF000) return 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	08 95       	ret
if (state3 == 0xE000) return 2;
return 0;
     b9a:	80 e0       	ldi	r24, 0x00	; 0
}
     b9c:	08 95       	ret

00000b9e <debounce_sw_set>:
//=============================================================================
unsigned char debounce_sw_set(void)
{
static uint16_t state4 = 0; //holds present state
state4 = (state4 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
     b9e:	80 91 92 04 	lds	r24, 0x0492
     ba2:	90 91 93 04 	lds	r25, 0x0493
     ba6:	88 0f       	add	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	90 6e       	ori	r25, 0xE0	; 224
     bac:	21 e0       	ldi	r18, 0x01	; 1
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	b6 99       	sbic	0x16, 6	; 22
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <debounce_sw_set+0x1a>
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	28 2b       	or	r18, r24
     bba:	39 2b       	or	r19, r25
     bbc:	30 93 93 04 	sts	0x0493, r19
     bc0:	20 93 92 04 	sts	0x0492, r18
if (state4 == 0xF000) return 1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 ef       	ldi	r25, 0xF0	; 240
     bc8:	20 30       	cpi	r18, 0x00	; 0
     bca:	39 07       	cpc	r19, r25
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <debounce_sw_set+0x32>
     bce:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     bd0:	08 95       	ret

00000bd2 <debounce_sw_menu>:
//=============================================================================
unsigned char debounce_sw_menu(void)
{
static uint16_t state5 = 0; //holds present state
state5 = (state5 << 1) | (! bit_is_clear(PIN(BUT_MENU), BUT_MENU_PIN)) | 0xE000;
     bd2:	86 b3       	in	r24, 0x16	; 22
     bd4:	20 91 90 04 	lds	r18, 0x0490
     bd8:	30 91 91 04 	lds	r19, 0x0491
     bdc:	22 0f       	add	r18, r18
     bde:	33 1f       	adc	r19, r19
     be0:	30 6e       	ori	r19, 0xE0	; 224
     be2:	99 27       	eor	r25, r25
     be4:	87 fd       	sbrc	r24, 7
     be6:	90 95       	com	r25
     be8:	88 27       	eor	r24, r24
     bea:	99 0f       	add	r25, r25
     bec:	88 1f       	adc	r24, r24
     bee:	99 27       	eor	r25, r25
     bf0:	28 2b       	or	r18, r24
     bf2:	39 2b       	or	r19, r25
     bf4:	30 93 91 04 	sts	0x0491, r19
     bf8:	20 93 90 04 	sts	0x0490, r18
if (state5 == 0xF000) return 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 ef       	ldi	r25, 0xF0	; 240
     c00:	20 30       	cpi	r18, 0x00	; 0
     c02:	39 07       	cpc	r19, r25
     c04:	09 f0       	breq	.+2      	; 0xc08 <debounce_sw_menu+0x36>
     c06:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     c08:	08 95       	ret

00000c0a <debounce_sw_select>:
//=============================================================================
unsigned char debounce_sw_select(void)
{
static uint16_t state6 = 0; //holds present state
state6 = (state6 << 1) | (! bit_is_clear(PIN(BUT_SELECT), BUT_SELECT_PIN)) | 0xE000;
     c0a:	80 91 8e 04 	lds	r24, 0x048E
     c0e:	90 91 8f 04 	lds	r25, 0x048F
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	90 6e       	ori	r25, 0xE0	; 224
     c18:	21 e0       	ldi	r18, 0x01	; 1
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	9b 99       	sbic	0x13, 3	; 19
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <debounce_sw_select+0x1a>
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	28 2b       	or	r18, r24
     c26:	39 2b       	or	r19, r25
     c28:	30 93 8f 04 	sts	0x048F, r19
     c2c:	20 93 8e 04 	sts	0x048E, r18
if (state6 == 0xF000) return 1;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 ef       	ldi	r25, 0xF0	; 240
     c34:	20 30       	cpi	r18, 0x00	; 0
     c36:	39 07       	cpc	r19, r25
     c38:	09 f0       	breq	.+2      	; 0xc3c <debounce_sw_select+0x32>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     c3c:	08 95       	ret

00000c3e <debounce_sw_up>:
//=============================================================================
unsigned char debounce_sw_up(void)
{
static uint16_t state7 = 0; //holds present state
state7 = (state7 << 1) | (! bit_is_clear(PIN(BUT_UP), BUT_UP_PIN)) | 0xE000;
     c3e:	80 91 8c 04 	lds	r24, 0x048C
     c42:	90 91 8d 04 	lds	r25, 0x048D
     c46:	88 0f       	add	r24, r24
     c48:	99 1f       	adc	r25, r25
     c4a:	90 6e       	ori	r25, 0xE0	; 224
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	84 99       	sbic	0x10, 4	; 16
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <debounce_sw_up+0x1a>
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	82 2b       	or	r24, r18
     c5a:	93 2b       	or	r25, r19
     c5c:	90 93 8d 04 	sts	0x048D, r25
     c60:	80 93 8c 04 	sts	0x048C, r24
if (state7 == 0xF000) return 1;
     c64:	20 ef       	ldi	r18, 0xF0	; 240
     c66:	80 30       	cpi	r24, 0x00	; 0
     c68:	92 07       	cpc	r25, r18
     c6a:	31 f0       	breq	.+12     	; 0xc78 <debounce_sw_up+0x3a>
if (state7 == 0xE000) return 2;
     c6c:	20 ee       	ldi	r18, 0xE0	; 224
     c6e:	80 30       	cpi	r24, 0x00	; 0
     c70:	92 07       	cpc	r25, r18
     c72:	21 f4       	brne	.+8      	; 0xc7c <debounce_sw_up+0x3e>
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_up(void)
{
static uint16_t state7 = 0; //holds present state
state7 = (state7 << 1) | (! bit_is_clear(PIN(BUT_UP), BUT_UP_PIN)) | 0xE000;
if (state7 == 0xF000) return 1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	08 95       	ret
if (state7 == 0xE000) return 2;
return 0;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
}
     c7e:	08 95       	ret

00000c80 <debounce_sw_down>:
//=============================================================================
unsigned char debounce_sw_down(void)
{
static uint16_t state8 = 0; //holds present state
state8 = (state8 << 1) | (! bit_is_clear(PIN(BUT_DOWN), BUT_DOWN_PIN)) | 0xE000;
     c80:	80 91 8a 04 	lds	r24, 0x048A
     c84:	90 91 8b 04 	lds	r25, 0x048B
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	90 6e       	ori	r25, 0xE0	; 224
     c8e:	21 e0       	ldi	r18, 0x01	; 1
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	85 99       	sbic	0x10, 5	; 16
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <debounce_sw_down+0x1a>
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	82 2b       	or	r24, r18
     c9c:	93 2b       	or	r25, r19
     c9e:	90 93 8b 04 	sts	0x048B, r25
     ca2:	80 93 8a 04 	sts	0x048A, r24
if (state8 == 0xF000) return 1;
     ca6:	20 ef       	ldi	r18, 0xF0	; 240
     ca8:	80 30       	cpi	r24, 0x00	; 0
     caa:	92 07       	cpc	r25, r18
     cac:	31 f0       	breq	.+12     	; 0xcba <debounce_sw_down+0x3a>
if (state8 == 0xE000) return 2;
     cae:	20 ee       	ldi	r18, 0xE0	; 224
     cb0:	80 30       	cpi	r24, 0x00	; 0
     cb2:	92 07       	cpc	r25, r18
     cb4:	21 f4       	brne	.+8      	; 0xcbe <debounce_sw_down+0x3e>
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_down(void)
{
static uint16_t state8 = 0; //holds present state
state8 = (state8 << 1) | (! bit_is_clear(PIN(BUT_DOWN), BUT_DOWN_PIN)) | 0xE000;
if (state8 == 0xF000) return 1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	08 95       	ret
if (state8 == 0xE000) return 2;
return 0;
     cbe:	80 e0       	ldi	r24, 0x00	; 0
}
     cc0:	08 95       	ret

00000cc2 <KBD_scan>:
{
  kbd_type = val;
}
//=============================================================================
void KBD_scan(void)
{
     cc2:	1f 93       	push	r17
  unsigned char key = KBD_NOKEY;
  if (debounce_sw_standby() == 1) { key = EVENT_KEY_STANDBY; }
     cc4:	0e 94 73 05 	call	0xae6	; 0xae6 <debounce_sw_standby>
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	11 f0       	breq	.+4      	; 0xcd0 <KBD_scan+0xe>
  kbd_type = val;
}
//=============================================================================
void KBD_scan(void)
{
  unsigned char key = KBD_NOKEY;
     ccc:	1f ef       	ldi	r17, 0xFF	; 255
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <KBD_scan+0x10>
  if (debounce_sw_standby() == 1) { key = EVENT_KEY_STANDBY; }
     cd0:	14 e6       	ldi	r17, 0x64	; 100
  if (debounce_sw_menu() == 1) { key = EVENT_KEY_MENU; }
     cd2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <debounce_sw_menu>
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	09 f4       	brne	.+2      	; 0xcdc <KBD_scan+0x1a>
     cda:	1c e6       	ldi	r17, 0x6C	; 108
  if (debounce_sw_set() == 1) { key = EVENT_KEY_SET; }
     cdc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <debounce_sw_set>
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <KBD_scan+0x24>
     ce4:	17 e6       	ldi	r17, 0x67	; 103
  if (debounce_sw_select() == 1) { key = EVENT_KEY_SELECT; }
     ce6:	0e 94 05 06 	call	0xc0a	; 0xc0a <debounce_sw_select>
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <KBD_scan+0x2e>
     cee:	16 e6       	ldi	r17, 0x66	; 102
  if (debounce_sw_up() == 1) { key = EVENT_KEY_UP; }
     cf0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <debounce_sw_up>
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <KBD_scan+0x38>
     cf8:	18 e6       	ldi	r17, 0x68	; 104
  if (debounce_sw_down() == 1) { key = EVENT_KEY_DOWN; }
     cfa:	0e 94 40 06 	call	0xc80	; 0xc80 <debounce_sw_down>
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	09 f4       	brne	.+2      	; 0xd04 <KBD_scan+0x42>
     d02:	19 e6       	ldi	r17, 0x69	; 105
  if (kbd_type == 1) {
     d04:	80 91 a4 00 	lds	r24, 0x00A4
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	49 f4       	brne	.+18     	; 0xd1e <KBD_scan+0x5c>
    if (debounce_sw_left() >= 1) { key = EVENT_KEY_LEFT; }
     d0c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <debounce_sw_left>
     d10:	81 11       	cpse	r24, r1
     d12:	1a e6       	ldi	r17, 0x6A	; 106
    if (debounce_sw_right() >= 1) { key = EVENT_KEY_RIGHT; }
     d14:	0e 94 ae 05 	call	0xb5c	; 0xb5c <debounce_sw_right>
     d18:	88 23       	and	r24, r24
     d1a:	19 f5       	brne	.+70     	; 0xd62 <KBD_scan+0xa0>
     d1c:	09 c0       	rjmp	.+18     	; 0xd30 <KBD_scan+0x6e>
  } else {
    if (debounce_sw_left() == 1) { key = EVENT_KEY_LEFT; }
     d1e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <debounce_sw_left>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	09 f4       	brne	.+2      	; 0xd28 <KBD_scan+0x66>
     d26:	1a e6       	ldi	r17, 0x6A	; 106
    if (debounce_sw_right() == 1) { key = EVENT_KEY_RIGHT; }
     d28:	0e 94 ae 05 	call	0xb5c	; 0xb5c <debounce_sw_right>
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	c9 f0       	breq	.+50     	; 0xd62 <KBD_scan+0xa0>
  }
  if (key != KBD_NOKEY) {
     d30:	1f 3f       	cpi	r17, 0xFF	; 255
     d32:	c9 f0       	breq	.+50     	; 0xd66 <KBD_scan+0xa4>
    BEEP();
     d34:	97 98       	cbi	0x12, 7	; 18
     d36:	8f e3       	ldi	r24, 0x3F	; 63
     d38:	9c e9       	ldi	r25, 0x9C	; 156
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <KBD_scan+0x78>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <KBD_scan+0x7e>
     d40:	00 00       	nop
     d42:	97 9a       	sbi	0x12, 7	; 18
    RTOS_setTask(EVENT_KEY_PRESS, 0, 0); 
     d44:	80 ea       	ldi	r24, 0xA0	; 160
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    RTOS_setTask(key, 0, 0); 
     d52:	81 2f       	mov	r24, r17
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <KBD_scan+0xa4>
  if (debounce_sw_down() == 1) { key = EVENT_KEY_DOWN; }
  if (kbd_type == 1) {
    if (debounce_sw_left() >= 1) { key = EVENT_KEY_LEFT; }
    if (debounce_sw_right() >= 1) { key = EVENT_KEY_RIGHT; }
  } else {
    if (debounce_sw_left() == 1) { key = EVENT_KEY_LEFT; }
     d62:	1b e6       	ldi	r17, 0x6B	; 107
     d64:	e7 cf       	rjmp	.-50     	; 0xd34 <KBD_scan+0x72>
  if (key != KBD_NOKEY) {
    BEEP();
    RTOS_setTask(EVENT_KEY_PRESS, 0, 0); 
    RTOS_setTask(key, 0, 0); 
  }
}
     d66:	1f 91       	pop	r17
     d68:	08 95       	ret

00000d6a <ENC_init>:
#include "rtos.h"
#include "events.h"
//=============================================================================
void ENC_init(void)
{
  DDR(ENCODER) &= ~(1 << ENCODER_PIN_A);
     d6a:	88 98       	cbi	0x11, 0	; 17
  DDR(ENCODER) &= ~(1 << ENCODER_PIN_B);
     d6c:	8b 98       	cbi	0x11, 3	; 17
  PORT(ENCODER) |= ENCODER_LINE_A;
     d6e:	90 9a       	sbi	0x12, 0	; 18
  PORT(ENCODER) |= ENCODER_LINE_B;
     d70:	93 9a       	sbi	0x12, 3	; 18
}
     d72:	08 95       	ret

00000d74 <ENC_scan>:
{
  static unsigned char stateEnc; 	//хранит последовательность состояний энкодера
  unsigned char tmp, key;  
  unsigned char currentState = 0;
  //проверяем состояние выводов микроконтроллера
  if ((PIN(ENCODER) & (ENCODER_LINE_A)) != 0) { currentState |= (1 << 0); }
     d74:	60 b3       	in	r22, 0x10	; 16
//=============================================================================
void ENC_scan(void)
{
  static unsigned char stateEnc; 	//хранит последовательность состояний энкодера
  unsigned char tmp, key;  
  unsigned char currentState = 0;
     d76:	61 70       	andi	r22, 0x01	; 1
  //проверяем состояние выводов микроконтроллера
  if ((PIN(ENCODER) & (ENCODER_LINE_A)) != 0) { currentState |= (1 << 0); }
  if ((PIN(ENCODER) & (ENCODER_LINE_B)) != 0) { currentState |= (1 << 1); }
     d78:	83 99       	sbic	0x10, 3	; 16
     d7a:	62 60       	ori	r22, 0x02	; 2
  //если равно предыдущему, то выходим
  tmp = stateEnc;
  if (currentState == (tmp & ENC_MASK)) 
     d7c:	80 91 9a 04 	lds	r24, 0x049A
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	46 2f       	mov	r20, r22
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	9c 01       	movw	r18, r24
     d88:	23 70       	andi	r18, 0x03	; 3
     d8a:	30 70       	andi	r19, 0x00	; 0
     d8c:	42 17       	cp	r20, r18
     d8e:	53 07       	cpc	r21, r19
     d90:	c1 f1       	breq	.+112    	; 0xe02 <ENC_scan+0x8e>
  {
    return;
  }
  //если не равно, то сдвигаем и сохраняем в озу
  tmp = (tmp << 2) | currentState;
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	86 2b       	or	r24, r22
  stateEnc = tmp;
     d9c:	80 93 9a 04 	sts	0x049A, r24
  //сравниваем получившуюся последовательность
  if (tmp == ENC_LEFT_MASK) { key = ENC_LEFT; BEEP(); RTOS_setTask(EVENT_KEY_PRESS, 0, 0); RTOS_setTask(key, 0, 0); }
     da0:	81 3e       	cpi	r24, 0xE1	; 225
     da2:	b9 f4       	brne	.+46     	; 0xdd2 <ENC_scan+0x5e>
     da4:	97 98       	cbi	0x12, 7	; 18
     da6:	8f e3       	ldi	r24, 0x3F	; 63
     da8:	9c e9       	ldi	r25, 0x9C	; 156
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <ENC_scan+0x36>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <ENC_scan+0x3c>
     db0:	00 00       	nop
     db2:	97 9a       	sbi	0x12, 7	; 18
     db4:	80 ea       	ldi	r24, 0xA0	; 160
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
     dc2:	8a e6       	ldi	r24, 0x6A	; 106
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
     dd0:	08 95       	ret
  if (tmp == ENC_RIGHT_MASK) { key = ENC_RIGHT;  BEEP(); RTOS_setTask(EVENT_KEY_PRESS, 0, 0); RTOS_setTask(key, 0, 0); }	 
     dd2:	82 3d       	cpi	r24, 0xD2	; 210
     dd4:	b1 f4       	brne	.+44     	; 0xe02 <ENC_scan+0x8e>
     dd6:	97 98       	cbi	0x12, 7	; 18
     dd8:	8f e3       	ldi	r24, 0x3F	; 63
     dda:	9c e9       	ldi	r25, 0x9C	; 156
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <ENC_scan+0x68>
     de0:	00 c0       	rjmp	.+0      	; 0xde2 <ENC_scan+0x6e>
     de2:	00 00       	nop
     de4:	97 9a       	sbi	0x12, 7	; 18
     de6:	80 ea       	ldi	r24, 0xA0	; 160
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
     df4:	8b e6       	ldi	r24, 0x6B	; 107
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
     e02:	08 95       	ret

00000e04 <RTOS_init>:
#define DISABLE_INTERRUPT do { saveRegister = SREG; cli(); } while(0)
#define RESTORE_INTERRUPT do { SREG = saveRegister; } while(0) // использовать RESTORE только после DISABLE
//=============================================================================
void RTOS_init()
{
  TCCR2 |= (1 << CS22);        // прескалер - 64
     e04:	85 b5       	in	r24, 0x25	; 37
     e06:	84 60       	ori	r24, 0x04	; 4
     e08:	85 bd       	out	0x25, r24	; 37
  TIFR = (1 << TOV2);          // очищаем флаг прерывания таймера Т2
     e0a:	80 e4       	ldi	r24, 0x40	; 64
     e0c:	88 bf       	out	0x38, r24	; 56
  TIMSK |= (1 << TOIE2);       // разрешаем прерывание по переполнению
     e0e:	89 b7       	in	r24, 0x39	; 57
     e10:	80 64       	ori	r24, 0x40	; 64
     e12:	89 bf       	out	0x39, r24	; 57
  TIMER_COUNTER = TIMER_START; // загружаем начальное зн. в счетный регистр
     e14:	86 e0       	ldi	r24, 0x06	; 6
     e16:	84 bd       	out	0x24, r24	; 36
  arrayTail = 0;               // "хвост" в 0
     e18:	10 92 1c 05 	sts	0x051C, r1
}
     e1c:	08 95       	ret

00000e1e <RTOS_setTask>:
//=============================================================================
// Установка задачи
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
     e1e:	88 23       	and	r24, r24
     e20:	09 f4       	brne	.+2      	; 0xe24 <RTOS_setTask+0x6>
     e22:	65 c0       	rjmp	.+202    	; 0xeee <RTOS_setTask+0xd0>
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	1b c0       	rjmp	.+54     	; 0xe5e <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
     e28:	e9 2f       	mov	r30, r25
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	a3 e0       	ldi	r26, 0x03	; 3
     e2e:	ee 0f       	add	r30, r30
     e30:	ff 1f       	adc	r31, r31
     e32:	aa 95       	dec	r26
     e34:	e1 f7       	brne	.-8      	; 0xe2e <RTOS_setTask+0x10>
     e36:	e4 56       	subi	r30, 0x64	; 100
     e38:	fb 4f       	sbci	r31, 0xFB	; 251
     e3a:	22 81       	ldd	r18, Z+2	; 0x02
     e3c:	28 17       	cp	r18, r24
     e3e:	71 f4       	brne	.+28     	; 0xe5c <RTOS_setTask+0x3e>
    {
      TaskArray[i].pFunc  = 0;
     e40:	11 82       	std	Z+1, r1	; 0x01
     e42:	10 82       	st	Z, r1
      TaskArray[i].delay  = taskDelay;
     e44:	74 83       	std	Z+4, r23	; 0x04
     e46:	63 83       	std	Z+3, r22	; 0x03
      TaskArray[i].period = taskPeriod;
     e48:	56 83       	std	Z+6, r21	; 0x06
     e4a:	45 83       	std	Z+5, r20	; 0x05
      if (!taskDelay) {                       // если задержка запуска == 0
     e4c:	61 15       	cp	r22, r1
     e4e:	71 05       	cpc	r23, r1
     e50:	19 f4       	brne	.+6      	; 0xe58 <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	87 83       	std	Z+7, r24	; 0x07
     e56:	08 95       	ret
      } else TaskArray[i].run = 0;   
     e58:	17 82       	std	Z+7, r1	; 0x07
     e5a:	08 95       	ret
// Установка задачи
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
     e5c:	9f 5f       	subi	r25, 0xFF	; 255
     e5e:	20 91 1c 05 	lds	r18, 0x051C
     e62:	92 17       	cp	r25, r18
     e64:	08 f3       	brcs	.-62     	; 0xe28 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
     e66:	20 91 1c 05 	lds	r18, 0x051C
     e6a:	20 31       	cpi	r18, 0x10	; 16
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <RTOS_setTask+0x52>
     e6e:	3f c0       	rjmp	.+126    	; 0xeee <RTOS_setTask+0xd0>
  {                                           // и есть место,то добавляем
    TaskArray[i].pFunc  = 0;
     e70:	e9 2f       	mov	r30, r25
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	33 e0       	ldi	r19, 0x03	; 3
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	3a 95       	dec	r19
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <RTOS_setTask+0x58>
     e7e:	e4 56       	subi	r30, 0x64	; 100
     e80:	fb 4f       	sbci	r31, 0xFB	; 251
     e82:	11 82       	std	Z+1, r1	; 0x01
     e84:	10 82       	st	Z, r1
    TaskArray[arrayTail].event  = event;
     e86:	a0 91 1c 05 	lds	r26, 0x051C
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	23 e0       	ldi	r18, 0x03	; 3
     e8e:	aa 0f       	add	r26, r26
     e90:	bb 1f       	adc	r27, r27
     e92:	2a 95       	dec	r18
     e94:	e1 f7       	brne	.-8      	; 0xe8e <RTOS_setTask+0x70>
     e96:	a4 56       	subi	r26, 0x64	; 100
     e98:	bb 4f       	sbci	r27, 0xFB	; 251
     e9a:	12 96       	adiw	r26, 0x02	; 2
     e9c:	8c 93       	st	X, r24
    TaskArray[arrayTail].delay  = taskDelay;
     e9e:	a0 91 1c 05 	lds	r26, 0x051C
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	93 e0       	ldi	r25, 0x03	; 3
     ea6:	aa 0f       	add	r26, r26
     ea8:	bb 1f       	adc	r27, r27
     eaa:	9a 95       	dec	r25
     eac:	e1 f7       	brne	.-8      	; 0xea6 <RTOS_setTask+0x88>
     eae:	a4 56       	subi	r26, 0x64	; 100
     eb0:	bb 4f       	sbci	r27, 0xFB	; 251
     eb2:	14 96       	adiw	r26, 0x04	; 4
     eb4:	7c 93       	st	X, r23
     eb6:	6e 93       	st	-X, r22
     eb8:	13 97       	sbiw	r26, 0x03	; 3
    TaskArray[arrayTail].period = taskPeriod;
     eba:	a0 91 1c 05 	lds	r26, 0x051C
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	83 e0       	ldi	r24, 0x03	; 3
     ec2:	aa 0f       	add	r26, r26
     ec4:	bb 1f       	adc	r27, r27
     ec6:	8a 95       	dec	r24
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <RTOS_setTask+0xa4>
     eca:	a4 56       	subi	r26, 0x64	; 100
     ecc:	bb 4f       	sbci	r27, 0xFB	; 251
     ece:	16 96       	adiw	r26, 0x06	; 6
     ed0:	5c 93       	st	X, r21
     ed2:	4e 93       	st	-X, r20
     ed4:	15 97       	sbiw	r26, 0x05	; 5
    if (!taskDelay) {                         // если задержка запуска == 0
     ed6:	61 15       	cp	r22, r1
     ed8:	71 05       	cpc	r23, r1
     eda:	19 f4       	brne	.+6      	; 0xee2 <RTOS_setTask+0xc4>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	87 83       	std	Z+7, r24	; 0x07
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <RTOS_setTask+0xc6>
    } else TaskArray[i].run = 0;   
     ee2:	17 82       	std	Z+7, r1	; 0x07
    arrayTail++;                              // увеличиваем "хвост"
     ee4:	80 91 1c 05 	lds	r24, 0x051C
     ee8:	8f 5f       	subi	r24, 0xFF	; 255
     eea:	80 93 1c 05 	sts	0x051C, r24
     eee:	08 95       	ret

00000ef0 <RTOS_setTaskFunc>:
//=============================================================================
 // Установка задачи
void RTOS_setTaskFunc (void (*taskFunc)(void), unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if(!taskFunc) return;
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	09 f4       	brne	.+2      	; 0xef6 <RTOS_setTaskFunc+0x6>
     ef4:	70 c0       	rjmp	.+224    	; 0xfd6 <RTOS_setTaskFunc+0xe6>
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	1e c0       	rjmp	.+60     	; 0xf36 <RTOS_setTaskFunc+0x46>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if(TaskArray[i].pFunc == taskFunc)        // если нашли, то обновляем переменные
     efa:	ea 2f       	mov	r30, r26
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	b3 e0       	ldi	r27, 0x03	; 3
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	ba 95       	dec	r27
     f06:	e1 f7       	brne	.-8      	; 0xf00 <RTOS_setTaskFunc+0x10>
     f08:	e4 56       	subi	r30, 0x64	; 100
     f0a:	fb 4f       	sbci	r31, 0xFB	; 251
     f0c:	20 81       	ld	r18, Z
     f0e:	31 81       	ldd	r19, Z+1	; 0x01
     f10:	28 17       	cp	r18, r24
     f12:	39 07       	cpc	r19, r25
     f14:	79 f4       	brne	.+30     	; 0xf34 <RTOS_setTaskFunc+0x44>
    {
      DISABLE_INTERRUPT;
     f16:	8f b7       	in	r24, 0x3f	; 63
     f18:	80 93 1d 05 	sts	0x051D, r24
     f1c:	f8 94       	cli
      TaskArray[i].event  = EVENT_NULL;
     f1e:	8e ef       	ldi	r24, 0xFE	; 254
     f20:	82 83       	std	Z+2, r24	; 0x02
      TaskArray[i].delay  = taskDelay;
     f22:	74 83       	std	Z+4, r23	; 0x04
     f24:	63 83       	std	Z+3, r22	; 0x03
      TaskArray[i].period = taskPeriod;
     f26:	56 83       	std	Z+6, r21	; 0x06
     f28:	45 83       	std	Z+5, r20	; 0x05
      TaskArray[i].run    = 0;   
     f2a:	17 82       	std	Z+7, r1	; 0x07
      RESTORE_INTERRUPT;
     f2c:	80 91 1d 05 	lds	r24, 0x051D
     f30:	8f bf       	out	0x3f, r24	; 63
      return;                                 // обновив, выходим
     f32:	08 95       	ret
 // Установка задачи
void RTOS_setTaskFunc (void (*taskFunc)(void), unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if(!taskFunc) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
     f34:	af 5f       	subi	r26, 0xFF	; 255
     f36:	20 91 1c 05 	lds	r18, 0x051C
     f3a:	a2 17       	cp	r26, r18
     f3c:	f0 f2       	brcs	.-68     	; 0xefa <RTOS_setTaskFunc+0xa>
      TaskArray[i].run    = 0;   
      RESTORE_INTERRUPT;
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
     f3e:	20 91 1c 05 	lds	r18, 0x051C
     f42:	20 31       	cpi	r18, 0x10	; 16
     f44:	08 f0       	brcs	.+2      	; 0xf48 <RTOS_setTaskFunc+0x58>
     f46:	47 c0       	rjmp	.+142    	; 0xfd6 <RTOS_setTaskFunc+0xe6>
  {                                           // и есть место,то добавляем
    DISABLE_INTERRUPT;
     f48:	2f b7       	in	r18, 0x3f	; 63
     f4a:	20 93 1d 05 	sts	0x051D, r18
     f4e:	f8 94       	cli
    TaskArray[arrayTail].pFunc  = taskFunc;
     f50:	e0 91 1c 05 	lds	r30, 0x051C
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	33 e0       	ldi	r19, 0x03	; 3
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	3a 95       	dec	r19
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <RTOS_setTaskFunc+0x68>
     f60:	e4 56       	subi	r30, 0x64	; 100
     f62:	fb 4f       	sbci	r31, 0xFB	; 251
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	80 83       	st	Z, r24
    TaskArray[arrayTail].event  = EVENT_NULL;
     f68:	e0 91 1c 05 	lds	r30, 0x051C
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	23 e0       	ldi	r18, 0x03	; 3
     f70:	ee 0f       	add	r30, r30
     f72:	ff 1f       	adc	r31, r31
     f74:	2a 95       	dec	r18
     f76:	e1 f7       	brne	.-8      	; 0xf70 <RTOS_setTaskFunc+0x80>
     f78:	e4 56       	subi	r30, 0x64	; 100
     f7a:	fb 4f       	sbci	r31, 0xFB	; 251
     f7c:	8e ef       	ldi	r24, 0xFE	; 254
     f7e:	82 83       	std	Z+2, r24	; 0x02
    TaskArray[arrayTail].delay  = taskDelay;
     f80:	e0 91 1c 05 	lds	r30, 0x051C
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	93 e0       	ldi	r25, 0x03	; 3
     f88:	ee 0f       	add	r30, r30
     f8a:	ff 1f       	adc	r31, r31
     f8c:	9a 95       	dec	r25
     f8e:	e1 f7       	brne	.-8      	; 0xf88 <RTOS_setTaskFunc+0x98>
     f90:	e4 56       	subi	r30, 0x64	; 100
     f92:	fb 4f       	sbci	r31, 0xFB	; 251
     f94:	74 83       	std	Z+4, r23	; 0x04
     f96:	63 83       	std	Z+3, r22	; 0x03
    TaskArray[arrayTail].period = taskPeriod;
     f98:	e0 91 1c 05 	lds	r30, 0x051C
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	83 e0       	ldi	r24, 0x03	; 3
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	8a 95       	dec	r24
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <RTOS_setTaskFunc+0xb0>
     fa8:	e4 56       	subi	r30, 0x64	; 100
     faa:	fb 4f       	sbci	r31, 0xFB	; 251
     fac:	56 83       	std	Z+6, r21	; 0x06
     fae:	45 83       	std	Z+5, r20	; 0x05
    TaskArray[arrayTail].run    = 0;   
     fb0:	e0 91 1c 05 	lds	r30, 0x051C
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	b3 e0       	ldi	r27, 0x03	; 3
     fb8:	ee 0f       	add	r30, r30
     fba:	ff 1f       	adc	r31, r31
     fbc:	ba 95       	dec	r27
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <RTOS_setTaskFunc+0xc8>
     fc0:	e4 56       	subi	r30, 0x64	; 100
     fc2:	fb 4f       	sbci	r31, 0xFB	; 251
     fc4:	17 82       	std	Z+7, r1	; 0x07
    arrayTail++;                              // увеличиваем "хвост"
     fc6:	80 91 1c 05 	lds	r24, 0x051C
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	80 93 1c 05 	sts	0x051C, r24
    RESTORE_INTERRUPT;
     fd0:	80 91 1d 05 	lds	r24, 0x051D
     fd4:	8f bf       	out	0x3f, r24	; 63
     fd6:	08 95       	ret

00000fd8 <RTOS_deleteTask>:
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	2c c0       	rjmp	.+88     	; 0x1034 <RTOS_deleteTask+0x5c>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
     fdc:	29 2f       	mov	r18, r25
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	d9 01       	movw	r26, r18
     fe2:	43 e0       	ldi	r20, 0x03	; 3
     fe4:	aa 0f       	add	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	4a 95       	dec	r20
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <RTOS_deleteTask+0xc>
     fec:	a4 56       	subi	r26, 0x64	; 100
     fee:	bb 4f       	sbci	r27, 0xFB	; 251
     ff0:	12 96       	adiw	r26, 0x02	; 2
     ff2:	4c 91       	ld	r20, X
     ff4:	12 97       	sbiw	r26, 0x02	; 2
     ff6:	48 17       	cp	r20, r24
     ff8:	e1 f4       	brne	.+56     	; 0x1032 <RTOS_deleteTask+0x5a>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
     ffa:	80 91 1c 05 	lds	r24, 0x051C
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	28 17       	cp	r18, r24
    1004:	39 07       	cpc	r19, r25
    1006:	79 f0       	breq	.+30     	; 0x1026 <RTOS_deleteTask+0x4e>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1008:	e0 91 1c 05 	lds	r30, 0x051C
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	8a 95       	dec	r24
    1016:	e1 f7       	brne	.-8      	; 0x1010 <RTOS_deleteTask+0x38>
    1018:	ec 56       	subi	r30, 0x6C	; 108
    101a:	fb 4f       	sbci	r31, 0xFB	; 251
    101c:	88 e0       	ldi	r24, 0x08	; 8
    101e:	01 90       	ld	r0, Z+
    1020:	0d 92       	st	X+, r0
    1022:	81 50       	subi	r24, 0x01	; 1
    1024:	e1 f7       	brne	.-8      	; 0x101e <RTOS_deleteTask+0x46>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    1026:	80 91 1c 05 	lds	r24, 0x051C
    102a:	81 50       	subi	r24, 0x01	; 1
    102c:	80 93 1c 05 	sts	0x051C, r24
      return;
    1030:	08 95       	ret
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1032:	9f 5f       	subi	r25, 0xFF	; 255
    1034:	20 91 1c 05 	lds	r18, 0x051C
    1038:	92 17       	cp	r25, r18
    103a:	80 f2       	brcs	.-96     	; 0xfdc <RTOS_deleteTask+0x4>
    103c:	08 95       	ret

0000103e <RTOS_deleteTaskFunc>:
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTaskFunc (void (*taskFunc)(void)) 
{
  unsigned char i;
  for (i=0; i<arrayTail; i++)                      // проходим по списку задач
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	34 c0       	rjmp	.+104    	; 0x10aa <RTOS_deleteTaskFunc+0x6c>
  {
    if(TaskArray[i].pFunc == taskFunc)             // если задача в списке найдена
    1042:	26 2f       	mov	r18, r22
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	d9 01       	movw	r26, r18
    1048:	73 e0       	ldi	r23, 0x03	; 3
    104a:	aa 0f       	add	r26, r26
    104c:	bb 1f       	adc	r27, r27
    104e:	7a 95       	dec	r23
    1050:	e1 f7       	brne	.-8      	; 0x104a <RTOS_deleteTaskFunc+0xc>
    1052:	a4 56       	subi	r26, 0x64	; 100
    1054:	bb 4f       	sbci	r27, 0xFB	; 251
    1056:	4d 91       	ld	r20, X+
    1058:	5c 91       	ld	r21, X
    105a:	11 97       	sbiw	r26, 0x01	; 1
    105c:	48 17       	cp	r20, r24
    105e:	59 07       	cpc	r21, r25
    1060:	19 f5       	brne	.+70     	; 0x10a8 <RTOS_deleteTaskFunc+0x6a>
    {
      DISABLE_INTERRUPT;
    1062:	8f b7       	in	r24, 0x3f	; 63
    1064:	80 93 1d 05 	sts	0x051D, r24
    1068:	f8 94       	cli
      if(i != (arrayTail - 1))                     // переносим последнюю задачу
    106a:	80 91 1c 05 	lds	r24, 0x051C
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	28 17       	cp	r18, r24
    1074:	39 07       	cpc	r19, r25
    1076:	79 f0       	breq	.+30     	; 0x1096 <RTOS_deleteTaskFunc+0x58>
      {                                            // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1078:	e0 91 1c 05 	lds	r30, 0x051C
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	53 e0       	ldi	r21, 0x03	; 3
    1080:	ee 0f       	add	r30, r30
    1082:	ff 1f       	adc	r31, r31
    1084:	5a 95       	dec	r21
    1086:	e1 f7       	brne	.-8      	; 0x1080 <RTOS_deleteTaskFunc+0x42>
    1088:	ec 56       	subi	r30, 0x6C	; 108
    108a:	fb 4f       	sbci	r31, 0xFB	; 251
    108c:	88 e0       	ldi	r24, 0x08	; 8
    108e:	01 90       	ld	r0, Z+
    1090:	0d 92       	st	X+, r0
    1092:	81 50       	subi	r24, 0x01	; 1
    1094:	e1 f7       	brne	.-8      	; 0x108e <RTOS_deleteTaskFunc+0x50>
      }
      arrayTail--;                                 // уменьшаем указатель "хвоста"
    1096:	80 91 1c 05 	lds	r24, 0x051C
    109a:	81 50       	subi	r24, 0x01	; 1
    109c:	80 93 1c 05 	sts	0x051C, r24
      RESTORE_INTERRUPT;
    10a0:	80 91 1d 05 	lds	r24, 0x051D
    10a4:	8f bf       	out	0x3f, r24	; 63
      return;
    10a6:	08 95       	ret
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTaskFunc (void (*taskFunc)(void)) 
{
  unsigned char i;
  for (i=0; i<arrayTail; i++)                      // проходим по списку задач
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	20 91 1c 05 	lds	r18, 0x051C
    10ae:	62 17       	cp	r22, r18
    10b0:	40 f2       	brcs	.-112    	; 0x1042 <RTOS_deleteTaskFunc+0x4>
    10b2:	08 95       	ret

000010b4 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
    10bc:	80 91 9b 04 	lds	r24, 0x049B
    10c0:	88 23       	and	r24, r24
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <RTOS_dispatchTask+0x14>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10c4:	10 e0       	ldi	r17, 0x00	; 0
    10c6:	5a c0       	rjmp	.+180    	; 0x117c <RTOS_dispatchTask+0xc8>
{
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    10c8:	10 92 9b 04 	sts	0x049B, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    { 
	  if (TaskArray[i].delay == 0) {         // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    10ce:	31 e0       	ldi	r19, 0x01	; 1
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10d0:	15 c0       	rjmp	.+42     	; 0x10fc <RTOS_dispatchTask+0x48>
    { 
	  if (TaskArray[i].delay == 0) {         // если время до выполнения истекло
    10d2:	e2 2f       	mov	r30, r18
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	b3 e0       	ldi	r27, 0x03	; 3
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
    10dc:	ba 95       	dec	r27
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <RTOS_dispatchTask+0x24>
    10e0:	e4 56       	subi	r30, 0x64	; 100
    10e2:	fb 4f       	sbci	r31, 0xFB	; 251
    10e4:	83 81       	ldd	r24, Z+3	; 0x03
    10e6:	94 81       	ldd	r25, Z+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    10ec:	37 83       	std	Z+7, r19	; 0x07
    10ee:	05 c0       	rjmp	.+10     	; 0x10fa <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    10f0:	83 81       	ldd	r24, Z+3	; 0x03
    10f2:	94 81       	ldd	r25, Z+4	; 0x04
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	94 83       	std	Z+4, r25	; 0x04
    10f8:	83 83       	std	Z+3, r24	; 0x03
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10fa:	2f 5f       	subi	r18, 0xFF	; 255
    10fc:	80 91 1c 05 	lds	r24, 0x051C
    1100:	28 17       	cp	r18, r24
    1102:	38 f3       	brcs	.-50     	; 0x10d2 <RTOS_dispatchTask+0x1e>
    1104:	df cf       	rjmp	.-66     	; 0x10c4 <RTOS_dispatchTask+0x10>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1106:	e1 2f       	mov	r30, r17
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	a3 e0       	ldi	r26, 0x03	; 3
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	aa 95       	dec	r26
    1112:	e1 f7       	brne	.-8      	; 0x110c <RTOS_dispatchTask+0x58>
    1114:	e4 56       	subi	r30, 0x64	; 100
    1116:	fb 4f       	sbci	r31, 0xFB	; 251
    1118:	87 81       	ldd	r24, Z+7	; 0x07
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	71 f5       	brne	.+92     	; 0x117a <RTOS_dispatchTask+0xc6>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    111e:	02 81       	ldd	r16, Z+2	; 0x02
      function = TaskArray[i].pFunc;   
    1120:	c0 81       	ld	r28, Z
    1122:	d1 81       	ldd	r29, Z+1	; 0x01
      if(TaskArray[i].period == 0)                 
    1124:	25 81       	ldd	r18, Z+5	; 0x05
    1126:	36 81       	ldd	r19, Z+6	; 0x06
    1128:	21 15       	cp	r18, r1
    112a:	31 05       	cpc	r19, r1
    112c:	69 f4       	brne	.+26     	; 0x1148 <RTOS_dispatchTask+0x94>
      {  
        cli();
    112e:	f8 94       	cli
	    if (temp == EVENT_NULL) {
    1130:	0e 3f       	cpi	r16, 0xFE	; 254
    1132:	29 f4       	brne	.+10     	; 0x113e <RTOS_dispatchTask+0x8a>
          RTOS_deleteTaskFunc(TaskArray[i].pFunc); // удаляем задачу из списка,
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	0e 94 1f 08 	call	0x103e	; 0x103e <RTOS_deleteTaskFunc>
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <RTOS_dispatchTask+0x90>
	    } else {
          RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    113e:	82 81       	ldd	r24, Z+2	; 0x02
    1140:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <RTOS_deleteTask>
		}
        sei();
    1144:	78 94       	sei
    1146:	0c c0       	rjmp	.+24     	; 0x1160 <RTOS_dispatchTask+0xac>
      } else {
        TaskArray[i].run = 0;                  // иначе снимаем флаг запуска
    1148:	17 82       	std	Z+7, r1	; 0x07
        if (!TaskArray[i].delay)               // если задача не изменила задержку
    114a:	23 81       	ldd	r18, Z+3	; 0x03
    114c:	34 81       	ldd	r19, Z+4	; 0x04
    114e:	21 15       	cp	r18, r1
    1150:	31 05       	cpc	r19, r1
    1152:	31 f4       	brne	.+12     	; 0x1160 <RTOS_dispatchTask+0xac>
        {                                      // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    1154:	25 81       	ldd	r18, Z+5	; 0x05
    1156:	36 81       	ldd	r19, Z+6	; 0x06
    1158:	21 50       	subi	r18, 0x01	; 1
    115a:	30 40       	sbci	r19, 0x00	; 0
    115c:	34 83       	std	Z+4, r19	; 0x04
    115e:	23 83       	std	Z+3, r18	; 0x03
        }                                      // задача для себя может сделать паузу  
      }
	  if (temp == EVENT_NULL) {
    1160:	0e 3f       	cpi	r16, 0xFE	; 254
    1162:	29 f4       	brne	.+10     	; 0x116e <RTOS_dispatchTask+0xba>
        if(!function) return;
    1164:	20 97       	sbiw	r28, 0x00	; 0
    1166:	79 f0       	breq	.+30     	; 0x1186 <RTOS_dispatchTask+0xd2>
        (*function)();                         // выполняем задачу
    1168:	fe 01       	movw	r30, r28
    116a:	09 95       	icall
    116c:	06 c0       	rjmp	.+12     	; 0x117a <RTOS_dispatchTask+0xc6>
	  } else {
        pState(temp);                          // выполняем задачу
    116e:	e0 91 a5 00 	lds	r30, 0x00A5
    1172:	f0 91 a6 00 	lds	r31, 0x00A6
    1176:	80 2f       	mov	r24, r16
    1178:	09 95       	icall
	  if (TaskArray[i].delay == 0) {         // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    117a:	1f 5f       	subi	r17, 0xFF	; 255
    117c:	80 91 1c 05 	lds	r24, 0x051C
    1180:	18 17       	cp	r17, r24
    1182:	08 f4       	brcc	.+2      	; 0x1186 <RTOS_dispatchTask+0xd2>
    1184:	c0 cf       	rjmp	.-128    	; 0x1106 <RTOS_dispatchTask+0x52>
	  } else {
        pState(temp);                          // выполняем задачу
	  }
    }
  }
}
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	08 95       	ret

00001190 <__vector_5>:
//=============================================================================
ISR(TIMER_ISR)
{
    1190:	1f 92       	push	r1
    1192:	0f 92       	push	r0
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	0f 92       	push	r0
    1198:	11 24       	eor	r1, r1
    119a:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    119c:	86 e0       	ldi	r24, 0x06	; 6
    119e:	84 bd       	out	0x24, r24	; 36
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 9b 04 	sts	0x049B, r24
}
    11a6:	8f 91       	pop	r24
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <DS18x20_scan>:
  stb_out = t;
  return t;
}
//=============================================================================
void DS18x20_scan(void)
{
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
  static unsigned char ds_state = 0;
  switch(ds_state) {
    11ba:	80 91 2c 05 	lds	r24, 0x052C
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	d1 f0       	breq	.+52     	; 0x11f6 <DS18x20_scan+0x44>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	20 f0       	brcs	.+8      	; 0x11ce <DS18x20_scan+0x1c>
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	09 f0       	breq	.+2      	; 0x11cc <DS18x20_scan+0x1a>
    11ca:	8a c0       	rjmp	.+276    	; 0x12e0 <DS18x20_scan+0x12e>
    11cc:	1e c0       	rjmp	.+60     	; 0x120a <DS18x20_scan+0x58>
    case 0:
	  ds18x20SearchDevices();
    11ce:	0e 94 88 1c 	call	0x3910	; 0x3910 <ds18x20SearchDevices>
	  if (ds18x20GetDevCount() > 0) {
    11d2:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <ds18x20GetDevCount>
    11d6:	88 23       	and	r24, r24
    11d8:	41 f0       	breq	.+16     	; 0x11ea <DS18x20_scan+0x38>
	    ds_state = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	80 93 2c 05 	sts	0x052C, r24
        RTOS_setTaskFunc(DS18x20_scan, 0, 0);
    11e0:	89 ed       	ldi	r24, 0xD9	; 217
    11e2:	98 e0       	ldi	r25, 0x08	; 8
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	77 c0       	rjmp	.+238    	; 0x12d8 <DS18x20_scan+0x126>
	  } else {
	    LED_VENTIL_off();
    11ea:	91 98       	cbi	0x12, 1	; 18
        RTOS_setTaskFunc(DS18x20_scan, 3000, 0);
    11ec:	89 ed       	ldi	r24, 0xD9	; 217
    11ee:	98 e0       	ldi	r25, 0x08	; 8
    11f0:	68 eb       	ldi	r22, 0xB8	; 184
    11f2:	7b e0       	ldi	r23, 0x0B	; 11
    11f4:	71 c0       	rjmp	.+226    	; 0x12d8 <DS18x20_scan+0x126>
	  }
    break;
    case 1:
	  ds18x20Process();
    11f6:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <ds18x20Process>
      ds_state = 2;
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	80 93 2c 05 	sts	0x052C, r24
      RTOS_setTaskFunc(DS18x20_scan, 1000, 0);
    1200:	89 ed       	ldi	r24, 0xD9	; 217
    1202:	98 e0       	ldi	r25, 0x08	; 8
    1204:	68 ee       	ldi	r22, 0xE8	; 232
    1206:	73 e0       	ldi	r23, 0x03	; 3
    1208:	67 c0       	rjmp	.+206    	; 0x12d8 <DS18x20_scan+0x126>
    break;
    case 2:
      if (ds18x20GetDevCount() >= 1) {
    120a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <ds18x20GetDevCount>
    120e:	88 23       	and	r24, r24
    1210:	19 f1       	breq	.+70     	; 0x1258 <DS18x20_scan+0xa6>
		if ((ds18x20GetTemp(0) / 10) >= max_temp) { 
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <ds18x20GetTemp>
    1218:	0a e0       	ldi	r16, 0x0A	; 10
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	b8 01       	movw	r22, r16
    121e:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
    1222:	80 91 a1 05 	lds	r24, 0x05A1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	68 17       	cp	r22, r24
    122a:	79 07       	cpc	r23, r25
    122c:	14 f0       	brlt	.+4      	; 0x1232 <DS18x20_scan+0x80>
		  LED_VENTIL_on();
    122e:	91 9a       	sbi	0x12, 1	; 18
    1230:	13 c0       	rjmp	.+38     	; 0x1258 <DS18x20_scan+0xa6>
		} else {
          if (ds18x20GetDevCount() == 1) {
    1232:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <ds18x20GetDevCount>
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	79 f4       	brne	.+30     	; 0x1258 <DS18x20_scan+0xa6>
		    if ((ds18x20GetTemp(0) / 10) <= (max_temp - ONE_WIRE_GISTER)) LED_VENTIL_off();
    123a:	80 91 a1 05 	lds	r24, 0x05A1
    123e:	c8 2f       	mov	r28, r24
    1240:	d0 e0       	ldi	r29, 0x00	; 0
    1242:	21 97       	sbiw	r28, 0x01	; 1
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <ds18x20GetTemp>
    124a:	b8 01       	movw	r22, r16
    124c:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
    1250:	6c 17       	cp	r22, r28
    1252:	7d 07       	cpc	r23, r29
    1254:	0c f4       	brge	.+2      	; 0x1258 <DS18x20_scan+0xa6>
    1256:	91 98       	cbi	0x12, 1	; 18
		  }
		}
      }
      if (ds18x20GetDevCount() == 2) {
    1258:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <ds18x20GetDevCount>
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	b1 f5       	brne	.+108    	; 0x12cc <DS18x20_scan+0x11a>
		if (((ds18x20GetTemp(1) / 10) >= max_temp) || ((ds18x20GetTemp(0) / 10) >= max_temp)) {
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <ds18x20GetTemp>
    1266:	ca e0       	ldi	r28, 0x0A	; 10
    1268:	d0 e0       	ldi	r29, 0x00	; 0
    126a:	be 01       	movw	r22, r28
    126c:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
    1270:	80 91 a1 05 	lds	r24, 0x05A1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	68 17       	cp	r22, r24
    1278:	79 07       	cpc	r23, r25
    127a:	64 f4       	brge	.+24     	; 0x1294 <DS18x20_scan+0xe2>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <ds18x20GetTemp>
    1282:	00 91 a1 05 	lds	r16, 0x05A1
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	be 01       	movw	r22, r28
    128a:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
    128e:	60 17       	cp	r22, r16
    1290:	71 07       	cpc	r23, r17
    1292:	14 f0       	brlt	.+4      	; 0x1298 <DS18x20_scan+0xe6>
		  LED_VENTIL_on();
    1294:	91 9a       	sbi	0x12, 1	; 18
    1296:	1a c0       	rjmp	.+52     	; 0x12cc <DS18x20_scan+0x11a>
		} else {
		  if (((ds18x20GetTemp(1) / 10) <= (max_temp - ONE_WIRE_GISTER)) && ((ds18x20GetTemp(0) / 10) <= (max_temp - ONE_WIRE_GISTER))) LED_VENTIL_off();
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <ds18x20GetTemp>
    129e:	01 50       	subi	r16, 0x01	; 1
    12a0:	10 40       	sbci	r17, 0x00	; 0
    12a2:	be 01       	movw	r22, r28
    12a4:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
    12a8:	60 17       	cp	r22, r16
    12aa:	71 07       	cpc	r23, r17
    12ac:	7c f4       	brge	.+30     	; 0x12cc <DS18x20_scan+0x11a>
    12ae:	00 91 a1 05 	lds	r16, 0x05A1
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	01 50       	subi	r16, 0x01	; 1
    12b6:	10 40       	sbci	r17, 0x00	; 0
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <ds18x20GetTemp>
    12be:	be 01       	movw	r22, r28
    12c0:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
    12c4:	60 17       	cp	r22, r16
    12c6:	71 07       	cpc	r23, r17
    12c8:	0c f4       	brge	.+2      	; 0x12cc <DS18x20_scan+0x11a>
    12ca:	91 98       	cbi	0x12, 1	; 18
		}
      }
      ds_state = 0;
    12cc:	10 92 2c 05 	sts	0x052C, r1
      RTOS_setTaskFunc(DS18x20_scan, ONE_WIRE_TIME, 0);
    12d0:	89 ed       	ldi	r24, 0xD9	; 217
    12d2:	98 e0       	ldi	r25, 0x08	; 8
    12d4:	64 e1       	ldi	r22, 0x14	; 20
    12d6:	75 e0       	ldi	r23, 0x05	; 5
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	0e 94 78 07 	call	0xef0	; 0xef0 <RTOS_setTaskFunc>
    break;
  }
}
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <alarm_beep>:
  0x01,0x01,0x03, 0x03,0x01,0x03, 0x20,0x20,0x03, 0x03,0x01,0x03, 0x01,0x01,0x03
};
//=============================================================================
void alarm_beep(void)
{
  BEEP_off()
    12ea:	97 9a       	sbi	0x12, 7	; 18
  if (time_alarm > 0) {
    12ec:	80 91 27 05 	lds	r24, 0x0527
    12f0:	88 23       	and	r24, r24
    12f2:	61 f0       	breq	.+24     	; 0x130c <alarm_beep+0x22>
    if (blinks == 1) { BEEP_on(); } else { BEEP_off(); }
    12f4:	80 91 1e 05 	lds	r24, 0x051E
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	11 f4       	brne	.+4      	; 0x1300 <alarm_beep+0x16>
    12fc:	97 98       	cbi	0x12, 7	; 18
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <alarm_beep+0x18>
    1300:	97 9a       	sbi	0x12, 7	; 18
	time_alarm--;
    1302:	80 91 27 05 	lds	r24, 0x0527
    1306:	81 50       	subi	r24, 0x01	; 1
    1308:	80 93 27 05 	sts	0x0527, r24
    130c:	08 95       	ret

0000130e <rc5_buffer_init>:
  }
}
//=============================================================================
void rc5_buffer_init(void)
{
    130e:	e7 e7       	ldi	r30, 0x77	; 119
    1310:	f5 e0       	ldi	r31, 0x05	; 5
    1312:	84 e6       	ldi	r24, 0x64	; 100
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    rc5_code[RC5_CMD][i] = 0xFF;
    1314:	9f ef       	ldi	r25, 0xFF	; 255
    1316:	91 93       	st	Z+, r25
    rc5_code[RC5_KEY][i] = 100 + i;
    1318:	82 8b       	std	Z+18, r24	; 0x12
    131a:	8f 5f       	subi	r24, 0xFF	; 255
}
//=============================================================================
void rc5_buffer_init(void)
{
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    131c:	87 37       	cpi	r24, 0x77	; 119
    131e:	d9 f7       	brne	.-10     	; 0x1316 <rc5_buffer_init+0x8>
    rc5_code[RC5_CMD][i] = 0xFF;
    rc5_code[RC5_KEY][i] = 100 + i;
  }
}
    1320:	08 95       	ret

00001322 <get_rc5_key>:
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
  uint8_t i, ret = 0xFF;
    1322:	e7 e7       	ldi	r30, 0x77	; 119
    1324:	f5 e0       	ldi	r31, 0x05	; 5
    rc5_code[RC5_KEY][i] = 100 + i;
  }
}
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t i, ret = 0xFF;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    if ( rc5_code[RC5_CMD][i] == code) {
    132a:	91 91       	ld	r25, Z+
    132c:	98 17       	cp	r25, r24
    132e:	29 f4       	brne	.+10     	; 0x133a <get_rc5_key+0x18>
	  ret = rc5_code[RC5_KEY][i];
    1330:	29 58       	subi	r18, 0x89	; 137
    1332:	3a 4f       	sbci	r19, 0xFA	; 250
    1334:	f9 01       	movw	r30, r18
    1336:	83 89       	ldd	r24, Z+19	; 0x13
	  break;
    1338:	08 95       	ret
    133a:	2f 5f       	subi	r18, 0xFF	; 255
    133c:	3f 4f       	sbci	r19, 0xFF	; 255
}
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
  uint8_t i, ret = 0xFF;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    133e:	23 31       	cpi	r18, 0x13	; 19
    1340:	31 05       	cpc	r19, r1
    1342:	99 f7       	brne	.-26     	; 0x132a <get_rc5_key+0x8>
  }
}
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
  uint8_t i, ret = 0xFF;
    1344:	8f ef       	ldi	r24, 0xFF	; 255
	  ret = rc5_code[RC5_KEY][i];
	  break;
	}
  }
  return ret;
}
    1346:	08 95       	ret

00001348 <RC5_scan>:
//=============================================================================
void RC5_scan(void)
{
  static signed char old_flip = -1;
  unsigned char c;
  if (rc5.flip != -1) {
    1348:	80 91 a5 05 	lds	r24, 0x05A5
    134c:	8f 3f       	cpi	r24, 0xFF	; 255
    134e:	09 f4       	brne	.+2      	; 0x1352 <RC5_scan+0xa>
    1350:	40 c0       	rjmp	.+128    	; 0x13d2 <RC5_scan+0x8a>
    if ((rc5.flip != old_flip) || (rc5.code == EVENT_RC5_LEFT) || (rc5.code == EVENT_RC5_RIGHT)) {
    1352:	90 91 a5 05 	lds	r25, 0x05A5
    1356:	80 91 4a 04 	lds	r24, 0x044A
    135a:	98 17       	cp	r25, r24
    135c:	31 f4       	brne	.+12     	; 0x136a <RC5_scan+0x22>
    135e:	80 91 a3 05 	lds	r24, 0x05A3
    1362:	82 31       	cpi	r24, 0x12	; 18
    1364:	11 f0       	breq	.+4      	; 0x136a <RC5_scan+0x22>
    1366:	81 31       	cpi	r24, 0x11	; 17
    1368:	89 f5       	brne	.+98     	; 0x13cc <RC5_scan+0x84>
      LED_RC5_CMD_flip();
    136a:	c1 98       	cbi	0x18, 1	; 24
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	96 e7       	ldi	r25, 0x76	; 118
    1370:	a1 e0       	ldi	r26, 0x01	; 1
    1372:	81 50       	subi	r24, 0x01	; 1
    1374:	90 40       	sbci	r25, 0x00	; 0
    1376:	a0 40       	sbci	r26, 0x00	; 0
    1378:	e1 f7       	brne	.-8      	; 0x1372 <RC5_scan+0x2a>
    137a:	00 c0       	rjmp	.+0      	; 0x137c <RC5_scan+0x34>
    137c:	00 00       	nop
    137e:	c1 9a       	sbi	0x18, 1	; 24
	  BEEP();
    1380:	97 98       	cbi	0x12, 7	; 18
    1382:	af e3       	ldi	r26, 0x3F	; 63
    1384:	bc e9       	ldi	r27, 0x9C	; 156
    1386:	11 97       	sbiw	r26, 0x01	; 1
    1388:	f1 f7       	brne	.-4      	; 0x1386 <RC5_scan+0x3e>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <RC5_scan+0x44>
    138c:	00 00       	nop
    138e:	97 9a       	sbi	0x12, 7	; 18
	  old_flip = rc5.flip;
    1390:	80 91 a5 05 	lds	r24, 0x05A5
    1394:	80 93 4a 04 	sts	0x044A, r24
      RTOS_setTask(EVENT_KEY_PRESS, 0, 0); 
    1398:	80 ea       	ldi	r24, 0xA0	; 160
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
	  if (edit_rc5 == 1) {
    13a6:	80 91 26 05 	lds	r24, 0x0526
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	19 f4       	brne	.+6      	; 0x13b4 <RC5_scan+0x6c>
        RTOS_setTask(rc5.code, 0, 0); 
    13ae:	80 91 a3 05 	lds	r24, 0x05A3
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <RC5_scan+0x78>
      } else {
	    c = get_rc5_key(rc5.code);
    13b4:	80 91 a3 05 	lds	r24, 0x05A3
    13b8:	0e 94 91 09 	call	0x1322	; 0x1322 <get_rc5_key>
	    if ( c != 0xFF) RTOS_setTask(c, 0, 0); 
    13bc:	8f 3f       	cpi	r24, 0xFF	; 255
    13be:	31 f0       	breq	.+12     	; 0x13cc <RC5_scan+0x84>
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
	  }
    }
	rc5.flip = -1;
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	80 93 a5 05 	sts	0x05A5, r24
    13d2:	08 95       	ret

000013d4 <save_rc5code_key>:
    load_rc5code_key(i);
  }
}
//=============================================================================
void save_rc5code_key(uint8_t nkey, uint8_t key)
{
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	16 2f       	mov	r17, r22
  eeprom_write_byte((uint8_t*)RC5_CODE_ADDR + nkey, key);
    13dc:	c8 2f       	mov	r28, r24
    13de:	d0 e0       	ldi	r29, 0x00	; 0
    13e0:	ce 01       	movw	r24, r28
    13e2:	80 57       	subi	r24, 0x70	; 112
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
  rc5_code[RC5_CMD][nkey] = key;
    13ea:	c9 58       	subi	r28, 0x89	; 137
    13ec:	da 4f       	sbci	r29, 0xFA	; 250
    13ee:	18 83       	st	Y, r17
}
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	08 95       	ret

000013f8 <save_rc5code>:
  }
  return ret;
}
//=============================================================================
void save_rc5code(void)
{
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    13fe:	c7 e7       	ldi	r28, 0x77	; 119
    1400:	d5 e0       	ldi	r29, 0x05	; 5
    1402:	10 e0       	ldi	r17, 0x00	; 0
    save_rc5code_key(i, rc5_code[RC5_CMD][i]);
    1404:	69 91       	ld	r22, Y+
    1406:	81 2f       	mov	r24, r17
    1408:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <save_rc5code_key>
}
//=============================================================================
void save_rc5code(void)
{
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    140c:	1f 5f       	subi	r17, 0xFF	; 255
    140e:	13 31       	cpi	r17, 0x13	; 19
    1410:	c9 f7       	brne	.-14     	; 0x1404 <save_rc5code+0xc>
    save_rc5code_key(i, rc5_code[RC5_CMD][i]);
  }
}
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	08 95       	ret

0000141a <load_rc5code_key>:
  eeprom_write_byte((uint8_t*)RC5_CODE_ADDR + nkey, key);
  rc5_code[RC5_CMD][nkey] = key;
}
//=============================================================================
uint8_t load_rc5code_key(uint8_t nkey)
{
    141a:	1f 93       	push	r17
    141c:	18 2f       	mov	r17, r24
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)RC5_CODE_ADDR + nkey);
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	c9 01       	movw	r24, r18
    1424:	80 57       	subi	r24, 0x70	; 112
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  if (t > EVENT_RC5_CODE_MAX) t = 0xFF;
    142c:	84 36       	cpi	r24, 0x64	; 100
    142e:	08 f0       	brcs	.+2      	; 0x1432 <load_rc5code_key+0x18>
    1430:	8f ef       	ldi	r24, 0xFF	; 255
  rc5_code[RC5_CMD][nkey] = t;
    1432:	e1 2f       	mov	r30, r17
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	e9 58       	subi	r30, 0x89	; 137
    1438:	fa 4f       	sbci	r31, 0xFA	; 250
    143a:	80 83       	st	Z, r24
  return t;
}
    143c:	1f 91       	pop	r17
    143e:	08 95       	ret

00001440 <load_rc5code>:
    save_rc5code_key(i, rc5_code[RC5_CMD][i]);
  }
}
//=============================================================================
void load_rc5code(void)
{
    1440:	1f 93       	push	r17
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    1442:	10 e0       	ldi	r17, 0x00	; 0
    load_rc5code_key(i);
    1444:	81 2f       	mov	r24, r17
    1446:	0e 94 0d 0a 	call	0x141a	; 0x141a <load_rc5code_key>
}
//=============================================================================
void load_rc5code(void)
{
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    144a:	1f 5f       	subi	r17, 0xFF	; 255
    144c:	13 31       	cpi	r17, 0x13	; 19
    144e:	d1 f7       	brne	.-12     	; 0x1444 <load_rc5code+0x4>
    load_rc5code_key(i);
  }
}
    1450:	1f 91       	pop	r17
    1452:	08 95       	ret

00001454 <save_alarm_param>:
}
//=============================================================================
void save_alarm_param(void)
{
#if (ALARM_DEBUG == 0) 
  eeprom_write_byte((uint8_t*)ALARM_ONOFF_ADDR, a_onoff);
    1454:	82 e1       	ldi	r24, 0x12	; 18
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	60 91 6b 05 	lds	r22, 0x056B
    145c:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_HOUR_ADDR, a_hh);
    1460:	83 e1       	ldi	r24, 0x13	; 19
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	60 91 a2 05 	lds	r22, 0x05A2
    1468:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_MIN_ADDR, a_mm);
    146c:	84 e1       	ldi	r24, 0x14	; 20
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	60 91 73 05 	lds	r22, 0x0573
    1474:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_SEC_ADDR, a_ss);
    1478:	85 e1       	ldi	r24, 0x15	; 21
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	60 91 75 05 	lds	r22, 0x0575
    1480:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_WDAY_ADDR, (a_wday & 0x7F));
    1484:	60 91 71 05 	lds	r22, 0x0571
    1488:	6f 77       	andi	r22, 0x7F	; 127
    148a:	86 e1       	ldi	r24, 0x16	; 22
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
#endif
}
    1492:	08 95       	ret

00001494 <load_alarm_param>:
//=============================================================================
void load_alarm_param(void)
{
#if (ALARM_DEBUG == 0) 
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)ALARM_ONOFF_ADDR);
    1494:	82 e1       	ldi	r24, 0x12	; 18
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  if (t > 1) a_onoff = 0; else a_onoff = t;
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	18 f0       	brcs	.+6      	; 0x14a6 <load_alarm_param+0x12>
    14a0:	10 92 6b 05 	sts	0x056B, r1
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <load_alarm_param+0x16>
    14a6:	80 93 6b 05 	sts	0x056B, r24
  t = eeprom_read_byte((uint8_t*)ALARM_HOUR_ADDR);
    14aa:	83 e1       	ldi	r24, 0x13	; 19
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  if (t > 23) { a_hh = 0; a_onoff = 0; } else a_hh = t;
    14b2:	88 31       	cpi	r24, 0x18	; 24
    14b4:	28 f0       	brcs	.+10     	; 0x14c0 <load_alarm_param+0x2c>
    14b6:	10 92 a2 05 	sts	0x05A2, r1
    14ba:	10 92 6b 05 	sts	0x056B, r1
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <load_alarm_param+0x30>
    14c0:	80 93 a2 05 	sts	0x05A2, r24
  t = eeprom_read_byte((uint8_t*)ALARM_MIN_ADDR);
    14c4:	84 e1       	ldi	r24, 0x14	; 20
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  if (t > 59) { a_mm = 0;  a_onoff = 0; } else a_mm = t;
    14cc:	8c 33       	cpi	r24, 0x3C	; 60
    14ce:	28 f0       	brcs	.+10     	; 0x14da <load_alarm_param+0x46>
    14d0:	10 92 73 05 	sts	0x0573, r1
    14d4:	10 92 6b 05 	sts	0x056B, r1
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <load_alarm_param+0x4a>
    14da:	80 93 73 05 	sts	0x0573, r24
  t = eeprom_read_byte((uint8_t*)ALARM_SEC_ADDR);
    14de:	85 e1       	ldi	r24, 0x15	; 21
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  if (t > 59) { a_ss = 0;  a_onoff = 0; } else a_ss = t;
    14e6:	8c 33       	cpi	r24, 0x3C	; 60
    14e8:	28 f0       	brcs	.+10     	; 0x14f4 <load_alarm_param+0x60>
    14ea:	10 92 75 05 	sts	0x0575, r1
    14ee:	10 92 6b 05 	sts	0x056B, r1
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <load_alarm_param+0x64>
    14f4:	80 93 75 05 	sts	0x0575, r24
  t = eeprom_read_byte((uint8_t*)ALARM_WDAY_ADDR);
    14f8:	86 e1       	ldi	r24, 0x16	; 22
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  a_wday = t & 0x7F;
    1500:	8f 77       	andi	r24, 0x7F	; 127
    1502:	80 93 71 05 	sts	0x0571, r24
#else
  RTC_set_time(13, 58, 57);
  a_onoff = 1; a_hh = 14; a_mm = 00; a_ss = 0; a_wday = 0x7F;
#endif
}
    1506:	08 95       	ret

00001508 <save_as_wait>:
//=============================================================================
void save_as_wait(uint8_t temp)
{
    1508:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)AS_WAIT_ADDR, temp);
    150a:	84 e8       	ldi	r24, 0x84	; 132
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
}
    1512:	08 95       	ret

00001514 <load_as_wait>:
//=============================================================================
uint8_t load_as_wait(void)
{
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)AS_WAIT_ADDR);
    1514:	84 e8       	ldi	r24, 0x84	; 132
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  if (t > MAX_AS_WAIT) t = DEF_AS_WAIT;
    151c:	8b 30       	cpi	r24, 0x0B	; 11
    151e:	08 f0       	brcs	.+2      	; 0x1522 <load_as_wait+0xe>
    1520:	83 e0       	ldi	r24, 0x03	; 3
  as_wait = t;
    1522:	80 93 76 05 	sts	0x0576, r24
  return t;
}
    1526:	08 95       	ret

00001528 <save_max_temperature>:
//=============================================================================
void save_max_temperature(uint8_t temp)
{
    1528:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)MAX_TEMPERATURE_ADDR, temp);
    152a:	82 e8       	ldi	r24, 0x82	; 130
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
}
    1532:	08 95       	ret

00001534 <load_max_temperature>:
//=============================================================================
uint8_t load_max_temperature(void)
{
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)MAX_TEMPERATURE_ADDR);
    1534:	82 e8       	ldi	r24, 0x82	; 130
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  if ((t > MAX_TEMP) || (t < MIN_TEMP)) t = DEF_TEMP;
    153c:	98 2f       	mov	r25, r24
    153e:	9e 51       	subi	r25, 0x1E	; 30
    1540:	98 33       	cpi	r25, 0x38	; 56
    1542:	08 f0       	brcs	.+2      	; 0x1546 <load_max_temperature+0x12>
    1544:	8d e2       	ldi	r24, 0x2D	; 45
  max_temp = t;
    1546:	80 93 a1 05 	sts	0x05A1, r24
  return t;
}
    154a:	08 95       	ret

0000154c <save_stb_out>:
//=============================================================================
void save_stb_out(uint8_t temp)
{
    154c:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)STANDBY_OUT_ADDR, temp);
    154e:	83 e8       	ldi	r24, 0x83	; 131
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
}
    1556:	08 95       	ret

00001558 <load_stb_out>:
//=============================================================================
uint8_t load_stb_out(void)
{
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)STANDBY_OUT_ADDR);
    1558:	83 e8       	ldi	r24, 0x83	; 131
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
    1560:	81 11       	cpse	r24, r1
    1562:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = STANDBY_OUT_DEF;
  stb_out = t;
    1564:	80 93 74 05 	sts	0x0574, r24
  return t;
}
    1568:	08 95       	ret

0000156a <check_fault>:
}
//=============================================================================
uint8_t check_fault(void)
{
  uint8_t r = 0;
  if (BitIsClear(PIN(LED_FAULT_IN), LED_FAULT_IN_PIN)) {
    156a:	9f 99       	sbic	0x13, 7	; 19
    156c:	0f c0       	rjmp	.+30     	; 0x158c <check_fault+0x22>
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	99 ef       	ldi	r25, 0xF9	; 249
    1572:	a0 e0       	ldi	r26, 0x00	; 0
    1574:	81 50       	subi	r24, 0x01	; 1
    1576:	90 40       	sbci	r25, 0x00	; 0
    1578:	a0 40       	sbci	r26, 0x00	; 0
    157a:	e1 f7       	brne	.-8      	; 0x1574 <check_fault+0xa>
    157c:	00 c0       	rjmp	.+0      	; 0x157e <check_fault+0x14>
    157e:	00 00       	nop
    _delay_ms(20);
    if (BitIsClear(PIN(LED_FAULT_IN), LED_FAULT_IN_PIN)) {
    1580:	9f 99       	sbic	0x13, 7	; 19
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <check_fault+0x26>
      fault_on = 1;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	80 93 28 05 	sts	0x0528, r24
    158a:	08 95       	ret
  }
}
//=============================================================================
uint8_t check_fault(void)
{
  uint8_t r = 0;
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	08 95       	ret
    1590:	80 e0       	ldi	r24, 0x00	; 0
      fault_on = 1;
	  r = 1;
    }
  }
  return r;
}
    1592:	08 95       	ret

00001594 <lcd_bigchar>:
//=============================================================================
void lcd_bigchar(unsigned char col, unsigned char x)
{
    1594:	bf 92       	push	r11
    1596:	cf 92       	push	r12
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	b8 2e       	mov	r11, r24
    15a8:	06 2f       	mov	r16, r22
  unsigned char i;
  i = x * 3;
  LCD_SetXY(col, 0);
    15aa:	60 e0       	ldi	r22, 0x00	; 0
    15ac:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
}
//=============================================================================
void lcd_bigchar(unsigned char col, unsigned char x)
{
  unsigned char i;
  i = x * 3;
    15b0:	80 2f       	mov	r24, r16
    15b2:	88 0f       	add	r24, r24
    15b4:	80 0f       	add	r24, r16
  LCD_SetXY(col, 0);
  LCD_dat(bignumchars1[i]); LCD_dat(bignumchars1[i + 1]); LCD_dat(bignumchars1[i + 2]); LCD_dat(' ');
    15b6:	c8 2f       	mov	r28, r24
    15b8:	d0 e0       	ldi	r29, 0x00	; 0
    15ba:	2e e0       	ldi	r18, 0x0E	; 14
    15bc:	e2 2e       	mov	r14, r18
    15be:	24 e0       	ldi	r18, 0x04	; 4
    15c0:	f2 2e       	mov	r15, r18
    15c2:	f7 01       	movw	r30, r14
    15c4:	ec 0f       	add	r30, r28
    15c6:	fd 1f       	adc	r31, r29
    15c8:	80 81       	ld	r24, Z
    15ca:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    15ce:	8e 01       	movw	r16, r28
    15d0:	0f 5f       	subi	r16, 0xFF	; 255
    15d2:	1f 4f       	sbci	r17, 0xFF	; 255
    15d4:	f7 01       	movw	r30, r14
    15d6:	e0 0f       	add	r30, r16
    15d8:	f1 1f       	adc	r31, r17
    15da:	80 81       	ld	r24, Z
    15dc:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    15e0:	92 e0       	ldi	r25, 0x02	; 2
    15e2:	c9 2e       	mov	r12, r25
    15e4:	d1 2c       	mov	r13, r1
    15e6:	cc 0e       	add	r12, r28
    15e8:	dd 1e       	adc	r13, r29
    15ea:	f7 01       	movw	r30, r14
    15ec:	ec 0d       	add	r30, r12
    15ee:	fd 1d       	adc	r31, r13
    15f0:	80 81       	ld	r24, Z
    15f2:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
  LCD_SetXY(col, 1);
    15fc:	8b 2d       	mov	r24, r11
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  LCD_dat(bignumchars2[i]); LCD_dat(bignumchars2[i + 1]); LCD_dat(bignumchars2[i + 2]); LCD_dat(' ');
    1604:	8c e2       	ldi	r24, 0x2C	; 44
    1606:	e8 2e       	mov	r14, r24
    1608:	84 e0       	ldi	r24, 0x04	; 4
    160a:	f8 2e       	mov	r15, r24
    160c:	ce 0d       	add	r28, r14
    160e:	df 1d       	adc	r29, r15
    1610:	88 81       	ld	r24, Y
    1612:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    1616:	f7 01       	movw	r30, r14
    1618:	e0 0f       	add	r30, r16
    161a:	f1 1f       	adc	r31, r17
    161c:	80 81       	ld	r24, Z
    161e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    1622:	ec 0c       	add	r14, r12
    1624:	fd 1c       	adc	r15, r13
    1626:	f7 01       	movw	r30, r14
    1628:	80 81       	ld	r24, Z
    162a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    162e:	80 e2       	ldi	r24, 0x20	; 32
    1630:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
}
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	bf 90       	pop	r11
    1646:	08 95       	ret

00001648 <show_bigtime>:
//=============================================================================
void show_bigtime(void)
{
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <show_bigtime+0xa>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
  unsigned char h, m, s, w;
  RTC_get_time(&h, &m, &s);
    1658:	ce 01       	movw	r24, r28
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	be 01       	movw	r22, r28
    165e:	6e 5f       	subi	r22, 0xFE	; 254
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	ae 01       	movw	r20, r28
    1664:	4d 5f       	subi	r20, 0xFD	; 253
    1666:	5f 4f       	sbci	r21, 0xFF	; 255
    1668:	0e 94 b6 03 	call	0x76c	; 0x76c <RTC_get_time>
  w = RTC_dayofweek();
    166c:	0e 94 49 04 	call	0x892	; 0x892 <RTC_dayofweek>
    1670:	08 2f       	mov	r16, r24
  if (blinks)
    1672:	80 91 1e 05 	lds	r24, 0x051E
    1676:	88 23       	and	r24, r24
    1678:	69 f0       	breq	.+26     	; 0x1694 <show_bigtime+0x4c>
  { 
    LCD_SetXY(10, 0); LCD_dat(0x04);
    167a:	8a e0       	ldi	r24, 0x0A	; 10
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1682:	84 e0       	ldi	r24, 0x04	; 4
    1684:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    LCD_SetXY(10, 1); LCD_dat(0x04);
    1688:	8a e0       	ldi	r24, 0x0A	; 10
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1690:	84 e0       	ldi	r24, 0x04	; 4
    1692:	0c c0       	rjmp	.+24     	; 0x16ac <show_bigtime+0x64>
  } else {
    LCD_SetXY(10, 0); LCD_dat(0x20);
    1694:	8a e0       	ldi	r24, 0x0A	; 10
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    169c:	80 e2       	ldi	r24, 0x20	; 32
    169e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    LCD_SetXY(10, 1); LCD_dat(0x20);
    16a2:	8a e0       	ldi	r24, 0x0A	; 10
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    16aa:	80 e2       	ldi	r24, 0x20	; 32
    16ac:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
  }
  lcd_bigchar(2, h / 10); lcd_bigchar(6, h % 10); lcd_bigchar(11, m / 10); lcd_bigchar(15, m % 10);
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	1a e0       	ldi	r17, 0x0A	; 10
    16b4:	61 2f       	mov	r22, r17
    16b6:	0e 94 57 22 	call	0x44ae	; 0x44ae <__udivmodqi4>
    16ba:	68 2f       	mov	r22, r24
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	0e 94 ca 0a 	call	0x1594	; 0x1594 <lcd_bigchar>
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	61 2f       	mov	r22, r17
    16c6:	0e 94 57 22 	call	0x44ae	; 0x44ae <__udivmodqi4>
    16ca:	86 e0       	ldi	r24, 0x06	; 6
    16cc:	69 2f       	mov	r22, r25
    16ce:	0e 94 ca 0a 	call	0x1594	; 0x1594 <lcd_bigchar>
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	61 2f       	mov	r22, r17
    16d6:	0e 94 57 22 	call	0x44ae	; 0x44ae <__udivmodqi4>
    16da:	68 2f       	mov	r22, r24
    16dc:	8b e0       	ldi	r24, 0x0B	; 11
    16de:	0e 94 ca 0a 	call	0x1594	; 0x1594 <lcd_bigchar>
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	61 2f       	mov	r22, r17
    16e6:	0e 94 57 22 	call	0x44ae	; 0x44ae <__udivmodqi4>
    16ea:	8f e0       	ldi	r24, 0x0F	; 15
    16ec:	69 2f       	mov	r22, r25
    16ee:	0e 94 ca 0a 	call	0x1594	; 0x1594 <lcd_bigchar>
  if (fault_on == 0) {
    16f2:	80 91 28 05 	lds	r24, 0x0528
    16f6:	88 23       	and	r24, r24
    16f8:	79 f5       	brne	.+94     	; 0x1758 <show_bigtime+0x110>
    if (!mute) {
    16fa:	80 91 24 05 	lds	r24, 0x0524
    16fe:	88 23       	and	r24, r24
    1700:	a9 f4       	brne	.+42     	; 0x172c <show_bigtime+0xe4>
      LCD_SetXY(5, 2); RTC_print_date();
    1702:	85 e0       	ldi	r24, 0x05	; 5
    1704:	62 e0       	ldi	r22, 0x02	; 2
    1706:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    170a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <RTC_print_date>
      LCD_SetXY(5, 3); LCD_puts(den_dw_full[w]);
    170e:	85 e0       	ldi	r24, 0x05	; 5
    1710:	63 e0       	ldi	r22, 0x03	; 3
    1712:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1716:	e0 2f       	mov	r30, r16
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	ee 0f       	add	r30, r30
    171c:	ff 1f       	adc	r31, r31
    171e:	e4 55       	subi	r30, 0x54	; 84
    1720:	fe 4f       	sbci	r31, 0xFE	; 254
    1722:	80 81       	ld	r24, Z
    1724:	91 81       	ldd	r25, Z+1	; 0x01
    1726:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    172a:	37 c0       	rjmp	.+110    	; 0x179a <show_bigtime+0x152>
    } else {
      LCD_SetXY(5, 3); if (!blinks) LCD_puts(MSG_MUTE); else LCD_space(10);
    172c:	85 e0       	ldi	r24, 0x05	; 5
    172e:	63 e0       	ldi	r22, 0x03	; 3
    1730:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1734:	80 91 1e 05 	lds	r24, 0x051E
    1738:	88 23       	and	r24, r24
    173a:	29 f4       	brne	.+10     	; 0x1746 <show_bigtime+0xfe>
    173c:	87 ea       	ldi	r24, 0xA7	; 167
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    1744:	03 c0       	rjmp	.+6      	; 0x174c <show_bigtime+0x104>
    1746:	8a e0       	ldi	r24, 0x0A	; 10
    1748:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
      LCD_SetXY(5, 2); LCD_space(10);
    174c:	85 e0       	ldi	r24, 0x05	; 5
    174e:	62 e0       	ldi	r22, 0x02	; 2
    1750:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1754:	8a e0       	ldi	r24, 0x0A	; 10
    1756:	1f c0       	rjmp	.+62     	; 0x1796 <show_bigtime+0x14e>
    }
  } else {
    LCD_SetXY(0, 2); LCD_space(20);
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	62 e0       	ldi	r22, 0x02	; 2
    175c:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1760:	84 e1       	ldi	r24, 0x14	; 20
    1762:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
    LCD_SetXY(0, 3); LCD_space(5);
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	63 e0       	ldi	r22, 0x03	; 3
    176a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    176e:	85 e0       	ldi	r24, 0x05	; 5
    1770:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
	if (blinks) LCD_puts(MSG_FAULT); else LCD_space(9);
    1774:	80 91 1e 05 	lds	r24, 0x051E
    1778:	88 23       	and	r24, r24
    177a:	29 f0       	breq	.+10     	; 0x1786 <show_bigtime+0x13e>
    177c:	82 eb       	ldi	r24, 0xB2	; 178
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    1784:	03 c0       	rjmp	.+6      	; 0x178c <show_bigtime+0x144>
    1786:	89 e0       	ldi	r24, 0x09	; 9
    1788:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
    LCD_SetXY(15, 3); LCD_space(5);
    178c:	8f e0       	ldi	r24, 0x0F	; 15
    178e:	63 e0       	ldi	r22, 0x03	; 3
    1790:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1794:	85 e0       	ldi	r24, 0x05	; 5
    1796:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
  }
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <show_temperature>:
//=============================================================================
void show_temperature(void)
{
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
  int16_t t = 0;
  LCD_SetXY(0, 3);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	63 e0       	ldi	r22, 0x03	; 3
    17b2:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (ds18x20GetDevCount() >= 1) {
    17b6:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <ds18x20GetDevCount>
    17ba:	88 23       	and	r24, r24
    17bc:	89 f1       	breq	.+98     	; 0x1820 <show_temperature+0x76>
    t = ds18x20GetTemp(0) / 10;
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <ds18x20GetTemp>
    17c4:	6a e0       	ldi	r22, 0x0A	; 10
    17c6:	70 e0       	ldi	r23, 0x00	; 0
    17c8:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
    17cc:	eb 01       	movw	r28, r22
#if (TEMP_BLINK_MAX == 1) 
    if (t >= max_temp)  {
    17ce:	80 91 a1 05 	lds	r24, 0x05A1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	68 17       	cp	r22, r24
    17d6:	79 07       	cpc	r23, r25
    17d8:	44 f0       	brlt	.+16     	; 0x17ea <show_temperature+0x40>
	  if (blinks == 0) {
    17da:	80 91 1e 05 	lds	r24, 0x051E
    17de:	88 23       	and	r24, r24
    17e0:	41 f0       	breq	.+16     	; 0x17f2 <show_temperature+0x48>
	    if (t < 0) LCD_dat('-'); else LCD_dat('+');
	    print_dec(t, 2,' '); LCD_dat('C');
	  } else {
	    LCD_space(4);
    17e2:	84 e0       	ldi	r24, 0x04	; 4
    17e4:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <show_temperature+0x5e>
	  }
    } else {
	  if (t < 0) LCD_dat('-'); else LCD_dat('+');
    17ea:	77 ff       	sbrs	r23, 7
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <show_temperature+0x48>
    17ee:	8d e2       	ldi	r24, 0x2D	; 45
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <show_temperature+0x4a>
    17f2:	8b e2       	ldi	r24, 0x2B	; 43
    17f4:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	  print_dec(t, 2,' '); LCD_dat('C');
    17f8:	ce 01       	movw	r24, r28
    17fa:	62 e0       	ldi	r22, 0x02	; 2
    17fc:	40 e2       	ldi	r20, 0x20	; 32
    17fe:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    1802:	83 e4       	ldi	r24, 0x43	; 67
    1804:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	}
    if (ds18x20GetDevCount() == 1) {
    1808:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <ds18x20GetDevCount>
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	41 f4       	brne	.+16     	; 0x1820 <show_temperature+0x76>
      LCD_SetXY(15, 3);
    1810:	8f e0       	ldi	r24, 0x0F	; 15
    1812:	63 e0       	ldi	r22, 0x03	; 3
    1814:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
	  LCD_puts("     ");
    1818:	8c eb       	ldi	r24, 0xBC	; 188
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
#else
   if (t < 0) LCD_dat('-'); else LCD_dat('+');
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  }
  LCD_SetXY(16, 3);
    1820:	80 e1       	ldi	r24, 0x10	; 16
    1822:	63 e0       	ldi	r22, 0x03	; 3
    1824:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (ds18x20GetDevCount() == 2) {
    1828:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <ds18x20GetDevCount>
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	29 f5       	brne	.+74     	; 0x187a <show_temperature+0xd0>
    t = ds18x20GetTemp(1) / 10;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <ds18x20GetTemp>
    1836:	6a e0       	ldi	r22, 0x0A	; 10
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
    183e:	eb 01       	movw	r28, r22
#if (TEMP_BLINK_MAX == 1) 
    if (t >= max_temp)  {
    1840:	80 91 a1 05 	lds	r24, 0x05A1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	68 17       	cp	r22, r24
    1848:	79 07       	cpc	r23, r25
    184a:	44 f0       	brlt	.+16     	; 0x185c <show_temperature+0xb2>
	  if (blinks == 0) {
    184c:	80 91 1e 05 	lds	r24, 0x051E
    1850:	88 23       	and	r24, r24
    1852:	41 f0       	breq	.+16     	; 0x1864 <show_temperature+0xba>
	    if (t < 0) LCD_dat('-'); else LCD_dat('+');
	    print_dec(t, 2,' '); LCD_dat('C');
	  } else {
	    LCD_space(4);
    1854:	84 e0       	ldi	r24, 0x04	; 4
    1856:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
    185a:	0f c0       	rjmp	.+30     	; 0x187a <show_temperature+0xd0>
	  }
    } else {
	  if (t < 0) LCD_dat('-'); else LCD_dat('+');
    185c:	77 ff       	sbrs	r23, 7
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <show_temperature+0xba>
    1860:	8d e2       	ldi	r24, 0x2D	; 45
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <show_temperature+0xbc>
    1864:	8b e2       	ldi	r24, 0x2B	; 43
    1866:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	  print_dec(t, 2,' '); LCD_dat('C');
    186a:	ce 01       	movw	r24, r28
    186c:	62 e0       	ldi	r22, 0x02	; 2
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    1874:	83 e4       	ldi	r24, 0x43	; 67
    1876:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
#else
   if (t < 0) LCD_dat('-'); else LCD_dat('+');
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  }
}
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	08 95       	ret

00001880 <show_freq>:
//=============================================================================
void show_freq(void)
{
    1880:	ff 92       	push	r15
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	27 97       	sbiw	r28, 0x07	; 7
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
  unsigned char i;
  unsigned char s[6];
  uint16_t freq = tuner_ChanToFreq(tuner_GetChan(channel));
    189a:	80 91 2a 05 	lds	r24, 0x052A
    189e:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    18a2:	0e 94 8e 21 	call	0x431c	; 0x431c <tuner_ChanToFreq>
    18a6:	f8 2e       	mov	r15, r24
  if (tuner_GetChan(channel) > FM_CHAN_MAX) {
    18a8:	80 91 2a 05 	lds	r24, 0x052A
    18ac:	9f 83       	std	Y+7, r25	; 0x07
    18ae:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    18b2:	9f 81       	ldd	r25, Y+7	; 0x07
    18b4:	83 3d       	cpi	r24, 0xD3	; 211
    18b6:	28 f0       	brcs	.+10     	; 0x18c2 <show_freq+0x42>
    LCD_puts(MSG_ERROR_CHANNEL);
    18b8:	82 ec       	ldi	r24, 0xC2	; 194
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    18c0:	2b c0       	rjmp	.+86     	; 0x1918 <show_freq+0x98>
    18c2:	fe 01       	movw	r30, r28
    18c4:	36 96       	adiw	r30, 0x06	; 6
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  }
}
//=============================================================================
void show_freq(void)
    18c6:	8e 01       	movw	r16, r28
    18c8:	0f 5f       	subi	r16, 0xFF	; 255
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
  uint16_t freq = tuner_ChanToFreq(tuner_GetChan(channel));
  if (tuner_GetChan(channel) > FM_CHAN_MAX) {
    LCD_puts(MSG_ERROR_CHANNEL);
  } else {
    for (i = 0; i < 5; i++) {
      s[5 - i - 1] = '0' + (freq % 10);
    18cc:	2a e0       	ldi	r18, 0x0A	; 10
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	8f 2d       	mov	r24, r15
    18d2:	b9 01       	movw	r22, r18
    18d4:	0e 94 63 22 	call	0x44c6	; 0x44c6 <__udivmodhi4>
    18d8:	80 5d       	subi	r24, 0xD0	; 208
    18da:	82 93       	st	-Z, r24
      freq /= 10;
    18dc:	f6 2e       	mov	r15, r22
    18de:	97 2f       	mov	r25, r23
  unsigned char s[6];
  uint16_t freq = tuner_ChanToFreq(tuner_GetChan(channel));
  if (tuner_GetChan(channel) > FM_CHAN_MAX) {
    LCD_puts(MSG_ERROR_CHANNEL);
  } else {
    for (i = 0; i < 5; i++) {
    18e0:	e0 17       	cp	r30, r16
    18e2:	f1 07       	cpc	r31, r17
    18e4:	a9 f7       	brne	.-22     	; 0x18d0 <show_freq+0x50>
      s[5 - i - 1] = '0' + (freq % 10);
      freq /= 10;
    }
    if (s[0] == '0') { s[0] = ' '; }
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	80 33       	cpi	r24, 0x30	; 48
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <show_freq+0x70>
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	8e 01       	movw	r16, r28
    18f2:	0f 5f       	subi	r16, 0xFF	; 255
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
#endif
  }
}
//=============================================================================
void show_freq(void)
{
    18f6:	ff 24       	eor	r15, r15
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <show_freq+0x86>
      s[5 - i - 1] = '0' + (freq % 10);
      freq /= 10;
    }
    if (s[0] == '0') { s[0] = ' '; }
    for (i = 0; i < 5; i++) {
      if (i == 3) { LCD_dat('.'); }
    18fa:	8f 2d       	mov	r24, r15
    18fc:	83 30       	cpi	r24, 0x03	; 3
    18fe:	19 f4       	brne	.+6      	; 0x1906 <show_freq+0x86>
    1900:	8e e2       	ldi	r24, 0x2E	; 46
    1902:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
      LCD_dat(s[i]);
    1906:	f8 01       	movw	r30, r16
    1908:	81 91       	ld	r24, Z+
    190a:	8f 01       	movw	r16, r30
    190c:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    for (i = 0; i < 5; i++) {
      s[5 - i - 1] = '0' + (freq % 10);
      freq /= 10;
    }
    if (s[0] == '0') { s[0] = ' '; }
    for (i = 0; i < 5; i++) {
    1910:	f3 94       	inc	r15
    1912:	ff 2d       	mov	r31, r15
    1914:	f5 30       	cpi	r31, 0x05	; 5
    1916:	89 f7       	brne	.-30     	; 0x18fa <show_freq+0x7a>
      if (i == 3) { LCD_dat('.'); }
      LCD_dat(s[i]);
    }
  }
}
    1918:	27 96       	adiw	r28, 0x07	; 7
    191a:	0f b6       	in	r0, 0x3f	; 63
    191c:	f8 94       	cli
    191e:	de bf       	out	0x3e, r29	; 62
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	cd bf       	out	0x3d, r28	; 61
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	08 95       	ret

00001930 <show_lcd_main>:

  }
}
//=============================================================================
void show_lcd_main(void)
{
    1930:	1f 93       	push	r17
  LCD_SetXY(0, 0); LCD_puts(input[tda7313GetInput()]);
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	60 e0       	ldi	r22, 0x00	; 0
    1936:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    193a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <tda7313GetInput>
    193e:	e8 2f       	mov	r30, r24
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	ea 5b       	subi	r30, 0xBA	; 186
    1948:	fd 4f       	sbci	r31, 0xFD	; 253
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
  LCD_SetXY(17, 0);
    1952:	81 e1       	ldi	r24, 0x11	; 17
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (a_onoff == 1) LCD_dat(ALARM_CHAR); else LCD_dat(' ');
    195a:	80 91 6b 05 	lds	r24, 0x056B
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	11 f4       	brne	.+4      	; 0x1966 <show_lcd_main+0x36>
    1962:	8a e2       	ldi	r24, 0x2A	; 42
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <show_lcd_main+0x38>
    1966:	80 e2       	ldi	r24, 0x20	; 32
    1968:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
  LCD_SetXY(19, 0);
    196c:	83 e1       	ldi	r24, 0x13	; 19
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (tda7313GetLoudness()) LCD_dat(LOUDNESS_CHAR); else LCD_dat(' ');
    1974:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <tda7313GetLoudness>
    1978:	88 23       	and	r24, r24
    197a:	11 f0       	breq	.+4      	; 0x1980 <show_lcd_main+0x50>
    197c:	8c e4       	ldi	r24, 0x4C	; 76
    197e:	01 c0       	rjmp	.+2      	; 0x1982 <show_lcd_main+0x52>
    1980:	80 e2       	ldi	r24, 0x20	; 32
    1982:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
  LCD_SetXY(6, 0); RTC_print_time();
    1986:	86 e0       	ldi	r24, 0x06	; 6
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    198e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <RTC_print_time>
  LCD_SetXY(0, 1);
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (tda7313GetInput() == FM_INPUT) {
    199a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <tda7313GetInput>
    199e:	82 30       	cpi	r24, 0x02	; 2
    19a0:	09 f5       	brne	.+66     	; 0x19e4 <show_lcd_main+0xb4>
    if (fm_mode == VOLUME_MODE) {
    19a2:	80 91 29 05 	lds	r24, 0x0529
    19a6:	88 23       	and	r24, r24
    19a8:	21 f0       	breq	.+8      	; 0x19b2 <show_lcd_main+0x82>
	  LCD_puts(MSG_CHANNEL);
    } else {
	  if (blinks) LCD_puts(MSG_CHANNEL); else LCD_puts("   ");
    19aa:	80 91 1e 05 	lds	r24, 0x051E
    19ae:	88 23       	and	r24, r24
    19b0:	19 f0       	breq	.+6      	; 0x19b8 <show_lcd_main+0x88>
    19b2:	89 ec       	ldi	r24, 0xC9	; 201
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <show_lcd_main+0x8c>
    19b8:	8d ec       	ldi	r24, 0xCD	; 205
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
	}
	print_dec(channel + 1, 2, '0'); LCD_dat(' '); show_freq(); LCD_puts(MSG_MHZ);
    19c0:	80 91 2a 05 	lds	r24, 0x052A
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	01 96       	adiw	r24, 0x01	; 1
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	40 e3       	ldi	r20, 0x30	; 48
    19cc:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    19d0:	80 e2       	ldi	r24, 0x20	; 32
    19d2:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    19d6:	0e 94 40 0c 	call	0x1880	; 0x1880 <show_freq>
    19da:	81 ed       	ldi	r24, 0xD1	; 209
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <show_lcd_main+0xba>
  } else {
    LCD_space(19);
    19e4:	83 e1       	ldi	r24, 0x13	; 19
    19e6:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
  }
  LCD_SetXY(0, 2); LCD_puts(mainmenu[mmenu]);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	62 e0       	ldi	r22, 0x02	; 2
    19ee:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    19f2:	e0 91 20 05 	lds	r30, 0x0520
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31
    19fc:	e6 5d       	subi	r30, 0xD6	; 214
    19fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
  LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    1a08:	82 e1       	ldi	r24, 0x12	; 18
    1a0a:	62 e0       	ldi	r22, 0x02	; 2
    1a0c:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1a10:	80 91 20 05 	lds	r24, 0x0520
    1a14:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	62 e0       	ldi	r22, 0x02	; 2
    1a1c:	40 e3       	ldi	r20, 0x30	; 48
    1a1e:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
  LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	63 e0       	ldi	r22, 0x03	; 3
    1a26:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1a2a:	80 91 20 05 	lds	r24, 0x0520
    1a2e:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    1a32:	18 2f       	mov	r17, r24
    1a34:	80 91 20 05 	lds	r24, 0x0520
    1a38:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <tda7313Get_Max_Param>
    1a3c:	68 2f       	mov	r22, r24
    1a3e:	81 2f       	mov	r24, r17
    1a40:	44 e1       	ldi	r20, 0x14	; 20
    1a42:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_progress_bar>
}
    1a46:	1f 91       	pop	r17
    1a48:	08 95       	ret

00001a4a <run_main>:
    break;
  }
}
//=============================================================================
void run_main(unsigned char event)
{
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	18 2f       	mov	r17, r24
  uint8_t in;
  if ((event >= EVENT_KEY_1) && (event <= EVENT_KEY_9)) {
    1a50:	08 2f       	mov	r16, r24
    1a52:	0e 56       	subi	r16, 0x6E	; 110
    1a54:	09 30       	cpi	r16, 0x09	; 9
    1a56:	c0 f4       	brcc	.+48     	; 0x1a88 <run_main+0x3e>
    tda7313SetInput(FM_INPUT);
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <tda7313SetInput>
	tda7313Send_Param();
    1a5e:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <tda7313Send_Param>
    tda7313SetMute(0);
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
    channel = event - 110;
    1a68:	00 93 2a 05 	sts	0x052A, r16
    tuner_SetChan(tuner_GetChan(channel));
    1a6c:	80 2f       	mov	r24, r16
    1a6e:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    1a72:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
    show_lcd_main();
    1a76:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
    RTOS_setTask(EVENT_SAVE_CHANNEL, TIME_SAVE_PARAM, 0);
    1a7a:	88 ea       	ldi	r24, 0xA8	; 168
    1a7c:	60 ed       	ldi	r22, 0xD0	; 208
    1a7e:	77 e0       	ldi	r23, 0x07	; 7
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
  }
  switch(event) {
    1a88:	1d 36       	cpi	r17, 0x6D	; 109
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <run_main+0x44>
    1a8c:	e2 c0       	rjmp	.+452    	; 0x1c52 <run_main+0x208>
    1a8e:	1e 36       	cpi	r17, 0x6E	; 110
    1a90:	10 f5       	brcc	.+68     	; 0x1ad6 <run_main+0x8c>
    1a92:	18 36       	cpi	r17, 0x68	; 104
    1a94:	09 f4       	brne	.+2      	; 0x1a98 <run_main+0x4e>
    1a96:	93 c0       	rjmp	.+294    	; 0x1bbe <run_main+0x174>
    1a98:	19 36       	cpi	r17, 0x69	; 105
    1a9a:	80 f4       	brcc	.+32     	; 0x1abc <run_main+0x72>
    1a9c:	15 36       	cpi	r17, 0x65	; 101
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <run_main+0x58>
    1aa0:	67 c0       	rjmp	.+206    	; 0x1b70 <run_main+0x126>
    1aa2:	16 36       	cpi	r17, 0x66	; 102
    1aa4:	20 f4       	brcc	.+8      	; 0x1aae <run_main+0x64>
    1aa6:	14 36       	cpi	r17, 0x64	; 100
    1aa8:	09 f0       	breq	.+2      	; 0x1aac <run_main+0x62>
    1aaa:	0f c1       	rjmp	.+542    	; 0x1cca <run_main+0x280>
    1aac:	4e c0       	rjmp	.+156    	; 0x1b4a <run_main+0x100>
    1aae:	16 36       	cpi	r17, 0x66	; 102
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <run_main+0x6a>
    1ab2:	72 c0       	rjmp	.+228    	; 0x1b98 <run_main+0x14e>
    1ab4:	17 36       	cpi	r17, 0x67	; 103
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <run_main+0x70>
    1ab8:	08 c1       	rjmp	.+528    	; 0x1cca <run_main+0x280>
    1aba:	dc c0       	rjmp	.+440    	; 0x1c74 <run_main+0x22a>
    1abc:	1a 36       	cpi	r17, 0x6A	; 106
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <run_main+0x78>
    1ac0:	bd c0       	rjmp	.+378    	; 0x1c3c <run_main+0x1f2>
    1ac2:	1a 36       	cpi	r17, 0x6A	; 106
    1ac4:	08 f4       	brcc	.+2      	; 0x1ac8 <run_main+0x7e>
    1ac6:	a4 c0       	rjmp	.+328    	; 0x1c10 <run_main+0x1c6>
    1ac8:	1b 36       	cpi	r17, 0x6B	; 107
    1aca:	09 f4       	brne	.+2      	; 0x1ace <run_main+0x84>
    1acc:	bc c0       	rjmp	.+376    	; 0x1c46 <run_main+0x1fc>
    1ace:	1c 36       	cpi	r17, 0x6C	; 108
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <run_main+0x8a>
    1ad2:	fb c0       	rjmp	.+502    	; 0x1cca <run_main+0x280>
    1ad4:	4d c0       	rjmp	.+154    	; 0x1b70 <run_main+0x126>
    1ad6:	15 3a       	cpi	r17, 0xA5	; 165
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <run_main+0x92>
    1ada:	dd c0       	rjmp	.+442    	; 0x1c96 <run_main+0x24c>
    1adc:	16 3a       	cpi	r17, 0xA6	; 166
    1ade:	78 f4       	brcc	.+30     	; 0x1afe <run_main+0xb4>
    1ae0:	10 3a       	cpi	r17, 0xA0	; 160
    1ae2:	d1 f0       	breq	.+52     	; 0x1b18 <run_main+0xce>
    1ae4:	11 3a       	cpi	r17, 0xA1	; 161
    1ae6:	20 f4       	brcc	.+8      	; 0x1af0 <run_main+0xa6>
    1ae8:	1c 39       	cpi	r17, 0x9C	; 156
    1aea:	09 f0       	breq	.+2      	; 0x1aee <run_main+0xa4>
    1aec:	ee c0       	rjmp	.+476    	; 0x1cca <run_main+0x280>
    1aee:	1b c0       	rjmp	.+54     	; 0x1b26 <run_main+0xdc>
    1af0:	13 3a       	cpi	r17, 0xA3	; 163
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <run_main+0xac>
    1af4:	61 c0       	rjmp	.+194    	; 0x1bb8 <run_main+0x16e>
    1af6:	14 3a       	cpi	r17, 0xA4	; 164
    1af8:	09 f0       	breq	.+2      	; 0x1afc <run_main+0xb2>
    1afa:	e7 c0       	rjmp	.+462    	; 0x1cca <run_main+0x280>
    1afc:	e2 c0       	rjmp	.+452    	; 0x1cc2 <run_main+0x278>
    1afe:	17 3a       	cpi	r17, 0xA7	; 167
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <run_main+0xba>
    1b02:	d5 c0       	rjmp	.+426    	; 0x1cae <run_main+0x264>
    1b04:	17 3a       	cpi	r17, 0xA7	; 167
    1b06:	08 f4       	brcc	.+2      	; 0x1b0a <run_main+0xc0>
    1b08:	d7 c0       	rjmp	.+430    	; 0x1cb8 <run_main+0x26e>
    1b0a:	18 3a       	cpi	r17, 0xA8	; 168
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <run_main+0xc6>
    1b0e:	ca c0       	rjmp	.+404    	; 0x1ca4 <run_main+0x25a>
    1b10:	1d 3f       	cpi	r17, 0xFD	; 253
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <run_main+0xcc>
    1b14:	da c0       	rjmp	.+436    	; 0x1cca <run_main+0x280>
    1b16:	27 c0       	rjmp	.+78     	; 0x1b66 <run_main+0x11c>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    1b18:	10 92 1f 05 	sts	0x051F, r1
	  LIGHT_on();
    1b1c:	ac 9a       	sbi	0x15, 4	; 21
	  BEEP_off();
    1b1e:	97 9a       	sbi	0x12, 7	; 18
      time_alarm = 0;
    1b20:	10 92 27 05 	sts	0x0527, r1
    break;
    1b24:	d2 c0       	rjmp	.+420    	; 0x1cca <run_main+0x280>
    case EVENT_NOKEY:
      main_mode = MODE_NOKEY;
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	80 93 2b 05 	sts	0x052B, r24
	  nokey = 0;
    1b2c:	10 92 1f 05 	sts	0x051F, r1
	  LCD_clear();
    1b30:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    1b34:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
	  old_pState = run_main;
    1b38:	85 e2       	ldi	r24, 0x25	; 37
    1b3a:	9d e0       	ldi	r25, 0x0D	; 13
    1b3c:	90 93 6d 05 	sts	0x056D, r25
    1b40:	80 93 6c 05 	sts	0x056C, r24
      SET_STATE(run_nokey);
    1b44:	88 e6       	ldi	r24, 0x68	; 104
    1b46:	9e e0       	ldi	r25, 0x0E	; 14
    1b48:	21 c0       	rjmp	.+66     	; 0x1b8c <run_main+0x142>
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    break;
    case EVENT_KEY_STANDBY:
      SET_STATE(run_stop);
    1b4a:	85 e1       	ldi	r24, 0x15	; 21
    1b4c:	9f e0       	ldi	r25, 0x0F	; 15
    1b4e:	90 93 a6 00 	sts	0x00A6, r25
    1b52:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_SAVE_PARAM, 0, 0);
    1b56:	85 ea       	ldi	r24, 0xA5	; 165
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    1b64:	b2 c0       	rjmp	.+356    	; 0x1cca <run_main+0x280>
    case EVENT_TIMER_SECOND:
      show_lcd_main();
    1b66:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
	  alarm_beep();
    1b6a:	0e 94 75 09 	call	0x12ea	; 0x12ea <alarm_beep>
    break;
    1b6e:	ad c0       	rjmp	.+346    	; 0x1cca <run_main+0x280>
    case EVENT_KEY_MUTE:
    case EVENT_KEY_MENU:
      main_mode = MODE_MUTE;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	80 93 2b 05 	sts	0x052B, r24
      LED_MUTE_DUBLE_0;
    1b76:	df 98       	cbi	0x1b, 7	; 27
	  mute = 1;
    1b78:	80 93 24 05 	sts	0x0524, r24
      tda7313SetMute(1);
    1b7c:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
	  LCD_clear();
    1b80:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    1b84:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      SET_STATE(run_mute);
    1b88:	87 ea       	ldi	r24, 0xA7	; 167
    1b8a:	9e e0       	ldi	r25, 0x0E	; 14
    1b8c:	90 93 a6 00 	sts	0x00A6, r25
    1b90:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    1b94:	8d ef       	ldi	r24, 0xFD	; 253
    1b96:	e0 cf       	rjmp	.-64     	; 0x1b58 <run_main+0x10e>
    break;
    case EVENT_KEY_SELECT:
	  in = tda7313GetInput();
    1b98:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <tda7313GetInput>
	  if ( in < INPUT_MAX) tda7313SetInput(in + 1); else tda7313SetInput(0);
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	10 f4       	brcc	.+4      	; 0x1ba4 <run_main+0x15a>
    1ba0:	8f 5f       	subi	r24, 0xFF	; 255
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <run_main+0x15c>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <tda7313SetInput>
      RTOS_setTask(EVENT_SAVE_INPUT, TIME_SAVE_PARAM, 0);
    1baa:	86 ea       	ldi	r24, 0xA6	; 166
    1bac:	60 ed       	ldi	r22, 0xD0	; 208
    1bae:	77 e0       	ldi	r23, 0x07	; 7
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
	  mmenu = MM_VOLUME;
    1bb8:	10 92 20 05 	sts	0x0520, r1
    1bbc:	84 c0       	rjmp	.+264    	; 0x1cc6 <run_main+0x27c>
      show_lcd_main();
    break;
    case EVENT_KEY_UP:
      if (fm_mode == VOLUME_MODE) {
    1bbe:	80 91 29 05 	lds	r24, 0x0529
    1bc2:	88 23       	and	r24, r24
    1bc4:	69 f4       	brne	.+26     	; 0x1be0 <run_main+0x196>
	    if (mmenu > 0) mmenu--; else mmenu = MMENU_MAX;
    1bc6:	80 91 20 05 	lds	r24, 0x0520
    1bca:	88 23       	and	r24, r24
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <run_main+0x188>
    1bce:	81 50       	subi	r24, 0x01	; 1
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <run_main+0x18a>
    1bd2:	87 e0       	ldi	r24, 0x07	; 7
    1bd4:	80 93 20 05 	sts	0x0520, r24
        RTOS_setTask(EVENT_RETURN_VOLUME, TIME_RETURN_VOLUME, 0);
    1bd8:	83 ea       	ldi	r24, 0xA3	; 163
    1bda:	60 e1       	ldi	r22, 0x10	; 16
    1bdc:	77 e2       	ldi	r23, 0x27	; 39
    1bde:	45 c0       	rjmp	.+138    	; 0x1c6a <run_main+0x220>
	  } else {
	    if (channel > 0) channel--; else channel = FM_STATIONS - 1;
    1be0:	80 91 2a 05 	lds	r24, 0x052A
    1be4:	88 23       	and	r24, r24
    1be6:	11 f0       	breq	.+4      	; 0x1bec <run_main+0x1a2>
    1be8:	81 50       	subi	r24, 0x01	; 1
    1bea:	01 c0       	rjmp	.+2      	; 0x1bee <run_main+0x1a4>
    1bec:	8d e1       	ldi	r24, 0x1D	; 29
    1bee:	80 93 2a 05 	sts	0x052A, r24
	    tuner_SetChan(tuner_GetChan(channel));
    1bf2:	80 91 2a 05 	lds	r24, 0x052A
    1bf6:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    1bfa:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
        RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    1bfe:	84 ea       	ldi	r24, 0xA4	; 164
    1c00:	60 e1       	ldi	r22, 0x10	; 16
    1c02:	77 e2       	ldi	r23, 0x27	; 39
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
        RTOS_setTask(EVENT_SAVE_CHANNEL, TIME_SAVE_PARAM, 0);
    1c0c:	88 ea       	ldi	r24, 0xA8	; 168
    1c0e:	2b c0       	rjmp	.+86     	; 0x1c66 <run_main+0x21c>
	  }
      show_lcd_main();
    break;
    case EVENT_KEY_DOWN:
      if (fm_mode == VOLUME_MODE) {
    1c10:	80 91 29 05 	lds	r24, 0x0529
    1c14:	88 23       	and	r24, r24
    1c16:	49 f4       	brne	.+18     	; 0x1c2a <run_main+0x1e0>
	    if (mmenu < MMENU_MAX) mmenu++; else mmenu = 0;
    1c18:	80 91 20 05 	lds	r24, 0x0520
    1c1c:	87 30       	cpi	r24, 0x07	; 7
    1c1e:	10 f4       	brcc	.+4      	; 0x1c24 <run_main+0x1da>
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	d8 cf       	rjmp	.-80     	; 0x1bd4 <run_main+0x18a>
    1c24:	10 92 20 05 	sts	0x0520, r1
    1c28:	d7 cf       	rjmp	.-82     	; 0x1bd8 <run_main+0x18e>
        RTOS_setTask(EVENT_RETURN_VOLUME, TIME_RETURN_VOLUME, 0);
	  } else {
	    if (channel < FM_STATIONS - 1) channel++; else channel = 0;
    1c2a:	80 91 2a 05 	lds	r24, 0x052A
    1c2e:	8d 31       	cpi	r24, 0x1D	; 29
    1c30:	10 f4       	brcc	.+4      	; 0x1c36 <run_main+0x1ec>
    1c32:	8f 5f       	subi	r24, 0xFF	; 255
    1c34:	dc cf       	rjmp	.-72     	; 0x1bee <run_main+0x1a4>
    1c36:	10 92 2a 05 	sts	0x052A, r1
    1c3a:	db cf       	rjmp	.-74     	; 0x1bf2 <run_main+0x1a8>
    case EVENT_RETURN_VOLUME:
	  mmenu = MM_VOLUME;
      show_lcd_main();
    break;
    case EVENT_KEY_LEFT:
	  tda7313Set_Param_down(mmenu);
    1c3c:	80 91 20 05 	lds	r24, 0x0520
    1c40:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <tda7313Set_Param_down>
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <run_main+0x204>
      RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
      show_lcd_main();
    break;
    case EVENT_KEY_RIGHT:
      tda7313Set_Param_up(mmenu);
    1c46:	80 91 20 05 	lds	r24, 0x0520
    1c4a:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <tda7313Set_Param_up>
      RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
    1c4e:	85 ea       	ldi	r24, 0xA5	; 165
    1c50:	0a c0       	rjmp	.+20     	; 0x1c66 <run_main+0x21c>
      show_lcd_main();
    break;
    case EVENT_KEY_LOUDNESS:
	  if (tda7313GetLoudness() == 0) tda7313SetLoudness(1); else tda7313SetLoudness(0);
    1c52:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <tda7313GetLoudness>
    1c56:	88 23       	and	r24, r24
    1c58:	11 f4       	brne	.+4      	; 0x1c5e <run_main+0x214>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <run_main+0x216>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <tda7313SetLoudness>
      RTOS_setTask(EVENT_SAVE_LOUDNESS, TIME_SAVE_PARAM, 0);
    1c64:	87 ea       	ldi	r24, 0xA7	; 167
    1c66:	60 ed       	ldi	r22, 0xD0	; 208
    1c68:	77 e0       	ldi	r23, 0x07	; 7
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    1c72:	29 c0       	rjmp	.+82     	; 0x1cc6 <run_main+0x27c>
      show_lcd_main();
    break;
    case EVENT_KEY_SET:
	  if (tda7313GetInput() == IN_3) fm_mode = !fm_mode; 
    1c74:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <tda7313GetInput>
    1c78:	82 30       	cpi	r24, 0x02	; 2
    1c7a:	39 f4       	brne	.+14     	; 0x1c8a <run_main+0x240>
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	90 91 29 05 	lds	r25, 0x0529
    1c82:	91 11       	cpse	r25, r1
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	80 93 29 05 	sts	0x0529, r24
      show_lcd_main();
    1c8a:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
      RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    1c8e:	84 ea       	ldi	r24, 0xA4	; 164
    1c90:	60 e1       	ldi	r22, 0x10	; 16
    1c92:	77 e2       	ldi	r23, 0x27	; 39
    1c94:	63 cf       	rjmp	.-314    	; 0x1b5c <run_main+0x112>
    break;
    case EVENT_SAVE_PARAM:
      tda7313_Save_param(tda7313GetInput(), mmenu);
    1c96:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <tda7313GetInput>
    1c9a:	60 91 20 05 	lds	r22, 0x0520
    1c9e:	0e 94 0e 20 	call	0x401c	; 0x401c <tda7313_Save_param>
    break;
    1ca2:	13 c0       	rjmp	.+38     	; 0x1cca <run_main+0x280>
    case EVENT_SAVE_CHANNEL:
      tuner_Save_channel(channel);
    1ca4:	80 91 2a 05 	lds	r24, 0x052A
    1ca8:	0e 94 0f 22 	call	0x441e	; 0x441e <tuner_Save_channel>
    break;
    1cac:	0e c0       	rjmp	.+28     	; 0x1cca <run_main+0x280>
    case EVENT_SAVE_LOUDNESS:
      tda7313_Save_Loudness(tda7313GetLoudness());	  
    1cae:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <tda7313GetLoudness>
    1cb2:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <tda7313_Save_Loudness>
    break;
    1cb6:	09 c0       	rjmp	.+18     	; 0x1cca <run_main+0x280>
    case EVENT_SAVE_INPUT:
      tda7313_Save_Input(tda7313GetInput());	  
    1cb8:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <tda7313GetInput>
    1cbc:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <tda7313_Save_Input>
    break;
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <run_main+0x280>
    case EVENT_RETURN_MODE:
	  fm_mode = VOLUME_MODE;
    1cc2:	10 92 29 05 	sts	0x0529, r1
      show_lcd_main();
    1cc6:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
    break;

  }
}
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	08 95       	ret

00001cd0 <run_nokey>:
  }
}
//=============================================================================
void run_nokey(unsigned char event)
{
  switch(event) {
    1cd0:	8c 39       	cpi	r24, 0x9C	; 156
    1cd2:	51 f0       	breq	.+20     	; 0x1ce8 <run_nokey+0x18>
    1cd4:	8d 39       	cpi	r24, 0x9D	; 157
    1cd6:	18 f4       	brcc	.+6      	; 0x1cde <run_nokey+0xe>
    1cd8:	84 36       	cpi	r24, 0x64	; 100
    1cda:	c1 f5       	brne	.+112    	; 0x1d4c <run_nokey+0x7c>
    1cdc:	1f c0       	rjmp	.+62     	; 0x1d1c <run_nokey+0x4c>
    1cde:	80 3a       	cpi	r24, 0xA0	; 160
    1ce0:	29 f0       	breq	.+10     	; 0x1cec <run_nokey+0x1c>
    1ce2:	8d 3f       	cpi	r24, 0xFD	; 253
    1ce4:	99 f5       	brne	.+102    	; 0x1d4c <run_nokey+0x7c>
    1ce6:	2c c0       	rjmp	.+88     	; 0x1d40 <run_nokey+0x70>
    case EVENT_NOKEY:
	  LIGHT_off();
    1ce8:	ac 98       	cbi	0x15, 4	; 21
    break;
    1cea:	08 95       	ret
    case EVENT_KEY_PRESS:
      time_alarm = 0;
    1cec:	10 92 27 05 	sts	0x0527, r1
	  nokey = 0;
    1cf0:	10 92 1f 05 	sts	0x051F, r1
      main_mode = MODE_MAIN;
    1cf4:	83 e0       	ldi	r24, 0x03	; 3
    1cf6:	80 93 2b 05 	sts	0x052B, r24
	  LIGHT_on();
    1cfa:	ac 9a       	sbi	0x15, 4	; 21
	  LCD_clear();
    1cfc:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_defchar();
    1d00:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_load_defchar>
      SET_STATE(old_pState);
    1d04:	80 91 6c 05 	lds	r24, 0x056C
    1d08:	90 91 6d 05 	lds	r25, 0x056D
    1d0c:	90 93 a6 00 	sts	0x00A6, r25
    1d10:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_main();
    1d14:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
	  BEEP_off();
    1d18:	97 9a       	sbi	0x12, 7	; 18
    break;
    1d1a:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    1d1c:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    1d20:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      SET_STATE(run_stop);
    1d24:	85 e1       	ldi	r24, 0x15	; 21
    1d26:	9f e0       	ldi	r25, 0x0F	; 15
    1d28:	90 93 a6 00 	sts	0x00A6, r25
    1d2c:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_SAVE_PARAM, 0, 0);
    1d30:	85 ea       	ldi	r24, 0xA5	; 165
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    1d3e:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_bigtime();
    1d40:	0e 94 24 0b 	call	0x1648	; 0x1648 <show_bigtime>
	  show_temperature();
    1d44:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <show_temperature>
	  alarm_beep();
    1d48:	0e 94 75 09 	call	0x12ea	; 0x12ea <alarm_beep>
    1d4c:	08 95       	ret

00001d4e <run_mute>:
  }
}
//=============================================================================
void run_mute(unsigned char event)
{
  switch(event) {
    1d4e:	8c 39       	cpi	r24, 0x9C	; 156
    1d50:	99 f0       	breq	.+38     	; 0x1d78 <run_mute+0x2a>
    1d52:	8d 39       	cpi	r24, 0x9D	; 157
    1d54:	28 f4       	brcc	.+10     	; 0x1d60 <run_mute+0x12>
    1d56:	85 36       	cpi	r24, 0x65	; 101
    1d58:	89 f0       	breq	.+34     	; 0x1d7c <run_mute+0x2e>
    1d5a:	8c 36       	cpi	r24, 0x6C	; 108
    1d5c:	59 f5       	brne	.+86     	; 0x1db4 <run_mute+0x66>
    1d5e:	0e c0       	rjmp	.+28     	; 0x1d7c <run_mute+0x2e>
    1d60:	80 3a       	cpi	r24, 0xA0	; 160
    1d62:	19 f0       	breq	.+6      	; 0x1d6a <run_mute+0x1c>
    1d64:	8d 3f       	cpi	r24, 0xFD	; 253
    1d66:	31 f5       	brne	.+76     	; 0x1db4 <run_mute+0x66>
    1d68:	1f c0       	rjmp	.+62     	; 0x1da8 <run_mute+0x5a>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    1d6a:	10 92 1f 05 	sts	0x051F, r1
	  LIGHT_on();
    1d6e:	ac 9a       	sbi	0x15, 4	; 21
	  BEEP_off();
    1d70:	97 9a       	sbi	0x12, 7	; 18
      time_alarm = 0;
    1d72:	10 92 27 05 	sts	0x0527, r1
    break;
    1d76:	08 95       	ret
    case EVENT_NOKEY:
	  LIGHT_off();
    1d78:	ac 98       	cbi	0x15, 4	; 21
    break;
    1d7a:	08 95       	ret
    case EVENT_KEY_MUTE:
    case EVENT_KEY_MENU:
	  LIGHT_on();
    1d7c:	ac 9a       	sbi	0x15, 4	; 21
	  nokey = 0;
    1d7e:	10 92 1f 05 	sts	0x051F, r1
	  LCD_clear();
    1d82:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_defchar();
    1d86:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_load_defchar>
      LED_MUTE_DUBLE_1;
    1d8a:	df 9a       	sbi	0x1b, 7	; 27
	  mute = 0;
    1d8c:	10 92 24 05 	sts	0x0524, r1
      tda7313SetMute(0);
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
      SET_STATE(run_main);
    1d96:	85 e2       	ldi	r24, 0x25	; 37
    1d98:	9d e0       	ldi	r25, 0x0D	; 13
    1d9a:	90 93 a6 00 	sts	0x00A6, r25
    1d9e:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_main();
    1da2:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
    break;
    1da6:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_bigtime();
    1da8:	0e 94 24 0b 	call	0x1648	; 0x1648 <show_bigtime>
	  show_temperature();
    1dac:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <show_temperature>
	  alarm_beep();
    1db0:	0e 94 75 09 	call	0x12ea	; 0x12ea <alarm_beep>
    1db4:	08 95       	ret

00001db6 <volume_step_down>:
  }
  sei();
}
//=============================================================================
void volume_step_down(void)
{
    1db6:	ff 92       	push	r15
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
  uint8_t vol_down, i;
  vol_down = tda7313Get_Param(TDA_VOLUME);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    1dc2:	08 2f       	mov	r16, r24
  show_lcd_main();
    1dc4:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
  cli();
    1dc8:	f8 94       	cli
  for(i = vol_down; i > 0; i--)
    1dca:	10 2f       	mov	r17, r16
    1dcc:	23 c0       	rjmp	.+70     	; 0x1e14 <volume_step_down+0x5e>
  {
    tda7313Set_Param_down(TDA_VOLUME);
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <tda7313Set_Param_down>
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    1dd4:	82 e1       	ldi	r24, 0x12	; 18
    1dd6:	62 e0       	ldi	r22, 0x02	; 2
    1dd8:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1ddc:	80 91 20 05 	lds	r24, 0x0520
    1de0:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	62 e0       	ldi	r22, 0x02	; 2
    1de8:	40 e3       	ldi	r20, 0x30	; 48
    1dea:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	63 e0       	ldi	r22, 0x03	; 3
    1df2:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1df6:	80 91 20 05 	lds	r24, 0x0520
    1dfa:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    1dfe:	f8 2e       	mov	r15, r24
    1e00:	80 91 20 05 	lds	r24, 0x0520
    1e04:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <tda7313Get_Max_Param>
    1e08:	68 2f       	mov	r22, r24
    1e0a:	8f 2d       	mov	r24, r15
    1e0c:	44 e1       	ldi	r20, 0x14	; 20
    1e0e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_progress_bar>
{
  uint8_t vol_down, i;
  vol_down = tda7313Get_Param(TDA_VOLUME);
  show_lcd_main();
  cli();
  for(i = vol_down; i > 0; i--)
    1e12:	11 50       	subi	r17, 0x01	; 1
    1e14:	11 23       	and	r17, r17
    1e16:	d9 f6       	brne	.-74     	; 0x1dce <volume_step_down+0x18>
  {
    tda7313Set_Param_down(TDA_VOLUME);
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
  }
  tda7313Set_Param_no_send(TDA_VOLUME, vol_down);
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	60 2f       	mov	r22, r16
    1e1c:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <tda7313Set_Param_no_send>
  sei();
    1e20:	78 94       	sei
}
    1e22:	1f 91       	pop	r17
    1e24:	0f 91       	pop	r16
    1e26:	ff 90       	pop	r15
    1e28:	08 95       	ret

00001e2a <run_stop>:
  }
}
//=============================================================================
void run_stop(unsigned char event)
{
  switch(event) {
    1e2a:	85 3a       	cpi	r24, 0xA5	; 165
    1e2c:	51 f0       	breq	.+20     	; 0x1e42 <run_stop+0x18>
    1e2e:	86 3a       	cpi	r24, 0xA6	; 166
    1e30:	18 f4       	brcc	.+6      	; 0x1e38 <run_stop+0xe>
    1e32:	89 39       	cpi	r24, 0x99	; 153
    1e34:	f1 f5       	brne	.+124    	; 0x1eb2 <run_stop+0x88>
    1e36:	0c c0       	rjmp	.+24     	; 0x1e50 <run_stop+0x26>
    1e38:	8a 3a       	cpi	r24, 0xAA	; 170
    1e3a:	01 f1       	breq	.+64     	; 0x1e7c <run_stop+0x52>
    1e3c:	8c 3a       	cpi	r24, 0xAC	; 172
    1e3e:	c9 f5       	brne	.+114    	; 0x1eb2 <run_stop+0x88>
    1e40:	11 c0       	rjmp	.+34     	; 0x1e64 <run_stop+0x3a>
    case EVENT_SAVE_PARAM:
      main_mode = MODE_STANDBY;
    1e42:	10 92 2b 05 	sts	0x052B, r1
	  LED_STANDBY_on();
    1e46:	c0 98       	cbi	0x18, 0	; 24
      RTOS_setTask(EVENT_SHOW_VOL_DOWN, 0, 0);
    1e48:	89 e9       	ldi	r24, 0x99	; 153
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	11 c0       	rjmp	.+34     	; 0x1e72 <run_stop+0x48>
    break;
    case EVENT_SHOW_VOL_DOWN:
	  if (mute == 0) {
    1e50:	80 91 24 05 	lds	r24, 0x0524
    1e54:	88 23       	and	r24, r24
    1e56:	11 f4       	brne	.+4      	; 0x1e5c <run_stop+0x32>
	    volume_step_down();
    1e58:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <volume_step_down>
      }
      RTOS_setTask(EVENT_SET_AS_WAIT_OFF, 100, 0);
    1e5c:	8c ea       	ldi	r24, 0xAC	; 172
    1e5e:	64 e6       	ldi	r22, 0x64	; 100
    1e60:	70 e0       	ldi	r23, 0x00	; 0
    1e62:	07 c0       	rjmp	.+14     	; 0x1e72 <run_stop+0x48>
    break;
    case EVENT_SET_AS_WAIT_OFF:
      tda7313SetMute(1);
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
	  LED_AC_WAIT_off();
    1e6a:	c3 98       	cbi	0x18, 3	; 24
      RTOS_setTask(EVENT_SET_STB_OUT_OFF, 400, 0);
    1e6c:	8a ea       	ldi	r24, 0xAA	; 170
    1e6e:	60 e9       	ldi	r22, 0x90	; 144
    1e70:	71 e0       	ldi	r23, 0x01	; 1
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    1e7a:	08 95       	ret
    case EVENT_SET_STB_OUT_OFF:
      LED_STANDBY_on();
    1e7c:	c0 98       	cbi	0x18, 0	; 24
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    1e7e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	11 f4       	brne	.+4      	; 0x1e8a <run_stop+0x60>
    1e86:	c2 9a       	sbi	0x18, 2	; 24
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <run_stop+0x62>
    1e8a:	c2 98       	cbi	0x18, 2	; 24
	  LCD_clear();
    1e8c:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    1e90:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
	  mmenu = MM_VOLUME;
    1e94:	10 92 20 05 	sts	0x0520, r1
      SET_STATE(run_standby);
    1e98:	87 ef       	ldi	r24, 0xF7	; 247
    1e9a:	90 e1       	ldi	r25, 0x10	; 16
    1e9c:	90 93 a6 00 	sts	0x00A6, r25
    1ea0:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    1ea4:	8d ef       	ldi	r24, 0xFD	; 253
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	50 e0       	ldi	r21, 0x00	; 0
    1eae:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    1eb2:	08 95       	ret

00001eb4 <volume_step_up>:
    }
  }
}
//=============================================================================
void volume_step_up(void)
{
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
  unsigned char i;
  vol_up = tda7313Get_Param(TDA_VOLUME);
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    1ebe:	80 93 6a 05 	sts	0x056A, r24
  tda7313Set_Param(TDA_VOLUME, 0);
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <tda7313Set_Param>
  show_lcd_main();
    1eca:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
  cli();
    1ece:	f8 94       	cli
  for(i = 0; i < vol_up; i++)
    1ed0:	10 e0       	ldi	r17, 0x00	; 0
    1ed2:	23 c0       	rjmp	.+70     	; 0x1f1a <volume_step_up+0x66>
  {
    tda7313Set_Param_up(TDA_VOLUME);
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <tda7313Set_Param_up>
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    1eda:	82 e1       	ldi	r24, 0x12	; 18
    1edc:	62 e0       	ldi	r22, 0x02	; 2
    1ede:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1ee2:	80 91 20 05 	lds	r24, 0x0520
    1ee6:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	62 e0       	ldi	r22, 0x02	; 2
    1eee:	40 e3       	ldi	r20, 0x30	; 48
    1ef0:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	63 e0       	ldi	r22, 0x03	; 3
    1ef8:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1efc:	80 91 20 05 	lds	r24, 0x0520
    1f00:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    1f04:	08 2f       	mov	r16, r24
    1f06:	80 91 20 05 	lds	r24, 0x0520
    1f0a:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <tda7313Get_Max_Param>
    1f0e:	68 2f       	mov	r22, r24
    1f10:	80 2f       	mov	r24, r16
    1f12:	44 e1       	ldi	r20, 0x14	; 20
    1f14:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_progress_bar>
  unsigned char i;
  vol_up = tda7313Get_Param(TDA_VOLUME);
  tda7313Set_Param(TDA_VOLUME, 0);
  show_lcd_main();
  cli();
  for(i = 0; i < vol_up; i++)
    1f18:	1f 5f       	subi	r17, 0xFF	; 255
    1f1a:	80 91 6a 05 	lds	r24, 0x056A
    1f1e:	18 17       	cp	r17, r24
    1f20:	c8 f2       	brcs	.-78     	; 0x1ed4 <volume_step_up+0x20>
  {
    tda7313Set_Param_up(TDA_VOLUME);
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
  }
  sei();
    1f22:	78 94       	sei
}
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	08 95       	ret

00001f2a <run_start>:
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
    1f2a:	89 3a       	cpi	r24, 0xA9	; 169
    1f2c:	09 f4       	brne	.+2      	; 0x1f30 <run_start+0x6>
    1f2e:	42 c0       	rjmp	.+132    	; 0x1fb4 <run_start+0x8a>
    1f30:	8a 3a       	cpi	r24, 0xAA	; 170
    1f32:	20 f4       	brcc	.+8      	; 0x1f3c <run_start+0x12>
    1f34:	8a 39       	cpi	r24, 0x9A	; 154
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <run_start+0x10>
    1f38:	74 c0       	rjmp	.+232    	; 0x2022 <run_start+0xf8>
    1f3a:	5a c0       	rjmp	.+180    	; 0x1ff0 <run_start+0xc6>
    1f3c:	8b 3a       	cpi	r24, 0xAB	; 171
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <run_start+0x18>
    1f40:	4e c0       	rjmp	.+156    	; 0x1fde <run_start+0xb4>
    1f42:	8d 3a       	cpi	r24, 0xAD	; 173
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <run_start+0x1e>
    1f46:	6d c0       	rjmp	.+218    	; 0x2022 <run_start+0xf8>
    case EVENT_LOAD_PARAM:
	  LCD_SetXY(0, 2); LCD_space(20);
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	62 e0       	ldi	r22, 0x02	; 2
    1f4c:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1f50:	84 e1       	ldi	r24, 0x14	; 20
    1f52:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
	  LCD_SetXY(0, 3); LCD_space(20);
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	63 e0       	ldi	r22, 0x03	; 3
    1f5a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1f5e:	84 e1       	ldi	r24, 0x14	; 20
    1f60:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
      LCD_SetXY(3, 3); LCD_puts(MSG_LOAD_PARAM);
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	63 e0       	ldi	r22, 0x03	; 3
    1f68:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    1f6c:	85 ed       	ldi	r24, 0xD5	; 213
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
      tuner_SetChan(tuner_GetChan(channel));
    1f74:	80 91 2a 05 	lds	r24, 0x052A
    1f78:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    1f7c:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
	  fault_on = 0; 
    1f80:	10 92 28 05 	sts	0x0528, r1
      rc5_buffer_init();
    1f84:	0e 94 87 09 	call	0x130e	; 0x130e <rc5_buffer_init>
	  load_rc5code();
    1f88:	0e 94 20 0a 	call	0x1440	; 0x1440 <load_rc5code>
	  load_alarm_param();
    1f8c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <load_alarm_param>
      load_max_temperature();
    1f90:	0e 94 9a 0a 	call	0x1534	; 0x1534 <load_max_temperature>
      load_stb_out();
    1f94:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
      load_as_wait();
    1f98:	0e 94 8a 0a 	call	0x1514	; 0x1514 <load_as_wait>
	  tuner_Load_all_stations();
    1f9c:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <tuner_Load_all_stations>
      channel = tuner_Load_channel();
    1fa0:	0e 94 15 22 	call	0x442a	; 0x442a <tuner_Load_channel>
    1fa4:	80 93 2a 05 	sts	0x052A, r24
      tda7313_Load_all_param();
    1fa8:	0e 94 69 20 	call	0x40d2	; 0x40d2 <tda7313_Load_all_param>
      RTOS_setTask(EVENT_SET_STB_OUT_ON, 0, 0);
    1fac:	89 ea       	ldi	r24, 0xA9	; 169
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	19 c0       	rjmp	.+50     	; 0x1fe6 <run_start+0xbc>
    break;
    case EVENT_SET_STB_OUT_ON:
      if (load_stb_out() == 1) { LED_STB_OUT_0; } else { LED_STB_OUT_1; }
    1fb4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	11 f4       	brne	.+4      	; 0x1fc0 <run_start+0x96>
    1fbc:	c2 98       	cbi	0x18, 2	; 24
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <run_start+0x98>
    1fc0:	c2 9a       	sbi	0x18, 2	; 24
      RTOS_setTask(EVENT_SET_AS_WAIT_ON, (as_wait * 1000), 0);
    1fc2:	20 91 76 05 	lds	r18, 0x0576
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	88 ee       	ldi	r24, 0xE8	; 232
    1fca:	93 e0       	ldi	r25, 0x03	; 3
    1fcc:	28 9f       	mul	r18, r24
    1fce:	b0 01       	movw	r22, r0
    1fd0:	29 9f       	mul	r18, r25
    1fd2:	70 0d       	add	r23, r0
    1fd4:	38 9f       	mul	r19, r24
    1fd6:	70 0d       	add	r23, r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	8b ea       	ldi	r24, 0xAB	; 171
    1fdc:	04 c0       	rjmp	.+8      	; 0x1fe6 <run_start+0xbc>
    break;
    case EVENT_SET_AS_WAIT_ON:
	  LED_AC_WAIT_on();
    1fde:	c3 9a       	sbi	0x18, 3	; 24
      RTOS_setTask(EVENT_SHOW_VOL_UP, 300, 0);
    1fe0:	8a e9       	ldi	r24, 0x9A	; 154
    1fe2:	6c e2       	ldi	r22, 0x2C	; 44
    1fe4:	71 e0       	ldi	r23, 0x01	; 1
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    1fee:	08 95       	ret
    case EVENT_SHOW_VOL_UP:
      LED_STANDBY_off();
    1ff0:	c0 9a       	sbi	0x18, 0	; 24
	  LCD_clear();
    1ff2:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_defchar();
    1ff6:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_load_defchar>
	  mute = 0;
    1ffa:	10 92 24 05 	sts	0x0524, r1
      tda7313SetMute(0);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
      volume_step_up();
    2004:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <volume_step_up>
      main_mode = MODE_MAIN;
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	80 93 2b 05 	sts	0x052B, r24
      show_lcd_main();
    200e:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
	  nokey = 0;
    2012:	10 92 1f 05 	sts	0x051F, r1
      SET_STATE(run_main);
    2016:	85 e2       	ldi	r24, 0x25	; 37
    2018:	9d e0       	ldi	r25, 0x0D	; 13
    201a:	90 93 a6 00 	sts	0x00A6, r25
    201e:	80 93 a5 00 	sts	0x00A5, r24
    2022:	08 95       	ret

00002024 <show_lcd_option>:
    break;
  }
}
//=============================================================================
void show_lcd_option(void)
{
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
  uint8_t i;
  LCD_SetXY(0, 0); LCD_puts(MSG_MENU_OPTIONS);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2034:	85 ee       	ldi	r24, 0xE5	; 229
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
  LCD_SetXY(0, 2); LCD_puts(optionmenu[omenu]);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2044:	e0 91 21 05 	lds	r30, 0x0521
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	ee 0f       	add	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	ef 53       	subi	r30, 0x3F	; 63
    2050:	fd 4f       	sbci	r31, 0xFD	; 253
    2052:	80 81       	ld	r24, Z
    2054:	91 81       	ldd	r25, Z+1	; 0x01
    2056:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
  switch(omenu) {
    205a:	80 91 21 05 	lds	r24, 0x0521
    205e:	83 30       	cpi	r24, 0x03	; 3
    2060:	09 f4       	brne	.+2      	; 0x2064 <show_lcd_option+0x40>
    2062:	7c c0       	rjmp	.+248    	; 0x215c <show_lcd_option+0x138>
    2064:	84 30       	cpi	r24, 0x04	; 4
    2066:	28 f4       	brcc	.+10     	; 0x2072 <show_lcd_option+0x4e>
    2068:	81 30       	cpi	r24, 0x01	; 1
    206a:	b9 f0       	breq	.+46     	; 0x209a <show_lcd_option+0x76>
    206c:	82 30       	cpi	r24, 0x02	; 2
    206e:	f8 f4       	brcc	.+62     	; 0x20ae <show_lcd_option+0x8a>
    2070:	0d c0       	rjmp	.+26     	; 0x208c <show_lcd_option+0x68>
    2072:	85 30       	cpi	r24, 0x05	; 5
    2074:	09 f4       	brne	.+2      	; 0x2078 <show_lcd_option+0x54>
    2076:	8f c0       	rjmp	.+286    	; 0x2196 <show_lcd_option+0x172>
    2078:	85 30       	cpi	r24, 0x05	; 5
    207a:	08 f4       	brcc	.+2      	; 0x207e <show_lcd_option+0x5a>
    207c:	7c c0       	rjmp	.+248    	; 0x2176 <show_lcd_option+0x152>
    207e:	86 30       	cpi	r24, 0x06	; 6
    2080:	09 f4       	brne	.+2      	; 0x2084 <show_lcd_option+0x60>
    2082:	99 c0       	rjmp	.+306    	; 0x21b6 <show_lcd_option+0x192>
    2084:	87 30       	cpi	r24, 0x07	; 7
    2086:	09 f0       	breq	.+2      	; 0x208a <show_lcd_option+0x66>
    2088:	9b c0       	rjmp	.+310    	; 0x21c0 <show_lcd_option+0x19c>
    208a:	97 c0       	rjmp	.+302    	; 0x21ba <show_lcd_option+0x196>
    case OM_SET_TIME:
	  LCD_SetXY(10, 2); RTC_print_time(); LCD_space(3);
    208c:	8a e0       	ldi	r24, 0x0A	; 10
    208e:	62 e0       	ldi	r22, 0x02	; 2
    2090:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2094:	0e 94 0f 05 	call	0xa1e	; 0xa1e <RTC_print_time>
    2098:	7c c0       	rjmp	.+248    	; 0x2192 <show_lcd_option+0x16e>
    break;
    case OM_SET_DATE:
	  LCD_SetXY(10, 2); RTC_print_date(); LCD_dat(' ');
    209a:	8a e0       	ldi	r24, 0x0A	; 10
    209c:	62 e0       	ldi	r22, 0x02	; 2
    209e:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    20a2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <RTC_print_date>
    20a6:	80 e2       	ldi	r24, 0x20	; 32
    20a8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    break;
    20ac:	89 c0       	rjmp	.+274    	; 0x21c0 <show_lcd_option+0x19c>
    case OM_SET_ALARM:
	  LCD_SetXY(17, 1); LCD_puts(alarm_onoff[a_onoff]);
    20ae:	81 e1       	ldi	r24, 0x11	; 17
    20b0:	61 e0       	ldi	r22, 0x01	; 1
    20b2:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    20b6:	e0 91 6b 05 	lds	r30, 0x056B
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	ee 0f       	add	r30, r30
    20be:	ff 1f       	adc	r31, r31
    20c0:	e7 52       	subi	r30, 0x27	; 39
    20c2:	fd 4f       	sbci	r31, 0xFD	; 253
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
	  LCD_SetXY(12, 2);
    20cc:	8c e0       	ldi	r24, 0x0C	; 12
    20ce:	62 e0       	ldi	r22, 0x02	; 2
    20d0:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    20d4:	80 91 a2 05 	lds	r24, 0x05A2
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	40 e3       	ldi	r20, 0x30	; 48
    20de:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    20e2:	8a e3       	ldi	r24, 0x3A	; 58
    20e4:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    20e8:	80 91 73 05 	lds	r24, 0x0573
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	62 e0       	ldi	r22, 0x02	; 2
    20f0:	40 e3       	ldi	r20, 0x30	; 48
    20f2:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    20f6:	8a e3       	ldi	r24, 0x3A	; 58
    20f8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	62 e0       	ldi	r22, 0x02	; 2
    2102:	40 e3       	ldi	r20, 0x30	; 48
    2104:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2108:	80 e2       	ldi	r24, 0x20	; 32
    210a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	  LCD_SetXY(0, 3);
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	63 e0       	ldi	r22, 0x03	; 3
    2112:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2116:	00 e5       	ldi	r16, 0x50	; 80
    2118:	11 e0       	ldi	r17, 0x01	; 1
    211a:	c0 e0       	ldi	r28, 0x00	; 0
    211c:	d0 e0       	ldi	r29, 0x00	; 0
      for(i = 0; i < 7; i++) {
	    if (BitIsSet(a_wday, i)) {
    211e:	80 91 71 05 	lds	r24, 0x0571
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0c 2e       	mov	r0, r28
    2126:	02 c0       	rjmp	.+4      	; 0x212c <show_lcd_option+0x108>
    2128:	95 95       	asr	r25
    212a:	87 95       	ror	r24
    212c:	0a 94       	dec	r0
    212e:	e2 f7       	brpl	.-8      	; 0x2128 <show_lcd_option+0x104>
    2130:	80 ff       	sbrs	r24, 0
    2132:	04 c0       	rjmp	.+8      	; 0x213c <show_lcd_option+0x118>
		  LCD_puts(den_dw[i]); 
    2134:	f8 01       	movw	r30, r16
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <show_lcd_option+0x11c>
	    } else {
		  LCD_puts("  ");
    213c:	86 ef       	ldi	r24, 0xF6	; 246
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
		}
		if (i < 6) LCD_dat(':');
    2144:	c6 30       	cpi	r28, 0x06	; 6
    2146:	19 f0       	breq	.+6      	; 0x214e <show_lcd_option+0x12a>
    2148:	8a e3       	ldi	r24, 0x3A	; 58
    214a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    214e:	21 96       	adiw	r28, 0x01	; 1
    2150:	0e 5f       	subi	r16, 0xFE	; 254
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    case OM_SET_ALARM:
	  LCD_SetXY(17, 1); LCD_puts(alarm_onoff[a_onoff]);
	  LCD_SetXY(12, 2);
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
	  LCD_SetXY(0, 3);
      for(i = 0; i < 7; i++) {
    2154:	c7 30       	cpi	r28, 0x07	; 7
    2156:	d1 05       	cpc	r29, r1
    2158:	11 f7       	brne	.-60     	; 0x211e <show_lcd_option+0xfa>
    215a:	32 c0       	rjmp	.+100    	; 0x21c0 <show_lcd_option+0x19c>
		}
		if (i < 6) LCD_dat(':');
	  }
    break;
    case OM_SET_STANBY_OUT:
	  LCD_SetXY(16, 2); print_dec(stb_out, 1, ' '); LCD_space(4);
    215c:	80 e1       	ldi	r24, 0x10	; 16
    215e:	62 e0       	ldi	r22, 0x02	; 2
    2160:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2164:	80 91 74 05 	lds	r24, 0x0574
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	40 e2       	ldi	r20, 0x20	; 32
    216e:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2172:	84 e0       	ldi	r24, 0x04	; 4
    2174:	23 c0       	rjmp	.+70     	; 0x21bc <show_lcd_option+0x198>
    break;
    case OM_SET_TEMP_MAX:
	  LCD_SetXY(14, 2); print_dec(max_temp, 2, ' '); LCD_dat('C'); LCD_space(3);
    2176:	8e e0       	ldi	r24, 0x0E	; 14
    2178:	62 e0       	ldi	r22, 0x02	; 2
    217a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    217e:	80 91 a1 05 	lds	r24, 0x05A1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	62 e0       	ldi	r22, 0x02	; 2
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    218c:	83 e4       	ldi	r24, 0x43	; 67
    218e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	13 c0       	rjmp	.+38     	; 0x21bc <show_lcd_option+0x198>
    break;
    case OM_SET_AS_TIME_ON:
	  LCD_SetXY(15, 2); print_dec(as_wait, 2, ' '); LCD_puts(MSG_SEC); 
    2196:	8f e0       	ldi	r24, 0x0F	; 15
    2198:	62 e0       	ldi	r22, 0x02	; 2
    219a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    219e:	80 91 76 05 	lds	r24, 0x0576
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	40 e2       	ldi	r20, 0x20	; 32
    21a8:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    21ac:	89 ef       	ldi	r24, 0xF9	; 249
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    break;
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <show_lcd_option+0x19c>
    case OM_SET_FM_STATIONS:
	  LCD_space(5);
    21b6:	85 e0       	ldi	r24, 0x05	; 5
    21b8:	01 c0       	rjmp	.+2      	; 0x21bc <show_lcd_option+0x198>
    break;
    case OM_SET_RC5_CODE:
	  LCD_space(7);
    21ba:	87 e0       	ldi	r24, 0x07	; 7
    21bc:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
    break;
  }
  if (omenu != OM_SET_ALARM) { 
    21c0:	80 91 21 05 	lds	r24, 0x0521
    21c4:	82 30       	cpi	r24, 0x02	; 2
    21c6:	71 f0       	breq	.+28     	; 0x21e4 <show_lcd_option+0x1c0>
    LCD_SetXY(0, 3); LCD_space(20);
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	63 e0       	ldi	r22, 0x03	; 3
    21cc:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    21d0:	84 e1       	ldi	r24, 0x14	; 20
    21d2:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
    LCD_SetXY(16, 1); LCD_space(4);
    21d6:	80 e1       	ldi	r24, 0x10	; 16
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    21de:	84 e0       	ldi	r24, 0x04	; 4
    21e0:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
  }
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	1f 91       	pop	r17
    21ea:	0f 91       	pop	r16
    21ec:	08 95       	ret

000021ee <run_standby>:
  }
}
//=============================================================================
void run_standby(unsigned char event)
{
  switch(event) {
    21ee:	81 3a       	cpi	r24, 0xA1	; 161
    21f0:	41 f1       	breq	.+80     	; 0x2242 <run_standby+0x54>
    21f2:	82 3a       	cpi	r24, 0xA2	; 162
    21f4:	98 f4       	brcc	.+38     	; 0x221c <run_standby+0x2e>
    21f6:	87 39       	cpi	r24, 0x97	; 151
    21f8:	09 f4       	brne	.+2      	; 0x21fc <run_standby+0xe>
    21fa:	4e c0       	rjmp	.+156    	; 0x2298 <run_standby+0xaa>
    21fc:	88 39       	cpi	r24, 0x98	; 152
    21fe:	38 f4       	brcc	.+14     	; 0x220e <run_standby+0x20>
    2200:	84 36       	cpi	r24, 0x64	; 100
    2202:	09 f4       	brne	.+2      	; 0x2206 <run_standby+0x18>
    2204:	9a c0       	rjmp	.+308    	; 0x233a <run_standby+0x14c>
    2206:	8c 36       	cpi	r24, 0x6C	; 108
    2208:	09 f0       	breq	.+2      	; 0x220c <run_standby+0x1e>
    220a:	d3 c0       	rjmp	.+422    	; 0x23b2 <run_standby+0x1c4>
    220c:	be c0       	rjmp	.+380    	; 0x238a <run_standby+0x19c>
    220e:	8c 39       	cpi	r24, 0x9C	; 156
    2210:	09 f4       	brne	.+2      	; 0x2214 <run_standby+0x26>
    2212:	80 c0       	rjmp	.+256    	; 0x2314 <run_standby+0x126>
    2214:	80 3a       	cpi	r24, 0xA0	; 160
    2216:	09 f0       	breq	.+2      	; 0x221a <run_standby+0x2c>
    2218:	cc c0       	rjmp	.+408    	; 0x23b2 <run_standby+0x1c4>
    221a:	7e c0       	rjmp	.+252    	; 0x2318 <run_standby+0x12a>
    221c:	82 3b       	cpi	r24, 0xB2	; 178
    221e:	09 f4       	brne	.+2      	; 0x2222 <run_standby+0x34>
    2220:	a0 c0       	rjmp	.+320    	; 0x2362 <run_standby+0x174>
    2222:	83 3b       	cpi	r24, 0xB3	; 179
    2224:	38 f4       	brcc	.+14     	; 0x2234 <run_standby+0x46>
    2226:	8e 3a       	cpi	r24, 0xAE	; 174
    2228:	09 f4       	brne	.+2      	; 0x222c <run_standby+0x3e>
    222a:	47 c0       	rjmp	.+142    	; 0x22ba <run_standby+0xcc>
    222c:	81 3b       	cpi	r24, 0xB1	; 177
    222e:	09 f0       	breq	.+2      	; 0x2232 <run_standby+0x44>
    2230:	c0 c0       	rjmp	.+384    	; 0x23b2 <run_standby+0x1c4>
    2232:	91 c0       	rjmp	.+290    	; 0x2356 <run_standby+0x168>
    2234:	83 3b       	cpi	r24, 0xB3	; 179
    2236:	09 f4       	brne	.+2      	; 0x223a <run_standby+0x4c>
    2238:	9a c0       	rjmp	.+308    	; 0x236e <run_standby+0x180>
    223a:	8d 3f       	cpi	r24, 0xFD	; 253
    223c:	09 f0       	breq	.+2      	; 0x2240 <run_standby+0x52>
    223e:	b9 c0       	rjmp	.+370    	; 0x23b2 <run_standby+0x1c4>
    2240:	70 c0       	rjmp	.+224    	; 0x2322 <run_standby+0x134>
    case EVENT_START:
	  fault_on = 0; 
    2242:	10 92 28 05 	sts	0x0528, r1
      LCD_SetXY(2, 0); LCD_puts(MSG_LOGO1);
    2246:	82 e0       	ldi	r24, 0x02	; 2
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    224e:	8d ef       	ldi	r24, 0xFD	; 253
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
      LCD_SetXY(4, 1); LCD_puts(MSG_LOGO2);
    2256:	84 e0       	ldi	r24, 0x04	; 4
    2258:	61 e0       	ldi	r22, 0x01	; 1
    225a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    225e:	8d e0       	ldi	r24, 0x0D	; 13
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
      tda7313SetMute(1);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
      rc5_buffer_init();
    226c:	0e 94 87 09 	call	0x130e	; 0x130e <rc5_buffer_init>
	  load_rc5code();
    2270:	0e 94 20 0a 	call	0x1440	; 0x1440 <load_rc5code>
	  load_alarm_param();
    2274:	0e 94 4a 0a 	call	0x1494	; 0x1494 <load_alarm_param>
      load_max_temperature();
    2278:	0e 94 9a 0a 	call	0x1534	; 0x1534 <load_max_temperature>
      load_stb_out();
    227c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
      load_as_wait();
    2280:	0e 94 8a 0a 	call	0x1514	; 0x1514 <load_as_wait>
	  tuner_Load_all_stations();
    2284:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <tuner_Load_all_stations>
      channel = tuner_Load_channel();
    2288:	0e 94 15 22 	call	0x442a	; 0x442a <tuner_Load_channel>
    228c:	80 93 2a 05 	sts	0x052A, r24
      tda7313_Load_all_param();
    2290:	0e 94 69 20 	call	0x40d2	; 0x40d2 <tda7313_Load_all_param>
      RTOS_setTask(EVENT_SHOW_DS_CNT, 500, 0);
    2294:	87 e9       	ldi	r24, 0x97	; 151
    2296:	68 c0       	rjmp	.+208    	; 0x2368 <run_standby+0x17a>
    break;
    case EVENT_SHOW_DS_CNT:
      LCD_SetXY(1, 3); LCD_puts(MSG_DS_FOUND); print_dec(ds18x20GetDevCount(), 2,'0');
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	63 e0       	ldi	r22, 0x03	; 3
    229c:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    22a0:	89 e1       	ldi	r24, 0x19	; 25
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    22a8:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <ds18x20GetDevCount>
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	62 e0       	ldi	r22, 0x02	; 2
    22b0:	40 e3       	ldi	r20, 0x30	; 48
    22b2:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
      RTOS_setTask(EVENT_START_TASK, 500, 0);
    22b6:	8e ea       	ldi	r24, 0xAE	; 174
    22b8:	57 c0       	rjmp	.+174    	; 0x2368 <run_standby+0x17a>
    break;
    case EVENT_START_TASK:
      RTOS_setTaskFunc(set_blink, 0, BLINK_TIME);       // моргание
    22ba:	8f ea       	ldi	r24, 0xAF	; 175
    22bc:	99 e1       	ldi	r25, 0x19	; 25
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	48 e5       	ldi	r20, 0x58	; 88
    22c4:	52 e0       	ldi	r21, 0x02	; 2
    22c6:	0e 94 78 07 	call	0xef0	; 0xef0 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(KBD_scan, 0, KBD_SCAN_TIME);		// запускаем опрос кнопок
    22ca:	81 e6       	ldi	r24, 0x61	; 97
    22cc:	96 e0       	ldi	r25, 0x06	; 6
    22ce:	60 e0       	ldi	r22, 0x00	; 0
    22d0:	70 e0       	ldi	r23, 0x00	; 0
    22d2:	45 e0       	ldi	r20, 0x05	; 5
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	0e 94 78 07 	call	0xef0	; 0xef0 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(ENC_scan, 0, ENC_SCAN_TIME);		// запускаем опрос енкодера
    22da:	8a eb       	ldi	r24, 0xBA	; 186
    22dc:	96 e0       	ldi	r25, 0x06	; 6
    22de:	60 e0       	ldi	r22, 0x00	; 0
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	41 e0       	ldi	r20, 0x01	; 1
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	0e 94 78 07 	call	0xef0	; 0xef0 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(RC5_scan, 0, RC5_SCAN_TIME);		// запускаем опрос RC5
    22ea:	84 ea       	ldi	r24, 0xA4	; 164
    22ec:	99 e0       	ldi	r25, 0x09	; 9
    22ee:	60 e0       	ldi	r22, 0x00	; 0
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	45 e0       	ldi	r20, 0x05	; 5
    22f4:	50 e0       	ldi	r21, 0x00	; 0
    22f6:	0e 94 78 07 	call	0xef0	; 0xef0 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(DS18x20_scan, 0, 0);      		// запускаем опрос датчиков температуры
    22fa:	89 ed       	ldi	r24, 0xD9	; 217
    22fc:	98 e0       	ldi	r25, 0x08	; 8
    22fe:	60 e0       	ldi	r22, 0x00	; 0
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	40 e0       	ldi	r20, 0x00	; 0
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	0e 94 78 07 	call	0xef0	; 0xef0 <RTOS_setTaskFunc>
	  LCD_clear();
    230a:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    230e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
    break;
    2312:	08 95       	ret
    case EVENT_NOKEY:
	  LIGHT_off();
    2314:	ac 98       	cbi	0x15, 4	; 21
    break;
    2316:	08 95       	ret
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2318:	10 92 1f 05 	sts	0x051F, r1
	  LIGHT_on();
    231c:	ac 9a       	sbi	0x15, 4	; 21
	  BEEP_off();
    231e:	97 9a       	sbi	0x12, 7	; 18
    break;
    2320:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_bigtime();
    2322:	0e 94 24 0b 	call	0x1648	; 0x1648 <show_bigtime>
      if (fault_on == 0) {
    2326:	80 91 28 05 	lds	r24, 0x0528
    232a:	88 23       	and	r24, r24
    232c:	09 f0       	breq	.+2      	; 0x2330 <run_standby+0x142>
    232e:	41 c0       	rjmp	.+130    	; 0x23b2 <run_standby+0x1c4>
	    show_temperature();
    2330:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <show_temperature>
	    alarm_beep();
    2334:	0e 94 75 09 	call	0x12ea	; 0x12ea <alarm_beep>
    2338:	08 95       	ret
	  }
    break;
    case EVENT_KEY_STANDBY:
	  if (fault_on == 0) {
    233a:	80 91 28 05 	lds	r24, 0x0528
    233e:	88 23       	and	r24, r24
    2340:	41 f4       	brne	.+16     	; 0x2352 <run_standby+0x164>
        SET_STATE(run_start);
    2342:	85 e9       	ldi	r24, 0x95	; 149
    2344:	9f e0       	ldi	r25, 0x0F	; 15
    2346:	90 93 a6 00 	sts	0x00A6, r25
    234a:	80 93 a5 00 	sts	0x00A5, r24
        RTOS_setTask(EVENT_LOAD_PARAM, 0, 0);
    234e:	8d ea       	ldi	r24, 0xAD	; 173
    2350:	15 c0       	rjmp	.+42     	; 0x237c <run_standby+0x18e>
	  } else {
	    RTOS_setTask(EVENT_START_IMPULS, 0, 0);
    2352:	81 eb       	ldi	r24, 0xB1	; 177
    2354:	13 c0       	rjmp	.+38     	; 0x237c <run_standby+0x18e>
	  }
    break;
    case EVENT_START_IMPULS:
      LED_FAULT_IMPULS0_on();
    2356:	ae 9a       	sbi	0x15, 6	; 21
      LED_FAULT_IMPULS1_on();
    2358:	ad 98       	cbi	0x15, 5	; 21
      RTOS_setTask(EVENT_STOP_IMPULS, 1000, 0);
    235a:	82 eb       	ldi	r24, 0xB2	; 178
    235c:	68 ee       	ldi	r22, 0xE8	; 232
    235e:	73 e0       	ldi	r23, 0x03	; 3
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <run_standby+0x192>
    break;
    case EVENT_STOP_IMPULS:
      LED_FAULT_IMPULS0_off();
    2362:	ae 98       	cbi	0x15, 6	; 21
      LED_FAULT_IMPULS1_off();
    2364:	ad 9a       	sbi	0x15, 5	; 21
      RTOS_setTask(EVENT_CHECK_FAULT, 500, 0);
    2366:	83 eb       	ldi	r24, 0xB3	; 179
    2368:	64 ef       	ldi	r22, 0xF4	; 244
    236a:	71 e0       	ldi	r23, 0x01	; 1
    236c:	09 c0       	rjmp	.+18     	; 0x2380 <run_standby+0x192>
    break;
    case EVENT_CHECK_FAULT:
      if (check_fault() == 0) {
    236e:	0e 94 b5 0a 	call	0x156a	; 0x156a <check_fault>
    2372:	88 23       	and	r24, r24
    2374:	f1 f4       	brne	.+60     	; 0x23b2 <run_standby+0x1c4>
        fault_on = 0;
    2376:	10 92 28 05 	sts	0x0528, r1
        RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    237a:	8d ef       	ldi	r24, 0xFD	; 253
    237c:	60 e0       	ldi	r22, 0x00	; 0
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    2388:	08 95       	ret
      }
    break;
    case EVENT_KEY_MENU:
	  LCD_clear();
    238a:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_defchar();
    238e:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_load_defchar>
      tda7313SetMute(1);
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
	  omenu = OM_SET_TIME;
    2398:	10 92 21 05 	sts	0x0521, r1
	  main_mode = MODE_OPTIONS;
    239c:	84 e0       	ldi	r24, 0x04	; 4
    239e:	80 93 2b 05 	sts	0x052B, r24
      SET_STATE(run_option);
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	9b e1       	ldi	r25, 0x1B	; 27
    23a6:	90 93 a6 00 	sts	0x00A6, r25
    23aa:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    23ae:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
    23b2:	08 95       	ret

000023b4 <show_lcd_edit_time>:
  }
}
//=============================================================================
void show_lcd_edit_time(void)
{
  LCD_SetXY(10, 2);
    23b4:	8a e0       	ldi	r24, 0x0A	; 10
    23b6:	62 e0       	ldi	r22, 0x02	; 2
    23b8:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (nedit == 0)
    23bc:	80 91 23 05 	lds	r24, 0x0523
    23c0:	88 23       	and	r24, r24
    23c2:	31 f5       	brne	.+76     	; 0x2410 <show_lcd_edit_time+0x5c>
  {
	if (blinks == 1) print_dec(hh, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    23c4:	80 91 1e 05 	lds	r24, 0x051E
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	41 f4       	brne	.+16     	; 0x23dc <show_lcd_edit_time+0x28>
    23cc:	80 91 a0 05 	lds	r24, 0x05A0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	62 e0       	ldi	r22, 0x02	; 2
    23d4:	40 e3       	ldi	r20, 0x30	; 48
    23d6:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    23da:	06 c0       	rjmp	.+12     	; 0x23e8 <show_lcd_edit_time+0x34>
    23dc:	80 e2       	ldi	r24, 0x20	; 32
    23de:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    23e2:	80 e2       	ldi	r24, 0x20	; 32
    23e4:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    LCD_dat(':'); print_dec(mm, 2, '0'); LCD_dat(':'); print_dec(0, 2, '0');
    23e8:	8a e3       	ldi	r24, 0x3A	; 58
    23ea:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    23ee:	80 91 69 05 	lds	r24, 0x0569
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	62 e0       	ldi	r22, 0x02	; 2
    23f6:	40 e3       	ldi	r20, 0x30	; 48
    23f8:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    23fc:	8a e3       	ldi	r24, 0x3A	; 58
    23fe:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	62 e0       	ldi	r22, 0x02	; 2
    2408:	40 e3       	ldi	r20, 0x30	; 48
    240a:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    240e:	08 95       	ret
  } else if (nedit == 1) {
    2410:	81 30       	cpi	r24, 0x01	; 1
    2412:	29 f5       	brne	.+74     	; 0x245e <show_lcd_edit_time+0xaa>
    print_dec(hh, 2, '0'); LCD_dat(':');
    2414:	80 91 a0 05 	lds	r24, 0x05A0
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	40 e3       	ldi	r20, 0x30	; 48
    241e:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2422:	8a e3       	ldi	r24, 0x3A	; 58
    2424:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	if (blinks == 1) print_dec(mm, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    2428:	80 91 1e 05 	lds	r24, 0x051E
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	41 f4       	brne	.+16     	; 0x2440 <show_lcd_edit_time+0x8c>
    2430:	80 91 69 05 	lds	r24, 0x0569
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	62 e0       	ldi	r22, 0x02	; 2
    2438:	40 e3       	ldi	r20, 0x30	; 48
    243a:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    243e:	06 c0       	rjmp	.+12     	; 0x244c <show_lcd_edit_time+0x98>
    2440:	80 e2       	ldi	r24, 0x20	; 32
    2442:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2446:	80 e2       	ldi	r24, 0x20	; 32
    2448:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    LCD_dat(':'); print_dec(0, 2, '0');
    244c:	8a e3       	ldi	r24, 0x3A	; 58
    244e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	62 e0       	ldi	r22, 0x02	; 2
    2458:	40 e3       	ldi	r20, 0x30	; 48
    245a:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    245e:	08 95       	ret

00002460 <run_edit_time>:
  }
}
//=============================================================================
void run_edit_time(unsigned char event)
{
  switch(event) {
    2460:	8b 36       	cpi	r24, 0x6B	; 107
    2462:	09 f4       	brne	.+2      	; 0x2466 <run_edit_time+0x6>
    2464:	51 c0       	rjmp	.+162    	; 0x2508 <run_edit_time+0xa8>
    2466:	8c 36       	cpi	r24, 0x6C	; 108
    2468:	48 f4       	brcc	.+18     	; 0x247c <run_edit_time+0x1c>
    246a:	87 36       	cpi	r24, 0x67	; 103
    246c:	09 f4       	brne	.+2      	; 0x2470 <run_edit_time+0x10>
    246e:	6c c0       	rjmp	.+216    	; 0x2548 <run_edit_time+0xe8>
    2470:	8a 36       	cpi	r24, 0x6A	; 106
    2472:	59 f1       	breq	.+86     	; 0x24ca <run_edit_time+0x6a>
    2474:	84 36       	cpi	r24, 0x64	; 100
    2476:	09 f0       	breq	.+2      	; 0x247a <run_edit_time+0x1a>
    2478:	8d c0       	rjmp	.+282    	; 0x2594 <run_edit_time+0x134>
    247a:	15 c0       	rjmp	.+42     	; 0x24a6 <run_edit_time+0x46>
    247c:	8c 39       	cpi	r24, 0x9C	; 156
    247e:	61 f0       	breq	.+24     	; 0x2498 <run_edit_time+0x38>
    2480:	8d 39       	cpi	r24, 0x9D	; 157
    2482:	20 f4       	brcc	.+8      	; 0x248c <run_edit_time+0x2c>
    2484:	8c 36       	cpi	r24, 0x6C	; 108
    2486:	09 f0       	breq	.+2      	; 0x248a <run_edit_time+0x2a>
    2488:	85 c0       	rjmp	.+266    	; 0x2594 <run_edit_time+0x134>
    248a:	79 c0       	rjmp	.+242    	; 0x257e <run_edit_time+0x11e>
    248c:	80 3a       	cpi	r24, 0xA0	; 160
    248e:	41 f0       	breq	.+16     	; 0x24a0 <run_edit_time+0x40>
    2490:	8d 3f       	cpi	r24, 0xFD	; 253
    2492:	09 f0       	breq	.+2      	; 0x2496 <run_edit_time+0x36>
    2494:	7f c0       	rjmp	.+254    	; 0x2594 <run_edit_time+0x134>
    2496:	70 c0       	rjmp	.+224    	; 0x2578 <run_edit_time+0x118>
    case EVENT_NOKEY:
	  nokey = 0;
    2498:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    249c:	8c e6       	ldi	r24, 0x6C	; 108
    249e:	0e c0       	rjmp	.+28     	; 0x24bc <run_edit_time+0x5c>
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    24a0:	10 92 1f 05 	sts	0x051F, r1
    break;
    24a4:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    24a6:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    24aa:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      SET_STATE(run_standby);
    24ae:	87 ef       	ldi	r24, 0xF7	; 247
    24b0:	90 e1       	ldi	r25, 0x10	; 16
    24b2:	90 93 a6 00 	sts	0x00A6, r25
    24b6:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    24ba:	8d ef       	ldi	r24, 0xFD	; 253
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	70 e0       	ldi	r23, 0x00	; 0
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    24c8:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_time();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_time();
    24d0:	0e 94 da 11 	call	0x23b4	; 0x23b4 <show_lcd_edit_time>
	  if (nedit == 0) { if (hh > 0) hh--;  else hh = 23; } 
    24d4:	80 91 23 05 	lds	r24, 0x0523
    24d8:	88 23       	and	r24, r24
    24da:	51 f4       	brne	.+20     	; 0x24f0 <run_edit_time+0x90>
    24dc:	80 91 a0 05 	lds	r24, 0x05A0
    24e0:	88 23       	and	r24, r24
    24e2:	11 f0       	breq	.+4      	; 0x24e8 <run_edit_time+0x88>
    24e4:	81 50       	subi	r24, 0x01	; 1
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <run_edit_time+0x8a>
    24e8:	87 e1       	ldi	r24, 0x17	; 23
    24ea:	80 93 a0 05 	sts	0x05A0, r24
    24ee:	28 c0       	rjmp	.+80     	; 0x2540 <run_edit_time+0xe0>
	  if (nedit == 1) { if (mm > 0) mm--; else mm = 59; }
    24f0:	81 30       	cpi	r24, 0x01	; 1
    24f2:	31 f5       	brne	.+76     	; 0x2540 <run_edit_time+0xe0>
    24f4:	80 91 69 05 	lds	r24, 0x0569
    24f8:	88 23       	and	r24, r24
    24fa:	11 f0       	breq	.+4      	; 0x2500 <run_edit_time+0xa0>
    24fc:	81 50       	subi	r24, 0x01	; 1
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <run_edit_time+0xa2>
    2500:	8b e3       	ldi	r24, 0x3B	; 59
    2502:	80 93 69 05 	sts	0x0569, r24
    2506:	1c c0       	rjmp	.+56     	; 0x2540 <run_edit_time+0xe0>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_time();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_time();
    250e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <show_lcd_edit_time>
	  if (nedit == 0) { if (hh < 23) hh++;  else hh = 0; } 
    2512:	80 91 23 05 	lds	r24, 0x0523
    2516:	88 23       	and	r24, r24
    2518:	49 f4       	brne	.+18     	; 0x252c <run_edit_time+0xcc>
    251a:	80 91 a0 05 	lds	r24, 0x05A0
    251e:	87 31       	cpi	r24, 0x17	; 23
    2520:	10 f4       	brcc	.+4      	; 0x2526 <run_edit_time+0xc6>
    2522:	8f 5f       	subi	r24, 0xFF	; 255
    2524:	e2 cf       	rjmp	.-60     	; 0x24ea <run_edit_time+0x8a>
    2526:	10 92 a0 05 	sts	0x05A0, r1
    252a:	0a c0       	rjmp	.+20     	; 0x2540 <run_edit_time+0xe0>
	  if (nedit == 1) { if (mm < 59) mm++; else mm = 0; }
    252c:	81 30       	cpi	r24, 0x01	; 1
    252e:	41 f4       	brne	.+16     	; 0x2540 <run_edit_time+0xe0>
    2530:	80 91 69 05 	lds	r24, 0x0569
    2534:	8b 33       	cpi	r24, 0x3B	; 59
    2536:	10 f4       	brcc	.+4      	; 0x253c <run_edit_time+0xdc>
    2538:	8f 5f       	subi	r24, 0xFF	; 255
    253a:	e3 cf       	rjmp	.-58     	; 0x2502 <run_edit_time+0xa2>
    253c:	10 92 69 05 	sts	0x0569, r1
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2540:	8d ef       	ldi	r24, 0xFD	; 253
    2542:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <RTOS_deleteTask>
    2546:	18 c0       	rjmp	.+48     	; 0x2578 <run_edit_time+0x118>
      show_lcd_edit_time();
    break;
    case EVENT_KEY_SET:
	  if (nedit < 1) {
    2548:	80 91 23 05 	lds	r24, 0x0523
    254c:	88 23       	and	r24, r24
    254e:	21 f4       	brne	.+8      	; 0x2558 <run_edit_time+0xf8>
	    nedit++;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	80 93 23 05 	sts	0x0523, r24
    2556:	10 c0       	rjmp	.+32     	; 0x2578 <run_edit_time+0x118>
	  } else {
	    nedit = 0;
    2558:	10 92 23 05 	sts	0x0523, r1
        RTC_set_time(hh, mm, 0);
    255c:	80 91 a0 05 	lds	r24, 0x05A0
    2560:	60 91 69 05 	lds	r22, 0x0569
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	0e 94 1f 04 	call	0x83e	; 0x83e <RTC_set_time>
        RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    256a:	8c e6       	ldi	r24, 0x6C	; 108
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
	  }
      show_lcd_edit_time();
    2578:	0e 94 da 11 	call	0x23b4	; 0x23b4 <show_lcd_edit_time>
    break;
    257c:	08 95       	ret
    case EVENT_KEY_MENU:
	  edit_rc5 = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	80 93 26 05 	sts	0x0526, r24
      SET_STATE(run_option);
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	9b e1       	ldi	r25, 0x1B	; 27
    2588:	90 93 a6 00 	sts	0x00A6, r25
    258c:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2590:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
    2594:	08 95       	ret

00002596 <show_lcd_edit_date>:
  }
}
//=============================================================================
void show_lcd_edit_date(void)
{
  LCD_SetXY(10, 2);
    2596:	8a e0       	ldi	r24, 0x0A	; 10
    2598:	62 e0       	ldi	r22, 0x02	; 2
    259a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (nedit == 0)
    259e:	80 91 23 05 	lds	r24, 0x0523
    25a2:	88 23       	and	r24, r24
    25a4:	b1 f4       	brne	.+44     	; 0x25d2 <show_lcd_edit_date+0x3c>
  {
	if (blinks == 1) print_dec(dd, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    25a6:	80 91 1e 05 	lds	r24, 0x051E
    25aa:	81 30       	cpi	r24, 0x01	; 1
    25ac:	41 f4       	brne	.+16     	; 0x25be <show_lcd_edit_date+0x28>
    25ae:	80 91 72 05 	lds	r24, 0x0572
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	62 e0       	ldi	r22, 0x02	; 2
    25b6:	40 e3       	ldi	r20, 0x30	; 48
    25b8:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    25bc:	06 c0       	rjmp	.+12     	; 0x25ca <show_lcd_edit_date+0x34>
    25be:	80 e2       	ldi	r24, 0x20	; 32
    25c0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    25c4:	80 e2       	ldi	r24, 0x20	; 32
    25c6:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    LCD_dat('/'); print_dec(ms, 2, '0'); LCD_dat('/'); print_dec(2000 + yy, 4, '0');
    25ca:	8f e2       	ldi	r24, 0x2F	; 47
    25cc:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    25d0:	10 c0       	rjmp	.+32     	; 0x25f2 <show_lcd_edit_date+0x5c>
  } else if (nedit == 1) {
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	01 f5       	brne	.+64     	; 0x2616 <show_lcd_edit_date+0x80>
    print_dec(dd, 2, '0'); LCD_dat('/');
    25d6:	80 91 72 05 	lds	r24, 0x0572
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	62 e0       	ldi	r22, 0x02	; 2
    25de:	40 e3       	ldi	r20, 0x30	; 48
    25e0:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    25e4:	8f e2       	ldi	r24, 0x2F	; 47
    25e6:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	if (blinks == 1) print_dec(ms, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    25ea:	80 91 1e 05 	lds	r24, 0x051E
    25ee:	81 30       	cpi	r24, 0x01	; 1
    25f0:	41 f4       	brne	.+16     	; 0x2602 <show_lcd_edit_date+0x6c>
    25f2:	80 91 70 05 	lds	r24, 0x0570
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	62 e0       	ldi	r22, 0x02	; 2
    25fa:	40 e3       	ldi	r20, 0x30	; 48
    25fc:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2600:	06 c0       	rjmp	.+12     	; 0x260e <show_lcd_edit_date+0x78>
    2602:	80 e2       	ldi	r24, 0x20	; 32
    2604:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2608:	80 e2       	ldi	r24, 0x20	; 32
    260a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    LCD_dat('/'); print_dec(2000 + yy, 4, '0');
    260e:	8f e2       	ldi	r24, 0x2F	; 47
    2610:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2614:	1a c0       	rjmp	.+52     	; 0x264a <show_lcd_edit_date+0xb4>
  } else if (nedit == 2) {
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	29 f5       	brne	.+74     	; 0x2664 <show_lcd_edit_date+0xce>
    print_dec(dd, 2, '0'); LCD_dat('/'); print_dec(ms, 2, '0'); LCD_dat('/');
    261a:	80 91 72 05 	lds	r24, 0x0572
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	62 e0       	ldi	r22, 0x02	; 2
    2622:	40 e3       	ldi	r20, 0x30	; 48
    2624:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2628:	8f e2       	ldi	r24, 0x2F	; 47
    262a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    262e:	80 91 70 05 	lds	r24, 0x0570
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	62 e0       	ldi	r22, 0x02	; 2
    2636:	40 e3       	ldi	r20, 0x30	; 48
    2638:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    263c:	8f e2       	ldi	r24, 0x2F	; 47
    263e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	if (blinks == 1) print_dec(2000 + yy, 4, '0'); else { LCD_space(4); }
    2642:	80 91 1e 05 	lds	r24, 0x051E
    2646:	81 30       	cpi	r24, 0x01	; 1
    2648:	51 f4       	brne	.+20     	; 0x265e <show_lcd_edit_date+0xc8>
    264a:	80 91 9d 05 	lds	r24, 0x059D
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	80 53       	subi	r24, 0x30	; 48
    2652:	98 4f       	sbci	r25, 0xF8	; 248
    2654:	64 e0       	ldi	r22, 0x04	; 4
    2656:	40 e3       	ldi	r20, 0x30	; 48
    2658:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    265c:	08 95       	ret
    265e:	84 e0       	ldi	r24, 0x04	; 4
    2660:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
    2664:	08 95       	ret

00002666 <run_edit_date>:
  }
}
//=============================================================================
//=============================================================================
void run_edit_date(unsigned char event)
{
    2666:	1f 93       	push	r17
  switch(event) {
    2668:	8b 36       	cpi	r24, 0x6B	; 107
    266a:	09 f4       	brne	.+2      	; 0x266e <run_edit_date+0x8>
    266c:	58 c0       	rjmp	.+176    	; 0x271e <run_edit_date+0xb8>
    266e:	8c 36       	cpi	r24, 0x6C	; 108
    2670:	48 f4       	brcc	.+18     	; 0x2684 <run_edit_date+0x1e>
    2672:	87 36       	cpi	r24, 0x67	; 103
    2674:	09 f4       	brne	.+2      	; 0x2678 <run_edit_date+0x12>
    2676:	7c c0       	rjmp	.+248    	; 0x2770 <run_edit_date+0x10a>
    2678:	8a 36       	cpi	r24, 0x6A	; 106
    267a:	51 f1       	breq	.+84     	; 0x26d0 <run_edit_date+0x6a>
    267c:	84 36       	cpi	r24, 0x64	; 100
    267e:	09 f0       	breq	.+2      	; 0x2682 <run_edit_date+0x1c>
    2680:	9b c0       	rjmp	.+310    	; 0x27b8 <run_edit_date+0x152>
    2682:	1b c0       	rjmp	.+54     	; 0x26ba <run_edit_date+0x54>
    2684:	8c 39       	cpi	r24, 0x9C	; 156
    2686:	61 f0       	breq	.+24     	; 0x26a0 <run_edit_date+0x3a>
    2688:	8d 39       	cpi	r24, 0x9D	; 157
    268a:	20 f4       	brcc	.+8      	; 0x2694 <run_edit_date+0x2e>
    268c:	8c 36       	cpi	r24, 0x6C	; 108
    268e:	09 f0       	breq	.+2      	; 0x2692 <run_edit_date+0x2c>
    2690:	93 c0       	rjmp	.+294    	; 0x27b8 <run_edit_date+0x152>
    2692:	8a c0       	rjmp	.+276    	; 0x27a8 <run_edit_date+0x142>
    2694:	80 3a       	cpi	r24, 0xA0	; 160
    2696:	71 f0       	breq	.+28     	; 0x26b4 <run_edit_date+0x4e>
    2698:	8d 3f       	cpi	r24, 0xFD	; 253
    269a:	09 f0       	breq	.+2      	; 0x269e <run_edit_date+0x38>
    269c:	8d c0       	rjmp	.+282    	; 0x27b8 <run_edit_date+0x152>
    269e:	81 c0       	rjmp	.+258    	; 0x27a2 <run_edit_date+0x13c>
    case EVENT_NOKEY:
	  nokey = 0;
    26a0:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    26a4:	8c e6       	ldi	r24, 0x6C	; 108
    26a6:	60 e0       	ldi	r22, 0x00	; 0
    26a8:	70 e0       	ldi	r23, 0x00	; 0
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    26b2:	82 c0       	rjmp	.+260    	; 0x27b8 <run_edit_date+0x152>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    26b4:	10 92 1f 05 	sts	0x051F, r1
    break;
    26b8:	7f c0       	rjmp	.+254    	; 0x27b8 <run_edit_date+0x152>
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    26ba:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    26be:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      SET_STATE(run_standby);
    26c2:	87 ef       	ldi	r24, 0xF7	; 247
    26c4:	90 e1       	ldi	r25, 0x10	; 16
    26c6:	90 93 a6 00 	sts	0x00A6, r25
    26ca:	80 93 a5 00 	sts	0x00A5, r24
    break;
    26ce:	74 c0       	rjmp	.+232    	; 0x27b8 <run_edit_date+0x152>
    case EVENT_TIMER_SECOND:
      show_lcd_edit_date();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_date();
    26d6:	0e 94 cb 12 	call	0x2596	; 0x2596 <show_lcd_edit_date>
	  if (nedit == 0) { if (dd > 0) dd--;  else dd = 31; } 
    26da:	80 91 23 05 	lds	r24, 0x0523
    26de:	88 23       	and	r24, r24
    26e0:	51 f4       	brne	.+20     	; 0x26f6 <run_edit_date+0x90>
    26e2:	80 91 72 05 	lds	r24, 0x0572
    26e6:	88 23       	and	r24, r24
    26e8:	11 f0       	breq	.+4      	; 0x26ee <run_edit_date+0x88>
    26ea:	81 50       	subi	r24, 0x01	; 1
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <run_edit_date+0x8a>
    26ee:	8f e1       	ldi	r24, 0x1F	; 31
    26f0:	80 93 72 05 	sts	0x0572, r24
    26f4:	39 c0       	rjmp	.+114    	; 0x2768 <run_edit_date+0x102>
	  if (nedit == 1) { if (ms > 0) ms--; else ms = 12; }
    26f6:	81 30       	cpi	r24, 0x01	; 1
    26f8:	51 f4       	brne	.+20     	; 0x270e <run_edit_date+0xa8>
    26fa:	80 91 70 05 	lds	r24, 0x0570
    26fe:	88 23       	and	r24, r24
    2700:	11 f0       	breq	.+4      	; 0x2706 <run_edit_date+0xa0>
    2702:	81 50       	subi	r24, 0x01	; 1
    2704:	01 c0       	rjmp	.+2      	; 0x2708 <run_edit_date+0xa2>
    2706:	8c e0       	ldi	r24, 0x0C	; 12
    2708:	80 93 70 05 	sts	0x0570, r24
    270c:	2d c0       	rjmp	.+90     	; 0x2768 <run_edit_date+0x102>
	  if (nedit == 2) { if (yy > 0) yy--; }
    270e:	82 30       	cpi	r24, 0x02	; 2
    2710:	59 f5       	brne	.+86     	; 0x2768 <run_edit_date+0x102>
    2712:	80 91 9d 05 	lds	r24, 0x059D
    2716:	88 23       	and	r24, r24
    2718:	39 f1       	breq	.+78     	; 0x2768 <run_edit_date+0x102>
    271a:	81 50       	subi	r24, 0x01	; 1
    271c:	23 c0       	rjmp	.+70     	; 0x2764 <run_edit_date+0xfe>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_date();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    271e:	11 e0       	ldi	r17, 0x01	; 1
    2720:	10 93 1e 05 	sts	0x051E, r17
      show_lcd_edit_date();
    2724:	0e 94 cb 12 	call	0x2596	; 0x2596 <show_lcd_edit_date>
	  if (nedit == 0) { if (dd < 31) dd++;  else dd = 1; } 
    2728:	80 91 23 05 	lds	r24, 0x0523
    272c:	88 23       	and	r24, r24
    272e:	49 f4       	brne	.+18     	; 0x2742 <run_edit_date+0xdc>
    2730:	80 91 72 05 	lds	r24, 0x0572
    2734:	8f 31       	cpi	r24, 0x1F	; 31
    2736:	10 f4       	brcc	.+4      	; 0x273c <run_edit_date+0xd6>
    2738:	8f 5f       	subi	r24, 0xFF	; 255
    273a:	da cf       	rjmp	.-76     	; 0x26f0 <run_edit_date+0x8a>
    273c:	10 93 72 05 	sts	0x0572, r17
    2740:	13 c0       	rjmp	.+38     	; 0x2768 <run_edit_date+0x102>
	  if (nedit == 1) { if (ms < 12) ms++; else ms = 1; }
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	41 f4       	brne	.+16     	; 0x2756 <run_edit_date+0xf0>
    2746:	90 91 70 05 	lds	r25, 0x0570
    274a:	9c 30       	cpi	r25, 0x0C	; 12
    274c:	e8 f6       	brcc	.-70     	; 0x2708 <run_edit_date+0xa2>
    274e:	9f 5f       	subi	r25, 0xFF	; 255
    2750:	90 93 70 05 	sts	0x0570, r25
    2754:	09 c0       	rjmp	.+18     	; 0x2768 <run_edit_date+0x102>
	  if (nedit == 2) { if (yy < TIME_YEAR_MAX) yy++; }
    2756:	82 30       	cpi	r24, 0x02	; 2
    2758:	39 f4       	brne	.+14     	; 0x2768 <run_edit_date+0x102>
    275a:	80 91 9d 05 	lds	r24, 0x059D
    275e:	83 36       	cpi	r24, 0x63	; 99
    2760:	18 f4       	brcc	.+6      	; 0x2768 <run_edit_date+0x102>
    2762:	8f 5f       	subi	r24, 0xFF	; 255
    2764:	80 93 9d 05 	sts	0x059D, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2768:	8d ef       	ldi	r24, 0xFD	; 253
    276a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <RTOS_deleteTask>
    276e:	19 c0       	rjmp	.+50     	; 0x27a2 <run_edit_date+0x13c>
      show_lcd_edit_date();
    break;
    case EVENT_KEY_SET:
	  if (nedit < 2) {
    2770:	80 91 23 05 	lds	r24, 0x0523
    2774:	82 30       	cpi	r24, 0x02	; 2
    2776:	20 f4       	brcc	.+8      	; 0x2780 <run_edit_date+0x11a>
	    nedit++;
    2778:	8f 5f       	subi	r24, 0xFF	; 255
    277a:	80 93 23 05 	sts	0x0523, r24
    277e:	11 c0       	rjmp	.+34     	; 0x27a2 <run_edit_date+0x13c>
	  } else {
	    nedit = 0;
    2780:	10 92 23 05 	sts	0x0523, r1
        RTC_set_date(dd, ms, yy);
    2784:	80 91 72 05 	lds	r24, 0x0572
    2788:	60 91 70 05 	lds	r22, 0x0570
    278c:	40 91 9d 05 	lds	r20, 0x059D
    2790:	0e 94 f5 03 	call	0x7ea	; 0x7ea <RTC_set_date>
        RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2794:	8c e6       	ldi	r24, 0x6C	; 108
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	50 e0       	ldi	r21, 0x00	; 0
    279e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
	  }
      show_lcd_edit_date();
    27a2:	0e 94 cb 12 	call	0x2596	; 0x2596 <show_lcd_edit_date>
    break;
    27a6:	08 c0       	rjmp	.+16     	; 0x27b8 <run_edit_date+0x152>
    case EVENT_KEY_MENU:
      SET_STATE(run_option);
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	9b e1       	ldi	r25, 0x1B	; 27
    27ac:	90 93 a6 00 	sts	0x00A6, r25
    27b0:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    27b4:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
    break;
  }
}
    27b8:	1f 91       	pop	r17
    27ba:	08 95       	ret

000027bc <show_lcd_edit_alarm>:
    break;
  }
}
//=============================================================================
void show_lcd_edit_alarm(void)
{
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	cf 93       	push	r28
    27c2:	df 93       	push	r29
  uint8_t i;
  switch(nedit) {
    27c4:	80 91 23 05 	lds	r24, 0x0523
    27c8:	82 30       	cpi	r24, 0x02	; 2
    27ca:	09 f4       	brne	.+2      	; 0x27ce <show_lcd_edit_alarm+0x12>
    27cc:	42 c0       	rjmp	.+132    	; 0x2852 <show_lcd_edit_alarm+0x96>
    27ce:	83 30       	cpi	r24, 0x03	; 3
    27d0:	30 f4       	brcc	.+12     	; 0x27de <show_lcd_edit_alarm+0x22>
    27d2:	88 23       	and	r24, r24
    27d4:	41 f0       	breq	.+16     	; 0x27e6 <show_lcd_edit_alarm+0x2a>
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	09 f0       	breq	.+2      	; 0x27dc <show_lcd_edit_alarm+0x20>
    27da:	d9 c0       	rjmp	.+434    	; 0x298e <show_lcd_edit_alarm+0x1d2>
    27dc:	20 c0       	rjmp	.+64     	; 0x281e <show_lcd_edit_alarm+0x62>
    27de:	8a 30       	cpi	r24, 0x0A	; 10
    27e0:	08 f0       	brcs	.+2      	; 0x27e4 <show_lcd_edit_alarm+0x28>
    27e2:	d5 c0       	rjmp	.+426    	; 0x298e <show_lcd_edit_alarm+0x1d2>
    27e4:	63 c0       	rjmp	.+198    	; 0x28ac <show_lcd_edit_alarm+0xf0>
    case ALARM_ONOFF:
      LCD_SetXY(17, 1); 
    27e6:	81 e1       	ldi	r24, 0x11	; 17
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
	  if (blinks) LCD_puts(alarm_onoff[a_onoff]); else LCD_space(3);
    27ee:	80 91 1e 05 	lds	r24, 0x051E
    27f2:	88 23       	and	r24, r24
    27f4:	61 f0       	breq	.+24     	; 0x280e <show_lcd_edit_alarm+0x52>
    27f6:	e0 91 6b 05 	lds	r30, 0x056B
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31
    2800:	e7 52       	subi	r30, 0x27	; 39
    2802:	fd 4f       	sbci	r31, 0xFD	; 253
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    280c:	03 c0       	rjmp	.+6      	; 0x2814 <show_lcd_edit_alarm+0x58>
    280e:	83 e0       	ldi	r24, 0x03	; 3
    2810:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
	  LCD_SetXY(12, 2);
    2814:	8c e0       	ldi	r24, 0x0C	; 12
    2816:	62 e0       	ldi	r22, 0x02	; 2
    2818:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    281c:	08 c0       	rjmp	.+16     	; 0x282e <show_lcd_edit_alarm+0x72>
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    break;
    case ALARM_HOUR:
	  LCD_SetXY(12, 2);
    281e:	8c e0       	ldi	r24, 0x0C	; 12
    2820:	62 e0       	ldi	r22, 0x02	; 2
    2822:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
      if (blinks) print_dec(a_hh,2,'0'); else { LCD_dat(' '); LCD_dat(' '); }
    2826:	80 91 1e 05 	lds	r24, 0x051E
    282a:	88 23       	and	r24, r24
    282c:	41 f0       	breq	.+16     	; 0x283e <show_lcd_edit_alarm+0x82>
    282e:	80 91 a2 05 	lds	r24, 0x05A2
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	62 e0       	ldi	r22, 0x02	; 2
    2836:	40 e3       	ldi	r20, 0x30	; 48
    2838:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    283c:	06 c0       	rjmp	.+12     	; 0x284a <show_lcd_edit_alarm+0x8e>
    283e:	80 e2       	ldi	r24, 0x20	; 32
    2840:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2844:	80 e2       	ldi	r24, 0x20	; 32
    2846:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	  LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    284a:	8a e3       	ldi	r24, 0x3A	; 58
    284c:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2850:	12 c0       	rjmp	.+36     	; 0x2876 <show_lcd_edit_alarm+0xba>
    break;
    case ALARM_MIN:
	  LCD_SetXY(12, 2);
    2852:	8c e0       	ldi	r24, 0x0C	; 12
    2854:	62 e0       	ldi	r22, 0x02	; 2
    2856:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
      print_dec(a_hh,2,'0'); LCD_dat(':');
    285a:	80 91 a2 05 	lds	r24, 0x05A2
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	62 e0       	ldi	r22, 0x02	; 2
    2862:	40 e3       	ldi	r20, 0x30	; 48
    2864:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2868:	8a e3       	ldi	r24, 0x3A	; 58
    286a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	  if (blinks)  print_dec(a_mm,2,'0'); else { LCD_dat(' '); LCD_dat(' '); }
    286e:	80 91 1e 05 	lds	r24, 0x051E
    2872:	88 23       	and	r24, r24
    2874:	41 f0       	breq	.+16     	; 0x2886 <show_lcd_edit_alarm+0xca>
    2876:	80 91 73 05 	lds	r24, 0x0573
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	62 e0       	ldi	r22, 0x02	; 2
    287e:	40 e3       	ldi	r20, 0x30	; 48
    2880:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <show_lcd_edit_alarm+0xd6>
    2886:	80 e2       	ldi	r24, 0x20	; 32
    2888:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    288c:	80 e2       	ldi	r24, 0x20	; 32
    288e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	  LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    2892:	8a e3       	ldi	r24, 0x3A	; 58
    2894:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	62 e0       	ldi	r22, 0x02	; 2
    289e:	40 e3       	ldi	r20, 0x30	; 48
    28a0:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    28a4:	80 e2       	ldi	r24, 0x20	; 32
    28a6:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    break;
    28aa:	71 c0       	rjmp	.+226    	; 0x298e <show_lcd_edit_alarm+0x1d2>
    case ALARM_WE:
    case ALARM_TH:
    case ALARM_FR:
    case ALARM_SA:
    case ALARM_SU:
      LCD_SetXY(17, 1); 
    28ac:	81 e1       	ldi	r24, 0x11	; 17
    28ae:	61 e0       	ldi	r22, 0x01	; 1
    28b0:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
	  LCD_puts(alarm_onoff[a_onoff]);
    28b4:	e0 91 6b 05 	lds	r30, 0x056B
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	ee 0f       	add	r30, r30
    28bc:	ff 1f       	adc	r31, r31
    28be:	e7 52       	subi	r30, 0x27	; 39
    28c0:	fd 4f       	sbci	r31, 0xFD	; 253
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
	  LCD_SetXY(12, 2);
    28ca:	8c e0       	ldi	r24, 0x0C	; 12
    28cc:	62 e0       	ldi	r22, 0x02	; 2
    28ce:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    28d2:	80 91 a2 05 	lds	r24, 0x05A2
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	62 e0       	ldi	r22, 0x02	; 2
    28da:	40 e3       	ldi	r20, 0x30	; 48
    28dc:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    28e0:	8a e3       	ldi	r24, 0x3A	; 58
    28e2:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    28e6:	80 91 73 05 	lds	r24, 0x0573
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	62 e0       	ldi	r22, 0x02	; 2
    28ee:	40 e3       	ldi	r20, 0x30	; 48
    28f0:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    28f4:	8a e3       	ldi	r24, 0x3A	; 58
    28f6:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	40 e3       	ldi	r20, 0x30	; 48
    2902:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2906:	80 e2       	ldi	r24, 0x20	; 32
    2908:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
	  LCD_SetXY(0, 3);
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	63 e0       	ldi	r22, 0x03	; 3
    2910:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2914:	00 e5       	ldi	r16, 0x50	; 80
    2916:	11 e0       	ldi	r17, 0x01	; 1
    2918:	c0 e0       	ldi	r28, 0x00	; 0
    291a:	d0 e0       	ldi	r29, 0x00	; 0
      for(i = 0; i < 7; i++) {
	    if (BitIsSet(a_wday, i)) {
    291c:	80 91 71 05 	lds	r24, 0x0571
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0c 2e       	mov	r0, r28
    2924:	02 c0       	rjmp	.+4      	; 0x292a <show_lcd_edit_alarm+0x16e>
    2926:	95 95       	asr	r25
    2928:	87 95       	ror	r24
    292a:	0a 94       	dec	r0
    292c:	e2 f7       	brpl	.-8      	; 0x2926 <show_lcd_edit_alarm+0x16a>
    292e:	20 91 1e 05 	lds	r18, 0x051E
    2932:	80 ff       	sbrs	r24, 0
    2934:	0d c0       	rjmp	.+26     	; 0x2950 <show_lcd_edit_alarm+0x194>
		  if ((blinks == 1) || (nedit - ALARM_MO != i)) LCD_puts(den_dw[i]); else { LCD_dat(' '); LCD_dat(' '); }
    2936:	21 30       	cpi	r18, 0x01	; 1
    2938:	39 f0       	breq	.+14     	; 0x2948 <show_lcd_edit_alarm+0x18c>
    293a:	80 91 23 05 	lds	r24, 0x0523
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	03 97       	sbiw	r24, 0x03	; 3
    2942:	8c 17       	cp	r24, r28
    2944:	9d 07       	cpc	r25, r29
    2946:	91 f0       	breq	.+36     	; 0x296c <show_lcd_edit_alarm+0x1b0>
    2948:	f8 01       	movw	r30, r16
    294a:	80 81       	ld	r24, Z
    294c:	91 81       	ldd	r25, Z+1	; 0x01
    294e:	0b c0       	rjmp	.+22     	; 0x2966 <show_lcd_edit_alarm+0x1aa>
	    } else {
		  if ((blinks == 1) && ((nedit - ALARM_MO) == i)) { LCD_puts(MSG_NO_WDAY); } else { LCD_dat(' '); LCD_dat(' '); }
    2950:	21 30       	cpi	r18, 0x01	; 1
    2952:	61 f4       	brne	.+24     	; 0x296c <show_lcd_edit_alarm+0x1b0>
    2954:	80 91 23 05 	lds	r24, 0x0523
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	03 97       	sbiw	r24, 0x03	; 3
    295c:	8c 17       	cp	r24, r28
    295e:	9d 07       	cpc	r25, r29
    2960:	29 f4       	brne	.+10     	; 0x296c <show_lcd_edit_alarm+0x1b0>
    2962:	89 e2       	ldi	r24, 0x29	; 41
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    296a:	06 c0       	rjmp	.+12     	; 0x2978 <show_lcd_edit_alarm+0x1bc>
    296c:	80 e2       	ldi	r24, 0x20	; 32
    296e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2972:	80 e2       	ldi	r24, 0x20	; 32
    2974:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
		}
		if (i < 6) LCD_dat(':');
    2978:	c6 30       	cpi	r28, 0x06	; 6
    297a:	19 f0       	breq	.+6      	; 0x2982 <show_lcd_edit_alarm+0x1c6>
    297c:	8a e3       	ldi	r24, 0x3A	; 58
    297e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2982:	21 96       	adiw	r28, 0x01	; 1
    2984:	0e 5f       	subi	r16, 0xFE	; 254
    2986:	1f 4f       	sbci	r17, 0xFF	; 255
      LCD_SetXY(17, 1); 
	  LCD_puts(alarm_onoff[a_onoff]);
	  LCD_SetXY(12, 2);
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
	  LCD_SetXY(0, 3);
      for(i = 0; i < 7; i++) {
    2988:	c7 30       	cpi	r28, 0x07	; 7
    298a:	d1 05       	cpc	r29, r1
    298c:	39 f6       	brne	.-114    	; 0x291c <show_lcd_edit_alarm+0x160>
		}
		if (i < 6) LCD_dat(':');
	  }
    break;
  }
}
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	08 95       	ret

00002998 <run_edit_alarm>:
}
//=============================================================================
//=============================================================================
void run_edit_alarm(unsigned char event)
{
  switch(event) {
    2998:	8b 36       	cpi	r24, 0x6B	; 107
    299a:	09 f4       	brne	.+2      	; 0x299e <run_edit_alarm+0x6>
    299c:	55 c0       	rjmp	.+170    	; 0x2a48 <run_edit_alarm+0xb0>
    299e:	8c 36       	cpi	r24, 0x6C	; 108
    29a0:	48 f4       	brcc	.+18     	; 0x29b4 <run_edit_alarm+0x1c>
    29a2:	87 36       	cpi	r24, 0x67	; 103
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <run_edit_alarm+0x10>
    29a6:	a7 c0       	rjmp	.+334    	; 0x2af6 <run_edit_alarm+0x15e>
    29a8:	8a 36       	cpi	r24, 0x6A	; 106
    29aa:	51 f1       	breq	.+84     	; 0x2a00 <run_edit_alarm+0x68>
    29ac:	84 36       	cpi	r24, 0x64	; 100
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <run_edit_alarm+0x1a>
    29b0:	e4 c0       	rjmp	.+456    	; 0x2b7a <run_edit_alarm+0x1e2>
    29b2:	1b c0       	rjmp	.+54     	; 0x29ea <run_edit_alarm+0x52>
    29b4:	8c 39       	cpi	r24, 0x9C	; 156
    29b6:	61 f0       	breq	.+24     	; 0x29d0 <run_edit_alarm+0x38>
    29b8:	8d 39       	cpi	r24, 0x9D	; 157
    29ba:	20 f4       	brcc	.+8      	; 0x29c4 <run_edit_alarm+0x2c>
    29bc:	8c 36       	cpi	r24, 0x6C	; 108
    29be:	09 f0       	breq	.+2      	; 0x29c2 <run_edit_alarm+0x2a>
    29c0:	dc c0       	rjmp	.+440    	; 0x2b7a <run_edit_alarm+0x1e2>
    29c2:	cc c0       	rjmp	.+408    	; 0x2b5c <run_edit_alarm+0x1c4>
    29c4:	80 3a       	cpi	r24, 0xA0	; 160
    29c6:	71 f0       	breq	.+28     	; 0x29e4 <run_edit_alarm+0x4c>
    29c8:	8d 3f       	cpi	r24, 0xFD	; 253
    29ca:	09 f0       	breq	.+2      	; 0x29ce <run_edit_alarm+0x36>
    29cc:	d6 c0       	rjmp	.+428    	; 0x2b7a <run_edit_alarm+0x1e2>
    29ce:	c3 c0       	rjmp	.+390    	; 0x2b56 <run_edit_alarm+0x1be>
    case EVENT_NOKEY:
	  nokey = 0;
    29d0:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    29d4:	8c e6       	ldi	r24, 0x6C	; 108
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	70 e0       	ldi	r23, 0x00	; 0
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    29e2:	08 95       	ret
    case EVENT_KEY_PRESS:
	  nokey = 0;
    29e4:	10 92 1f 05 	sts	0x051F, r1
    break;
    29e8:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    29ea:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    29ee:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      SET_STATE(run_standby);
    29f2:	87 ef       	ldi	r24, 0xF7	; 247
    29f4:	90 e1       	ldi	r25, 0x10	; 16
    29f6:	90 93 a6 00 	sts	0x00A6, r25
    29fa:	80 93 a5 00 	sts	0x00A5, r24
    break;
    29fe:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_alarm();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_alarm();
    2a06:	0e 94 de 13 	call	0x27bc	; 0x27bc <show_lcd_edit_alarm>
      switch(nedit) {
    2a0a:	80 91 23 05 	lds	r24, 0x0523
    2a0e:	82 30       	cpi	r24, 0x02	; 2
    2a10:	89 f0       	breq	.+34     	; 0x2a34 <run_edit_alarm+0x9c>
    2a12:	83 30       	cpi	r24, 0x03	; 3
    2a14:	50 f5       	brcc	.+84     	; 0x2a6a <run_edit_alarm+0xd2>
    2a16:	88 23       	and	r24, r24
    2a18:	61 f1       	breq	.+88     	; 0x2a72 <run_edit_alarm+0xda>
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	09 f0       	breq	.+2      	; 0x2a20 <run_edit_alarm+0x88>
    2a1e:	67 c0       	rjmp	.+206    	; 0x2aee <run_edit_alarm+0x156>
        case ALARM_ONOFF:
		  a_onoff = !a_onoff;
        break;
        case ALARM_HOUR:
		  if (a_hh > 0) a_hh--; else a_hh = 23;
    2a20:	80 91 a2 05 	lds	r24, 0x05A2
    2a24:	88 23       	and	r24, r24
    2a26:	11 f0       	breq	.+4      	; 0x2a2c <run_edit_alarm+0x94>
    2a28:	81 50       	subi	r24, 0x01	; 1
    2a2a:	01 c0       	rjmp	.+2      	; 0x2a2e <run_edit_alarm+0x96>
    2a2c:	87 e1       	ldi	r24, 0x17	; 23
    2a2e:	80 93 a2 05 	sts	0x05A2, r24
    2a32:	5d c0       	rjmp	.+186    	; 0x2aee <run_edit_alarm+0x156>
        break;
        case ALARM_MIN:
		  if (a_mm > 0) a_mm--; else a_mm = 59;
    2a34:	80 91 73 05 	lds	r24, 0x0573
    2a38:	88 23       	and	r24, r24
    2a3a:	11 f0       	breq	.+4      	; 0x2a40 <run_edit_alarm+0xa8>
    2a3c:	81 50       	subi	r24, 0x01	; 1
    2a3e:	01 c0       	rjmp	.+2      	; 0x2a42 <run_edit_alarm+0xaa>
    2a40:	8b e3       	ldi	r24, 0x3B	; 59
    2a42:	80 93 73 05 	sts	0x0573, r24
    2a46:	53 c0       	rjmp	.+166    	; 0x2aee <run_edit_alarm+0x156>
      }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_alarm();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_alarm();
    2a4e:	0e 94 de 13 	call	0x27bc	; 0x27bc <show_lcd_edit_alarm>
      switch(nedit) {
    2a52:	80 91 23 05 	lds	r24, 0x0523
    2a56:	82 30       	cpi	r24, 0x02	; 2
    2a58:	e9 f0       	breq	.+58     	; 0x2a94 <run_edit_alarm+0xfc>
    2a5a:	83 30       	cpi	r24, 0x03	; 3
    2a5c:	30 f4       	brcc	.+12     	; 0x2a6a <run_edit_alarm+0xd2>
    2a5e:	88 23       	and	r24, r24
    2a60:	41 f0       	breq	.+16     	; 0x2a72 <run_edit_alarm+0xda>
    2a62:	81 30       	cpi	r24, 0x01	; 1
    2a64:	09 f0       	breq	.+2      	; 0x2a68 <run_edit_alarm+0xd0>
    2a66:	43 c0       	rjmp	.+134    	; 0x2aee <run_edit_alarm+0x156>
    2a68:	0c c0       	rjmp	.+24     	; 0x2a82 <run_edit_alarm+0xea>
    2a6a:	8a 30       	cpi	r24, 0x0A	; 10
    2a6c:	08 f0       	brcs	.+2      	; 0x2a70 <run_edit_alarm+0xd8>
    2a6e:	3f c0       	rjmp	.+126    	; 0x2aee <run_edit_alarm+0x156>
    2a70:	1a c0       	rjmp	.+52     	; 0x2aa6 <run_edit_alarm+0x10e>
        case ALARM_ONOFF:
		  a_onoff = !a_onoff;
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 91 6b 05 	lds	r25, 0x056B
    2a78:	91 11       	cpse	r25, r1
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	80 93 6b 05 	sts	0x056B, r24
        break;
    2a80:	36 c0       	rjmp	.+108    	; 0x2aee <run_edit_alarm+0x156>
        case ALARM_HOUR:
		  if (a_hh < 23) a_hh++; else a_hh = 0;
    2a82:	80 91 a2 05 	lds	r24, 0x05A2
    2a86:	87 31       	cpi	r24, 0x17	; 23
    2a88:	10 f4       	brcc	.+4      	; 0x2a8e <run_edit_alarm+0xf6>
    2a8a:	8f 5f       	subi	r24, 0xFF	; 255
    2a8c:	d0 cf       	rjmp	.-96     	; 0x2a2e <run_edit_alarm+0x96>
    2a8e:	10 92 a2 05 	sts	0x05A2, r1
    2a92:	2d c0       	rjmp	.+90     	; 0x2aee <run_edit_alarm+0x156>
        break;
        case ALARM_MIN:
		  if (a_mm < 59) a_mm++; else a_mm = 0;
    2a94:	80 91 73 05 	lds	r24, 0x0573
    2a98:	8b 33       	cpi	r24, 0x3B	; 59
    2a9a:	10 f4       	brcc	.+4      	; 0x2aa0 <run_edit_alarm+0x108>
    2a9c:	8f 5f       	subi	r24, 0xFF	; 255
    2a9e:	d1 cf       	rjmp	.-94     	; 0x2a42 <run_edit_alarm+0xaa>
    2aa0:	10 92 73 05 	sts	0x0573, r1
    2aa4:	24 c0       	rjmp	.+72     	; 0x2aee <run_edit_alarm+0x156>
        case ALARM_WE:
        case ALARM_TH:
        case ALARM_FR:
        case ALARM_SA:
        case ALARM_SU:
		  if (BitIsSet(a_wday, nedit - ALARM_MO)) ClearBit(a_wday, nedit - ALARM_MO); else SetBit(a_wday, nedit - ALARM_MO);
    2aa6:	60 91 71 05 	lds	r22, 0x0571
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	03 97       	sbiw	r24, 0x03	; 3
    2aae:	46 2f       	mov	r20, r22
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	08 2e       	mov	r0, r24
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <run_edit_alarm+0x122>
    2ab6:	55 95       	asr	r21
    2ab8:	47 95       	ror	r20
    2aba:	0a 94       	dec	r0
    2abc:	e2 f7       	brpl	.-8      	; 0x2ab6 <run_edit_alarm+0x11e>
    2abe:	40 ff       	sbrs	r20, 0
    2ac0:	0c c0       	rjmp	.+24     	; 0x2ada <run_edit_alarm+0x142>
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <run_edit_alarm+0x134>
    2ac8:	44 0f       	add	r20, r20
    2aca:	55 1f       	adc	r21, r21
    2acc:	8a 95       	dec	r24
    2ace:	e2 f7       	brpl	.-8      	; 0x2ac8 <run_edit_alarm+0x130>
    2ad0:	40 95       	com	r20
    2ad2:	46 23       	and	r20, r22
    2ad4:	40 93 71 05 	sts	0x0571, r20
    2ad8:	0a c0       	rjmp	.+20     	; 0x2aee <run_edit_alarm+0x156>
    2ada:	21 e0       	ldi	r18, 0x01	; 1
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	02 c0       	rjmp	.+4      	; 0x2ae4 <run_edit_alarm+0x14c>
    2ae0:	22 0f       	add	r18, r18
    2ae2:	33 1f       	adc	r19, r19
    2ae4:	8a 95       	dec	r24
    2ae6:	e2 f7       	brpl	.-8      	; 0x2ae0 <run_edit_alarm+0x148>
    2ae8:	26 2b       	or	r18, r22
    2aea:	20 93 71 05 	sts	0x0571, r18
        break;
      }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2aee:	8d ef       	ldi	r24, 0xFD	; 253
    2af0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <RTOS_deleteTask>
    2af4:	30 c0       	rjmp	.+96     	; 0x2b56 <run_edit_alarm+0x1be>
      show_lcd_edit_alarm();
    break;
    case EVENT_KEY_SET:
	  if (nedit < ALARM_SU) {
    2af6:	80 91 23 05 	lds	r24, 0x0523
    2afa:	89 30       	cpi	r24, 0x09	; 9
    2afc:	d0 f4       	brcc	.+52     	; 0x2b32 <run_edit_alarm+0x19a>
	    if (a_onoff == 1) {
    2afe:	90 91 6b 05 	lds	r25, 0x056B
    2b02:	91 30       	cpi	r25, 0x01	; 1
    2b04:	21 f4       	brne	.+8      	; 0x2b0e <run_edit_alarm+0x176>
	      nedit++;
    2b06:	8f 5f       	subi	r24, 0xFF	; 255
    2b08:	80 93 23 05 	sts	0x0523, r24
    2b0c:	09 c0       	rjmp	.+18     	; 0x2b20 <run_edit_alarm+0x188>
        } else {
          save_alarm_param();
    2b0e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <save_alarm_param>
          RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2b12:	8c e6       	ldi	r24, 0x6C	; 108
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
		}
	    blinks = 1;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	80 93 1e 05 	sts	0x051E, r24
        show_lcd_edit_alarm();
    2b26:	0e 94 de 13 	call	0x27bc	; 0x27bc <show_lcd_edit_alarm>
	    RTOS_deleteTask(EVENT_TIMER_SECOND);
    2b2a:	8d ef       	ldi	r24, 0xFD	; 253
    2b2c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <RTOS_deleteTask>
    2b30:	09 c0       	rjmp	.+18     	; 0x2b44 <run_edit_alarm+0x1ac>
	  } else {
        save_alarm_param();
    2b32:	0e 94 2a 0a 	call	0x1454	; 0x1454 <save_alarm_param>
        RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2b36:	8c e6       	ldi	r24, 0x6C	; 108
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	70 e0       	ldi	r23, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
	  }
	  if (nedit >= ALARM_MO) KBD_set_type(0); else KBD_set_type(1);
    2b44:	80 91 23 05 	lds	r24, 0x0523
    2b48:	83 30       	cpi	r24, 0x03	; 3
    2b4a:	10 f0       	brcs	.+4      	; 0x2b50 <run_edit_alarm+0x1b8>
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <run_edit_alarm+0x1ba>
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	0e 94 54 05 	call	0xaa8	; 0xaa8 <KBD_set_type>
      show_lcd_edit_alarm();
    2b56:	0e 94 de 13 	call	0x27bc	; 0x27bc <show_lcd_edit_alarm>
    break;
    2b5a:	08 95       	ret
    case EVENT_KEY_MENU:
      show_lcd_edit_alarm();
    2b5c:	0e 94 de 13 	call	0x27bc	; 0x27bc <show_lcd_edit_alarm>
      nokey = 0;
    2b60:	10 92 1f 05 	sts	0x051F, r1
	  KBD_set_type(1);
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	0e 94 54 05 	call	0xaa8	; 0xaa8 <KBD_set_type>
      SET_STATE(run_option);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	9b e1       	ldi	r25, 0x1B	; 27
    2b6e:	90 93 a6 00 	sts	0x00A6, r25
    2b72:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2b76:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
    2b7a:	08 95       	ret

00002b7c <show_lcd_edit_as_wait>:
  }
}
//=============================================================================
void show_lcd_edit_as_wait(void)
{
  LCD_SetXY(15, 2); 
    2b7c:	8f e0       	ldi	r24, 0x0F	; 15
    2b7e:	62 e0       	ldi	r22, 0x02	; 2
    2b80:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (blinks) print_dec(old_as_wait, 2, ' '); else { LCD_dat(' '); LCD_dat(' '); }
    2b84:	80 91 1e 05 	lds	r24, 0x051E
    2b88:	88 23       	and	r24, r24
    2b8a:	41 f0       	breq	.+16     	; 0x2b9c <show_lcd_edit_as_wait+0x20>
    2b8c:	80 91 9f 05 	lds	r24, 0x059F
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	62 e0       	ldi	r22, 0x02	; 2
    2b94:	40 e2       	ldi	r20, 0x20	; 32
    2b96:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2b9a:	06 c0       	rjmp	.+12     	; 0x2ba8 <show_lcd_edit_as_wait+0x2c>
    2b9c:	80 e2       	ldi	r24, 0x20	; 32
    2b9e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2ba2:	80 e2       	ldi	r24, 0x20	; 32
    2ba4:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
  LCD_puts(MSG_SEC); 
    2ba8:	89 ef       	ldi	r24, 0xF9	; 249
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
}
    2bb0:	08 95       	ret

00002bb2 <run_edit_as_wait>:
}
//=============================================================================
//=============================================================================
void run_edit_as_wait(unsigned char event)
{
  switch(event) {
    2bb2:	8b 36       	cpi	r24, 0x6B	; 107
    2bb4:	a9 f1       	breq	.+106    	; 0x2c20 <run_edit_as_wait+0x6e>
    2bb6:	8c 36       	cpi	r24, 0x6C	; 108
    2bb8:	48 f4       	brcc	.+18     	; 0x2bcc <run_edit_as_wait+0x1a>
    2bba:	87 36       	cpi	r24, 0x67	; 103
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <run_edit_as_wait+0xe>
    2bbe:	42 c0       	rjmp	.+132    	; 0x2c44 <run_edit_as_wait+0x92>
    2bc0:	8a 36       	cpi	r24, 0x6A	; 106
    2bc2:	19 f1       	breq	.+70     	; 0x2c0a <run_edit_as_wait+0x58>
    2bc4:	84 36       	cpi	r24, 0x64	; 100
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <run_edit_as_wait+0x18>
    2bc8:	5a c0       	rjmp	.+180    	; 0x2c7e <run_edit_as_wait+0xcc>
    2bca:	14 c0       	rjmp	.+40     	; 0x2bf4 <run_edit_as_wait+0x42>
    2bcc:	8c 39       	cpi	r24, 0x9C	; 156
    2bce:	61 f0       	breq	.+24     	; 0x2be8 <run_edit_as_wait+0x36>
    2bd0:	8d 39       	cpi	r24, 0x9D	; 157
    2bd2:	20 f4       	brcc	.+8      	; 0x2bdc <run_edit_as_wait+0x2a>
    2bd4:	8c 36       	cpi	r24, 0x6C	; 108
    2bd6:	09 f0       	breq	.+2      	; 0x2bda <run_edit_as_wait+0x28>
    2bd8:	52 c0       	rjmp	.+164    	; 0x2c7e <run_edit_as_wait+0xcc>
    2bda:	46 c0       	rjmp	.+140    	; 0x2c68 <run_edit_as_wait+0xb6>
    2bdc:	80 3a       	cpi	r24, 0xA0	; 160
    2bde:	39 f0       	breq	.+14     	; 0x2bee <run_edit_as_wait+0x3c>
    2be0:	8d 3f       	cpi	r24, 0xFD	; 253
    2be2:	09 f0       	breq	.+2      	; 0x2be6 <run_edit_as_wait+0x34>
    2be4:	4c c0       	rjmp	.+152    	; 0x2c7e <run_edit_as_wait+0xcc>
    2be6:	2b c0       	rjmp	.+86     	; 0x2c3e <run_edit_as_wait+0x8c>
    case EVENT_NOKEY:
	  nokey = 0;
    2be8:	10 92 1f 05 	sts	0x051F, r1
    2bec:	35 c0       	rjmp	.+106    	; 0x2c58 <run_edit_as_wait+0xa6>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2bee:	10 92 1f 05 	sts	0x051F, r1
    break;
    2bf2:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    2bf4:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    2bf8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      SET_STATE(run_standby);
    2bfc:	87 ef       	ldi	r24, 0xF7	; 247
    2bfe:	90 e1       	ldi	r25, 0x10	; 16
    2c00:	90 93 a6 00 	sts	0x00A6, r25
    2c04:	80 93 a5 00 	sts	0x00A5, r24
    break;
    2c08:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_as_wait();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_as_wait();
    2c10:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <show_lcd_edit_as_wait>
	  if (old_as_wait > MIN_AS_WAIT) old_as_wait--;
    2c14:	80 91 9f 05 	lds	r24, 0x059F
    2c18:	88 23       	and	r24, r24
    2c1a:	71 f0       	breq	.+28     	; 0x2c38 <run_edit_as_wait+0x86>
    2c1c:	81 50       	subi	r24, 0x01	; 1
    2c1e:	0a c0       	rjmp	.+20     	; 0x2c34 <run_edit_as_wait+0x82>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_as_wait();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_as_wait();
    2c26:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <show_lcd_edit_as_wait>
	  if (old_as_wait < MAX_AS_WAIT) old_as_wait++;
    2c2a:	80 91 9f 05 	lds	r24, 0x059F
    2c2e:	8a 30       	cpi	r24, 0x0A	; 10
    2c30:	18 f4       	brcc	.+6      	; 0x2c38 <run_edit_as_wait+0x86>
    2c32:	8f 5f       	subi	r24, 0xFF	; 255
    2c34:	80 93 9f 05 	sts	0x059F, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2c38:	8d ef       	ldi	r24, 0xFD	; 253
    2c3a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <RTOS_deleteTask>
      show_lcd_edit_as_wait();
    2c3e:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <show_lcd_edit_as_wait>
    break;
    2c42:	08 95       	ret
    case EVENT_KEY_SET:
      nedit = 0;
    2c44:	10 92 23 05 	sts	0x0523, r1
	  as_wait = old_as_wait;
    2c48:	80 91 9f 05 	lds	r24, 0x059F
    2c4c:	80 93 76 05 	sts	0x0576, r24
	  save_as_wait(as_wait);
    2c50:	0e 94 84 0a 	call	0x1508	; 0x1508 <save_as_wait>
      show_lcd_edit_as_wait();
    2c54:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <show_lcd_edit_as_wait>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2c58:	8c e6       	ldi	r24, 0x6C	; 108
    2c5a:	60 e0       	ldi	r22, 0x00	; 0
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	50 e0       	ldi	r21, 0x00	; 0
    2c62:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    2c66:	08 95       	ret
    case EVENT_KEY_MENU:
	  KBD_set_type(1);
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <KBD_set_type>
      SET_STATE(run_option);
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	9b e1       	ldi	r25, 0x1B	; 27
    2c72:	90 93 a6 00 	sts	0x00A6, r25
    2c76:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2c7a:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
    2c7e:	08 95       	ret

00002c80 <show_lcd_edit_temp_max>:
  }
}
//=============================================================================
void show_lcd_edit_temp_max(void)
{
  LCD_SetXY(14, 2); 
    2c80:	8e e0       	ldi	r24, 0x0E	; 14
    2c82:	62 e0       	ldi	r22, 0x02	; 2
    2c84:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (blinks) print_dec(old_max_temp, 2, ' '); else { LCD_dat(' '); LCD_dat(' '); }
    2c88:	80 91 1e 05 	lds	r24, 0x051E
    2c8c:	88 23       	and	r24, r24
    2c8e:	41 f0       	breq	.+16     	; 0x2ca0 <show_lcd_edit_temp_max+0x20>
    2c90:	80 91 6f 05 	lds	r24, 0x056F
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	62 e0       	ldi	r22, 0x02	; 2
    2c98:	40 e2       	ldi	r20, 0x20	; 32
    2c9a:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2c9e:	06 c0       	rjmp	.+12     	; 0x2cac <show_lcd_edit_temp_max+0x2c>
    2ca0:	80 e2       	ldi	r24, 0x20	; 32
    2ca2:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2ca6:	80 e2       	ldi	r24, 0x20	; 32
    2ca8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
  LCD_dat('C'); LCD_space(3);
    2cac:	83 e4       	ldi	r24, 0x43	; 67
    2cae:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2cb2:	83 e0       	ldi	r24, 0x03	; 3
    2cb4:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
}
    2cb8:	08 95       	ret

00002cba <run_edit_temp_max>:
}
//=============================================================================
//=============================================================================
void run_edit_temp_max(unsigned char event)
{
  switch(event) {
    2cba:	8b 36       	cpi	r24, 0x6B	; 107
    2cbc:	a9 f1       	breq	.+106    	; 0x2d28 <run_edit_temp_max+0x6e>
    2cbe:	8c 36       	cpi	r24, 0x6C	; 108
    2cc0:	48 f4       	brcc	.+18     	; 0x2cd4 <run_edit_temp_max+0x1a>
    2cc2:	87 36       	cpi	r24, 0x67	; 103
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <run_edit_temp_max+0xe>
    2cc6:	42 c0       	rjmp	.+132    	; 0x2d4c <run_edit_temp_max+0x92>
    2cc8:	8a 36       	cpi	r24, 0x6A	; 106
    2cca:	19 f1       	breq	.+70     	; 0x2d12 <run_edit_temp_max+0x58>
    2ccc:	84 36       	cpi	r24, 0x64	; 100
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <run_edit_temp_max+0x18>
    2cd0:	5a c0       	rjmp	.+180    	; 0x2d86 <run_edit_temp_max+0xcc>
    2cd2:	14 c0       	rjmp	.+40     	; 0x2cfc <run_edit_temp_max+0x42>
    2cd4:	8c 39       	cpi	r24, 0x9C	; 156
    2cd6:	61 f0       	breq	.+24     	; 0x2cf0 <run_edit_temp_max+0x36>
    2cd8:	8d 39       	cpi	r24, 0x9D	; 157
    2cda:	20 f4       	brcc	.+8      	; 0x2ce4 <run_edit_temp_max+0x2a>
    2cdc:	8c 36       	cpi	r24, 0x6C	; 108
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <run_edit_temp_max+0x28>
    2ce0:	52 c0       	rjmp	.+164    	; 0x2d86 <run_edit_temp_max+0xcc>
    2ce2:	46 c0       	rjmp	.+140    	; 0x2d70 <run_edit_temp_max+0xb6>
    2ce4:	80 3a       	cpi	r24, 0xA0	; 160
    2ce6:	39 f0       	breq	.+14     	; 0x2cf6 <run_edit_temp_max+0x3c>
    2ce8:	8d 3f       	cpi	r24, 0xFD	; 253
    2cea:	09 f0       	breq	.+2      	; 0x2cee <run_edit_temp_max+0x34>
    2cec:	4c c0       	rjmp	.+152    	; 0x2d86 <run_edit_temp_max+0xcc>
    2cee:	2b c0       	rjmp	.+86     	; 0x2d46 <run_edit_temp_max+0x8c>
    case EVENT_NOKEY:
	  nokey = 0;
    2cf0:	10 92 1f 05 	sts	0x051F, r1
    2cf4:	35 c0       	rjmp	.+106    	; 0x2d60 <run_edit_temp_max+0xa6>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2cf6:	10 92 1f 05 	sts	0x051F, r1
    break;
    2cfa:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    2cfc:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    2d00:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      SET_STATE(run_standby);
    2d04:	87 ef       	ldi	r24, 0xF7	; 247
    2d06:	90 e1       	ldi	r25, 0x10	; 16
    2d08:	90 93 a6 00 	sts	0x00A6, r25
    2d0c:	80 93 a5 00 	sts	0x00A5, r24
    break;
    2d10:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_temp_max();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_temp_max();
    2d18:	0e 94 40 16 	call	0x2c80	; 0x2c80 <show_lcd_edit_temp_max>
	  if (old_max_temp > MIN_TEMP) old_max_temp--;
    2d1c:	80 91 6f 05 	lds	r24, 0x056F
    2d20:	8f 31       	cpi	r24, 0x1F	; 31
    2d22:	70 f0       	brcs	.+28     	; 0x2d40 <run_edit_temp_max+0x86>
    2d24:	81 50       	subi	r24, 0x01	; 1
    2d26:	0a c0       	rjmp	.+20     	; 0x2d3c <run_edit_temp_max+0x82>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_temp_max();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_temp_max();
    2d2e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <show_lcd_edit_temp_max>
	  if (old_max_temp < MAX_TEMP) old_max_temp++;
    2d32:	80 91 6f 05 	lds	r24, 0x056F
    2d36:	85 35       	cpi	r24, 0x55	; 85
    2d38:	18 f4       	brcc	.+6      	; 0x2d40 <run_edit_temp_max+0x86>
    2d3a:	8f 5f       	subi	r24, 0xFF	; 255
    2d3c:	80 93 6f 05 	sts	0x056F, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2d40:	8d ef       	ldi	r24, 0xFD	; 253
    2d42:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <RTOS_deleteTask>
      show_lcd_edit_temp_max();
    2d46:	0e 94 40 16 	call	0x2c80	; 0x2c80 <show_lcd_edit_temp_max>
    break;
    2d4a:	08 95       	ret
    case EVENT_KEY_SET:
      nedit = 0;
    2d4c:	10 92 23 05 	sts	0x0523, r1
	  max_temp = old_max_temp;
    2d50:	80 91 6f 05 	lds	r24, 0x056F
    2d54:	80 93 a1 05 	sts	0x05A1, r24
      save_max_temperature(max_temp);
    2d58:	0e 94 94 0a 	call	0x1528	; 0x1528 <save_max_temperature>
      show_lcd_edit_temp_max();
    2d5c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <show_lcd_edit_temp_max>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2d60:	8c e6       	ldi	r24, 0x6C	; 108
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	70 e0       	ldi	r23, 0x00	; 0
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	50 e0       	ldi	r21, 0x00	; 0
    2d6a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    2d6e:	08 95       	ret
    case EVENT_KEY_MENU:
	  KBD_set_type(1);
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	0e 94 54 05 	call	0xaa8	; 0xaa8 <KBD_set_type>
      SET_STATE(run_option);
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	9b e1       	ldi	r25, 0x1B	; 27
    2d7a:	90 93 a6 00 	sts	0x00A6, r25
    2d7e:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2d82:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
    2d86:	08 95       	ret

00002d88 <show_lcd_edit_stb_out>:
  }
}
//=============================================================================
void show_lcd_edit_stb_out(void)
{
  LCD_SetXY(16, 2); 
    2d88:	80 e1       	ldi	r24, 0x10	; 16
    2d8a:	62 e0       	ldi	r22, 0x02	; 2
    2d8c:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (blinks == 1) print_dec(stb_out, 1, ' '); else LCD_dat(' ');
    2d90:	80 91 1e 05 	lds	r24, 0x051E
    2d94:	81 30       	cpi	r24, 0x01	; 1
    2d96:	41 f4       	brne	.+16     	; 0x2da8 <show_lcd_edit_stb_out+0x20>
    2d98:	80 91 74 05 	lds	r24, 0x0574
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	61 e0       	ldi	r22, 0x01	; 1
    2da0:	40 e2       	ldi	r20, 0x20	; 32
    2da2:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2da6:	08 95       	ret
    2da8:	80 e2       	ldi	r24, 0x20	; 32
    2daa:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
    2dae:	08 95       	ret

00002db0 <run_edit_stb_out>:
}
//=============================================================================
//=============================================================================
void run_edit_stb_out(unsigned char event)
{
  switch(event) {
    2db0:	8b 36       	cpi	r24, 0x6B	; 107
    2db2:	c1 f1       	breq	.+112    	; 0x2e24 <run_edit_stb_out+0x74>
    2db4:	8c 36       	cpi	r24, 0x6C	; 108
    2db6:	48 f4       	brcc	.+18     	; 0x2dca <run_edit_stb_out+0x1a>
    2db8:	87 36       	cpi	r24, 0x67	; 103
    2dba:	09 f4       	brne	.+2      	; 0x2dbe <run_edit_stb_out+0xe>
    2dbc:	45 c0       	rjmp	.+138    	; 0x2e48 <run_edit_stb_out+0x98>
    2dbe:	8a 36       	cpi	r24, 0x6A	; 106
    2dc0:	89 f1       	breq	.+98     	; 0x2e24 <run_edit_stb_out+0x74>
    2dc2:	84 36       	cpi	r24, 0x64	; 100
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <run_edit_stb_out+0x18>
    2dc6:	67 c0       	rjmp	.+206    	; 0x2e96 <run_edit_stb_out+0xe6>
    2dc8:	1b c0       	rjmp	.+54     	; 0x2e00 <run_edit_stb_out+0x50>
    2dca:	8c 39       	cpi	r24, 0x9C	; 156
    2dcc:	61 f0       	breq	.+24     	; 0x2de6 <run_edit_stb_out+0x36>
    2dce:	8d 39       	cpi	r24, 0x9D	; 157
    2dd0:	20 f4       	brcc	.+8      	; 0x2dda <run_edit_stb_out+0x2a>
    2dd2:	8c 36       	cpi	r24, 0x6C	; 108
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <run_edit_stb_out+0x28>
    2dd6:	5f c0       	rjmp	.+190    	; 0x2e96 <run_edit_stb_out+0xe6>
    2dd8:	4c c0       	rjmp	.+152    	; 0x2e72 <run_edit_stb_out+0xc2>
    2dda:	80 3a       	cpi	r24, 0xA0	; 160
    2ddc:	71 f0       	breq	.+28     	; 0x2dfa <run_edit_stb_out+0x4a>
    2dde:	8d 3f       	cpi	r24, 0xFD	; 253
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <run_edit_stb_out+0x34>
    2de2:	59 c0       	rjmp	.+178    	; 0x2e96 <run_edit_stb_out+0xe6>
    2de4:	2e c0       	rjmp	.+92     	; 0x2e42 <run_edit_stb_out+0x92>
    case EVENT_NOKEY:
	  nokey = 0;
    2de6:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2dea:	8c e6       	ldi	r24, 0x6C	; 108
    2dec:	60 e0       	ldi	r22, 0x00	; 0
    2dee:	70 e0       	ldi	r23, 0x00	; 0
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	50 e0       	ldi	r21, 0x00	; 0
    2df4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    2df8:	08 95       	ret
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2dfa:	10 92 1f 05 	sts	0x051F, r1
    break;
    2dfe:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    2e00:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    2e04:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    2e08:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	11 f4       	brne	.+4      	; 0x2e14 <run_edit_stb_out+0x64>
    2e10:	c2 9a       	sbi	0x18, 2	; 24
    2e12:	01 c0       	rjmp	.+2      	; 0x2e16 <run_edit_stb_out+0x66>
    2e14:	c2 98       	cbi	0x18, 2	; 24
      SET_STATE(run_standby);
    2e16:	87 ef       	ldi	r24, 0xF7	; 247
    2e18:	90 e1       	ldi	r25, 0x10	; 16
    2e1a:	90 93 a6 00 	sts	0x00A6, r25
    2e1e:	80 93 a5 00 	sts	0x00A5, r24
    break;
    2e22:	08 95       	ret
	  stb_out = !stb_out;
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_stb_out();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_stb_out();
    2e2a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <show_lcd_edit_stb_out>
	  stb_out = !stb_out;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 91 74 05 	lds	r25, 0x0574
    2e34:	91 11       	cpse	r25, r1
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	80 93 74 05 	sts	0x0574, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2e3c:	8d ef       	ldi	r24, 0xFD	; 253
    2e3e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <RTOS_deleteTask>
      show_lcd_edit_stb_out();
    2e42:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <show_lcd_edit_stb_out>
    break;
    2e46:	08 95       	ret
    case EVENT_KEY_SET:
	  save_stb_out(stb_out);
    2e48:	80 91 74 05 	lds	r24, 0x0574
    2e4c:	0e 94 a6 0a 	call	0x154c	; 0x154c <save_stb_out>
      nedit = 0;
    2e50:	10 92 23 05 	sts	0x0523, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2e54:	8c e6       	ldi	r24, 0x6C	; 108
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	70 e0       	ldi	r23, 0x00	; 0
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	50 e0       	ldi	r21, 0x00	; 0
    2e5e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
      show_lcd_edit_stb_out();
    2e62:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <show_lcd_edit_stb_out>
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    2e66:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
    2e6a:	81 30       	cpi	r24, 0x01	; 1
    2e6c:	89 f0       	breq	.+34     	; 0x2e90 <run_edit_stb_out+0xe0>
    2e6e:	c2 98       	cbi	0x18, 2	; 24
    2e70:	08 95       	ret
    break;
    case EVENT_KEY_MENU:
	  KBD_set_type(1);
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	0e 94 54 05 	call	0xaa8	; 0xaa8 <KBD_set_type>
      SET_STATE(run_option);
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	9b e1       	ldi	r25, 0x1B	; 27
    2e7c:	90 93 a6 00 	sts	0x00A6, r25
    2e80:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2e84:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    2e88:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
    2e8c:	81 30       	cpi	r24, 0x01	; 1
    2e8e:	11 f4       	brne	.+4      	; 0x2e94 <run_edit_stb_out+0xe4>
    2e90:	c2 9a       	sbi	0x18, 2	; 24
    2e92:	08 95       	ret
    2e94:	c2 98       	cbi	0x18, 2	; 24
    2e96:	08 95       	ret

00002e98 <show_lcd_edit_fm_stations>:
    break;
  }
}
//=============================================================================
void show_lcd_edit_fm_stations(void)
{
    2e98:	1f 93       	push	r17
  LCD_SetXY(0, 0); LCD_puts(optionmenu[OM_SET_FM_STATIONS]);
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2ea2:	80 91 cd 02 	lds	r24, 0x02CD
    2ea6:	90 91 ce 02 	lds	r25, 0x02CE
    2eaa:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
  LCD_SetXY(0, 1); LCD_puts(MSG_CHANNEL); print_dec(channel + 1, 2, '0'); LCD_dat(' ');
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	61 e0       	ldi	r22, 0x01	; 1
    2eb2:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2eb6:	89 ec       	ldi	r24, 0xC9	; 201
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    2ebe:	80 91 2a 05 	lds	r24, 0x052A
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	01 96       	adiw	r24, 0x01	; 1
    2ec6:	62 e0       	ldi	r22, 0x02	; 2
    2ec8:	40 e3       	ldi	r20, 0x30	; 48
    2eca:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    2ece:	80 e2       	ldi	r24, 0x20	; 32
    2ed0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
  show_freq(); if ((nedit == FM_NORMAL_MODE) || (blinks == 1)) LCD_puts(MSG_MHZ); else LCD_space(3);
    2ed4:	0e 94 40 0c 	call	0x1880	; 0x1880 <show_freq>
    2ed8:	80 91 23 05 	lds	r24, 0x0523
    2edc:	88 23       	and	r24, r24
    2ede:	21 f0       	breq	.+8      	; 0x2ee8 <show_lcd_edit_fm_stations+0x50>
    2ee0:	80 91 1e 05 	lds	r24, 0x051E
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	29 f4       	brne	.+10     	; 0x2ef2 <show_lcd_edit_fm_stations+0x5a>
    2ee8:	81 ed       	ldi	r24, 0xD1	; 209
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    2ef0:	03 c0       	rjmp	.+6      	; 0x2ef8 <show_lcd_edit_fm_stations+0x60>
    2ef2:	83 e0       	ldi	r24, 0x03	; 3
    2ef4:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
  LCD_SetXY(0, 2); LCD_puts(mainmenu[MM_VOLUME]);
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	62 e0       	ldi	r22, 0x02	; 2
    2efc:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2f00:	80 91 2a 02 	lds	r24, 0x022A
    2f04:	90 91 2b 02 	lds	r25, 0x022B
    2f08:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
  LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    2f0c:	82 e1       	ldi	r24, 0x12	; 18
    2f0e:	62 e0       	ldi	r22, 0x02	; 2
    2f10:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2f14:	80 91 20 05 	lds	r24, 0x0520
    2f18:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	62 e0       	ldi	r22, 0x02	; 2
    2f20:	40 e3       	ldi	r20, 0x30	; 48
    2f22:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
  LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	63 e0       	ldi	r22, 0x03	; 3
    2f2a:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    2f2e:	80 91 20 05 	lds	r24, 0x0520
    2f32:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    2f36:	18 2f       	mov	r17, r24
    2f38:	80 91 20 05 	lds	r24, 0x0520
    2f3c:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <tda7313Get_Max_Param>
    2f40:	68 2f       	mov	r22, r24
    2f42:	81 2f       	mov	r24, r17
    2f44:	44 e1       	ldi	r20, 0x14	; 20
    2f46:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_progress_bar>
}
    2f4a:	1f 91       	pop	r17
    2f4c:	08 95       	ret

00002f4e <run_edit_fm_stations>:
  if (blinks == 1) print_dec(stb_out, 1, ' '); else LCD_dat(' ');
}
//=============================================================================
//=============================================================================
void run_edit_fm_stations(unsigned char event)
{
    2f4e:	1f 93       	push	r17
  switch(event) {
    2f50:	8c 39       	cpi	r24, 0x9C	; 156
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <run_edit_fm_stations+0x8>
    2f54:	6b c0       	rjmp	.+214    	; 0x302c <run_edit_fm_stations+0xde>
    2f56:	8d 39       	cpi	r24, 0x9D	; 157
    2f58:	e0 f4       	brcc	.+56     	; 0x2f92 <run_edit_fm_stations+0x44>
    2f5a:	88 36       	cpi	r24, 0x68	; 104
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <run_edit_fm_stations+0x12>
    2f5e:	90 c0       	rjmp	.+288    	; 0x3080 <run_edit_fm_stations+0x132>
    2f60:	89 36       	cpi	r24, 0x69	; 105
    2f62:	50 f4       	brcc	.+20     	; 0x2f78 <run_edit_fm_stations+0x2a>
    2f64:	86 36       	cpi	r24, 0x66	; 102
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <run_edit_fm_stations+0x1c>
    2f68:	0a c1       	rjmp	.+532    	; 0x317e <run_edit_fm_stations+0x230>
    2f6a:	87 36       	cpi	r24, 0x67	; 103
    2f6c:	08 f0       	brcs	.+2      	; 0x2f70 <run_edit_fm_stations+0x22>
    2f6e:	19 c1       	rjmp	.+562    	; 0x31a2 <run_edit_fm_stations+0x254>
    2f70:	84 36       	cpi	r24, 0x64	; 100
    2f72:	09 f0       	breq	.+2      	; 0x2f76 <run_edit_fm_stations+0x28>
    2f74:	83 c1       	rjmp	.+774    	; 0x327c <run_edit_fm_stations+0x32e>
    2f76:	80 c0       	rjmp	.+256    	; 0x3078 <run_edit_fm_stations+0x12a>
    2f78:	8a 36       	cpi	r24, 0x6A	; 106
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <run_edit_fm_stations+0x30>
    2f7c:	a4 c0       	rjmp	.+328    	; 0x30c6 <run_edit_fm_stations+0x178>
    2f7e:	8a 36       	cpi	r24, 0x6A	; 106
    2f80:	08 f4       	brcc	.+2      	; 0x2f84 <run_edit_fm_stations+0x36>
    2f82:	93 c0       	rjmp	.+294    	; 0x30aa <run_edit_fm_stations+0x15c>
    2f84:	8b 36       	cpi	r24, 0x6B	; 107
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <run_edit_fm_stations+0x3c>
    2f88:	c1 c0       	rjmp	.+386    	; 0x310c <run_edit_fm_stations+0x1be>
    2f8a:	8c 36       	cpi	r24, 0x6C	; 108
    2f8c:	09 f0       	breq	.+2      	; 0x2f90 <run_edit_fm_stations+0x42>
    2f8e:	76 c1       	rjmp	.+748    	; 0x327c <run_edit_fm_stations+0x32e>
    2f90:	3e c1       	rjmp	.+636    	; 0x320e <run_edit_fm_stations+0x2c0>
    2f92:	8a 3a       	cpi	r24, 0xAA	; 170
    2f94:	09 f4       	brne	.+2      	; 0x2f98 <run_edit_fm_stations+0x4a>
    2f96:	41 c0       	rjmp	.+130    	; 0x301a <run_edit_fm_stations+0xcc>
    2f98:	8b 3a       	cpi	r24, 0xAB	; 171
    2f9a:	80 f4       	brcc	.+32     	; 0x2fbc <run_edit_fm_stations+0x6e>
    2f9c:	84 3a       	cpi	r24, 0xA4	; 164
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <run_edit_fm_stations+0x54>
    2fa0:	56 c0       	rjmp	.+172    	; 0x304e <run_edit_fm_stations+0x100>
    2fa2:	85 3a       	cpi	r24, 0xA5	; 165
    2fa4:	20 f4       	brcc	.+8      	; 0x2fae <run_edit_fm_stations+0x60>
    2fa6:	80 3a       	cpi	r24, 0xA0	; 160
    2fa8:	09 f0       	breq	.+2      	; 0x2fac <run_edit_fm_stations+0x5e>
    2faa:	68 c1       	rjmp	.+720    	; 0x327c <run_edit_fm_stations+0x32e>
    2fac:	62 c0       	rjmp	.+196    	; 0x3072 <run_edit_fm_stations+0x124>
    2fae:	85 3a       	cpi	r24, 0xA5	; 165
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <run_edit_fm_stations+0x66>
    2fb2:	df c0       	rjmp	.+446    	; 0x3172 <run_edit_fm_stations+0x224>
    2fb4:	89 3a       	cpi	r24, 0xA9	; 169
    2fb6:	09 f0       	breq	.+2      	; 0x2fba <run_edit_fm_stations+0x6c>
    2fb8:	61 c1       	rjmp	.+706    	; 0x327c <run_edit_fm_stations+0x32e>
    2fba:	0b c0       	rjmp	.+22     	; 0x2fd2 <run_edit_fm_stations+0x84>
    2fbc:	8c 3a       	cpi	r24, 0xAC	; 172
    2fbe:	29 f1       	breq	.+74     	; 0x300a <run_edit_fm_stations+0xbc>
    2fc0:	8c 3a       	cpi	r24, 0xAC	; 172
    2fc2:	90 f0       	brcs	.+36     	; 0x2fe8 <run_edit_fm_stations+0x9a>
    2fc4:	8f 3a       	cpi	r24, 0xAF	; 175
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <run_edit_fm_stations+0x7c>
    2fc8:	2a c1       	rjmp	.+596    	; 0x321e <run_edit_fm_stations+0x2d0>
    2fca:	8d 3f       	cpi	r24, 0xFD	; 253
    2fcc:	09 f0       	breq	.+2      	; 0x2fd0 <run_edit_fm_stations+0x82>
    2fce:	56 c1       	rjmp	.+684    	; 0x327c <run_edit_fm_stations+0x32e>
    2fd0:	e5 c0       	rjmp	.+458    	; 0x319c <run_edit_fm_stations+0x24e>
    case EVENT_SET_STB_OUT_ON:
      if (load_stb_out() == 1) { LED_STB_OUT_0; } else { LED_STB_OUT_1; }
    2fd2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
    2fd6:	81 30       	cpi	r24, 0x01	; 1
    2fd8:	11 f4       	brne	.+4      	; 0x2fde <run_edit_fm_stations+0x90>
    2fda:	c2 98       	cbi	0x18, 2	; 24
    2fdc:	01 c0       	rjmp	.+2      	; 0x2fe0 <run_edit_fm_stations+0x92>
    2fde:	c2 9a       	sbi	0x18, 2	; 24
      RTOS_setTask(EVENT_SET_AS_WAIT_ON, 1000, 0);
    2fe0:	8b ea       	ldi	r24, 0xAB	; 171
    2fe2:	68 ee       	ldi	r22, 0xE8	; 232
    2fe4:	73 e0       	ldi	r23, 0x03	; 3
    2fe6:	16 c1       	rjmp	.+556    	; 0x3214 <run_edit_fm_stations+0x2c6>
    break;
    case EVENT_SET_AS_WAIT_ON:
      LED_AC_WAIT_on();
    2fe8:	c3 9a       	sbi	0x18, 3	; 24
      tuner_SetChan(tuner_GetChan(channel));
    2fea:	80 91 2a 05 	lds	r24, 0x052A
    2fee:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    2ff2:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
	  tda7313Set_Param(MM_VOLUME, tda7313_Load_vol_fm_edit());
    2ff6:	0e 94 b2 20 	call	0x4164	; 0x4164 <tda7313_Load_vol_fm_edit>
    2ffa:	68 2f       	mov	r22, r24
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <tda7313Set_Param>
      tda7313SetMute(0);
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
    3008:	c9 c0       	rjmp	.+402    	; 0x319c <run_edit_fm_stations+0x24e>
      show_lcd_edit_fm_stations();
    break;
    case EVENT_SET_AS_WAIT_OFF:
	  tuner_SetMute(1);
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	0e 94 65 21 	call	0x42ca	; 0x42ca <tea5767SetMute>
      LED_AC_WAIT_off();
    3010:	c3 98       	cbi	0x18, 3	; 24
      RTOS_setTask(EVENT_SET_STB_OUT_OFF, 100, 0);
    3012:	8a ea       	ldi	r24, 0xAA	; 170
    3014:	64 e6       	ldi	r22, 0x64	; 100
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	fd c0       	rjmp	.+506    	; 0x3214 <run_edit_fm_stations+0x2c6>
    break;
    case EVENT_SET_STB_OUT_OFF:
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    301a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
    301e:	81 30       	cpi	r24, 0x01	; 1
    3020:	11 f4       	brne	.+4      	; 0x3026 <run_edit_fm_stations+0xd8>
    3022:	c2 9a       	sbi	0x18, 2	; 24
    3024:	01 c0       	rjmp	.+2      	; 0x3028 <run_edit_fm_stations+0xda>
    3026:	c2 98       	cbi	0x18, 2	; 24
      RTOS_setTask(EVENT_STOP_FM_EDIT, 0, 0);
    3028:	8f ea       	ldi	r24, 0xAF	; 175
    302a:	f2 c0       	rjmp	.+484    	; 0x3210 <run_edit_fm_stations+0x2c2>
    break;
    case EVENT_NOKEY:
	  if (nedit == FM_NORMAL_MODE) {
    302c:	80 91 23 05 	lds	r24, 0x0523
    3030:	88 23       	and	r24, r24
    3032:	41 f4       	brne	.+16     	; 0x3044 <run_edit_fm_stations+0xf6>
        RTOS_setTask(EVENT_SET_AS_WAIT_OFF, 0, 0);
    3034:	8c ea       	ldi	r24, 0xAC	; 172
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	70 e0       	ldi	r23, 0x00	; 0
    303a:	40 e0       	ldi	r20, 0x00	; 0
    303c:	50 e0       	ldi	r21, 0x00	; 0
    303e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    3042:	ac c0       	rjmp	.+344    	; 0x319c <run_edit_fm_stations+0x24e>
      } else {
	    nedit = FM_NORMAL_MODE;
    3044:	10 92 23 05 	sts	0x0523, r1
	    nokey = 0;
    3048:	10 92 1f 05 	sts	0x051F, r1
    304c:	a7 c0       	rjmp	.+334    	; 0x319c <run_edit_fm_stations+0x24e>
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_RETURN_MODE:
	  if (nedit == FM_EDIT_MODE) {
    304e:	80 91 23 05 	lds	r24, 0x0523
    3052:	81 30       	cpi	r24, 0x01	; 1
    3054:	09 f0       	breq	.+2      	; 0x3058 <run_edit_fm_stations+0x10a>
    3056:	a2 c0       	rjmp	.+324    	; 0x319c <run_edit_fm_stations+0x24e>
	    tuner_SetChannel(channel, old_chan);
    3058:	80 91 2a 05 	lds	r24, 0x052A
    305c:	60 91 68 05 	lds	r22, 0x0568
    3060:	0e 94 be 21 	call	0x437c	; 0x437c <tuner_SetChannel>
	    tuner_SetChan(old_chan);
    3064:	80 91 68 05 	lds	r24, 0x0568
    3068:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
	    nedit = FM_NORMAL_MODE;
    306c:	10 92 23 05 	sts	0x0523, r1
    3070:	95 c0       	rjmp	.+298    	; 0x319c <run_edit_fm_stations+0x24e>
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    3072:	10 92 1f 05 	sts	0x051F, r1
    break;
    3076:	02 c1       	rjmp	.+516    	; 0x327c <run_edit_fm_stations+0x32e>
    case EVENT_KEY_STANDBY:
	  key_stb = 1;
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	80 93 25 05 	sts	0x0525, r24
    307e:	c7 c0       	rjmp	.+398    	; 0x320e <run_edit_fm_stations+0x2c0>
    break;
    case EVENT_TIMER_SECOND:
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_UP:
	  if (nedit == FM_NORMAL_MODE) {
    3080:	80 91 23 05 	lds	r24, 0x0523
    3084:	88 23       	and	r24, r24
    3086:	09 f0       	breq	.+2      	; 0x308a <run_edit_fm_stations+0x13c>
    3088:	89 c0       	rjmp	.+274    	; 0x319c <run_edit_fm_stations+0x24e>
	    if (channel > 0) channel--; else channel = FM_STATIONS - 1;
    308a:	80 91 2a 05 	lds	r24, 0x052A
    308e:	88 23       	and	r24, r24
    3090:	11 f0       	breq	.+4      	; 0x3096 <run_edit_fm_stations+0x148>
    3092:	81 50       	subi	r24, 0x01	; 1
    3094:	01 c0       	rjmp	.+2      	; 0x3098 <run_edit_fm_stations+0x14a>
    3096:	8d e1       	ldi	r24, 0x1D	; 29
    3098:	80 93 2a 05 	sts	0x052A, r24
	    tuner_SetChan(tuner_GetChan(channel));
    309c:	80 91 2a 05 	lds	r24, 0x052A
    30a0:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    30a4:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
    30a8:	79 c0       	rjmp	.+242    	; 0x319c <run_edit_fm_stations+0x24e>
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_DOWN:
	  if (nedit == FM_NORMAL_MODE) {
    30aa:	80 91 23 05 	lds	r24, 0x0523
    30ae:	88 23       	and	r24, r24
    30b0:	09 f0       	breq	.+2      	; 0x30b4 <run_edit_fm_stations+0x166>
    30b2:	74 c0       	rjmp	.+232    	; 0x319c <run_edit_fm_stations+0x24e>
	    if (channel < FM_STATIONS - 1) channel++; else channel = 0;
    30b4:	80 91 2a 05 	lds	r24, 0x052A
    30b8:	8d 31       	cpi	r24, 0x1D	; 29
    30ba:	10 f4       	brcc	.+4      	; 0x30c0 <run_edit_fm_stations+0x172>
    30bc:	8f 5f       	subi	r24, 0xFF	; 255
    30be:	ec cf       	rjmp	.-40     	; 0x3098 <run_edit_fm_stations+0x14a>
    30c0:	10 92 2a 05 	sts	0x052A, r1
    30c4:	eb cf       	rjmp	.-42     	; 0x309c <run_edit_fm_stations+0x14e>
	    tuner_SetChan(tuner_GetChan(channel));
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_fm_stations();
    30cc:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <show_lcd_edit_fm_stations>
	  if (nedit == FM_NORMAL_MODE) {
    30d0:	80 91 23 05 	lds	r24, 0x0523
    30d4:	88 23       	and	r24, r24
    30d6:	29 f4       	brne	.+10     	; 0x30e2 <run_edit_fm_stations+0x194>
	    tda7313Set_Param_down(mmenu);
    30d8:	80 91 20 05 	lds	r24, 0x0520
    30dc:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <tda7313Set_Param_down>
    30e0:	22 c0       	rjmp	.+68     	; 0x3126 <run_edit_fm_stations+0x1d8>
        RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
	  } else {
        if ( tuner_GetChan(channel) > FM_CHAN_MIN) tuner_SetChan(tuner_GetChan(channel) - 1);
    30e2:	80 91 2a 05 	lds	r24, 0x052A
    30e6:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    30ea:	88 23       	and	r24, r24
    30ec:	39 f0       	breq	.+14     	; 0x30fc <run_edit_fm_stations+0x1ae>
    30ee:	80 91 2a 05 	lds	r24, 0x052A
    30f2:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    30f6:	81 50       	subi	r24, 0x01	; 1
    30f8:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
		tuner_SetChannel(channel, tuner_GetChan(channel) - 1);
    30fc:	10 91 2a 05 	lds	r17, 0x052A
    3100:	81 2f       	mov	r24, r17
    3102:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    3106:	68 2f       	mov	r22, r24
    3108:	61 50       	subi	r22, 0x01	; 1
    310a:	25 c0       	rjmp	.+74     	; 0x3156 <run_edit_fm_stations+0x208>
	  }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_fm_stations();
    3112:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <show_lcd_edit_fm_stations>
	  if (nedit == FM_NORMAL_MODE) {
    3116:	80 91 23 05 	lds	r24, 0x0523
    311a:	88 23       	and	r24, r24
    311c:	41 f4       	brne	.+16     	; 0x312e <run_edit_fm_stations+0x1e0>
	    tda7313Set_Param_up(mmenu);
    311e:	80 91 20 05 	lds	r24, 0x0520
    3122:	0e 94 9b 1f 	call	0x3f36	; 0x3f36 <tda7313Set_Param_up>
        RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
    3126:	85 ea       	ldi	r24, 0xA5	; 165
    3128:	60 ed       	ldi	r22, 0xD0	; 208
    312a:	77 e0       	ldi	r23, 0x07	; 7
    312c:	1a c0       	rjmp	.+52     	; 0x3162 <run_edit_fm_stations+0x214>
	  } else {
        if ( tuner_GetChan(channel) < FM_CHAN_MAX) tuner_SetChan(tuner_GetChan(channel) + 1);
    312e:	80 91 2a 05 	lds	r24, 0x052A
    3132:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    3136:	82 3d       	cpi	r24, 0xD2	; 210
    3138:	38 f4       	brcc	.+14     	; 0x3148 <run_edit_fm_stations+0x1fa>
    313a:	80 91 2a 05 	lds	r24, 0x052A
    313e:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    3142:	8f 5f       	subi	r24, 0xFF	; 255
    3144:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
		tuner_SetChannel(channel, tuner_GetChan(channel) + 1);
    3148:	10 91 2a 05 	lds	r17, 0x052A
    314c:	81 2f       	mov	r24, r17
    314e:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    3152:	68 2f       	mov	r22, r24
    3154:	6f 5f       	subi	r22, 0xFF	; 255
    3156:	81 2f       	mov	r24, r17
    3158:	0e 94 be 21 	call	0x437c	; 0x437c <tuner_SetChannel>
        RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    315c:	84 ea       	ldi	r24, 0xA4	; 164
    315e:	60 e1       	ldi	r22, 0x10	; 16
    3160:	77 e2       	ldi	r23, 0x27	; 39
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
	  }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    316a:	8d ef       	ldi	r24, 0xFD	; 253
    316c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <RTOS_deleteTask>
    3170:	15 c0       	rjmp	.+42     	; 0x319c <run_edit_fm_stations+0x24e>
      show_lcd_edit_fm_stations();
    break;
    case EVENT_SAVE_PARAM:
      tda7313_Save_vol_fm_edit(tda7313Get_Param(0));
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <tda7313Get_Param>
    3178:	0e 94 ac 20 	call	0x4158	; 0x4158 <tda7313_Save_vol_fm_edit>
    break;
    317c:	7f c0       	rjmp	.+254    	; 0x327c <run_edit_fm_stations+0x32e>
    case EVENT_KEY_SELECT:
	  tuner_SetChannel(channel, 0xFF);
    317e:	80 91 2a 05 	lds	r24, 0x052A
    3182:	6f ef       	ldi	r22, 0xFF	; 255
    3184:	0e 94 be 21 	call	0x437c	; 0x437c <tuner_SetChannel>
      tuner_SetChan(0xFF);
    3188:	8f ef       	ldi	r24, 0xFF	; 255
    318a:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
	  nedit = FM_NORMAL_MODE;
    318e:	10 92 23 05 	sts	0x0523, r1
      tuner_Save_stations(channel, 0xFF);
    3192:	80 91 2a 05 	lds	r24, 0x052A
    3196:	6f ef       	ldi	r22, 0xFF	; 255
    3198:	0e 94 cf 21 	call	0x439e	; 0x439e <tuner_Save_stations>
      show_lcd_edit_fm_stations();
    319c:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <show_lcd_edit_fm_stations>
    break;
    31a0:	6d c0       	rjmp	.+218    	; 0x327c <run_edit_fm_stations+0x32e>
    case EVENT_KEY_SET:
	  if (nedit == FM_NORMAL_MODE) {
    31a2:	80 91 23 05 	lds	r24, 0x0523
    31a6:	88 23       	and	r24, r24
    31a8:	e9 f4       	brne	.+58     	; 0x31e4 <run_edit_fm_stations+0x296>
	    old_chan = tuner_GetChan(channel);
    31aa:	80 91 2a 05 	lds	r24, 0x052A
    31ae:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    31b2:	80 93 68 05 	sts	0x0568, r24
	    if (old_chan > FM_CHAN_MAX) {
    31b6:	83 3d       	cpi	r24, 0xD3	; 211
    31b8:	60 f0       	brcs	.+24     	; 0x31d2 <run_edit_fm_stations+0x284>
		  tuner_SetChannel(channel, get_fm_def_chan());
    31ba:	10 91 2a 05 	lds	r17, 0x052A
    31be:	0e 94 28 22 	call	0x4450	; 0x4450 <get_fm_def_chan>
    31c2:	68 2f       	mov	r22, r24
    31c4:	81 2f       	mov	r24, r17
    31c6:	0e 94 be 21 	call	0x437c	; 0x437c <tuner_SetChannel>
	      tuner_SetChan(get_fm_def_chan());
    31ca:	0e 94 28 22 	call	0x4450	; 0x4450 <get_fm_def_chan>
    31ce:	0e 94 a8 21 	call	0x4350	; 0x4350 <tuner_SetChan>
		}
        RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    31d2:	84 ea       	ldi	r24, 0xA4	; 164
    31d4:	60 e1       	ldi	r22, 0x10	; 16
    31d6:	77 e2       	ldi	r23, 0x27	; 39
    31d8:	40 e0       	ldi	r20, 0x00	; 0
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
        show_lcd_edit_fm_stations();
    31e0:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <show_lcd_edit_fm_stations>
	  }
	  if (nedit == FM_EDIT_MODE) {
    31e4:	80 91 23 05 	lds	r24, 0x0523
    31e8:	81 30       	cpi	r24, 0x01	; 1
    31ea:	49 f4       	brne	.+18     	; 0x31fe <run_edit_fm_stations+0x2b0>
        tuner_Save_stations(channel, tuner_GetChan(channel));
    31ec:	10 91 2a 05 	lds	r17, 0x052A
    31f0:	81 2f       	mov	r24, r17
    31f2:	0e 94 9e 21 	call	0x433c	; 0x433c <tuner_GetChan>
    31f6:	68 2f       	mov	r22, r24
    31f8:	81 2f       	mov	r24, r17
    31fa:	0e 94 cf 21 	call	0x439e	; 0x439e <tuner_Save_stations>
	  }
      nedit = !nedit;
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 91 23 05 	lds	r25, 0x0523
    3204:	91 11       	cpse	r25, r1
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	80 93 23 05 	sts	0x0523, r24
    break;
    320c:	37 c0       	rjmp	.+110    	; 0x327c <run_edit_fm_stations+0x32e>
    case EVENT_KEY_MENU:
      RTOS_setTask(EVENT_SET_AS_WAIT_OFF, 0, 0);
    320e:	8c ea       	ldi	r24, 0xAC	; 172
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	40 e0       	ldi	r20, 0x00	; 0
    3216:	50 e0       	ldi	r21, 0x00	; 0
    3218:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    321c:	2f c0       	rjmp	.+94     	; 0x327c <run_edit_fm_stations+0x32e>
    case EVENT_STOP_FM_EDIT:
      LCD_clear();
    321e:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      channel = tuner_Load_channel();
    3222:	0e 94 15 22 	call	0x442a	; 0x442a <tuner_Load_channel>
    3226:	80 93 2a 05 	sts	0x052A, r24
	  tda7313SetInput(tda7313_Load_Input());
    322a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <tda7313_Load_Input>
    322e:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <tda7313SetInput>
      tda7313Set_Param_no_send(TDA_VOLUME, tda7313_Load_param(tda7313GetInput(), TDA_VOLUME)), 
    3232:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <tda7313GetInput>
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	0e 94 4f 20 	call	0x409e	; 0x409e <tda7313_Load_param>
    323c:	68 2f       	mov	r22, r24
    323e:	80 e0       	ldi	r24, 0x00	; 0
    3240:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <tda7313Set_Param_no_send>
      tda7313SetMute(1);
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
      tuner_Save_all_stations();
    324a:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <tuner_Save_all_stations>
	  if (key_stb == 1) {
    324e:	80 91 25 05 	lds	r24, 0x0525
    3252:	81 30       	cpi	r24, 0x01	; 1
    3254:	59 f4       	brne	.+22     	; 0x326c <run_edit_fm_stations+0x31e>
        key_stb = 0;
    3256:	10 92 25 05 	sts	0x0525, r1
        LCD_load_bignum();
    325a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
        SET_STATE(run_standby);
    325e:	87 ef       	ldi	r24, 0xF7	; 247
    3260:	90 e1       	ldi	r25, 0x10	; 16
    3262:	90 93 a6 00 	sts	0x00A6, r25
    3266:	80 93 a5 00 	sts	0x00A5, r24
    326a:	08 c0       	rjmp	.+16     	; 0x327c <run_edit_fm_stations+0x32e>
	  } else {
        SET_STATE(run_option);
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	9b e1       	ldi	r25, 0x1B	; 27
    3270:	90 93 a6 00 	sts	0x00A6, r25
    3274:	80 93 a5 00 	sts	0x00A5, r24
        show_lcd_option();
    3278:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
	  }
    break;
  }
}
    327c:	1f 91       	pop	r17
    327e:	08 95       	ret

00003280 <run_alarm>:
}
//=============================================================================
//=============================================================================
void run_alarm(unsigned char event)
{
  switch(event) {
    3280:	80 3a       	cpi	r24, 0xA0	; 160
    3282:	29 f0       	breq	.+10     	; 0x328e <run_alarm+0xe>
    3284:	8d 3f       	cpi	r24, 0xFD	; 253
    3286:	e9 f0       	breq	.+58     	; 0x32c2 <run_alarm+0x42>
    3288:	84 36       	cpi	r24, 0x64	; 100
    328a:	79 f5       	brne	.+94     	; 0x32ea <run_alarm+0x6a>
    328c:	0b c0       	rjmp	.+22     	; 0x32a4 <run_alarm+0x24>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    328e:	10 92 1f 05 	sts	0x051F, r1
	  LCD_clear();
    3292:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_defchar();
    3296:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_load_defchar>
	  time_alarm = 0;
    329a:	10 92 27 05 	sts	0x0527, r1
      SET_STATE(run_main);
    329e:	85 e2       	ldi	r24, 0x25	; 37
    32a0:	9d e0       	ldi	r25, 0x0D	; 13
    32a2:	0a c0       	rjmp	.+20     	; 0x32b8 <run_alarm+0x38>
    break;
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    32a4:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    32a8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      tda7313SetMute(1);
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
      LED_STANDBY_on();
    32b2:	c0 98       	cbi	0x18, 0	; 24
      SET_STATE(run_standby);
    32b4:	87 ef       	ldi	r24, 0xF7	; 247
    32b6:	90 e1       	ldi	r25, 0x10	; 16
    32b8:	90 93 a6 00 	sts	0x00A6, r25
    32bc:	80 93 a5 00 	sts	0x00A5, r24
    break;
    32c0:	08 95       	ret
    case EVENT_TIMER_SECOND:
	  nokey = 0;
    32c2:	10 92 1f 05 	sts	0x051F, r1
      if (time_alarm > 0) {
    32c6:	80 91 27 05 	lds	r24, 0x0527
    32ca:	88 23       	and	r24, r24
    32cc:	21 f0       	breq	.+8      	; 0x32d6 <run_alarm+0x56>
		time_alarm--;
    32ce:	81 50       	subi	r24, 0x01	; 1
    32d0:	80 93 27 05 	sts	0x0527, r24
    32d4:	08 95       	ret
      } else {
	    LCD_clear();
    32d6:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
        LCD_load_defchar();
    32da:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_load_defchar>
        SET_STATE(run_main);
    32de:	85 e2       	ldi	r24, 0x25	; 37
    32e0:	9d e0       	ldi	r25, 0x0D	; 13
    32e2:	90 93 a6 00 	sts	0x00A6, r25
    32e6:	80 93 a5 00 	sts	0x00A5, r24
    32ea:	08 95       	ret

000032ec <check_alarm>:
    break;
  }
}
//=============================================================================
uint8_t check_alarm(void)
{
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <check_alarm+0xa>
    32f6:	0f 92       	push	r0
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
  unsigned char h,m,s;
  if (a_onoff == 1) {
    32fc:	80 91 6b 05 	lds	r24, 0x056B
    3300:	81 30       	cpi	r24, 0x01	; 1
    3302:	21 f5       	brne	.+72     	; 0x334c <check_alarm+0x60>
    if (BitIsSet(a_wday, RTC_dayofweek())) {
    3304:	00 91 71 05 	lds	r16, 0x0571
    3308:	10 e0       	ldi	r17, 0x00	; 0
    330a:	0e 94 49 04 	call	0x892	; 0x892 <RTC_dayofweek>
    330e:	98 01       	movw	r18, r16
    3310:	02 c0       	rjmp	.+4      	; 0x3316 <check_alarm+0x2a>
    3312:	35 95       	asr	r19
    3314:	27 95       	ror	r18
    3316:	8a 95       	dec	r24
    3318:	e2 f7       	brpl	.-8      	; 0x3312 <check_alarm+0x26>
    331a:	20 ff       	sbrs	r18, 0
    331c:	17 c0       	rjmp	.+46     	; 0x334c <check_alarm+0x60>
      RTC_get_time(&h,&m,&s);
    331e:	ce 01       	movw	r24, r28
    3320:	01 96       	adiw	r24, 0x01	; 1
    3322:	be 01       	movw	r22, r28
    3324:	6e 5f       	subi	r22, 0xFE	; 254
    3326:	7f 4f       	sbci	r23, 0xFF	; 255
    3328:	ae 01       	movw	r20, r28
    332a:	4d 5f       	subi	r20, 0xFD	; 253
    332c:	5f 4f       	sbci	r21, 0xFF	; 255
    332e:	0e 94 b6 03 	call	0x76c	; 0x76c <RTC_get_time>
	  if ((a_hh == h) && (a_mm == m) && (s == 0)) {
    3332:	90 91 a2 05 	lds	r25, 0x05A2
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	98 17       	cp	r25, r24
    333a:	41 f4       	brne	.+16     	; 0x334c <check_alarm+0x60>
    333c:	90 91 73 05 	lds	r25, 0x0573
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	98 17       	cp	r25, r24
    3344:	19 f4       	brne	.+6      	; 0x334c <check_alarm+0x60>
	default:
    break;
  }
}
//=============================================================================
uint8_t check_alarm(void)
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	9b 81       	ldd	r25, Y+3	; 0x03
    334a:	91 11       	cpse	r25, r1
	  if ((a_hh == h) && (a_mm == m) && (s == 0)) {
        return 1;
	  }
	} 
  }
  return 0;
    334c:	80 e0       	ldi	r24, 0x00	; 0
}
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	0f 90       	pop	r0
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	08 95       	ret

0000335e <set_blink>:
  sei();
}
//=============================================================================
void set_blink(void)
{
  blinks = !blinks;
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 91 1e 05 	lds	r25, 0x051E
    3364:	91 11       	cpse	r25, r1
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	80 93 1e 05 	sts	0x051E, r24
  if (nokey < NOKEY_TIME * 2) {
    336c:	80 91 1f 05 	lds	r24, 0x051F
    3370:	8c 33       	cpi	r24, 0x3C	; 60
    3372:	20 f4       	brcc	.+8      	; 0x337c <set_blink+0x1e>
    nokey++;
    3374:	8f 5f       	subi	r24, 0xFF	; 255
    3376:	80 93 1f 05 	sts	0x051F, r24
    337a:	07 c0       	rjmp	.+14     	; 0x338a <set_blink+0x2c>
  } else {
    RTOS_setTask(EVENT_NOKEY, 0, 0);
    337c:	8c e9       	ldi	r24, 0x9C	; 156
    337e:	60 e0       	ldi	r22, 0x00	; 0
    3380:	70 e0       	ldi	r23, 0x00	; 0
    3382:	40 e0       	ldi	r20, 0x00	; 0
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
  }
  if (fault_on == 0) {
    338a:	80 91 28 05 	lds	r24, 0x0528
    338e:	88 23       	and	r24, r24
    3390:	c9 f4       	brne	.+50     	; 0x33c4 <set_blink+0x66>
    if (check_fault() == 1) {
    3392:	0e 94 b5 0a 	call	0x156a	; 0x156a <check_fault>
    3396:	81 30       	cpi	r24, 0x01	; 1
    3398:	a9 f4       	brne	.+42     	; 0x33c4 <set_blink+0x66>
	  fault_on = 1;
    339a:	80 93 28 05 	sts	0x0528, r24
  	  BEEP(); 
    339e:	97 98       	cbi	0x12, 7	; 18
    33a0:	8f e3       	ldi	r24, 0x3F	; 63
    33a2:	9c e9       	ldi	r25, 0x9C	; 156
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <set_blink+0x46>
    33a8:	00 c0       	rjmp	.+0      	; 0x33aa <set_blink+0x4c>
    33aa:	00 00       	nop
    33ac:	97 9a       	sbi	0x12, 7	; 18
	  if (main_mode != MODE_STANDBY) {
    33ae:	80 91 2b 05 	lds	r24, 0x052B
    33b2:	88 23       	and	r24, r24
    33b4:	39 f0       	breq	.+14     	; 0x33c4 <set_blink+0x66>
        RTOS_setTask(EVENT_KEY_STANDBY, 0, 0);
    33b6:	84 e6       	ldi	r24, 0x64	; 100
    33b8:	60 e0       	ldi	r22, 0x00	; 0
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	40 e0       	ldi	r20, 0x00	; 0
    33be:	50 e0       	ldi	r21, 0x00	; 0
    33c0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
	  }
	}
  }
  if ((check_alarm() == 1) && (main_mode != MODE_OPTIONS) && (fault_on == 0)) {
    33c4:	0e 94 76 19 	call	0x32ec	; 0x32ec <check_alarm>
    33c8:	81 30       	cpi	r24, 0x01	; 1
    33ca:	b1 f5       	brne	.+108    	; 0x3438 <set_blink+0xda>
    33cc:	80 91 2b 05 	lds	r24, 0x052B
    33d0:	84 30       	cpi	r24, 0x04	; 4
    33d2:	91 f1       	breq	.+100    	; 0x3438 <set_blink+0xda>
    33d4:	80 91 28 05 	lds	r24, 0x0528
    33d8:	88 23       	and	r24, r24
    33da:	71 f5       	brne	.+92     	; 0x3438 <set_blink+0xda>
	BEEP(); 
    33dc:	97 98       	cbi	0x12, 7	; 18
    33de:	8f e3       	ldi	r24, 0x3F	; 63
    33e0:	9c e9       	ldi	r25, 0x9C	; 156
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <set_blink+0x84>
    33e6:	00 c0       	rjmp	.+0      	; 0x33e8 <set_blink+0x8a>
    33e8:	00 00       	nop
    33ea:	97 9a       	sbi	0x12, 7	; 18
    time_alarm = ALARM_BEEP;
    33ec:	88 e7       	ldi	r24, 0x78	; 120
    33ee:	80 93 27 05 	sts	0x0527, r24
    tda7313SetInput(FM_INPUT);
    33f2:	82 e0       	ldi	r24, 0x02	; 2
    33f4:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <tda7313SetInput>
    tda7313_Save_Input(FM_INPUT);
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <tda7313_Save_Input>
	LIGHT_on();
    33fe:	ac 9a       	sbi	0x15, 4	; 21
	if (main_mode == MODE_STANDBY) {
    3400:	80 91 2b 05 	lds	r24, 0x052B
    3404:	88 23       	and	r24, r24
    3406:	29 f4       	brne	.+10     	; 0x3412 <set_blink+0xb4>
      tda7313SetMute(1);
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
      RTOS_setTask(EVENT_KEY_STANDBY, 0, 0);
    340e:	84 e6       	ldi	r24, 0x64	; 100
    3410:	07 c0       	rjmp	.+14     	; 0x3420 <set_blink+0xc2>
	} else if (main_mode == MODE_NOKEY) {
    3412:	82 30       	cpi	r24, 0x02	; 2
    3414:	11 f4       	brne	.+4      	; 0x341a <set_blink+0xbc>
      RTOS_setTask(EVENT_KEY_PRESS, 0, 0);
    3416:	80 ea       	ldi	r24, 0xA0	; 160
    3418:	03 c0       	rjmp	.+6      	; 0x3420 <set_blink+0xc2>
	} else if (main_mode == MODE_MUTE) {
    341a:	81 30       	cpi	r24, 0x01	; 1
    341c:	41 f4       	brne	.+16     	; 0x342e <set_blink+0xd0>
      RTOS_setTask(EVENT_KEY_MUTE, 0, 0);
    341e:	85 e6       	ldi	r24, 0x65	; 101
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	70 e0       	ldi	r23, 0x00	; 0
    3424:	40 e0       	ldi	r20, 0x00	; 0
    3426:	50 e0       	ldi	r21, 0x00	; 0
    3428:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    342c:	08 95       	ret
	} else if (main_mode == MODE_MAIN) {
    342e:	83 30       	cpi	r24, 0x03	; 3
    3430:	51 f4       	brne	.+20     	; 0x3446 <set_blink+0xe8>
      show_lcd_main();
    3432:	0e 94 98 0c 	call	0x1930	; 0x1930 <show_lcd_main>
    3436:	08 95       	ret
	}
 	return;
  }
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    3438:	8d ef       	ldi	r24, 0xFD	; 253
    343a:	60 e0       	ldi	r22, 0x00	; 0
    343c:	70 e0       	ldi	r23, 0x00	; 0
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	50 e0       	ldi	r21, 0x00	; 0
    3442:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    3446:	08 95       	ret

00003448 <show_lcd_edit_rc5_code>:
  }
}
//=============================================================================
void show_lcd_edit_rc5_code(void)
{
  LCD_SetXY(0, 0); LCD_puts(optionmenu[OM_SET_RC5_CODE]);
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	60 e0       	ldi	r22, 0x00	; 0
    344c:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    3450:	80 91 cf 02 	lds	r24, 0x02CF
    3454:	90 91 d0 02 	lds	r25, 0x02D0
    3458:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
  LCD_SetXY(0, 2); LCD_puts(rc5_menu[rc5menu]);
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	62 e0       	ldi	r22, 0x02	; 2
    3460:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    3464:	e0 91 22 05 	lds	r30, 0x0522
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	ee 0f       	add	r30, r30
    346c:	ff 1f       	adc	r31, r31
    346e:	e9 51       	subi	r30, 0x19	; 25
    3470:	fc 4f       	sbci	r31, 0xFC	; 252
    3472:	80 81       	ld	r24, Z
    3474:	91 81       	ldd	r25, Z+1	; 0x01
    3476:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
  LCD_SetXY(14, 2); 
    347a:	8e e0       	ldi	r24, 0x0E	; 14
    347c:	62 e0       	ldi	r22, 0x02	; 2
    347e:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
  if (rc5_code[RC5_CMD][rc5menu] == 0xFF) {
    3482:	e0 91 22 05 	lds	r30, 0x0522
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	e9 58       	subi	r30, 0x89	; 137
    348a:	fa 4f       	sbci	r31, 0xFA	; 250
    348c:	80 81       	ld	r24, Z
    348e:	8f 3f       	cpi	r24, 0xFF	; 255
    3490:	29 f4       	brne	.+10     	; 0x349c <show_lcd_edit_rc5_code+0x54>
    LCD_puts(MSG_NO_RC5);
    3492:	8c e2       	ldi	r24, 0x2C	; 44
    3494:	91 e0       	ldi	r25, 0x01	; 1
    3496:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    349a:	05 c0       	rjmp	.+10     	; 0x34a6 <show_lcd_edit_rc5_code+0x5e>
  } else {
    print_dec(rc5_code[RC5_CMD][rc5menu], 2, '0');
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	62 e0       	ldi	r22, 0x02	; 2
    34a0:	40 e3       	ldi	r20, 0x30	; 48
    34a2:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
  }
  LCD_dat(':');
    34a6:	8a e3       	ldi	r24, 0x3A	; 58
    34a8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_dat>
  if (blinks == 1) {
    34ac:	80 91 1e 05 	lds	r24, 0x051E
    34b0:	81 30       	cpi	r24, 0x01	; 1
    34b2:	79 f4       	brne	.+30     	; 0x34d2 <show_lcd_edit_rc5_code+0x8a>
    if (rc5_cmd == 0xFF) {
    34b4:	80 91 0d 04 	lds	r24, 0x040D
    34b8:	8f 3f       	cpi	r24, 0xFF	; 255
    34ba:	29 f4       	brne	.+10     	; 0x34c6 <show_lcd_edit_rc5_code+0x7e>
      LCD_puts(MSG_NO_RC5);
    34bc:	8c e2       	ldi	r24, 0x2C	; 44
    34be:	91 e0       	ldi	r25, 0x01	; 1
    34c0:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
    34c4:	08 95       	ret
    } else {
      print_dec(rc5_cmd, 2, '0');
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	62 e0       	ldi	r22, 0x02	; 2
    34ca:	40 e3       	ldi	r20, 0x30	; 48
    34cc:	0e 94 87 04 	call	0x90e	; 0x90e <print_dec>
    34d0:	08 95       	ret
    }
  } else {
    LCD_space(2);
    34d2:	82 e0       	ldi	r24, 0x02	; 2
    34d4:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
    34d8:	08 95       	ret

000034da <run_edit_rc5_code>:
  return 0;
}
//=============================================================================
//=============================================================================
void run_edit_rc5_code(unsigned char event)
{
    34da:	df 93       	push	r29
    34dc:	cf 93       	push	r28
    34de:	0f 92       	push	r0
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
  if (event < EVENT_RC5_CODE_MAX) {
    34e4:	83 36       	cpi	r24, 0x63	; 99
    34e6:	48 f4       	brcc	.+18     	; 0x34fa <run_edit_rc5_code+0x20>
    blinks = 1;
    34e8:	91 e0       	ldi	r25, 0x01	; 1
    34ea:	90 93 1e 05 	sts	0x051E, r25
    rc5_cmd = event;
    34ee:	80 93 0d 04 	sts	0x040D, r24
    show_lcd_edit_rc5_code();
    34f2:	89 83       	std	Y+1, r24	; 0x01
    34f4:	0e 94 24 1a 	call	0x3448	; 0x3448 <show_lcd_edit_rc5_code>
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
  }
  switch(event) {
    34fa:	8c 36       	cpi	r24, 0x6C	; 108
    34fc:	09 f4       	brne	.+2      	; 0x3500 <run_edit_rc5_code+0x26>
    34fe:	68 c0       	rjmp	.+208    	; 0x35d0 <run_edit_rc5_code+0xf6>
    3500:	8d 36       	cpi	r24, 0x6D	; 109
    3502:	78 f4       	brcc	.+30     	; 0x3522 <run_edit_rc5_code+0x48>
    3504:	87 36       	cpi	r24, 0x67	; 103
    3506:	09 f4       	brne	.+2      	; 0x350a <run_edit_rc5_code+0x30>
    3508:	4a c0       	rjmp	.+148    	; 0x359e <run_edit_rc5_code+0xc4>
    350a:	88 36       	cpi	r24, 0x68	; 104
    350c:	20 f4       	brcc	.+8      	; 0x3516 <run_edit_rc5_code+0x3c>
    350e:	84 36       	cpi	r24, 0x64	; 100
    3510:	09 f0       	breq	.+2      	; 0x3514 <run_edit_rc5_code+0x3a>
    3512:	72 c0       	rjmp	.+228    	; 0x35f8 <run_edit_rc5_code+0x11e>
    3514:	22 c0       	rjmp	.+68     	; 0x355a <run_edit_rc5_code+0x80>
    3516:	88 36       	cpi	r24, 0x68	; 104
    3518:	69 f1       	breq	.+90     	; 0x3574 <run_edit_rc5_code+0x9a>
    351a:	89 36       	cpi	r24, 0x69	; 105
    351c:	09 f0       	breq	.+2      	; 0x3520 <run_edit_rc5_code+0x46>
    351e:	6c c0       	rjmp	.+216    	; 0x35f8 <run_edit_rc5_code+0x11e>
    3520:	33 c0       	rjmp	.+102    	; 0x3588 <run_edit_rc5_code+0xae>
    3522:	80 3a       	cpi	r24, 0xA0	; 160
    3524:	b9 f0       	breq	.+46     	; 0x3554 <run_edit_rc5_code+0x7a>
    3526:	81 3a       	cpi	r24, 0xA1	; 161
    3528:	20 f4       	brcc	.+8      	; 0x3532 <run_edit_rc5_code+0x58>
    352a:	8c 39       	cpi	r24, 0x9C	; 156
    352c:	09 f0       	breq	.+2      	; 0x3530 <run_edit_rc5_code+0x56>
    352e:	64 c0       	rjmp	.+200    	; 0x35f8 <run_edit_rc5_code+0x11e>
    3530:	07 c0       	rjmp	.+14     	; 0x3540 <run_edit_rc5_code+0x66>
    3532:	80 3b       	cpi	r24, 0xB0	; 176
    3534:	09 f4       	brne	.+2      	; 0x3538 <run_edit_rc5_code+0x5e>
    3536:	59 c0       	rjmp	.+178    	; 0x35ea <run_edit_rc5_code+0x110>
    3538:	8d 3f       	cpi	r24, 0xFD	; 253
    353a:	09 f0       	breq	.+2      	; 0x353e <run_edit_rc5_code+0x64>
    353c:	5d c0       	rjmp	.+186    	; 0x35f8 <run_edit_rc5_code+0x11e>
    353e:	2c c0       	rjmp	.+88     	; 0x3598 <run_edit_rc5_code+0xbe>
    case EVENT_NOKEY:
	  nokey = 0;
    3540:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_STANDBY, 0, 0);
    3544:	84 e6       	ldi	r24, 0x64	; 100
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	70 e0       	ldi	r23, 0x00	; 0
    354a:	40 e0       	ldi	r20, 0x00	; 0
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    3552:	52 c0       	rjmp	.+164    	; 0x35f8 <run_edit_rc5_code+0x11e>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    3554:	10 92 1f 05 	sts	0x051F, r1
    break;
    3558:	4f c0       	rjmp	.+158    	; 0x35f8 <run_edit_rc5_code+0x11e>
    case EVENT_KEY_STANDBY:
      edit_rc5 = 0;
    355a:	10 92 26 05 	sts	0x0526, r1
	  LCD_clear();
    355e:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    3562:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      SET_STATE(run_standby);
    3566:	87 ef       	ldi	r24, 0xF7	; 247
    3568:	90 e1       	ldi	r25, 0x10	; 16
    356a:	90 93 a6 00 	sts	0x00A6, r25
    356e:	80 93 a5 00 	sts	0x00A5, r24
    break;
    3572:	42 c0       	rjmp	.+132    	; 0x35f8 <run_edit_rc5_code+0x11e>
    case EVENT_TIMER_SECOND:
      show_lcd_edit_rc5_code();
    break;
    case EVENT_KEY_UP:
	  if (rc5menu > 0) rc5menu--; else rc5menu = RC5_MENU_MAX;
    3574:	80 91 22 05 	lds	r24, 0x0522
    3578:	88 23       	and	r24, r24
    357a:	11 f0       	breq	.+4      	; 0x3580 <run_edit_rc5_code+0xa6>
    357c:	81 50       	subi	r24, 0x01	; 1
    357e:	01 c0       	rjmp	.+2      	; 0x3582 <run_edit_rc5_code+0xa8>
    3580:	82 e1       	ldi	r24, 0x12	; 18
    3582:	80 93 22 05 	sts	0x0522, r24
    3586:	08 c0       	rjmp	.+16     	; 0x3598 <run_edit_rc5_code+0xbe>
      show_lcd_edit_rc5_code();
    break;
    case EVENT_KEY_DOWN:
	  if (rc5menu < RC5_MENU_MAX) rc5menu++; else rc5menu = 0;
    3588:	80 91 22 05 	lds	r24, 0x0522
    358c:	82 31       	cpi	r24, 0x12	; 18
    358e:	10 f4       	brcc	.+4      	; 0x3594 <run_edit_rc5_code+0xba>
    3590:	8f 5f       	subi	r24, 0xFF	; 255
    3592:	f7 cf       	rjmp	.-18     	; 0x3582 <run_edit_rc5_code+0xa8>
    3594:	10 92 22 05 	sts	0x0522, r1
      show_lcd_edit_rc5_code();
    3598:	0e 94 24 1a 	call	0x3448	; 0x3448 <show_lcd_edit_rc5_code>
    break;
    359c:	2d c0       	rjmp	.+90     	; 0x35f8 <run_edit_rc5_code+0x11e>
    case EVENT_KEY_SET:
	  save_rc5code_key(rc5menu, rc5_cmd);
    359e:	80 91 22 05 	lds	r24, 0x0522
    35a2:	60 91 0d 04 	lds	r22, 0x040D
    35a6:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <save_rc5code_key>
      LCD_SetXY(4, 3); LCD_puts(MSG_SAVE_RC5);
    35aa:	84 e0       	ldi	r24, 0x04	; 4
    35ac:	63 e0       	ldi	r22, 0x03	; 3
    35ae:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    35b2:	8f e2       	ldi	r24, 0x2F	; 47
    35b4:	91 e0       	ldi	r25, 0x01	; 1
    35b6:	0e 94 20 01 	call	0x240	; 0x240 <LCD_puts>
      RTOS_setTask(EVENT_CLEAR, 500, 0);
    35ba:	80 eb       	ldi	r24, 0xB0	; 176
    35bc:	64 ef       	ldi	r22, 0xF4	; 244
    35be:	71 e0       	ldi	r23, 0x01	; 1
    35c0:	40 e0       	ldi	r20, 0x00	; 0
    35c2:	50 e0       	ldi	r21, 0x00	; 0
    35c4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
      rc5_cmd = 0xFF;
    35c8:	8f ef       	ldi	r24, 0xFF	; 255
    35ca:	80 93 0d 04 	sts	0x040D, r24
    break;
    35ce:	14 c0       	rjmp	.+40     	; 0x35f8 <run_edit_rc5_code+0x11e>
    case EVENT_KEY_MENU:
	  save_rc5code();
    35d0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <save_rc5code>
      edit_rc5 = 0;
    35d4:	10 92 26 05 	sts	0x0526, r1
      SET_STATE(run_option);
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	9b e1       	ldi	r25, 0x1B	; 27
    35dc:	90 93 a6 00 	sts	0x00A6, r25
    35e0:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    35e4:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
    break;
    35e8:	07 c0       	rjmp	.+14     	; 0x35f8 <run_edit_rc5_code+0x11e>
    case EVENT_CLEAR:
      LCD_SetXY(0, 3); LCD_space(20);
    35ea:	80 e0       	ldi	r24, 0x00	; 0
    35ec:	63 e0       	ldi	r22, 0x03	; 3
    35ee:	0e 94 34 01 	call	0x268	; 0x268 <LCD_SetXY>
    35f2:	84 e1       	ldi	r24, 0x14	; 20
    35f4:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_space>
    break;
  }
}
    35f8:	0f 90       	pop	r0
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	08 95       	ret

00003600 <run_option>:
  LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
}
//=============================================================================
void run_option(unsigned char event)
{
  switch(event) {
    3600:	8c 36       	cpi	r24, 0x6C	; 108
    3602:	09 f4       	brne	.+2      	; 0x3606 <run_option+0x6>
    3604:	fe c0       	rjmp	.+508    	; 0x3802 <run_option+0x202>
    3606:	8d 36       	cpi	r24, 0x6D	; 109
    3608:	78 f4       	brcc	.+30     	; 0x3628 <run_option+0x28>
    360a:	87 36       	cpi	r24, 0x67	; 103
    360c:	09 f4       	brne	.+2      	; 0x3610 <run_option+0x10>
    360e:	40 c0       	rjmp	.+128    	; 0x3690 <run_option+0x90>
    3610:	88 36       	cpi	r24, 0x68	; 104
    3612:	20 f4       	brcc	.+8      	; 0x361c <run_option+0x1c>
    3614:	84 36       	cpi	r24, 0x64	; 100
    3616:	09 f0       	breq	.+2      	; 0x361a <run_option+0x1a>
    3618:	02 c1       	rjmp	.+516    	; 0x381e <run_option+0x21e>
    361a:	21 c0       	rjmp	.+66     	; 0x365e <run_option+0x5e>
    361c:	88 36       	cpi	r24, 0x68	; 104
    361e:	19 f1       	breq	.+70     	; 0x3666 <run_option+0x66>
    3620:	89 36       	cpi	r24, 0x69	; 105
    3622:	09 f0       	breq	.+2      	; 0x3626 <run_option+0x26>
    3624:	fc c0       	rjmp	.+504    	; 0x381e <run_option+0x21e>
    3626:	29 c0       	rjmp	.+82     	; 0x367a <run_option+0x7a>
    3628:	89 3a       	cpi	r24, 0xA9	; 169
    362a:	09 f4       	brne	.+2      	; 0x362e <run_option+0x2e>
    362c:	d5 c0       	rjmp	.+426    	; 0x37d8 <run_option+0x1d8>
    362e:	8a 3a       	cpi	r24, 0xAA	; 170
    3630:	30 f4       	brcc	.+12     	; 0x363e <run_option+0x3e>
    3632:	8c 39       	cpi	r24, 0x9C	; 156
    3634:	59 f0       	breq	.+22     	; 0x364c <run_option+0x4c>
    3636:	80 3a       	cpi	r24, 0xA0	; 160
    3638:	09 f0       	breq	.+2      	; 0x363c <run_option+0x3c>
    363a:	f1 c0       	rjmp	.+482    	; 0x381e <run_option+0x21e>
    363c:	0d c0       	rjmp	.+26     	; 0x3658 <run_option+0x58>
    363e:	8b 3a       	cpi	r24, 0xAB	; 171
    3640:	09 f4       	brne	.+2      	; 0x3644 <run_option+0x44>
    3642:	dd c0       	rjmp	.+442    	; 0x37fe <run_option+0x1fe>
    3644:	8d 3f       	cpi	r24, 0xFD	; 253
    3646:	09 f0       	breq	.+2      	; 0x364a <run_option+0x4a>
    3648:	ea c0       	rjmp	.+468    	; 0x381e <run_option+0x21e>
    364a:	1f c0       	rjmp	.+62     	; 0x368a <run_option+0x8a>
    case EVENT_NOKEY:
      main_mode = MODE_NOKEY;
    364c:	82 e0       	ldi	r24, 0x02	; 2
    364e:	80 93 2b 05 	sts	0x052B, r24
	  nokey = 0;
    3652:	10 92 1f 05 	sts	0x051F, r1
    3656:	03 c0       	rjmp	.+6      	; 0x365e <run_option+0x5e>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    3658:	10 92 1f 05 	sts	0x051F, r1
    break;
    365c:	08 95       	ret
    case EVENT_KEY_STANDBY:
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    365e:	8c e6       	ldi	r24, 0x6C	; 108
    3660:	60 e0       	ldi	r22, 0x00	; 0
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	c7 c0       	rjmp	.+398    	; 0x37f4 <run_option+0x1f4>
    break;
    case EVENT_TIMER_SECOND:
      show_lcd_option();
    break;
    case EVENT_KEY_UP:
	  if (omenu > 0) omenu--; else omenu = OPTION_MAX;
    3666:	80 91 21 05 	lds	r24, 0x0521
    366a:	88 23       	and	r24, r24
    366c:	11 f0       	breq	.+4      	; 0x3672 <run_option+0x72>
    366e:	81 50       	subi	r24, 0x01	; 1
    3670:	01 c0       	rjmp	.+2      	; 0x3674 <run_option+0x74>
    3672:	87 e0       	ldi	r24, 0x07	; 7
    3674:	80 93 21 05 	sts	0x0521, r24
    3678:	08 c0       	rjmp	.+16     	; 0x368a <run_option+0x8a>
      show_lcd_option();
    break;
    case EVENT_KEY_DOWN:
	  if (omenu < OPTION_MAX) omenu++; else omenu = 0;
    367a:	80 91 21 05 	lds	r24, 0x0521
    367e:	87 30       	cpi	r24, 0x07	; 7
    3680:	10 f4       	brcc	.+4      	; 0x3686 <run_option+0x86>
    3682:	8f 5f       	subi	r24, 0xFF	; 255
    3684:	f7 cf       	rjmp	.-18     	; 0x3674 <run_option+0x74>
    3686:	10 92 21 05 	sts	0x0521, r1
      show_lcd_option();
    368a:	0e 94 12 10 	call	0x2024	; 0x2024 <show_lcd_option>
    break;
    368e:	08 95       	ret
    case EVENT_KEY_SET:
      nedit = 0;
    3690:	10 92 23 05 	sts	0x0523, r1
      switch(omenu) {
    3694:	80 91 21 05 	lds	r24, 0x0521
    3698:	83 30       	cpi	r24, 0x03	; 3
    369a:	09 f4       	brne	.+2      	; 0x369e <run_option+0x9e>
    369c:	44 c0       	rjmp	.+136    	; 0x3726 <run_option+0x126>
    369e:	84 30       	cpi	r24, 0x04	; 4
    36a0:	28 f4       	brcc	.+10     	; 0x36ac <run_option+0xac>
    36a2:	81 30       	cpi	r24, 0x01	; 1
    36a4:	09 f1       	breq	.+66     	; 0x36e8 <run_option+0xe8>
    36a6:	82 30       	cpi	r24, 0x02	; 2
    36a8:	80 f5       	brcc	.+96     	; 0x370a <run_option+0x10a>
    36aa:	0d c0       	rjmp	.+26     	; 0x36c6 <run_option+0xc6>
    36ac:	85 30       	cpi	r24, 0x05	; 5
    36ae:	09 f4       	brne	.+2      	; 0x36b2 <run_option+0xb2>
    36b0:	53 c0       	rjmp	.+166    	; 0x3758 <run_option+0x158>
    36b2:	85 30       	cpi	r24, 0x05	; 5
    36b4:	08 f4       	brcc	.+2      	; 0x36b8 <run_option+0xb8>
    36b6:	43 c0       	rjmp	.+134    	; 0x373e <run_option+0x13e>
    36b8:	86 30       	cpi	r24, 0x06	; 6
    36ba:	09 f4       	brne	.+2      	; 0x36be <run_option+0xbe>
    36bc:	5d c0       	rjmp	.+186    	; 0x3778 <run_option+0x178>
    36be:	87 30       	cpi	r24, 0x07	; 7
    36c0:	09 f0       	breq	.+2      	; 0x36c4 <run_option+0xc4>
    36c2:	ad c0       	rjmp	.+346    	; 0x381e <run_option+0x21e>
    36c4:	79 c0       	rjmp	.+242    	; 0x37b8 <run_option+0x1b8>
        case OM_SET_TIME:
          RTC_get_time(&hh, &mm, &ss);
    36c6:	80 ea       	ldi	r24, 0xA0	; 160
    36c8:	95 e0       	ldi	r25, 0x05	; 5
    36ca:	69 e6       	ldi	r22, 0x69	; 105
    36cc:	75 e0       	ldi	r23, 0x05	; 5
    36ce:	4e e6       	ldi	r20, 0x6E	; 110
    36d0:	55 e0       	ldi	r21, 0x05	; 5
    36d2:	0e 94 b6 03 	call	0x76c	; 0x76c <RTC_get_time>
          SET_STATE(run_edit_time);
    36d6:	80 e3       	ldi	r24, 0x30	; 48
    36d8:	92 e1       	ldi	r25, 0x12	; 18
    36da:	90 93 a6 00 	sts	0x00A6, r25
    36de:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_time();
    36e2:	0e 94 da 11 	call	0x23b4	; 0x23b4 <show_lcd_edit_time>
        break;
    36e6:	08 95       	ret
        case OM_SET_DATE:
          RTC_get_date(&dd, &ms, &yy);
    36e8:	82 e7       	ldi	r24, 0x72	; 114
    36ea:	95 e0       	ldi	r25, 0x05	; 5
    36ec:	60 e7       	ldi	r22, 0x70	; 112
    36ee:	75 e0       	ldi	r23, 0x05	; 5
    36f0:	4d e9       	ldi	r20, 0x9D	; 157
    36f2:	55 e0       	ldi	r21, 0x05	; 5
    36f4:	0e 94 81 03 	call	0x702	; 0x702 <RTC_get_date>
          SET_STATE(run_edit_date);
    36f8:	83 e3       	ldi	r24, 0x33	; 51
    36fa:	93 e1       	ldi	r25, 0x13	; 19
    36fc:	90 93 a6 00 	sts	0x00A6, r25
    3700:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_date();
    3704:	0e 94 cb 12 	call	0x2596	; 0x2596 <show_lcd_edit_date>
        break;
    3708:	08 95       	ret
        case OM_SET_ALARM:
          KBD_set_type(0);
    370a:	80 e0       	ldi	r24, 0x00	; 0
    370c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <KBD_set_type>
          load_alarm_param();
    3710:	0e 94 4a 0a 	call	0x1494	; 0x1494 <load_alarm_param>
          SET_STATE(run_edit_alarm);
    3714:	8c ec       	ldi	r24, 0xCC	; 204
    3716:	94 e1       	ldi	r25, 0x14	; 20
    3718:	90 93 a6 00 	sts	0x00A6, r25
    371c:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_alarm();
    3720:	0e 94 de 13 	call	0x27bc	; 0x27bc <show_lcd_edit_alarm>
        break;
    3724:	08 95       	ret
        case OM_SET_STANBY_OUT:
		  KBD_set_type(0);
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	0e 94 54 05 	call	0xaa8	; 0xaa8 <KBD_set_type>
          SET_STATE(run_edit_stb_out);
    372c:	88 ed       	ldi	r24, 0xD8	; 216
    372e:	96 e1       	ldi	r25, 0x16	; 22
    3730:	90 93 a6 00 	sts	0x00A6, r25
    3734:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_stb_out();
    3738:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <show_lcd_edit_stb_out>
        break;
    373c:	08 95       	ret
        case OM_SET_TEMP_MAX:
		  old_max_temp = max_temp;
    373e:	80 91 a1 05 	lds	r24, 0x05A1
    3742:	80 93 6f 05 	sts	0x056F, r24
          SET_STATE(run_edit_temp_max);
    3746:	8d e5       	ldi	r24, 0x5D	; 93
    3748:	96 e1       	ldi	r25, 0x16	; 22
    374a:	90 93 a6 00 	sts	0x00A6, r25
    374e:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_temp_max();
    3752:	0e 94 40 16 	call	0x2c80	; 0x2c80 <show_lcd_edit_temp_max>
        break;
    3756:	08 95       	ret
        case OM_SET_AS_TIME_ON:
		  KBD_set_type(0);
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <KBD_set_type>
		  old_as_wait = as_wait;
    375e:	80 91 76 05 	lds	r24, 0x0576
    3762:	80 93 9f 05 	sts	0x059F, r24
          SET_STATE(run_edit_as_wait);
    3766:	89 ed       	ldi	r24, 0xD9	; 217
    3768:	95 e1       	ldi	r25, 0x15	; 21
    376a:	90 93 a6 00 	sts	0x00A6, r25
    376e:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_as_wait();
    3772:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <show_lcd_edit_as_wait>
        break;
    3776:	08 95       	ret
        case OM_SET_FM_STATIONS:
	      LCD_clear();
    3778:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
          channel = 0;
    377c:	10 92 2a 05 	sts	0x052A, r1
		  key_stb = 0;
    3780:	10 92 25 05 	sts	0x0525, r1
          tda7313SetMute(1);
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	0e 94 ce 1f 	call	0x3f9c	; 0x3f9c <tda7313SetMute>
		  tda7313SetInput(FM_INPUT);
    378a:	82 e0       	ldi	r24, 0x02	; 2
    378c:	0e 94 c4 1f 	call	0x3f88	; 0x3f88 <tda7313SetInput>
	      tda7313Set_Param(MM_VOLUME, 0);
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	60 e0       	ldi	r22, 0x00	; 0
    3794:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <tda7313Set_Param>
          SET_STATE(run_edit_fm_stations);
    3798:	87 ea       	ldi	r24, 0xA7	; 167
    379a:	97 e1       	ldi	r25, 0x17	; 23
    379c:	90 93 a6 00 	sts	0x00A6, r25
    37a0:	80 93 a5 00 	sts	0x00A5, r24
          RTOS_setTask(EVENT_SET_STB_OUT_ON, 0, 0);
    37a4:	89 ea       	ldi	r24, 0xA9	; 169
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	40 e0       	ldi	r20, 0x00	; 0
    37ac:	50 e0       	ldi	r21, 0x00	; 0
    37ae:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
		  show_lcd_edit_fm_stations();
    37b2:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <show_lcd_edit_fm_stations>
        break;
    37b6:	08 95       	ret
        case OM_SET_RC5_CODE:
	      LCD_clear();
    37b8:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
		  rc5menu = KEY_STANDBY;
    37bc:	10 92 22 05 	sts	0x0522, r1
		  edit_rc5 = 1;
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	80 93 26 05 	sts	0x0526, r24
          SET_STATE(run_edit_rc5_code);
    37c6:	8d e6       	ldi	r24, 0x6D	; 109
    37c8:	9a e1       	ldi	r25, 0x1A	; 26
    37ca:	90 93 a6 00 	sts	0x00A6, r25
    37ce:	80 93 a5 00 	sts	0x00A5, r24
		  show_lcd_edit_rc5_code();
    37d2:	0e 94 24 1a 	call	0x3448	; 0x3448 <show_lcd_edit_rc5_code>
        break;
    37d6:	08 95       	ret
      }
    break;
    case EVENT_SET_STB_OUT_ON:
      if (load_stb_out() == 1) { LED_STB_OUT_0; } else { LED_STB_OUT_1; }
    37d8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <load_stb_out>
    37dc:	81 30       	cpi	r24, 0x01	; 1
    37de:	11 f4       	brne	.+4      	; 0x37e4 <run_option+0x1e4>
    37e0:	c2 98       	cbi	0x18, 2	; 24
    37e2:	01 c0       	rjmp	.+2      	; 0x37e6 <run_option+0x1e6>
    37e4:	c2 9a       	sbi	0x18, 2	; 24
      RTOS_setTask(EVENT_SET_AS_WAIT_ON, (as_wait * 200), 0);
    37e6:	60 91 76 05 	lds	r22, 0x0576
    37ea:	88 ec       	ldi	r24, 0xC8	; 200
    37ec:	68 9f       	mul	r22, r24
    37ee:	b0 01       	movw	r22, r0
    37f0:	11 24       	eor	r1, r1
    37f2:	8b ea       	ldi	r24, 0xAB	; 171
    37f4:	40 e0       	ldi	r20, 0x00	; 0
    37f6:	50 e0       	ldi	r21, 0x00	; 0
    37f8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <RTOS_setTask>
    break;
    37fc:	08 95       	ret
    case EVENT_SET_AS_WAIT_ON:
	  LED_AC_WAIT_on();
    37fe:	c3 9a       	sbi	0x18, 3	; 24
    break;
    3800:	08 95       	ret
    case EVENT_KEY_MENU:
      main_mode = MODE_STANDBY;
    3802:	10 92 2b 05 	sts	0x052B, r1
	  omenu = 0;
    3806:	10 92 21 05 	sts	0x0521, r1
	  LCD_clear();
    380a:	0e 94 41 01 	call	0x282	; 0x282 <LCD_clear>
      LCD_load_bignum();
    380e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LCD_load_bignum>
      SET_STATE(run_standby);
    3812:	87 ef       	ldi	r24, 0xF7	; 247
    3814:	90 e1       	ldi	r25, 0x10	; 16
    3816:	90 93 a6 00 	sts	0x00A6, r25
    381a:	80 93 a5 00 	sts	0x00A5, r24
    381e:	08 95       	ret

00003820 <ds18x20SendBit>:
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit)
{
  cli();
    3820:	f8 94       	cli
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;						/* Pin as output (0) */
    3822:	bc 9a       	sbi	0x17, 4	; 23
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
    3824:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3826:	90 e2       	ldi	r25, 0x20	; 32
    3828:	9a 95       	dec	r25
    382a:	f1 f7       	brne	.-4      	; 0x3828 <ds18x20SendBit+0x8>
  _delay_us(6);
  if (!bit)	_delay_us(54);
    382c:	88 23       	and	r24, r24
    382e:	31 f4       	brne	.+12     	; 0x383c <ds18x20SendBit+0x1c>
    3830:	e7 ed       	ldi	r30, 0xD7	; 215
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	31 97       	sbiw	r30, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <ds18x20SendBit+0x14>
    3838:	00 c0       	rjmp	.+0      	; 0x383a <ds18x20SendBit+0x1a>
    383a:	00 00       	nop
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
    383c:	bc 98       	cbi	0x17, 4	; 23
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
    383e:	c4 9a       	sbi	0x18, 4	; 24
    3840:	f5 e3       	ldi	r31, 0x35	; 53
    3842:	fa 95       	dec	r31
    3844:	f1 f7       	brne	.-4      	; 0x3842 <ds18x20SendBit+0x22>
    3846:	00 00       	nop
  _delay_us(10);
  if (bit) _delay_us(54);
    3848:	88 23       	and	r24, r24
    384a:	31 f0       	breq	.+12     	; 0x3858 <ds18x20SendBit+0x38>
    384c:	87 ed       	ldi	r24, 0xD7	; 215
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	f1 f7       	brne	.-4      	; 0x3850 <ds18x20SendBit+0x30>
    3854:	00 c0       	rjmp	.+0      	; 0x3856 <ds18x20SendBit+0x36>
    3856:	00 00       	nop
  sei();
    3858:	78 94       	sei
  return;
}
    385a:	08 95       	ret

0000385c <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
static void ds18x20SendByte(uint8_t byte)
{
    385c:	0f 93       	push	r16
    385e:	1f 93       	push	r17
    3860:	08 2f       	mov	r16, r24
    3862:	18 e0       	ldi	r17, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01);
    3864:	80 2f       	mov	r24, r16
    3866:	81 70       	andi	r24, 0x01	; 1
    3868:	0e 94 10 1c 	call	0x3820	; 0x3820 <ds18x20SendBit>
	byte >>= 1;
    386c:	06 95       	lsr	r16
    386e:	11 50       	subi	r17, 0x01	; 1
}
//=============================================================================
static void ds18x20SendByte(uint8_t byte)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    3870:	c9 f7       	brne	.-14     	; 0x3864 <ds18x20SendByte+0x8>
	ds18x20SendBit(byte & 0x01);
	byte >>= 1;
  }
  return;
}
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	08 95       	ret

00003878 <ds18x20GetBit>:
}

static uint8_t ds18x20GetBit(void)
{
  uint8_t ret;
  cli();
    3878:	f8 94       	cli
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;						/* Pin as output (0) */
    387a:	bc 9a       	sbi	0x17, 4	; 23
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
    387c:	c4 98       	cbi	0x18, 4	; 24
    387e:	80 e2       	ldi	r24, 0x20	; 32
    3880:	8a 95       	dec	r24
    3882:	f1 f7       	brne	.-4      	; 0x3880 <ds18x20GetBit+0x8>
  _delay_us(6);										/* Strob */
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
    3884:	bc 98       	cbi	0x17, 4	; 23
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
    3886:	c4 9a       	sbi	0x18, 4	; 24
    3888:	e0 e3       	ldi	r30, 0x30	; 48
    388a:	ea 95       	dec	r30
    388c:	f1 f7       	brne	.-4      	; 0x388a <ds18x20GetBit+0x12>
  _delay_us(9);
  ret = PIN(ONE_WIRE) & ONE_WIRE_LINE;
    388e:	86 b3       	in	r24, 0x16	; 22
    3890:	eb ed       	ldi	r30, 0xDB	; 219
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	31 97       	sbiw	r30, 0x01	; 1
    3896:	f1 f7       	brne	.-4      	; 0x3894 <ds18x20GetBit+0x1c>
    3898:	00 c0       	rjmp	.+0      	; 0x389a <ds18x20GetBit+0x22>
    389a:	00 00       	nop
  _delay_us(55);
  sei();
    389c:	78 94       	sei
  return ret;
}
    389e:	80 71       	andi	r24, 0x10	; 16
    38a0:	08 95       	ret

000038a2 <ds18x20IsOnBus>:
static uint8_t devCount = 0;
//=============================================================================
static uint8_t ds18x20IsOnBus(void)
{
  uint8_t ret;
  cli();
    38a2:	f8 94       	cli
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;						/* Pin as output (0) */
    38a4:	bc 9a       	sbi	0x17, 4	; 23
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
    38a6:	c4 98       	cbi	0x18, 4	; 24
    38a8:	8f e7       	ldi	r24, 0x7F	; 127
    38aa:	97 e0       	ldi	r25, 0x07	; 7
    38ac:	01 97       	sbiw	r24, 0x01	; 1
    38ae:	f1 f7       	brne	.-4      	; 0x38ac <ds18x20IsOnBus+0xa>
    38b0:	00 c0       	rjmp	.+0      	; 0x38b2 <ds18x20IsOnBus+0x10>
    38b2:	00 00       	nop
  _delay_us(480);										/* Reset */
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
    38b4:	bc 98       	cbi	0x17, 4	; 23
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
    38b6:	c4 9a       	sbi	0x18, 4	; 24
    38b8:	e7 e1       	ldi	r30, 0x17	; 23
    38ba:	f1 e0       	ldi	r31, 0x01	; 1
    38bc:	31 97       	sbiw	r30, 0x01	; 1
    38be:	f1 f7       	brne	.-4      	; 0x38bc <ds18x20IsOnBus+0x1a>
    38c0:	00 c0       	rjmp	.+0      	; 0x38c2 <ds18x20IsOnBus+0x20>
    38c2:	00 00       	nop
  _delay_us(70);										/* Wait for response */
  ret = !(PIN(ONE_WIRE) & ONE_WIRE_LINE);
    38c4:	96 b3       	in	r25, 0x16	; 22
    38c6:	e7 e6       	ldi	r30, 0x67	; 103
    38c8:	f6 e0       	ldi	r31, 0x06	; 6
    38ca:	31 97       	sbiw	r30, 0x01	; 1
    38cc:	f1 f7       	brne	.-4      	; 0x38ca <ds18x20IsOnBus+0x28>
    38ce:	00 c0       	rjmp	.+0      	; 0x38d0 <ds18x20IsOnBus+0x2e>
    38d0:	00 00       	nop
  _delay_us(410);
  sei();
    38d2:	78 94       	sei
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
  _delay_us(480);										/* Reset */
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
  _delay_us(70);										/* Wait for response */
  ret = !(PIN(ONE_WIRE) & ONE_WIRE_LINE);
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	94 fd       	sbrc	r25, 4
    38d8:	80 e0       	ldi	r24, 0x00	; 0
  _delay_us(410);
  sei();
  return ret;
}
    38da:	08 95       	ret

000038dc <ds18x20GetAddress>:
  return;
}
//=============================================================================
uint8_t ds18x20GetAddress(uint8_t num, uint8_t c)
{
  if (num > devCount) return 0;
    38dc:	90 91 2d 05 	lds	r25, 0x052D
    38e0:	98 17       	cp	r25, r24
    38e2:	90 f0       	brcs	.+36     	; 0x3908 <ds18x20GetAddress+0x2c>
  if (c > 8) return 0;
    38e4:	69 30       	cpi	r22, 0x09	; 9
    38e6:	90 f4       	brcc	.+36     	; 0x390c <ds18x20GetAddress+0x30>
  return (devs[num - 1].id[c]);
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	fc 01       	movw	r30, r24
    38ee:	24 e0       	ldi	r18, 0x04	; 4
    38f0:	ee 0f       	add	r30, r30
    38f2:	ff 1f       	adc	r31, r31
    38f4:	2a 95       	dec	r18
    38f6:	e1 f7       	brne	.-8      	; 0x38f0 <ds18x20GetAddress+0x14>
    38f8:	e8 0f       	add	r30, r24
    38fa:	f9 1f       	adc	r31, r25
    38fc:	e2 5d       	subi	r30, 0xD2	; 210
    38fe:	fa 4f       	sbci	r31, 0xFA	; 250
    3900:	e6 0f       	add	r30, r22
    3902:	f1 1d       	adc	r31, r1
    3904:	81 85       	ldd	r24, Z+9	; 0x09
    3906:	08 95       	ret
  return;
}
//=============================================================================
uint8_t ds18x20GetAddress(uint8_t num, uint8_t c)
{
  if (num > devCount) return 0;
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	08 95       	ret
  if (c > 8) return 0;
    390c:	80 e0       	ldi	r24, 0x00	; 0
  return (devs[num - 1].id[c]);
}
    390e:	08 95       	ret

00003910 <ds18x20SearchDevices>:
  }
  return newDeviation;
}
//=============================================================================
void ds18x20SearchDevices(void)
{
    3910:	af 92       	push	r10
    3912:	bf 92       	push	r11
    3914:	cf 92       	push	r12
    3916:	df 92       	push	r13
    3918:	ef 92       	push	r14
    391a:	ff 92       	push	r15
    391c:	0f 93       	push	r16
    391e:	1f 93       	push	r17
    3920:	cf 93       	push	r28
    3922:	df 93       	push	r29
  uint8_t lastDeviation;
  uint8_t count = 0;
  /* Reset addresses */
  for (i = 0; i < DS18X20_MAX_DEV; i++)
	for (j = 0; j < DS18X20_ID_LEN; j++)
	  devs[i].id[j] = 0x00;
    3924:	10 92 37 05 	sts	0x0537, r1
    3928:	10 92 38 05 	sts	0x0538, r1
    392c:	10 92 39 05 	sts	0x0539, r1
    3930:	10 92 3a 05 	sts	0x053A, r1
    3934:	10 92 3b 05 	sts	0x053B, r1
    3938:	10 92 3c 05 	sts	0x053C, r1
    393c:	10 92 3d 05 	sts	0x053D, r1
    3940:	10 92 3e 05 	sts	0x053E, r1
    3944:	10 92 48 05 	sts	0x0548, r1
    3948:	10 92 49 05 	sts	0x0549, r1
    394c:	10 92 4a 05 	sts	0x054A, r1
    3950:	10 92 4b 05 	sts	0x054B, r1
    3954:	10 92 4c 05 	sts	0x054C, r1
    3958:	10 92 4d 05 	sts	0x054D, r1
    395c:	10 92 4e 05 	sts	0x054E, r1
    3960:	10 92 4f 05 	sts	0x054F, r1
    3964:	cc 24       	eor	r12, r12
    3966:	bb 24       	eor	r11, r11
    3968:	87 e3       	ldi	r24, 0x37	; 55
    396a:	95 e0       	ldi	r25, 0x05	; 5
    396c:	8c 01       	movw	r16, r24
    396e:	dc 01       	movw	r26, r24
    3970:	f8 01       	movw	r30, r16
	/* Search all sensors */
  newID = devs[0].id;
  lastDeviation = 0;
  currentID = newID;
  do {
    for (j = 0; j < DS18X20_ID_LEN; j++)
    3972:	80 e0       	ldi	r24, 0x00	; 0
      newID[j] = currentID[j];
    3974:	9d 91       	ld	r25, X+
    3976:	91 93       	st	Z+, r25
	/* Search all sensors */
  newID = devs[0].id;
  lastDeviation = 0;
  currentID = newID;
  do {
    for (j = 0; j < DS18X20_ID_LEN; j++)
    3978:	8f 5f       	subi	r24, 0xFF	; 255
    397a:	88 30       	cpi	r24, 0x08	; 8
    397c:	d9 f7       	brne	.-10     	; 0x3974 <ds18x20SearchDevices+0x64>
      newID[j] = currentID[j];
  	  if (!ds18x20IsOnBus()) {
    397e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <ds18x20IsOnBus>
    3982:	88 23       	and	r24, r24
    3984:	19 f4       	brne	.+6      	; 0x398c <ds18x20SearchDevices+0x7c>
	    devCount = 0;
    3986:	10 92 2d 05 	sts	0x052D, r1
	    return;
    398a:	50 c0       	rjmp	.+160    	; 0x3a2c <ds18x20SearchDevices+0x11c>
  uint8_t newDeviation = 0;
  uint8_t bitMask = 0x01;
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
    398c:	80 ef       	ldi	r24, 0xF0	; 240
    398e:	0e 94 2e 1c 	call	0x385c	; 0x385c <ds18x20SendByte>
    3992:	e8 01       	movw	r28, r16
}
//=============================================================================
static uint8_t ds18x20SearchRom(uint8_t *bitPattern, uint8_t lastDeviation)
{
  uint8_t currBit;
  uint8_t newDeviation = 0;
    3994:	dd 24       	eor	r13, r13
  uint8_t bitMask = 0x01;
    3996:	ff 24       	eor	r15, r15
    3998:	f3 94       	inc	r15
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
  /* Walk through all 64 bits */
  for (currBit = 0; currBit < DS18X20_ID_LEN * 8; currBit++)
    399a:	ee 24       	eor	r14, r14
  {
	/* Read bit from bus twice. */
	bitA = ds18x20GetBit();
    399c:	0e 94 3c 1c 	call	0x3878	; 0x3878 <ds18x20GetBit>
    39a0:	a8 2e       	mov	r10, r24
	bitB = ds18x20GetBit();
    39a2:	0e 94 3c 1c 	call	0x3878	; 0x3878 <ds18x20GetBit>
	if (bitA && bitB) {								/* Both bits 1 = ERROR */
    39a6:	aa 20       	and	r10, r10
    39a8:	19 f0       	breq	.+6      	; 0x39b0 <ds18x20SearchDevices+0xa0>
    39aa:	88 23       	and	r24, r24
    39ac:	81 f0       	breq	.+32     	; 0x39ce <ds18x20SearchDevices+0xbe>
    39ae:	27 c0       	rjmp	.+78     	; 0x39fe <ds18x20SearchDevices+0xee>
	  return 0xFF;
	} else if (!(bitA || bitB)) {					/* Both bits 0 */
    39b0:	88 23       	and	r24, r24
    39b2:	81 f4       	brne	.+32     	; 0x39d4 <ds18x20SearchDevices+0xc4>
	  if (currBit == lastDeviation) {				/* Select 1 if device has been selected */
    39b4:	eb 14       	cp	r14, r11
    39b6:	59 f0       	breq	.+22     	; 0x39ce <ds18x20SearchDevices+0xbe>
    39b8:	98 81       	ld	r25, Y
	  *bitPattern |= bitMask;
	  } else if (currBit > lastDeviation) {		/* Select 0 if no, and remember device */
    39ba:	be 14       	cp	r11, r14
    39bc:	28 f4       	brcc	.+10     	; 0x39c8 <ds18x20SearchDevices+0xb8>
	    (*bitPattern) &= ~bitMask;
    39be:	8f 2d       	mov	r24, r15
    39c0:	80 95       	com	r24
    39c2:	89 23       	and	r24, r25
    39c4:	88 83       	st	Y, r24
    39c6:	0c c0       	rjmp	.+24     	; 0x39e0 <ds18x20SearchDevices+0xd0>
	    newDeviation = currBit;
	  } else if (!(*bitPattern & bitMask)) {		 /* Otherwise just remember device */
    39c8:	9f 21       	and	r25, r15
    39ca:	51 f0       	breq	.+20     	; 0x39e0 <ds18x20SearchDevices+0xd0>
    39cc:	0a c0       	rjmp	.+20     	; 0x39e2 <ds18x20SearchDevices+0xd2>
	    newDeviation = currBit;
	  }
    } else { /* Bits differ */
	  if (bitA) *bitPattern |= bitMask; else *bitPattern &= ~bitMask;
    39ce:	88 81       	ld	r24, Y
    39d0:	8f 29       	or	r24, r15
    39d2:	04 c0       	rjmp	.+8      	; 0x39dc <ds18x20SearchDevices+0xcc>
    39d4:	9f 2d       	mov	r25, r15
    39d6:	90 95       	com	r25
    39d8:	88 81       	ld	r24, Y
    39da:	89 23       	and	r24, r25
    39dc:	88 83       	st	Y, r24
    39de:	01 c0       	rjmp	.+2      	; 0x39e2 <ds18x20SearchDevices+0xd2>
	  if (currBit == lastDeviation) {				/* Select 1 if device has been selected */
	  *bitPattern |= bitMask;
	  } else if (currBit > lastDeviation) {		/* Select 0 if no, and remember device */
	    (*bitPattern) &= ~bitMask;
	    newDeviation = currBit;
	  } else if (!(*bitPattern & bitMask)) {		 /* Otherwise just remember device */
    39e0:	de 2c       	mov	r13, r14
	  }
    } else { /* Bits differ */
	  if (bitA) *bitPattern |= bitMask; else *bitPattern &= ~bitMask;
    }
    /* Send the selected bit to the bus. */
    ds18x20SendBit(*bitPattern & bitMask);
    39e2:	88 81       	ld	r24, Y
    39e4:	8f 21       	and	r24, r15
    39e6:	0e 94 10 1c 	call	0x3820	; 0x3820 <ds18x20SendBit>
    /* Adjust bitMask and bitPattern pointer. */
    bitMask <<= 1;
    39ea:	ff 0c       	add	r15, r15
    if (!bitMask)
    39ec:	19 f4       	brne	.+6      	; 0x39f4 <ds18x20SearchDevices+0xe4>
    {
	  bitMask = 0x01;
	  bitPattern++;
    39ee:	21 96       	adiw	r28, 0x01	; 1
    ds18x20SendBit(*bitPattern & bitMask);
    /* Adjust bitMask and bitPattern pointer. */
    bitMask <<= 1;
    if (!bitMask)
    {
	  bitMask = 0x01;
    39f0:	ff 24       	eor	r15, r15
    39f2:	f3 94       	inc	r15
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
  /* Walk through all 64 bits */
  for (currBit = 0; currBit < DS18X20_ID_LEN * 8; currBit++)
    39f4:	e3 94       	inc	r14
    39f6:	8e 2d       	mov	r24, r14
    39f8:	80 34       	cpi	r24, 0x40	; 64
    39fa:	81 f6       	brne	.-96     	; 0x399c <ds18x20SearchDevices+0x8c>
    39fc:	02 c0       	rjmp	.+4      	; 0x3a02 <ds18x20SearchDevices+0xf2>
  {
	/* Read bit from bus twice. */
	bitA = ds18x20GetBit();
	bitB = ds18x20GetBit();
	if (bitA && bitB) {								/* Both bits 1 = ERROR */
	  return 0xFF;
    39fe:	dd 24       	eor	r13, r13
    3a00:	da 94       	dec	r13
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
	  count++;
    3a02:	c3 94       	inc	r12
	  newID=devs[count].id;
  } while (lastDeviation != 0);
    3a04:	dd 20       	and	r13, r13
    3a06:	81 f0       	breq	.+32     	; 0x3a28 <ds18x20SearchDevices+0x118>
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
	  count++;
	  newID=devs[count].id;
    3a08:	8c 2d       	mov	r24, r12
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	9c 01       	movw	r18, r24
    3a0e:	44 e0       	ldi	r20, 0x04	; 4
    3a10:	22 0f       	add	r18, r18
    3a12:	33 1f       	adc	r19, r19
    3a14:	4a 95       	dec	r20
    3a16:	e1 f7       	brne	.-8      	; 0x3a10 <ds18x20SearchDevices+0x100>
    3a18:	28 0f       	add	r18, r24
    3a1a:	39 1f       	adc	r19, r25
  	  if (!ds18x20IsOnBus()) {
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
    3a1c:	c8 01       	movw	r24, r16
      newID[j] = currentID[j];
  	  if (!ds18x20IsOnBus()) {
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
    3a1e:	bd 2c       	mov	r11, r13
	  currentID = newID;
	  count++;
	  newID=devs[count].id;
    3a20:	89 01       	movw	r16, r18
    3a22:	09 5c       	subi	r16, 0xC9	; 201
    3a24:	1a 4f       	sbci	r17, 0xFA	; 250
    3a26:	a3 cf       	rjmp	.-186    	; 0x396e <ds18x20SearchDevices+0x5e>
  } while (lastDeviation != 0);
  devCount = count;
    3a28:	c0 92 2d 05 	sts	0x052D, r12
  return;
}
    3a2c:	df 91       	pop	r29
    3a2e:	cf 91       	pop	r28
    3a30:	1f 91       	pop	r17
    3a32:	0f 91       	pop	r16
    3a34:	ff 90       	pop	r15
    3a36:	ef 90       	pop	r14
    3a38:	df 90       	pop	r13
    3a3a:	cf 90       	pop	r12
    3a3c:	bf 90       	pop	r11
    3a3e:	af 90       	pop	r10
    3a40:	08 95       	ret

00003a42 <ds18x20Process>:
//=============================================================================
uint8_t ds18x20Process(void)
{
    3a42:	af 92       	push	r10
    3a44:	bf 92       	push	r11
    3a46:	cf 92       	push	r12
    3a48:	df 92       	push	r13
    3a4a:	ef 92       	push	r14
    3a4c:	ff 92       	push	r15
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	df 93       	push	r29
    3a54:	cf 93       	push	r28
    3a56:	0f 92       	push	r0
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
static void ds18x20GetAllTemps()
{
  uint8_t i, j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
    3a5c:	ff 24       	eor	r15, r15
    3a5e:	5a c0       	rjmp	.+180    	; 0x3b14 <ds18x20Process+0xd2>
  {
	if (ds18x20IsOnBus())
    3a60:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <ds18x20IsOnBus>
    3a64:	88 23       	and	r24, r24
    3a66:	09 f4       	brne	.+2      	; 0x3a6a <ds18x20Process+0x28>
    3a68:	54 c0       	rjmp	.+168    	; 0x3b12 <ds18x20Process+0xd0>
}
//=============================================================================
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
    3a6a:	85 e5       	ldi	r24, 0x55	; 85
    3a6c:	0e 94 2e 1c 	call	0x385c	; 0x385c <ds18x20SendByte>
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
    3a70:	8f 2d       	mov	r24, r15
    3a72:	90 e0       	ldi	r25, 0x00	; 0
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
    3a74:	6c 01       	movw	r12, r24
    3a76:	e4 e0       	ldi	r30, 0x04	; 4
    3a78:	cc 0c       	add	r12, r12
    3a7a:	dd 1c       	adc	r13, r13
    3a7c:	ea 95       	dec	r30
    3a7e:	e1 f7       	brne	.-8      	; 0x3a78 <ds18x20Process+0x36>
    3a80:	c8 0e       	add	r12, r24
    3a82:	d9 1e       	adc	r13, r25
    3a84:	87 e3       	ldi	r24, 0x37	; 55
    3a86:	95 e0       	ldi	r25, 0x05	; 5
    3a88:	c8 0e       	add	r12, r24
    3a8a:	d9 1e       	adc	r13, r25
    3a8c:	08 e0       	ldi	r16, 0x08	; 8
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
  for (i = 0; i < 8; i++)
	ds18x20SendByte(dev->id[i]);
    3a8e:	d6 01       	movw	r26, r12
    3a90:	8d 91       	ld	r24, X+
    3a92:	6d 01       	movw	r12, r26
    3a94:	0e 94 2e 1c 	call	0x385c	; 0x385c <ds18x20SendByte>
    3a98:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
  for (i = 0; i < 8; i++)
    3a9a:	c9 f7       	brne	.-14     	; 0x3a8e <ds18x20Process+0x4c>
  for (i = 0; i < devCount; i++)
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
    3a9c:	8e eb       	ldi	r24, 0xBE	; 190
    3a9e:	0e 94 2e 1c 	call	0x385c	; 0x385c <ds18x20SendByte>
    3aa2:	70 e5       	ldi	r23, 0x50	; 80
    3aa4:	a7 2e       	mov	r10, r23
    3aa6:	75 e0       	ldi	r23, 0x05	; 5
    3aa8:	b7 2e       	mov	r11, r23
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
    3aaa:	85 01       	movw	r16, r10
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
    3aac:	ee 24       	eor	r14, r14
    3aae:	68 e0       	ldi	r22, 0x08	; 8
    3ab0:	d6 2e       	mov	r13, r22
}
//=============================================================================
static uint8_t ds18x20GetByte(void)
{
  uint8_t i, ret;
  ret = 0;
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    3ab4:	96 95       	lsr	r25
	if (ds18x20GetBit()) ret |= 0x80;
    3ab6:	99 83       	std	Y+1, r25	; 0x01
    3ab8:	0e 94 3c 1c 	call	0x3878	; 0x3878 <ds18x20GetBit>
    3abc:	99 81       	ldd	r25, Y+1	; 0x01
    3abe:	81 11       	cpse	r24, r1
    3ac0:	90 68       	ori	r25, 0x80	; 128
    3ac2:	da 94       	dec	r13
//=============================================================================
static uint8_t ds18x20GetByte(void)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    3ac4:	b9 f7       	brne	.-18     	; 0x3ab4 <ds18x20Process+0x72>
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
	  for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
		arr[j] = ds18x20GetByte();
    3ac6:	f8 01       	movw	r30, r16
    3ac8:	91 93       	st	Z+, r25
    3aca:	8f 01       	movw	r16, r30

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    3acc:	e9 26       	eor	r14, r25
    3ace:	88 e0       	ldi	r24, 0x08	; 8
    3ad0:	9c e8       	ldi	r25, 0x8C	; 140
    3ad2:	e6 94       	lsr	r14
    3ad4:	08 f4       	brcc	.+2      	; 0x3ad8 <ds18x20Process+0x96>
    3ad6:	e9 26       	eor	r14, r25
    3ad8:	8a 95       	dec	r24
    3ada:	d9 f7       	brne	.-10     	; 0x3ad2 <ds18x20Process+0x90>
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
	  for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    3adc:	f5 e0       	ldi	r31, 0x05	; 5
    3ade:	09 35       	cpi	r16, 0x59	; 89
    3ae0:	1f 07       	cpc	r17, r31
    3ae2:	29 f7       	brne	.-54     	; 0x3aae <ds18x20Process+0x6c>
		arr[j] = ds18x20GetByte();
		crc = _crc_ibutton_update(crc, arr[j]);
	  }
  	  if (crc == 0)
    3ae4:	ee 20       	and	r14, r14
    3ae6:	a9 f4       	brne	.+42     	; 0x3b12 <ds18x20Process+0xd0>
	  {
		for (j = 0; j < DS18X20_SCRATCH_LEN; j++)  devs[i].sp[j] = arr[j];
    3ae8:	8f 2d       	mov	r24, r15
    3aea:	90 e0       	ldi	r25, 0x00	; 0
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
    3aec:	fc 01       	movw	r30, r24
    3aee:	54 e0       	ldi	r21, 0x04	; 4
    3af0:	ee 0f       	add	r30, r30
    3af2:	ff 1f       	adc	r31, r31
    3af4:	5a 95       	dec	r21
    3af6:	e1 f7       	brne	.-8      	; 0x3af0 <ds18x20Process+0xae>
    3af8:	e8 0f       	add	r30, r24
    3afa:	f9 1f       	adc	r31, r25
    3afc:	e2 5d       	subi	r30, 0xD2	; 210
    3afe:	fa 4f       	sbci	r31, 0xFA	; 250
		arr[j] = ds18x20GetByte();
		crc = _crc_ibutton_update(crc, arr[j]);
	  }
  	  if (crc == 0)
	  {
		for (j = 0; j < DS18X20_SCRATCH_LEN; j++)  devs[i].sp[j] = arr[j];
    3b00:	d5 01       	movw	r26, r10
    3b02:	8d 91       	ld	r24, X+
    3b04:	5d 01       	movw	r10, r26
    3b06:	81 93       	st	Z+, r24
    3b08:	b9 e5       	ldi	r27, 0x59	; 89
    3b0a:	ab 16       	cp	r10, r27
    3b0c:	b5 e0       	ldi	r27, 0x05	; 5
    3b0e:	bb 06       	cpc	r11, r27
    3b10:	b9 f7       	brne	.-18     	; 0x3b00 <ds18x20Process+0xbe>
static void ds18x20GetAllTemps()
{
  uint8_t i, j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
    3b12:	f3 94       	inc	r15
    3b14:	80 91 2d 05 	lds	r24, 0x052D
    3b18:	f8 16       	cp	r15, r24
    3b1a:	08 f4       	brcc	.+2      	; 0x3b1e <ds18x20Process+0xdc>
    3b1c:	a1 cf       	rjmp	.-190    	; 0x3a60 <ds18x20Process+0x1e>
//=============================================================================
uint8_t ds18x20Process(void)
{
  ds18x20GetAllTemps();
  /* Convert temperature */
  if (ds18x20IsOnBus())
    3b1e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <ds18x20IsOnBus>
    3b22:	88 23       	and	r24, r24
    3b24:	41 f0       	breq	.+16     	; 0x3b36 <ds18x20Process+0xf4>
  return;
}
//=============================================================================
static void ds18x20ConvertTemp(void)
{
  ds18x20SendByte(DS18X20_CMD_SKIP_ROM);
    3b26:	8c ec       	ldi	r24, 0xCC	; 204
    3b28:	0e 94 2e 1c 	call	0x385c	; 0x385c <ds18x20SendByte>
  ds18x20SendByte(DS18X20_CMD_CONVERT);
    3b2c:	84 e4       	ldi	r24, 0x44	; 68
    3b2e:	0e 94 2e 1c 	call	0x385c	; 0x385c <ds18x20SendByte>
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;
    3b32:	c4 9a       	sbi	0x18, 4	; 24
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;
    3b34:	bc 9a       	sbi	0x17, 4	; 23
  ds18x20GetAllTemps();
  /* Convert temperature */
  if (ds18x20IsOnBus())
	ds18x20ConvertTemp();
  return devCount;
}
    3b36:	80 91 2d 05 	lds	r24, 0x052D
    3b3a:	0f 90       	pop	r0
    3b3c:	cf 91       	pop	r28
    3b3e:	df 91       	pop	r29
    3b40:	1f 91       	pop	r17
    3b42:	0f 91       	pop	r16
    3b44:	ff 90       	pop	r15
    3b46:	ef 90       	pop	r14
    3b48:	df 90       	pop	r13
    3b4a:	cf 90       	pop	r12
    3b4c:	bf 90       	pop	r11
    3b4e:	af 90       	pop	r10
    3b50:	08 95       	ret

00003b52 <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t num)
{
  int16_t ret = devs[num].temp;
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	fc 01       	movw	r30, r24
    3b56:	b4 e0       	ldi	r27, 0x04	; 4
    3b58:	ee 0f       	add	r30, r30
    3b5a:	ff 1f       	adc	r31, r31
    3b5c:	ba 95       	dec	r27
    3b5e:	e1 f7       	brne	.-8      	; 0x3b58 <ds18x20GetTemp+0x6>
    3b60:	e8 0f       	add	r30, r24
    3b62:	f9 1f       	adc	r31, r25
    3b64:	e2 5d       	subi	r30, 0xD2	; 210
    3b66:	fa 4f       	sbci	r31, 0xFA	; 250
    3b68:	60 81       	ld	r22, Z
    3b6a:	71 81       	ldd	r23, Z+1	; 0x01
  if (devs[num].id[0] == 0x28) /* DS18B20 */
    3b6c:	81 85       	ldd	r24, Z+9	; 0x09
    3b6e:	88 32       	cpi	r24, 0x28	; 40
    3b70:	61 f4       	brne	.+24     	; 0x3b8a <ds18x20GetTemp+0x38>
	ret = ret * 5 / 8;
    3b72:	cb 01       	movw	r24, r22
    3b74:	88 0f       	add	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	88 0f       	add	r24, r24
    3b7a:	99 1f       	adc	r25, r25
    3b7c:	86 0f       	add	r24, r22
    3b7e:	97 1f       	adc	r25, r23
    3b80:	68 e0       	ldi	r22, 0x08	; 8
    3b82:	70 e0       	ldi	r23, 0x00	; 0
    3b84:	0e 94 77 22 	call	0x44ee	; 0x44ee <__divmodhi4>
    3b88:	09 c0       	rjmp	.+18     	; 0x3b9c <ds18x20GetTemp+0x4a>
  else if (devs[num].id[0] == 0x10) /* DS18S20 */
    3b8a:	80 31       	cpi	r24, 0x10	; 16
    3b8c:	39 f4       	brne	.+14     	; 0x3b9c <ds18x20GetTemp+0x4a>
	ret = ret * 5;
    3b8e:	cb 01       	movw	r24, r22
    3b90:	88 0f       	add	r24, r24
    3b92:	99 1f       	adc	r25, r25
    3b94:	88 0f       	add	r24, r24
    3b96:	99 1f       	adc	r25, r25
    3b98:	68 0f       	add	r22, r24
    3b9a:	79 1f       	adc	r23, r25
	/* Return value is in 0.1В°C units */
  return ret;
}
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	08 95       	ret

00003ba0 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(void)
{
  return devCount;
}
    3ba0:	80 91 2d 05 	lds	r24, 0x052D
    3ba4:	08 95       	ret

00003ba6 <RC5_init>:
static uint8_t nbits;
static uint8_t nint;
//=============================================================================
void RC5_init(uint8_t addr)
{
  nint  = 0; nbits = 0; rc5.flip = -1; rc5_addr = addr;
    3ba6:	10 92 5b 05 	sts	0x055B, r1
    3baa:	10 92 5c 05 	sts	0x055C, r1
    3bae:	9f ef       	ldi	r25, 0xFF	; 255
    3bb0:	90 93 a5 05 	sts	0x05A5, r25
    3bb4:	80 93 5d 05 	sts	0x055D, r24
        
#if (RC5_PRESCALE==1024)
  TCCR0 = (1 << CS02) | (1 << CS00);
    3bb8:	85 e0       	ldi	r24, 0x05	; 5
    3bba:	83 bf       	out	0x33, r24	; 51
  TCCR0 = (1 << CS01) | (1 << CS00);
#else
#error This RC5_PRESCALE is not supported
#endif /* RC5_PRESCALE */
#if (RC5_INT == RC5_INT0)               
  MCUCR = (MCUCR | (1 << ISC01)) & ~ (1 << ISC00);
    3bbc:	85 b7       	in	r24, 0x35	; 53
    3bbe:	8c 7f       	andi	r24, 0xFC	; 252
    3bc0:	82 60       	ori	r24, 0x02	; 2
    3bc2:	85 bf       	out	0x35, r24	; 53
  GIFR = (1 << INTF0);
    3bc4:	80 e4       	ldi	r24, 0x40	; 64
    3bc6:	8a bf       	out	0x3a, r24	; 58
  GICR |= (1 << INT0);
    3bc8:	8b b7       	in	r24, 0x3b	; 59
    3bca:	80 64       	ori	r24, 0x40	; 64
    3bcc:	8b bf       	out	0x3b, r24	; 59
  GIFR = (1 << INTF1);
  GICR |= (1 << INT1);
#else
#error please define RC5_INT
#endif /* RC5_INT */
}
    3bce:	08 95       	ret

00003bd0 <__vector_11>:
//=============================================================================
ISR(TIMER0_OVF_vect)
{
    3bd0:	1f 92       	push	r1
    3bd2:	0f 92       	push	r0
    3bd4:	0f b6       	in	r0, 0x3f	; 63
    3bd6:	0f 92       	push	r0
    3bd8:	11 24       	eor	r1, r1
    3bda:	2f 93       	push	r18
    3bdc:	3f 93       	push	r19
    3bde:	4f 93       	push	r20
    3be0:	8f 93       	push	r24
    3be2:	9f 93       	push	r25
  TIMSK &= ~(1 << TOIE0);
    3be4:	89 b7       	in	r24, 0x39	; 57
    3be6:	8e 7f       	andi	r24, 0xFE	; 254
    3be8:	89 bf       	out	0x39, r24	; 57
  uint8_t _nbits = nbits;
    3bea:	20 91 5c 05 	lds	r18, 0x055C
  code_t _code = code;
    3bee:	80 91 59 05 	lds	r24, 0x0559
    3bf2:	90 91 5a 05 	lds	r25, 0x055A

  if (26 == _nbits)
    3bf6:	2a 31       	cpi	r18, 0x1A	; 26
    3bf8:	19 f4       	brne	.+6      	; 0x3c00 <__vector_11+0x30>
  {
    _nbits++; _code.w <<= 1;
    3bfa:	88 0f       	add	r24, r24
    3bfc:	99 1f       	adc	r25, r25
    3bfe:	02 c0       	rjmp	.+4      	; 0x3c04 <__vector_11+0x34>
  }
  if (27 == _nbits && _code.b[1] >= 0x30 /* AGC == 3 */ && 0 > rc5.flip)
    3c00:	2b 31       	cpi	r18, 0x1B	; 27
    3c02:	f9 f4       	brne	.+62     	; 0x3c42 <__vector_11+0x72>
    3c04:	90 33       	cpi	r25, 0x30	; 48
    3c06:	e8 f0       	brcs	.+58     	; 0x3c42 <__vector_11+0x72>
    3c08:	20 91 a5 05 	lds	r18, 0x05A5
    3c0c:	27 ff       	sbrs	r18, 7
    3c0e:	19 c0       	rjmp	.+50     	; 0x3c42 <__vector_11+0x72>
  {
    uint8_t _rc5_code;
    uint8_t _rc5_addr;
    /* we do the bit manipulation stuff by hand, because of code size */
    _rc5_code = _code.b[0] & 0x3f; /* 0b00111111 : #0..#5 */
    3c10:	48 2f       	mov	r20, r24
    _code.w <<= 2;
    3c12:	88 0f       	add	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	88 0f       	add	r24, r24
    3c18:	99 1f       	adc	r25, r25
    _rc5_addr = _code.b[1] & 0x1f; /* 0b00011111 : #6..#10 */
    3c1a:	29 2f       	mov	r18, r25
    3c1c:	2f 71       	andi	r18, 0x1F	; 31
    if (rc5_addr & 0x80 || rc5_addr == _rc5_addr)
    3c1e:	30 91 5d 05 	lds	r19, 0x055D
    3c22:	37 fd       	sbrc	r19, 7
    3c24:	02 c0       	rjmp	.+4      	; 0x3c2a <__vector_11+0x5a>
    3c26:	32 17       	cp	r19, r18
    3c28:	61 f4       	brne	.+24     	; 0x3c42 <__vector_11+0x72>
  if (27 == _nbits && _code.b[1] >= 0x30 /* AGC == 3 */ && 0 > rc5.flip)
  {
    uint8_t _rc5_code;
    uint8_t _rc5_addr;
    /* we do the bit manipulation stuff by hand, because of code size */
    _rc5_code = _code.b[0] & 0x3f; /* 0b00111111 : #0..#5 */
    3c2a:	84 2f       	mov	r24, r20
    3c2c:	8f 73       	andi	r24, 0x3F	; 63
    _code.w <<= 2;
    _rc5_addr = _code.b[1] & 0x1f; /* 0b00011111 : #6..#10 */
    if (rc5_addr & 0x80 || rc5_addr == _rc5_addr)
    {
      rc5.code = _rc5_code + 1;
    3c2e:	8f 5f       	subi	r24, 0xFF	; 255
    3c30:	80 93 a3 05 	sts	0x05A3, r24
      rc5.addr = _rc5_addr;
    3c34:	20 93 a4 05 	sts	0x05A4, r18
      signed char flip = 0;
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	95 ff       	sbrs	r25, 5
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
      if (_code.b[1] & 0x20) /* 0b00100000 : #11 */ flip = 1;
      rc5.flip = flip;
    3c3e:	80 93 a5 05 	sts	0x05A5, r24
    }
  }
  nint = 0;
    3c42:	10 92 5b 05 	sts	0x055B, r1
  nbits = 0;
    3c46:	10 92 5c 05 	sts	0x055C, r1
#if (RC5_INT == RC5_INT0)               
  MCUCR = (MCUCR | (1 << ISC01)) & ~ (1 << ISC00);
    3c4a:	85 b7       	in	r24, 0x35	; 53
    3c4c:	8c 7f       	andi	r24, 0xFC	; 252
    3c4e:	82 60       	ori	r24, 0x02	; 2
    3c50:	85 bf       	out	0x35, r24	; 53
  GIFR = (1 << INTF0);
    3c52:	80 e4       	ldi	r24, 0x40	; 64
    3c54:	8a bf       	out	0x3a, r24	; 58
  GICR |= (1 << INT0);
    3c56:	8b b7       	in	r24, 0x3b	; 59
    3c58:	80 64       	ori	r24, 0x40	; 64
    3c5a:	8b bf       	out	0x3b, r24	; 59
#elif (RC5_INT == RC5_INT1)             
  MCUCR = (MCUCR | (1 << ISC11)) & ~ (1 << ISC10);
  GIFR = (1 << INTF1);
  GICR |= (1 << INT1);
#endif
}
    3c5c:	9f 91       	pop	r25
    3c5e:	8f 91       	pop	r24
    3c60:	4f 91       	pop	r20
    3c62:	3f 91       	pop	r19
    3c64:	2f 91       	pop	r18
    3c66:	0f 90       	pop	r0
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	0f 90       	pop	r0
    3c6c:	1f 90       	pop	r1
    3c6e:	18 95       	reti

00003c70 <__vector_1>:
#if (RC5_INT == RC5_INT0)               
ISR(INT0_vect)
#elif (RC5_INT == RC5_INT1)             
ISR(INT1_vect)
#endif /* RC5_INT */
{
    3c70:	1f 92       	push	r1
    3c72:	0f 92       	push	r0
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	0f 92       	push	r0
    3c78:	11 24       	eor	r1, r1
    3c7a:	2f 93       	push	r18
    3c7c:	3f 93       	push	r19
    3c7e:	4f 93       	push	r20
    3c80:	5f 93       	push	r21
    3c82:	6f 93       	push	r22
    3c84:	7f 93       	push	r23
    3c86:	8f 93       	push	r24
    3c88:	9f 93       	push	r25
  if (rc5.flip == -1)
    3c8a:	80 91 a5 05 	lds	r24, 0x05A5
    3c8e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c90:	09 f0       	breq	.+2      	; 0x3c94 <__vector_1+0x24>
    3c92:	3e c0       	rjmp	.+124    	; 0x3d10 <__vector_1+0xa0>
  {
  code_t _code = code;
    3c94:	80 91 59 05 	lds	r24, 0x0559
    3c98:	90 91 5a 05 	lds	r25, 0x055A
  uint8_t _nint = nint;
    3c9c:	30 91 5b 05 	lds	r19, 0x055B
  uint8_t tcnt0 = TCNT0;
    3ca0:	22 b7       	in	r18, 0x32	; 50
  TCNT0 = 0;
    3ca2:	12 be       	out	0x32, r1	; 50
        
  if (0 == _nint)
    3ca4:	33 23       	and	r19, r19
    3ca6:	61 f4       	brne	.+24     	; 0x3cc0 <__vector_1+0x50>
  {
  /* INTx on both edges */
#if (RC5_INT == RC5_INT0)               
   MCUCR = (MCUCR | (1 << ISC00)) & ~ (1 << ISC01);
    3ca8:	85 b7       	in	r24, 0x35	; 53
    3caa:	8c 7f       	andi	r24, 0xFC	; 252
    3cac:	81 60       	ori	r24, 0x01	; 1
    3cae:	85 bf       	out	0x35, r24	; 53
#elif (RC5_INT == RC5_INT1)             
   MCUCR = (MCUCR | (1 << ISC10)) & ~ (1 << ISC11);
#endif /* RC5_INT */
      
  TIFR = (1 << TOV0);
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	88 bf       	out	0x38, r24	; 56
  TIMSK |= (1 << TOIE0);
    3cb4:	89 b7       	in	r24, 0x39	; 57
    3cb6:	81 60       	ori	r24, 0x01	; 1
    3cb8:	89 bf       	out	0x39, r24	; 57
  _code.w = 0;
    3cba:	80 e0       	ldi	r24, 0x00	; 0
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	21 c0       	rjmp	.+66     	; 0x3d02 <__vector_1+0x92>
  } else {
    /* Number of bits of the just elapsed period */
    uint8_t n = 1;
    /* Bits received so far */
    uint8_t _nbits = nbits;
    3cc0:	60 91 5c 05 	lds	r22, 0x055C
    /* is TCNT0 close to RC5_TICKS or RC5_TICKS/2 ? */
    if (tcnt0 > RC5_TICKS + RC5_DELTA)
    3cc4:	20 32       	cpi	r18, 0x20	; 32
    3cc6:	b8 f4       	brcc	.+46     	; 0x3cf6 <__vector_1+0x86>
      goto invalid;
    else if (tcnt0 < RC5_TICKS/2 - RC5_DELTA)
    3cc8:	29 30       	cpi	r18, 0x09	; 9
    3cca:	a8 f0       	brcs	.+42     	; 0x3cf6 <__vector_1+0x86>
      goto invalid;
    else if (tcnt0 > RC5_TICKS - RC5_DELTA)
    3ccc:	28 31       	cpi	r18, 0x18	; 24
    3cce:	20 f4       	brcc	.+8      	; 0x3cd8 <__vector_1+0x68>
      n = 2;
    else if (tcnt0 > RC5_TICKS/2 + RC5_DELTA)
    3cd0:	22 31       	cpi	r18, 0x12	; 18
    3cd2:	88 f4       	brcc	.+34     	; 0x3cf6 <__vector_1+0x86>
  TIFR = (1 << TOV0);
  TIMSK |= (1 << TOIE0);
  _code.w = 0;
  } else {
    /* Number of bits of the just elapsed period */
    uint8_t n = 1;
    3cd4:	21 e0       	ldi	r18, 0x01	; 1
    3cd6:	01 c0       	rjmp	.+2      	; 0x3cda <__vector_1+0x6a>
    if (tcnt0 > RC5_TICKS + RC5_DELTA)
      goto invalid;
    else if (tcnt0 < RC5_TICKS/2 - RC5_DELTA)
      goto invalid;
    else if (tcnt0 > RC5_TICKS - RC5_DELTA)
      n = 2;
    3cd8:	22 e0       	ldi	r18, 0x02	; 2
    3cda:	56 2f       	mov	r21, r22
    3cdc:	42 2f       	mov	r20, r18
    /* store the just received 1 or 2 bits */
    do {
      _nbits++;
      if (_nbits & 1)
      {
        _code.w <<= 1; _code.b[0] |= _nint & 1;
    3cde:	73 2f       	mov	r23, r19
    3ce0:	71 70       	andi	r23, 0x01	; 1
      n = 2;
    else if (tcnt0 > RC5_TICKS/2 + RC5_DELTA)
      goto invalid;
    /* store the just received 1 or 2 bits */
    do {
      _nbits++;
    3ce2:	5f 5f       	subi	r21, 0xFF	; 255
      if (_nbits & 1)
    3ce4:	50 ff       	sbrs	r21, 0
    3ce6:	03 c0       	rjmp	.+6      	; 0x3cee <__vector_1+0x7e>
      {
        _code.w <<= 1; _code.b[0] |= _nint & 1;
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	87 2b       	or	r24, r23
      }
    } // end do
    while (--n);
    3cee:	41 50       	subi	r20, 0x01	; 1
    3cf0:	c1 f7       	brne	.-16     	; 0x3ce2 <__vector_1+0x72>
    3cf2:	26 0f       	add	r18, r22
    3cf4:	04 c0       	rjmp	.+8      	; 0x3cfe <__vector_1+0x8e>
    if (0)
    {
      invalid:
      /* disable INTx, run into Overflow0 */
#if (RC5_INT == RC5_INT0)               
     GICR &= ~(1 << INT0);
    3cf6:	2b b7       	in	r18, 0x3b	; 59
    3cf8:	2f 7b       	andi	r18, 0xBF	; 191
    3cfa:	2b bf       	out	0x3b, r18	; 59
#elif (RC5_INT == RC5_INT1)             
     GICR &= ~(1 << INT1);
#endif /* RC5_INT */
     _nbits = 0;
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
   }
   nbits = _nbits;
    3cfe:	20 93 5c 05 	sts	0x055C, r18
  }
  code = _code; nint = 1 + _nint;
    3d02:	90 93 5a 05 	sts	0x055A, r25
    3d06:	80 93 59 05 	sts	0x0559, r24
    3d0a:	3f 5f       	subi	r19, 0xFF	; 255
    3d0c:	30 93 5b 05 	sts	0x055B, r19
  }
}
    3d10:	9f 91       	pop	r25
    3d12:	8f 91       	pop	r24
    3d14:	7f 91       	pop	r23
    3d16:	6f 91       	pop	r22
    3d18:	5f 91       	pop	r21
    3d1a:	4f 91       	pop	r20
    3d1c:	3f 91       	pop	r19
    3d1e:	2f 91       	pop	r18
    3d20:	0f 90       	pop	r0
    3d22:	0f be       	out	0x3f, r0	; 63
    3d24:	0f 90       	pop	r0
    3d26:	1f 90       	pop	r1
    3d28:	18 95       	reti

00003d2a <tda7313GetInput>:
unsigned char tda7313_def_param[] = { TDA_VOLUME_DEF, TDA_ATTENS_ALL_DEF, TDA_BASS_DEF, TDA_TREBLE, TDA_ATTENS_FL_DEF, TDA_ATTENS_FR_DEF, TDA_ATTENS_RL_DEF, TDA_ATTENS_RR_DEF};
//=============================================================================
uint8_t tda7313GetInput(void)
{
  return _input;
}
    3d2a:	80 91 88 04 	lds	r24, 0x0488
    3d2e:	08 95       	ret

00003d30 <tda7313GetLoudness>:
//=============================================================================
uint8_t tda7313GetLoudness(void)
{
  return _loudness;
}
    3d30:	80 91 87 04 	lds	r24, 0x0487
    3d34:	08 95       	ret

00003d36 <tda7313Get_Param>:
  tda7313Send_Param();
}
//=============================================================================
uint8_t tda7313Get_Param(uint8_t param)
{
  return tda7313_param[_input][param];
    3d36:	e0 91 88 04 	lds	r30, 0x0488
    3d3a:	f0 e0       	ldi	r31, 0x00	; 0
    3d3c:	93 e0       	ldi	r25, 0x03	; 3
    3d3e:	ee 0f       	add	r30, r30
    3d40:	ff 1f       	adc	r31, r31
    3d42:	9a 95       	dec	r25
    3d44:	e1 f7       	brne	.-8      	; 0x3d3e <tda7313Get_Param+0x8>
    3d46:	e8 0f       	add	r30, r24
    3d48:	f1 1d       	adc	r31, r1
    3d4a:	e5 5b       	subi	r30, 0xB5	; 181
    3d4c:	fb 4f       	sbci	r31, 0xFB	; 251
}
    3d4e:	80 81       	ld	r24, Z
    3d50:	08 95       	ret

00003d52 <tda7313Set_Param_no_send>:
//=============================================================================
void tda7313Set_Param_no_send(uint8_t param, uint8_t val)
{
  tda7313_param[_input][param] = val;
    3d52:	e0 91 88 04 	lds	r30, 0x0488
    3d56:	f0 e0       	ldi	r31, 0x00	; 0
    3d58:	23 e0       	ldi	r18, 0x03	; 3
    3d5a:	ee 0f       	add	r30, r30
    3d5c:	ff 1f       	adc	r31, r31
    3d5e:	2a 95       	dec	r18
    3d60:	e1 f7       	brne	.-8      	; 0x3d5a <tda7313Set_Param_no_send+0x8>
    3d62:	e8 0f       	add	r30, r24
    3d64:	f1 1d       	adc	r31, r1
    3d66:	e5 5b       	subi	r30, 0xB5	; 181
    3d68:	fb 4f       	sbci	r31, 0xFB	; 251
    3d6a:	60 83       	st	Z, r22
}
    3d6c:	08 95       	ret

00003d6e <tda7313Get_Max_Param>:
  tda7313Send_Param();
}
//=============================================================================
uint8_t tda7313Get_Max_Param(uint8_t param)
{
  return tda7313_max_param[param];
    3d6e:	e7 e6       	ldi	r30, 0x67	; 103
    3d70:	f4 e0       	ldi	r31, 0x04	; 4
    3d72:	e8 0f       	add	r30, r24
    3d74:	f1 1d       	adc	r31, r1
}
    3d76:	80 81       	ld	r24, Z
    3d78:	08 95       	ret

00003d7a <tda7313Send_Param>:
//=============================================================================
void tda7313Send_Param(void)
{
    3d7a:	1f 93       	push	r17
  unsigned char sw_reg = TDA7313_SW, val;
  // Volume
  I2C_start();
    3d7c:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3d80:	88 e8       	ldi	r24, 0x88	; 136
    3d82:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  val = tda7313_param[_input][TDA_VOLUME];
    3d86:	e0 91 88 04 	lds	r30, 0x0488
    3d8a:	f0 e0       	ldi	r31, 0x00	; 0
    3d8c:	13 e0       	ldi	r17, 0x03	; 3
    3d8e:	ee 0f       	add	r30, r30
    3d90:	ff 1f       	adc	r31, r31
    3d92:	1a 95       	dec	r17
    3d94:	e1 f7       	brne	.-8      	; 0x3d8e <tda7313Send_Param+0x14>
    3d96:	e5 5b       	subi	r30, 0xB5	; 181
    3d98:	fb 4f       	sbci	r31, 0xFB	; 251
    3d9a:	90 81       	ld	r25, Z
uint8_t tda7313Get_Max_Param(uint8_t param)
{
  return tda7313_max_param[param];
}
//=============================================================================
void tda7313Send_Param(void)
    3d9c:	89 2f       	mov	r24, r25
    3d9e:	81 95       	neg	r24
  unsigned char sw_reg = TDA7313_SW, val;
  // Volume
  I2C_start();
  I2C_write(TDA7313_I2C_ADDR);
  val = tda7313_param[_input][TDA_VOLUME];
  I2C_write(TDA7313_VOLUME + 0x3F - (val + val));
    3da0:	89 1b       	sub	r24, r25
    3da2:	81 5c       	subi	r24, 0xC1	; 193
    3da4:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
    3da8:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  // Attens
  val = tda7313_param[_input][TDA_ATTENS_ALL];
    3dac:	e0 91 88 04 	lds	r30, 0x0488
  sw_reg += tda7313_attens[val] + _input;
    3db0:	1e 2f       	mov	r17, r30
    3db2:	10 5c       	subi	r17, 0xC0	; 192
  I2C_write(TDA7313_I2C_ADDR);
  val = tda7313_param[_input][TDA_VOLUME];
  I2C_write(TDA7313_VOLUME + 0x3F - (val + val));
  I2C_stop();
  // Attens
  val = tda7313_param[_input][TDA_ATTENS_ALL];
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	b3 e0       	ldi	r27, 0x03	; 3
    3db8:	ee 0f       	add	r30, r30
    3dba:	ff 1f       	adc	r31, r31
    3dbc:	ba 95       	dec	r27
    3dbe:	e1 f7       	brne	.-8      	; 0x3db8 <tda7313Send_Param+0x3e>
    3dc0:	e5 5b       	subi	r30, 0xB5	; 181
    3dc2:	fb 4f       	sbci	r31, 0xFB	; 251
  sw_reg += tda7313_attens[val] + _input;
    3dc4:	e1 81       	ldd	r30, Z+1	; 0x01
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	ed 59       	subi	r30, 0x9D	; 157
    3dca:	fb 4f       	sbci	r31, 0xFB	; 251
    3dcc:	80 81       	ld	r24, Z
    3dce:	18 0f       	add	r17, r24
  if (_loudness) sw_reg &= ~(1 << TDA7313_LONDNESS_BIT); else sw_reg |= (1 << TDA7313_LONDNESS_BIT);
    3dd0:	80 91 87 04 	lds	r24, 0x0487
    3dd4:	88 23       	and	r24, r24
    3dd6:	11 f0       	breq	.+4      	; 0x3ddc <tda7313Send_Param+0x62>
    3dd8:	1b 7f       	andi	r17, 0xFB	; 251
    3dda:	01 c0       	rjmp	.+2      	; 0x3dde <tda7313Send_Param+0x64>
    3ddc:	14 60       	ori	r17, 0x04	; 4
  I2C_start();
    3dde:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3de2:	88 e8       	ldi	r24, 0x88	; 136
    3de4:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(sw_reg);
    3de8:	81 2f       	mov	r24, r17
    3dea:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
    3dee:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  // Attens Front Left
  val = tda7313_param[_input][TDA_ATTENS_FL];
    3df2:	e0 91 88 04 	lds	r30, 0x0488
    3df6:	f0 e0       	ldi	r31, 0x00	; 0
    3df8:	a3 e0       	ldi	r26, 0x03	; 3
    3dfa:	ee 0f       	add	r30, r30
    3dfc:	ff 1f       	adc	r31, r31
    3dfe:	aa 95       	dec	r26
    3e00:	e1 f7       	brne	.-8      	; 0x3dfa <tda7313Send_Param+0x80>
    3e02:	e5 5b       	subi	r30, 0xB5	; 181
    3e04:	fb 4f       	sbci	r31, 0xFB	; 251
    3e06:	14 81       	ldd	r17, Z+4	; 0x04
  I2C_start();
    3e08:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3e0c:	88 e8       	ldi	r24, 0x88	; 136
    3e0e:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(TDA7313_FRONT_LEFT + (TDA7313_MAX_ATTENS - val));
    3e12:	8f e9       	ldi	r24, 0x9F	; 159
    3e14:	81 1b       	sub	r24, r17
    3e16:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
    3e1a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  // Attens Front Right
  val = tda7313_param[_input][TDA_ATTENS_FR];
    3e1e:	e0 91 88 04 	lds	r30, 0x0488
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	73 e0       	ldi	r23, 0x03	; 3
    3e26:	ee 0f       	add	r30, r30
    3e28:	ff 1f       	adc	r31, r31
    3e2a:	7a 95       	dec	r23
    3e2c:	e1 f7       	brne	.-8      	; 0x3e26 <tda7313Send_Param+0xac>
    3e2e:	e5 5b       	subi	r30, 0xB5	; 181
    3e30:	fb 4f       	sbci	r31, 0xFB	; 251
    3e32:	15 81       	ldd	r17, Z+5	; 0x05
  I2C_start();
    3e34:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3e38:	88 e8       	ldi	r24, 0x88	; 136
    3e3a:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(TDA7313_FRONT_RIGHT + (TDA7313_MAX_ATTENS - val));
    3e3e:	8f eb       	ldi	r24, 0xBF	; 191
    3e40:	81 1b       	sub	r24, r17
    3e42:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
    3e46:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  // Attens Rear Left
  val = tda7313_param[_input][TDA_ATTENS_RL];
    3e4a:	e0 91 88 04 	lds	r30, 0x0488
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	63 e0       	ldi	r22, 0x03	; 3
    3e52:	ee 0f       	add	r30, r30
    3e54:	ff 1f       	adc	r31, r31
    3e56:	6a 95       	dec	r22
    3e58:	e1 f7       	brne	.-8      	; 0x3e52 <tda7313Send_Param+0xd8>
    3e5a:	e5 5b       	subi	r30, 0xB5	; 181
    3e5c:	fb 4f       	sbci	r31, 0xFB	; 251
    3e5e:	16 81       	ldd	r17, Z+6	; 0x06
  I2C_start();
    3e60:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3e64:	88 e8       	ldi	r24, 0x88	; 136
    3e66:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(TDA7313_REAR_LEFT + (TDA7313_MAX_ATTENS - val));
    3e6a:	8f ed       	ldi	r24, 0xDF	; 223
    3e6c:	81 1b       	sub	r24, r17
    3e6e:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
    3e72:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  // Attens Rear Right
  val = tda7313_param[_input][TDA_ATTENS_RR];
    3e76:	e0 91 88 04 	lds	r30, 0x0488
    3e7a:	f0 e0       	ldi	r31, 0x00	; 0
    3e7c:	53 e0       	ldi	r21, 0x03	; 3
    3e7e:	ee 0f       	add	r30, r30
    3e80:	ff 1f       	adc	r31, r31
    3e82:	5a 95       	dec	r21
    3e84:	e1 f7       	brne	.-8      	; 0x3e7e <tda7313Send_Param+0x104>
    3e86:	e5 5b       	subi	r30, 0xB5	; 181
    3e88:	fb 4f       	sbci	r31, 0xFB	; 251
    3e8a:	17 81       	ldd	r17, Z+7	; 0x07
  I2C_start();
    3e8c:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3e90:	88 e8       	ldi	r24, 0x88	; 136
    3e92:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(TDA7313_REAR_RIGHT + (TDA7313_MAX_ATTENS - val));
    3e96:	81 2f       	mov	r24, r17
    3e98:	80 95       	com	r24
    3e9a:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
    3e9e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  // Bass
  val = tda7313_param[_input][TDA_BASS];
    3ea2:	e0 91 88 04 	lds	r30, 0x0488
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	43 e0       	ldi	r20, 0x03	; 3
    3eaa:	ee 0f       	add	r30, r30
    3eac:	ff 1f       	adc	r31, r31
    3eae:	4a 95       	dec	r20
    3eb0:	e1 f7       	brne	.-8      	; 0x3eaa <tda7313Send_Param+0x130>
    3eb2:	e5 5b       	subi	r30, 0xB5	; 181
    3eb4:	fb 4f       	sbci	r31, 0xFB	; 251
    3eb6:	12 81       	ldd	r17, Z+2	; 0x02
  I2C_start();
    3eb8:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3ebc:	88 e8       	ldi	r24, 0x88	; 136
    3ebe:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(TDA7313_BASS + tda7313_bass_treb[val]);
    3ec2:	e1 2f       	mov	r30, r17
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	e1 59       	subi	r30, 0x91	; 145
    3ec8:	fb 4f       	sbci	r31, 0xFB	; 251
    3eca:	80 81       	ld	r24, Z
    3ecc:	80 5a       	subi	r24, 0xA0	; 160
    3ece:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
    3ed2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  // Treble
  val = tda7313_param[_input][TDA_TREBLE];
    3ed6:	e0 91 88 04 	lds	r30, 0x0488
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	33 e0       	ldi	r19, 0x03	; 3
    3ede:	ee 0f       	add	r30, r30
    3ee0:	ff 1f       	adc	r31, r31
    3ee2:	3a 95       	dec	r19
    3ee4:	e1 f7       	brne	.-8      	; 0x3ede <tda7313Send_Param+0x164>
    3ee6:	e5 5b       	subi	r30, 0xB5	; 181
    3ee8:	fb 4f       	sbci	r31, 0xFB	; 251
    3eea:	13 81       	ldd	r17, Z+3	; 0x03
  I2C_start();
    3eec:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3ef0:	88 e8       	ldi	r24, 0x88	; 136
    3ef2:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_write(TDA7313_TREBLE + tda7313_bass_treb[val]);
    3ef6:	e1 2f       	mov	r30, r17
    3ef8:	f0 e0       	ldi	r31, 0x00	; 0
    3efa:	e1 59       	subi	r30, 0x91	; 145
    3efc:	fb 4f       	sbci	r31, 0xFB	; 251
    3efe:	80 81       	ld	r24, Z
    3f00:	80 59       	subi	r24, 0x90	; 144
    3f02:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
  I2C_stop();
    3f06:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
}
    3f0a:	1f 91       	pop	r17
    3f0c:	08 95       	ret

00003f0e <tda7313Set_Param_down>:
  tda7313Send_Param();
}
//=============================================================================
void tda7313Set_Param_down(uint8_t param)
{
  if (tda7313_param[_input][param] > 0) tda7313_param[_input][param] = tda7313_param[_input][param] - 1;
    3f0e:	e0 91 88 04 	lds	r30, 0x0488
    3f12:	f0 e0       	ldi	r31, 0x00	; 0
    3f14:	93 e0       	ldi	r25, 0x03	; 3
    3f16:	ee 0f       	add	r30, r30
    3f18:	ff 1f       	adc	r31, r31
    3f1a:	9a 95       	dec	r25
    3f1c:	e1 f7       	brne	.-8      	; 0x3f16 <tda7313Set_Param_down+0x8>
    3f1e:	e8 0f       	add	r30, r24
    3f20:	f1 1d       	adc	r31, r1
    3f22:	e5 5b       	subi	r30, 0xB5	; 181
    3f24:	fb 4f       	sbci	r31, 0xFB	; 251
    3f26:	80 81       	ld	r24, Z
    3f28:	88 23       	and	r24, r24
    3f2a:	11 f0       	breq	.+4      	; 0x3f30 <tda7313Set_Param_down+0x22>
    3f2c:	81 50       	subi	r24, 0x01	; 1
    3f2e:	80 83       	st	Z, r24
  tda7313Send_Param();
    3f30:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <tda7313Send_Param>
}
    3f34:	08 95       	ret

00003f36 <tda7313Set_Param_up>:
  tda7313Send_Param();
}
//=============================================================================
void tda7313Set_Param_up(uint8_t param)
{
  if (tda7313_param[_input][param] < tda7313_max_param[param]) tda7313_param[_input][param] = tda7313_param[_input][param] + 1;
    3f36:	e0 91 88 04 	lds	r30, 0x0488
    3f3a:	f0 e0       	ldi	r31, 0x00	; 0
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	23 e0       	ldi	r18, 0x03	; 3
    3f40:	ee 0f       	add	r30, r30
    3f42:	ff 1f       	adc	r31, r31
    3f44:	2a 95       	dec	r18
    3f46:	e1 f7       	brne	.-8      	; 0x3f40 <tda7313Set_Param_up+0xa>
    3f48:	e8 0f       	add	r30, r24
    3f4a:	f9 1f       	adc	r31, r25
    3f4c:	e5 5b       	subi	r30, 0xB5	; 181
    3f4e:	fb 4f       	sbci	r31, 0xFB	; 251
    3f50:	20 81       	ld	r18, Z
    3f52:	89 59       	subi	r24, 0x99	; 153
    3f54:	9b 4f       	sbci	r25, 0xFB	; 251
    3f56:	dc 01       	movw	r26, r24
    3f58:	8c 91       	ld	r24, X
    3f5a:	28 17       	cp	r18, r24
    3f5c:	10 f4       	brcc	.+4      	; 0x3f62 <tda7313Set_Param_up+0x2c>
    3f5e:	2f 5f       	subi	r18, 0xFF	; 255
    3f60:	20 83       	st	Z, r18
  tda7313Send_Param();
    3f62:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <tda7313Send_Param>
}
    3f66:	08 95       	ret

00003f68 <tda7313Set_Param>:
  tda7313_param[_input][param] = val;
}
//=============================================================================
void tda7313Set_Param(uint8_t param, uint8_t val)
{
  tda7313_param[_input][param] = val;
    3f68:	e0 91 88 04 	lds	r30, 0x0488
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
    3f6e:	33 e0       	ldi	r19, 0x03	; 3
    3f70:	ee 0f       	add	r30, r30
    3f72:	ff 1f       	adc	r31, r31
    3f74:	3a 95       	dec	r19
    3f76:	e1 f7       	brne	.-8      	; 0x3f70 <tda7313Set_Param+0x8>
    3f78:	e8 0f       	add	r30, r24
    3f7a:	f1 1d       	adc	r31, r1
    3f7c:	e5 5b       	subi	r30, 0xB5	; 181
    3f7e:	fb 4f       	sbci	r31, 0xFB	; 251
    3f80:	60 83       	st	Z, r22
  tda7313Send_Param();
    3f82:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <tda7313Send_Param>
}
    3f86:	08 95       	ret

00003f88 <tda7313SetInput>:
  tda7313Send_Param();
}
//=============================================================================
void tda7313SetInput(uint8_t in)
{
  _input = in;
    3f88:	80 93 88 04 	sts	0x0488, r24
  tda7313Send_Param();
    3f8c:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <tda7313Send_Param>
}
    3f90:	08 95       	ret

00003f92 <tda7313SetLoudness>:
  return _loudness;
}
//=============================================================================
void tda7313SetLoudness(uint8_t loudness)
{
  _loudness = loudness;
    3f92:	80 93 87 04 	sts	0x0487, r24
  tda7313Send_Param();
    3f96:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <tda7313Send_Param>
}
    3f9a:	08 95       	ret

00003f9c <tda7313SetMute>:
  I2C_stop();
}
//=============================================================================
void tda7313SetMute(uint8_t val)
{
  if (val) {
    3f9c:	88 23       	and	r24, r24
    3f9e:	a1 f0       	breq	.+40     	; 0x3fc8 <tda7313SetMute+0x2c>
    I2C_start();
    3fa0:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
    I2C_write(TDA7313_I2C_ADDR);
    3fa4:	88 e8       	ldi	r24, 0x88	; 136
    3fa6:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
    I2C_write(TDA7313_FRONT_LEFT | TDA7313_MUTE);
    3faa:	8f e9       	ldi	r24, 0x9F	; 159
    3fac:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
    I2C_write(TDA7313_FRONT_RIGHT | TDA7313_MUTE);
    3fb0:	8f eb       	ldi	r24, 0xBF	; 191
    3fb2:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
    I2C_write(TDA7313_REAR_LEFT | TDA7313_MUTE);
    3fb6:	8f ed       	ldi	r24, 0xDF	; 223
    3fb8:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
    I2C_write(TDA7313_REAR_RIGHT | TDA7313_MUTE);
    3fbc:	8f ef       	ldi	r24, 0xFF	; 255
    3fbe:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
    I2C_stop();
    3fc2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
    3fc6:	08 95       	ret
  } else {
    tda7313Send_Param();
    3fc8:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <tda7313Send_Param>
    3fcc:	08 95       	ret

00003fce <tda7313_Save_Input>:
  tda7313_Load_Input();
  tda7313_Load_Loudness();
}
//=============================================================================
void tda7313_Save_Input(uint8_t in)
{
    3fce:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)TDA_INPUT_ADDR, in);
    3fd0:	80 e8       	ldi	r24, 0x80	; 128
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
}
    3fd8:	08 95       	ret

00003fda <tda7313_Load_Input>:
//=============================================================================
uint8_t tda7313_Load_Input(void)
{
  _input = eeprom_read_byte((uint8_t*)TDA_INPUT_ADDR);
    3fda:	80 e8       	ldi	r24, 0x80	; 128
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
    3fe2:	80 93 88 04 	sts	0x0488, r24
  if (_input > TDA7313_IN_CNT - 1) _input = 0;
    3fe6:	83 30       	cpi	r24, 0x03	; 3
    3fe8:	10 f0       	brcs	.+4      	; 0x3fee <tda7313_Load_Input+0x14>
    3fea:	10 92 88 04 	sts	0x0488, r1
  return _input;
}
    3fee:	80 91 88 04 	lds	r24, 0x0488
    3ff2:	08 95       	ret

00003ff4 <tda7313_Save_Loudness>:
//=============================================================================
void tda7313_Save_Loudness(uint8_t loud)
{
    3ff4:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)TDA_LOUDNESS_ADDR, loud);
    3ff6:	81 e8       	ldi	r24, 0x81	; 129
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
}
    3ffe:	08 95       	ret

00004000 <tda7313_Load_Loudness>:
//=============================================================================
uint8_t tda7313_Load_Loudness(void)
{
  _loudness = eeprom_read_byte((uint8_t*)TDA_LOUDNESS_ADDR);
    4000:	81 e8       	ldi	r24, 0x81	; 129
    4002:	90 e0       	ldi	r25, 0x00	; 0
    4004:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
    4008:	80 93 87 04 	sts	0x0487, r24
  if (_loudness > 2) _loudness = 1;
    400c:	83 30       	cpi	r24, 0x03	; 3
    400e:	18 f0       	brcs	.+6      	; 0x4016 <tda7313_Load_Loudness+0x16>
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	80 93 87 04 	sts	0x0487, r24
  return _loudness;
}
    4016:	80 91 87 04 	lds	r24, 0x0487
    401a:	08 95       	ret

0000401c <tda7313_Save_param>:
//=============================================================================
void tda7313_Save_param(uint8_t in, uint8_t param)
{
  switch (in)
    401c:	81 30       	cpi	r24, 0x01	; 1
    401e:	71 f0       	breq	.+28     	; 0x403c <tda7313_Save_param+0x20>
    4020:	81 30       	cpi	r24, 0x01	; 1
    4022:	18 f0       	brcs	.+6      	; 0x402a <tda7313_Save_param+0xe>
    4024:	82 30       	cpi	r24, 0x02	; 2
    4026:	f9 f4       	brne	.+62     	; 0x4066 <tda7313_Save_param+0x4a>
    4028:	14 c0       	rjmp	.+40     	; 0x4052 <tda7313_Save_param+0x36>
  {
    case 0:
      eeprom_write_byte((uint8_t*)(TDA_PARAM_ADDR_IN1 + param), tda7313_param[0][param]);
    402a:	86 2f       	mov	r24, r22
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	fc 01       	movw	r30, r24
    4030:	e5 5b       	subi	r30, 0xB5	; 181
    4032:	fb 4f       	sbci	r31, 0xFB	; 251
    4034:	80 5b       	subi	r24, 0xB0	; 176
    4036:	9f 4f       	sbci	r25, 0xFF	; 255
    4038:	60 81       	ld	r22, Z
    403a:	08 c0       	rjmp	.+16     	; 0x404c <tda7313_Save_param+0x30>
    break;
    case 1:
      eeprom_write_byte((uint8_t*)(TDA_PARAM_ADDR_IN2 + param), tda7313_param[1][param]);
    403c:	86 2f       	mov	r24, r22
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	fc 01       	movw	r30, r24
    4042:	e5 5b       	subi	r30, 0xB5	; 181
    4044:	fb 4f       	sbci	r31, 0xFB	; 251
    4046:	80 5a       	subi	r24, 0xA0	; 160
    4048:	9f 4f       	sbci	r25, 0xFF	; 255
    404a:	60 85       	ldd	r22, Z+8	; 0x08
    404c:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
    break;
    4050:	08 95       	ret
    case 2:
      eeprom_write_byte((uint8_t*)(TDA_PARAM_ADDR_IN3 + param), tda7313_param[2][param]);
    4052:	86 2f       	mov	r24, r22
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	fc 01       	movw	r30, r24
    4058:	e5 5b       	subi	r30, 0xB5	; 181
    405a:	fb 4f       	sbci	r31, 0xFB	; 251
    405c:	80 59       	subi	r24, 0x90	; 144
    405e:	9f 4f       	sbci	r25, 0xFF	; 255
    4060:	60 89       	ldd	r22, Z+16	; 0x10
    4062:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
    4066:	08 95       	ret

00004068 <tda7313_Save_all_param>:
    tda7313Send_Param();
  }
}
//=============================================================================
void tda7313_Save_all_param(void)
{
    4068:	1f 93       	push	r17
  unsigned char i;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    406a:	10 e0       	ldi	r17, 0x00	; 0
  {
    tda7313_Save_param(0, i);
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	61 2f       	mov	r22, r17
    4070:	0e 94 0e 20 	call	0x401c	; 0x401c <tda7313_Save_param>
    tda7313_Save_param(1, i);
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	61 2f       	mov	r22, r17
    4078:	0e 94 0e 20 	call	0x401c	; 0x401c <tda7313_Save_param>
    tda7313_Save_param(2, i);
    407c:	82 e0       	ldi	r24, 0x02	; 2
    407e:	61 2f       	mov	r22, r17
    4080:	0e 94 0e 20 	call	0x401c	; 0x401c <tda7313_Save_param>
}
//=============================================================================
void tda7313_Save_all_param(void)
{
  unsigned char i;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    4084:	1f 5f       	subi	r17, 0xFF	; 255
    4086:	18 30       	cpi	r17, 0x08	; 8
    4088:	89 f7       	brne	.-30     	; 0x406c <tda7313_Save_all_param+0x4>
  {
    tda7313_Save_param(0, i);
    tda7313_Save_param(1, i);
    tda7313_Save_param(2, i);
  }
  tda7313_Save_Input(_input);
    408a:	80 91 88 04 	lds	r24, 0x0488
    408e:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <tda7313_Save_Input>
  tda7313_Save_Loudness(_loudness);
    4092:	80 91 87 04 	lds	r24, 0x0487
    4096:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <tda7313_Save_Loudness>
}
    409a:	1f 91       	pop	r17
    409c:	08 95       	ret

0000409e <tda7313_Load_param>:
}
//=============================================================================
uint8_t tda7313_Load_param(uint8_t in, uint8_t param)
{
  uint8_t ret = 0;
  switch (in)
    409e:	81 30       	cpi	r24, 0x01	; 1
    40a0:	51 f0       	breq	.+20     	; 0x40b6 <tda7313_Load_param+0x18>
    40a2:	81 30       	cpi	r24, 0x01	; 1
    40a4:	18 f0       	brcs	.+6      	; 0x40ac <tda7313_Load_param+0xe>
    40a6:	82 30       	cpi	r24, 0x02	; 2
    40a8:	91 f4       	brne	.+36     	; 0x40ce <tda7313_Load_param+0x30>
    40aa:	0a c0       	rjmp	.+20     	; 0x40c0 <tda7313_Load_param+0x22>
  {
    case 0:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN1 + param));
    40ac:	86 2f       	mov	r24, r22
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	80 5b       	subi	r24, 0xB0	; 176
    40b2:	9f 4f       	sbci	r25, 0xFF	; 255
    40b4:	09 c0       	rjmp	.+18     	; 0x40c8 <tda7313_Load_param+0x2a>
    break;
    case 1:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN2 + param));
    40b6:	86 2f       	mov	r24, r22
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	80 5a       	subi	r24, 0xA0	; 160
    40bc:	9f 4f       	sbci	r25, 0xFF	; 255
    40be:	04 c0       	rjmp	.+8      	; 0x40c8 <tda7313_Load_param+0x2a>
    break;
    case 2:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN3 + param));
    40c0:	86 2f       	mov	r24, r22
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	80 59       	subi	r24, 0x90	; 144
    40c6:	9f 4f       	sbci	r25, 0xFF	; 255
    40c8:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
    break;
    40cc:	08 95       	ret
  }
}
//=============================================================================
uint8_t tda7313_Load_param(uint8_t in, uint8_t param)
{
  uint8_t ret = 0;
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    case 2:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN3 + param));
    break;
  }
  return ret;
}
    40d0:	08 95       	ret

000040d2 <tda7313_Load_all_param>:
  tda7313_Save_Input(_input);
  tda7313_Save_Loudness(_loudness);
}
//=============================================================================
void tda7313_Load_all_param(void)
{
    40d2:	cf 92       	push	r12
    40d4:	df 92       	push	r13
    40d6:	ef 92       	push	r14
    40d8:	ff 92       	push	r15
    40da:	0f 93       	push	r16
    40dc:	1f 93       	push	r17
    40de:	cf 93       	push	r28
    40e0:	df 93       	push	r29
  unsigned char i, param;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    40e2:	47 e6       	ldi	r20, 0x67	; 103
    40e4:	e4 2e       	mov	r14, r20
    40e6:	44 e0       	ldi	r20, 0x04	; 4
    40e8:	f4 2e       	mov	r15, r20
    40ea:	0f e7       	ldi	r16, 0x7F	; 127
    40ec:	14 e0       	ldi	r17, 0x04	; 4
    40ee:	cb e4       	ldi	r28, 0x4B	; 75
    40f0:	d4 e0       	ldi	r29, 0x04	; 4
    40f2:	dd 24       	eor	r13, r13
  {
    param = tda7313_Load_param(0, i);
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	6d 2d       	mov	r22, r13
    40f8:	0e 94 4f 20 	call	0x409e	; 0x409e <tda7313_Load_param>
	if (param > tda7313_max_param[i]) tda7313_param[0][i] = tda7313_def_param[i]; else tda7313_param[0][i] = param;
    40fc:	f7 01       	movw	r30, r14
    40fe:	c1 90       	ld	r12, Z+
    4100:	7f 01       	movw	r14, r30
    4102:	c8 16       	cp	r12, r24
    4104:	10 f4       	brcc	.+4      	; 0x410a <tda7313_Load_all_param+0x38>
    4106:	f8 01       	movw	r30, r16
    4108:	80 81       	ld	r24, Z
    410a:	88 83       	st	Y, r24
    param = tda7313_Load_param(1, i);
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	6d 2d       	mov	r22, r13
    4110:	0e 94 4f 20 	call	0x409e	; 0x409e <tda7313_Load_param>
	if (param > tda7313_max_param[i]) tda7313_param[1][i] = tda7313_def_param[i]; else tda7313_param[1][i] = param;
    4114:	c8 16       	cp	r12, r24
    4116:	10 f4       	brcc	.+4      	; 0x411c <tda7313_Load_all_param+0x4a>
    4118:	f8 01       	movw	r30, r16
    411a:	80 81       	ld	r24, Z
    411c:	88 87       	std	Y+8, r24	; 0x08
    param = tda7313_Load_param(2, i);
    411e:	82 e0       	ldi	r24, 0x02	; 2
    4120:	6d 2d       	mov	r22, r13
    4122:	0e 94 4f 20 	call	0x409e	; 0x409e <tda7313_Load_param>
	if (param > tda7313_max_param[i]) tda7313_param[2][i] = tda7313_def_param[i]; else tda7313_param[2][i] = param;
    4126:	c8 16       	cp	r12, r24
    4128:	10 f4       	brcc	.+4      	; 0x412e <tda7313_Load_all_param+0x5c>
    412a:	f8 01       	movw	r30, r16
    412c:	80 81       	ld	r24, Z
    412e:	88 8b       	std	Y+16, r24	; 0x10
}
//=============================================================================
void tda7313_Load_all_param(void)
{
  unsigned char i, param;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    4130:	d3 94       	inc	r13
    4132:	0f 5f       	subi	r16, 0xFF	; 255
    4134:	1f 4f       	sbci	r17, 0xFF	; 255
    4136:	21 96       	adiw	r28, 0x01	; 1
    4138:	fd 2d       	mov	r31, r13
    413a:	f8 30       	cpi	r31, 0x08	; 8
    413c:	d9 f6       	brne	.-74     	; 0x40f4 <tda7313_Load_all_param+0x22>
    param = tda7313_Load_param(1, i);
	if (param > tda7313_max_param[i]) tda7313_param[1][i] = tda7313_def_param[i]; else tda7313_param[1][i] = param;
    param = tda7313_Load_param(2, i);
	if (param > tda7313_max_param[i]) tda7313_param[2][i] = tda7313_def_param[i]; else tda7313_param[2][i] = param;
  }
  tda7313_Load_Input();
    413e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <tda7313_Load_Input>
  tda7313_Load_Loudness();
    4142:	0e 94 00 20 	call	0x4000	; 0x4000 <tda7313_Load_Loudness>
}
    4146:	df 91       	pop	r29
    4148:	cf 91       	pop	r28
    414a:	1f 91       	pop	r17
    414c:	0f 91       	pop	r16
    414e:	ff 90       	pop	r15
    4150:	ef 90       	pop	r14
    4152:	df 90       	pop	r13
    4154:	cf 90       	pop	r12
    4156:	08 95       	ret

00004158 <tda7313_Save_vol_fm_edit>:
  }
  return ret;
}
//=============================================================================
void tda7313_Save_vol_fm_edit(uint8_t vol)
{
    4158:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)FM_VOLUME_EDIT_ADDR, vol);
    415a:	87 e1       	ldi	r24, 0x17	; 23
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
}
    4162:	08 95       	ret

00004164 <tda7313_Load_vol_fm_edit>:
//=============================================================================
uint8_t tda7313_Load_vol_fm_edit(void)
{
  uint8_t v;
  v = eeprom_read_byte((uint8_t*)FM_VOLUME_EDIT_ADDR);
    4164:	87 e1       	ldi	r24, 0x17	; 23
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  if (v > tda7313_max_param[TDA_VOLUME]) {
    416c:	90 91 67 04 	lds	r25, 0x0467
    4170:	98 17       	cp	r25, r24
    4172:	20 f4       	brcc	.+8      	; 0x417c <tda7313_Load_vol_fm_edit+0x18>
    v = TDA_VOLUME_DEF;
    tda7313_Save_vol_fm_edit(v);
    4174:	88 e1       	ldi	r24, 0x18	; 24
    4176:	0e 94 ac 20 	call	0x4158	; 0x4158 <tda7313_Save_vol_fm_edit>
uint8_t tda7313_Load_vol_fm_edit(void)
{
  uint8_t v;
  v = eeprom_read_byte((uint8_t*)FM_VOLUME_EDIT_ADDR);
  if (v > tda7313_max_param[TDA_VOLUME]) {
    v = TDA_VOLUME_DEF;
    417a:	88 e1       	ldi	r24, 0x18	; 24
    tda7313_Save_vol_fm_edit(v);
  }
  return v;
}
    417c:	08 95       	ret

0000417e <tea5767WriteI2C>:
static uint8_t wrBuf[5];
static uint8_t rdBuf[5];
static uint8_t ctrl = 0x79;
//=============================================================================
static void tea5767WriteI2C(void)
{
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
  uint8_t i;
  I2C_start();
    4182:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TEA5767_I2C_ADDR);
    4186:	80 ec       	ldi	r24, 0xC0	; 192
    4188:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
    418c:	ce e5       	ldi	r28, 0x5E	; 94
    418e:	d5 e0       	ldi	r29, 0x05	; 5
  for (i = 0; i < sizeof(wrBuf); i++)
	I2C_write(wrBuf[i]);
    4190:	89 91       	ld	r24, Y+
    4192:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
static void tea5767WriteI2C(void)
{
  uint8_t i;
  I2C_start();
  I2C_write(TEA5767_I2C_ADDR);
  for (i = 0; i < sizeof(wrBuf); i++)
    4196:	85 e0       	ldi	r24, 0x05	; 5
    4198:	c3 36       	cpi	r28, 0x63	; 99
    419a:	d8 07       	cpc	r29, r24
    419c:	c9 f7       	brne	.-14     	; 0x4190 <tea5767WriteI2C+0x12>
	I2C_write(wrBuf[i]);
  I2C_stop();
    419e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  return;
}
    41a2:	df 91       	pop	r29
    41a4:	cf 91       	pop	r28
    41a6:	08 95       	ret

000041a8 <tea5767Init>:
//=============================================================================
void tea5767Init(uint8_t tea5767Ctrl)
{
  ctrl = tea5767Ctrl;
    41a8:	80 93 89 04 	sts	0x0489, r24
  wrBuf[0] = TEA5767_MUTE;
    41ac:	90 e8       	ldi	r25, 0x80	; 128
    41ae:	90 93 5e 05 	sts	0x055E, r25
  wrBuf[1] = 0;
    41b2:	10 92 5f 05 	sts	0x055F, r1
  wrBuf[2] = TEA5767_HLSI;
    41b6:	90 e1       	ldi	r25, 0x10	; 16
    41b8:	90 93 60 05 	sts	0x0560, r25
  wrBuf[3] = 0;
    41bc:	10 92 61 05 	sts	0x0561, r1
  if (ctrl & TEA5767_CTRL_HCC)
    41c0:	86 ff       	sbrs	r24, 6
    41c2:	03 c0       	rjmp	.+6      	; 0x41ca <tea5767Init+0x22>
	wrBuf[3] |= TEA5767_HCC;
    41c4:	94 e0       	ldi	r25, 0x04	; 4
    41c6:	90 93 61 05 	sts	0x0561, r25
  if (ctrl & TEA5767_CTRL_SNC)
    41ca:	85 ff       	sbrs	r24, 5
    41cc:	05 c0       	rjmp	.+10     	; 0x41d8 <tea5767Init+0x30>
	wrBuf[3] |= TEA5767_SNC;
    41ce:	90 91 61 05 	lds	r25, 0x0561
    41d2:	92 60       	ori	r25, 0x02	; 2
    41d4:	90 93 61 05 	sts	0x0561, r25
  if (ctrl & TEA5767_CTRL_SMUTE)
    41d8:	84 ff       	sbrs	r24, 4
    41da:	05 c0       	rjmp	.+10     	; 0x41e6 <tea5767Init+0x3e>
	wrBuf[3] |= TEA5767_SMUTE;
    41dc:	90 91 61 05 	lds	r25, 0x0561
    41e0:	98 60       	ori	r25, 0x08	; 8
    41e2:	90 93 61 05 	sts	0x0561, r25
  if (ctrl & TEA5767_CTRL_BL)
    41e6:	82 ff       	sbrs	r24, 2
    41e8:	05 c0       	rjmp	.+10     	; 0x41f4 <tea5767Init+0x4c>
	wrBuf[3] |= TEA5767_BL;
    41ea:	90 91 61 05 	lds	r25, 0x0561
    41ee:	90 62       	ori	r25, 0x20	; 32
    41f0:	90 93 61 05 	sts	0x0561, r25
  if (ctrl & TEA5767_CTRL_XTAL)
    41f4:	80 ff       	sbrs	r24, 0
    41f6:	05 c0       	rjmp	.+10     	; 0x4202 <tea5767Init+0x5a>
	wrBuf[3] |= TEA5767_XTAL;
    41f8:	90 91 61 05 	lds	r25, 0x0561
    41fc:	90 61       	ori	r25, 0x10	; 16
    41fe:	90 93 61 05 	sts	0x0561, r25
  wrBuf[4] = 0;
    4202:	10 92 62 05 	sts	0x0562, r1
  if (ctrl & TEA5767_CTRL_DTC)
    4206:	83 ff       	sbrs	r24, 3
    4208:	03 c0       	rjmp	.+6      	; 0x4210 <tea5767Init+0x68>
	wrBuf[4] |= TEA5767_DTC;
    420a:	90 e4       	ldi	r25, 0x40	; 64
    420c:	90 93 62 05 	sts	0x0562, r25
  if (ctrl & TEA5767_CTRL_PLLREF)
    4210:	81 ff       	sbrs	r24, 1
    4212:	05 c0       	rjmp	.+10     	; 0x421e <tea5767Init+0x76>
	wrBuf[4] |= TEA5767_PLLREF;
    4214:	80 91 62 05 	lds	r24, 0x0562
    4218:	80 68       	ori	r24, 0x80	; 128
    421a:	80 93 62 05 	sts	0x0562, r24
    421e:	08 95       	ret

00004220 <tea5767SetFreq>:
  return;
}
//=============================================================================
void tea5767SetFreq(uint16_t freq, uint8_t mono)
{
    4220:	1f 93       	push	r17
    4222:	16 2f       	mov	r17, r22
  uint16_t div;
  uint32_t fq = (uint32_t)freq * 10000 + 225000;
    4224:	bc 01       	movw	r22, r24
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	20 e1       	ldi	r18, 0x10	; 16
    422c:	37 e2       	ldi	r19, 0x27	; 39
    422e:	40 e0       	ldi	r20, 0x00	; 0
    4230:	50 e0       	ldi	r21, 0x00	; 0
    4232:	0e 94 38 22 	call	0x4470	; 0x4470 <__mulsi3>
    4236:	68 51       	subi	r22, 0x18	; 24
    4238:	71 49       	sbci	r23, 0x91	; 145
    423a:	8c 4f       	sbci	r24, 0xFC	; 252
    423c:	9f 4f       	sbci	r25, 0xFF	; 255
  if (ctrl & TEA5767_CTRL_XTAL)
    423e:	20 91 89 04 	lds	r18, 0x0489
    4242:	20 ff       	sbrs	r18, 0
    4244:	09 c0       	rjmp	.+18     	; 0x4258 <tea5767SetFreq+0x38>
	div = fq / 8192;
    4246:	2d e0       	ldi	r18, 0x0D	; 13
    4248:	96 95       	lsr	r25
    424a:	87 95       	ror	r24
    424c:	77 95       	ror	r23
    424e:	67 95       	ror	r22
    4250:	2a 95       	dec	r18
    4252:	d1 f7       	brne	.-12     	; 0x4248 <tea5767SetFreq+0x28>
    4254:	9b 01       	movw	r18, r22
    4256:	06 c0       	rjmp	.+12     	; 0x4264 <tea5767SetFreq+0x44>
  else
	div = fq / 12500;
    4258:	24 ed       	ldi	r18, 0xD4	; 212
    425a:	30 e3       	ldi	r19, 0x30	; 48
    425c:	40 e0       	ldi	r20, 0x00	; 0
    425e:	50 e0       	ldi	r21, 0x00	; 0
    4260:	0e 94 8a 22 	call	0x4514	; 0x4514 <__udivmodsi4>
  wrBuf[0] &= 0xC0;
  wrBuf[0] |= (div >> 8) & 0x3F;
    4264:	3f 73       	andi	r19, 0x3F	; 63
  uint32_t fq = (uint32_t)freq * 10000 + 225000;
  if (ctrl & TEA5767_CTRL_XTAL)
	div = fq / 8192;
  else
	div = fq / 12500;
  wrBuf[0] &= 0xC0;
    4266:	80 91 5e 05 	lds	r24, 0x055E
    426a:	80 7c       	andi	r24, 0xC0	; 192
  wrBuf[0] |= (div >> 8) & 0x3F;
    426c:	38 2b       	or	r19, r24
    426e:	30 93 5e 05 	sts	0x055E, r19
  wrBuf[1] = div & 0xFF;
    4272:	20 93 5f 05 	sts	0x055F, r18
    4276:	80 91 60 05 	lds	r24, 0x0560
  if (mono)
    427a:	11 23       	and	r17, r17
    427c:	11 f0       	breq	.+4      	; 0x4282 <tea5767SetFreq+0x62>
	wrBuf[2] |= TEA5767_MS;
    427e:	88 60       	ori	r24, 0x08	; 8
    4280:	01 c0       	rjmp	.+2      	; 0x4284 <tea5767SetFreq+0x64>
  else
	wrBuf[2] &= ~TEA5767_MS;
    4282:	87 7f       	andi	r24, 0xF7	; 247
    4284:	80 93 60 05 	sts	0x0560, r24
  tea5767WriteI2C();
    4288:	0e 94 bf 20 	call	0x417e	; 0x417e <tea5767WriteI2C>
  return;
}
    428c:	1f 91       	pop	r17
    428e:	08 95       	ret

00004290 <tea5767ReadStatus>:
//=============================================================================
uint8_t *tea5767ReadStatus(void)
{
    4290:	cf 93       	push	r28
    4292:	df 93       	push	r29
  uint8_t i;
  I2C_start();
    4294:	0e 94 67 02 	call	0x4ce	; 0x4ce <I2C_start>
  I2C_write(TEA5767_I2C_ADDR | I2C_READ);
    4298:	81 ec       	ldi	r24, 0xC1	; 193
    429a:	0e 94 b0 02 	call	0x560	; 0x560 <I2C_write>
    429e:	c3 e6       	ldi	r28, 0x63	; 99
    42a0:	d5 e0       	ldi	r29, 0x05	; 5
  for (i = 0; i < sizeof(rdBuf) - 1; i++)
	rdBuf[i] = I2C_read(I2C_ACK);
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <I2C_read>
    42a8:	89 93       	st	Y+, r24
uint8_t *tea5767ReadStatus(void)
{
  uint8_t i;
  I2C_start();
  I2C_write(TEA5767_I2C_ADDR | I2C_READ);
  for (i = 0; i < sizeof(rdBuf) - 1; i++)
    42aa:	85 e0       	ldi	r24, 0x05	; 5
    42ac:	c7 36       	cpi	r28, 0x67	; 103
    42ae:	d8 07       	cpc	r29, r24
    42b0:	c1 f7       	brne	.-16     	; 0x42a2 <tea5767ReadStatus+0x12>
	rdBuf[i] = I2C_read(I2C_ACK);
  rdBuf[sizeof(rdBuf) - 1] = I2C_read(I2C_NOACK);
    42b2:	80 e0       	ldi	r24, 0x00	; 0
    42b4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <I2C_read>
    42b8:	80 93 67 05 	sts	0x0567, r24
  I2C_stop();
    42bc:	0e 94 7e 02 	call	0x4fc	; 0x4fc <I2C_stop>
  return rdBuf;
}
    42c0:	ce 01       	movw	r24, r28
    42c2:	04 97       	sbiw	r24, 0x04	; 4
    42c4:	df 91       	pop	r29
    42c6:	cf 91       	pop	r28
    42c8:	08 95       	ret

000042ca <tea5767SetMute>:
//=============================================================================
void tea5767SetMute(uint8_t mute)
{
    42ca:	90 91 5e 05 	lds	r25, 0x055E
  if (mute)
    42ce:	88 23       	and	r24, r24
    42d0:	11 f0       	breq	.+4      	; 0x42d6 <tea5767SetMute+0xc>
	wrBuf[0] |= TEA5767_MUTE;
    42d2:	90 68       	ori	r25, 0x80	; 128
    42d4:	01 c0       	rjmp	.+2      	; 0x42d8 <tea5767SetMute+0xe>
  else
	wrBuf[0] &= ~TEA5767_MUTE;
    42d6:	9f 77       	andi	r25, 0x7F	; 127
    42d8:	90 93 5e 05 	sts	0x055E, r25
  tea5767WriteI2C();
    42dc:	0e 94 bf 20 	call	0x417e	; 0x417e <tea5767WriteI2C>
  return;
}
    42e0:	08 95       	ret

000042e2 <tea5767PowerOn>:
//=============================================================================
void tea5767PowerOn(void)
{
  wrBuf[0] &= ~TEA5767_MUTE;
    42e2:	80 91 5e 05 	lds	r24, 0x055E
    42e6:	8f 77       	andi	r24, 0x7F	; 127
    42e8:	80 93 5e 05 	sts	0x055E, r24
  wrBuf[3] &= ~TEA5767_STBY;
    42ec:	80 91 61 05 	lds	r24, 0x0561
    42f0:	8f 7b       	andi	r24, 0xBF	; 191
    42f2:	80 93 61 05 	sts	0x0561, r24
  return;
}
    42f6:	08 95       	ret

000042f8 <tea5767PowerOff>:
//=============================================================================
void tea5767PowerOff(void)
{
  wrBuf[3] |= TEA5767_STBY;
    42f8:	80 91 61 05 	lds	r24, 0x0561
    42fc:	80 64       	ori	r24, 0x40	; 64
    42fe:	80 93 61 05 	sts	0x0561, r24
  tea5767SetMute(1);
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	0e 94 65 21 	call	0x42ca	; 0x42ca <tea5767SetMute>
  return;
}
    4308:	08 95       	ret

0000430a <tuner_Init_stations>:
//=============================================================================
#if (TUNER == TUX032)
#endif
//=============================================================================
void tuner_Init_stations(void)
{
    430a:	e6 ea       	ldi	r30, 0xA6	; 166
    430c:	f5 e0       	ldi	r31, 0x05	; 5
  uint8_t i;
  for (i = 0; i < FM_STATIONS; i++) fm_stations[i] = 0xFF;
    430e:	8f ef       	ldi	r24, 0xFF	; 255
    4310:	81 93       	st	Z+, r24
    4312:	95 e0       	ldi	r25, 0x05	; 5
    4314:	e4 3c       	cpi	r30, 0xC4	; 196
    4316:	f9 07       	cpc	r31, r25
    4318:	d9 f7       	brne	.-10     	; 0x4310 <tuner_Init_stations+0x6>
}
    431a:	08 95       	ret

0000431c <tuner_ChanToFreq>:
//=============================================================================
uint16_t tuner_ChanToFreq(uint8_t chan)
{
  return (FM_FREQ_MIN + (chan * 10));
    431c:	2a e0       	ldi	r18, 0x0A	; 10
    431e:	82 9f       	mul	r24, r18
    4320:	90 01       	movw	r18, r0
    4322:	11 24       	eor	r1, r1
    4324:	24 50       	subi	r18, 0x04	; 4
    4326:	3e 4d       	sbci	r19, 0xDE	; 222
}
    4328:	c9 01       	movw	r24, r18
    432a:	08 95       	ret

0000432c <tuner_FreqToChan>:
//=============================================================================
uint8_t tuner_FreqToChan(uint16_t freq)
{
  return ((freq - FM_FREQ_MIN) / 10);
    432c:	8c 5f       	subi	r24, 0xFC	; 252
    432e:	91 42       	sbci	r25, 0x21	; 33
    4330:	6a e0       	ldi	r22, 0x0A	; 10
    4332:	70 e0       	ldi	r23, 0x00	; 0
    4334:	0e 94 63 22 	call	0x44c6	; 0x44c6 <__udivmodhi4>
}
    4338:	86 2f       	mov	r24, r22
    433a:	08 95       	ret

0000433c <tuner_GetChan>:
//=============================================================================
uint8_t tuner_GetChan(uint8_t channel)
{
  if (channel < FM_STATIONS) {
    433c:	8e 31       	cpi	r24, 0x1E	; 30
    433e:	30 f4       	brcc	.+12     	; 0x434c <tuner_GetChan+0x10>
    return fm_stations[channel];
    4340:	e8 2f       	mov	r30, r24
    4342:	f0 e0       	ldi	r31, 0x00	; 0
    4344:	ea 55       	subi	r30, 0x5A	; 90
    4346:	fa 4f       	sbci	r31, 0xFA	; 250
    4348:	80 81       	ld	r24, Z
    434a:	08 95       	ret
  } else return 0;
    434c:	80 e0       	ldi	r24, 0x00	; 0
}
    434e:	08 95       	ret

00004350 <tuner_SetChan>:
//=============================================================================
void tuner_SetChan(uint8_t chan)
{
    4350:	1f 93       	push	r17
    4352:	18 2f       	mov	r17, r24
  if (chan <= FM_CHAN_MAX) {
    4354:	83 3d       	cpi	r24, 0xD3	; 211
    4356:	68 f4       	brcc	.+26     	; 0x4372 <tuner_SetChan+0x22>
    tuner_SetMute(0);
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	0e 94 65 21 	call	0x42ca	; 0x42ca <tea5767SetMute>
  for (i = 0; i < FM_STATIONS; i++) fm_stations[i] = 0xFF;
}
//=============================================================================
uint16_t tuner_ChanToFreq(uint8_t chan)
{
  return (FM_FREQ_MIN + (chan * 10));
    435e:	8a e0       	ldi	r24, 0x0A	; 10
    4360:	18 9f       	mul	r17, r24
    4362:	c0 01       	movw	r24, r0
    4364:	11 24       	eor	r1, r1
//=============================================================================
void tuner_SetChan(uint8_t chan)
{
  if (chan <= FM_CHAN_MAX) {
    tuner_SetMute(0);
    tuner_SetFreq(tuner_ChanToFreq(chan), 0);
    4366:	84 50       	subi	r24, 0x04	; 4
    4368:	9e 4d       	sbci	r25, 0xDE	; 222
    436a:	60 e0       	ldi	r22, 0x00	; 0
    436c:	0e 94 10 21 	call	0x4220	; 0x4220 <tea5767SetFreq>
    4370:	03 c0       	rjmp	.+6      	; 0x4378 <tuner_SetChan+0x28>
  } else {
    tuner_SetMute(1);
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	0e 94 65 21 	call	0x42ca	; 0x42ca <tea5767SetMute>
  }
}
    4378:	1f 91       	pop	r17
    437a:	08 95       	ret

0000437c <tuner_SetChannel>:
//=============================================================================
void tuner_SetChannel(uint8_t channel, uint8_t chan)
{
  if ((channel < FM_STATIONS) && (chan <= FM_CHAN_MAX)) {
    437c:	8e 31       	cpi	r24, 0x1E	; 30
    437e:	40 f4       	brcc	.+16     	; 0x4390 <tuner_SetChannel+0x14>
    4380:	63 3d       	cpi	r22, 0xD3	; 211
    4382:	30 f4       	brcc	.+12     	; 0x4390 <tuner_SetChannel+0x14>
    fm_stations[channel] = chan;
    4384:	e8 2f       	mov	r30, r24
    4386:	f0 e0       	ldi	r31, 0x00	; 0
    4388:	ea 55       	subi	r30, 0x5A	; 90
    438a:	fa 4f       	sbci	r31, 0xFA	; 250
    438c:	60 83       	st	Z, r22
    438e:	08 95       	ret
  } else {
    fm_stations[channel] = 0xFF;
    4390:	e8 2f       	mov	r30, r24
    4392:	f0 e0       	ldi	r31, 0x00	; 0
    4394:	ea 55       	subi	r30, 0x5A	; 90
    4396:	fa 4f       	sbci	r31, 0xFA	; 250
    4398:	8f ef       	ldi	r24, 0xFF	; 255
    439a:	80 83       	st	Z, r24
    439c:	08 95       	ret

0000439e <tuner_Save_stations>:
  }
}
//=============================================================================
void tuner_Save_stations(uint8_t channel, uint8_t chan)
{
  if ((channel < FM_STATIONS) && (chan <= FM_CHAN_MAX)) {
    439e:	8e 31       	cpi	r24, 0x1E	; 30
    43a0:	50 f4       	brcc	.+20     	; 0x43b6 <tuner_Save_stations+0x18>
    43a2:	63 3d       	cpi	r22, 0xD3	; 211
    43a4:	40 f4       	brcc	.+16     	; 0x43b6 <tuner_Save_stations+0x18>
    fm_stations[channel] = chan;
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	fc 01       	movw	r30, r24
    43aa:	ea 55       	subi	r30, 0x5A	; 90
    43ac:	fa 4f       	sbci	r31, 0xFA	; 250
    43ae:	60 83       	st	Z, r22
    eeprom_write_byte((uint8_t*)FM_CHANEL_ALL_ADDR + channel, fm_stations[channel]);
    43b0:	80 96       	adiw	r24, 0x20	; 32
    43b2:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
    43b6:	08 95       	ret

000043b8 <tuner_Load_stations>:
  }
}
//=============================================================================
uint8_t tuner_Load_stations(uint8_t channel)
{
  return eeprom_read_byte((uint8_t*)FM_CHANEL_ALL_ADDR + channel);
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	80 96       	adiw	r24, 0x20	; 32
    43bc:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
}
    43c0:	08 95       	ret

000043c2 <tuner_Save_all_stations>:
//=============================================================================
void tuner_Save_all_stations(void)
{
    43c2:	0f 93       	push	r16
    43c4:	1f 93       	push	r17
    43c6:	cf 93       	push	r28
    43c8:	df 93       	push	r29
    43ca:	06 ea       	ldi	r16, 0xA6	; 166
    43cc:	15 e0       	ldi	r17, 0x05	; 5
    43ce:	c0 e2       	ldi	r28, 0x20	; 32
    43d0:	d0 e0       	ldi	r29, 0x00	; 0
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
  {
    eeprom_write_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i, fm_stations[i]);
    43d2:	f8 01       	movw	r30, r16
    43d4:	61 91       	ld	r22, Z+
    43d6:	8f 01       	movw	r16, r30
    43d8:	ce 01       	movw	r24, r28
    43da:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
    43de:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void tuner_Save_all_stations(void)
{
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
    43e0:	ce 33       	cpi	r28, 0x3E	; 62
    43e2:	d1 05       	cpc	r29, r1
    43e4:	b1 f7       	brne	.-20     	; 0x43d2 <tuner_Save_all_stations+0x10>
  {
    eeprom_write_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i, fm_stations[i]);
  }
}
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	1f 91       	pop	r17
    43ec:	0f 91       	pop	r16
    43ee:	08 95       	ret

000043f0 <tuner_Load_all_stations>:
//=============================================================================
void tuner_Load_all_stations(void)
{
    43f0:	0f 93       	push	r16
    43f2:	1f 93       	push	r17
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
    43f8:	06 ea       	ldi	r16, 0xA6	; 166
    43fa:	15 e0       	ldi	r17, 0x05	; 5
    43fc:	c0 e2       	ldi	r28, 0x20	; 32
    43fe:	d0 e0       	ldi	r29, 0x00	; 0
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
  {
    fm_stations[i] = eeprom_read_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i);
    4400:	ce 01       	movw	r24, r28
    4402:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
    4406:	f8 01       	movw	r30, r16
    4408:	81 93       	st	Z+, r24
    440a:	8f 01       	movw	r16, r30
    440c:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void tuner_Load_all_stations(void)
{
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
    440e:	ce 33       	cpi	r28, 0x3E	; 62
    4410:	d1 05       	cpc	r29, r1
    4412:	b1 f7       	brne	.-20     	; 0x4400 <tuner_Load_all_stations+0x10>
  {
    fm_stations[i] = eeprom_read_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i);
  }
}
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	1f 91       	pop	r17
    441a:	0f 91       	pop	r16
    441c:	08 95       	ret

0000441e <tuner_Save_channel>:
//=============================================================================
void tuner_Save_channel(uint8_t channel)
{
    441e:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)FM_STATION_ADDR, channel);
    4420:	80 e1       	ldi	r24, 0x10	; 16
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
}
    4428:	08 95       	ret

0000442a <tuner_Load_channel>:
//=============================================================================
uint8_t tuner_Load_channel(void)
{
  unsigned char i;
  i = eeprom_read_byte((uint8_t*)FM_STATION_ADDR);
    442a:	80 e1       	ldi	r24, 0x10	; 16
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
  if (i > FM_STATIONS) i = 0;
    4432:	8f 31       	cpi	r24, 0x1F	; 31
    4434:	08 f0       	brcs	.+2      	; 0x4438 <tuner_Load_channel+0xe>
    4436:	80 e0       	ldi	r24, 0x00	; 0
  return i;
}
    4438:	08 95       	ret

0000443a <tuner_Save_volume>:
//=============================================================================
void tuner_Save_volume(uint8_t vol)
{
    443a:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)FM_VOLUME_ADDR, vol);
    443c:	81 e1       	ldi	r24, 0x11	; 17
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	0e 94 b4 22 	call	0x4568	; 0x4568 <__eewr_byte_m32>
}
    4444:	08 95       	ret

00004446 <tuner_Load_volume>:
//=============================================================================
uint8_t tuner_Load_volume(void)
{
  return eeprom_read_byte((uint8_t*)FM_VOLUME_ADDR);
    4446:	81 e1       	ldi	r24, 0x11	; 17
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	0e 94 ac 22 	call	0x4558	; 0x4558 <__eerd_byte_m32>
}
    444e:	08 95       	ret

00004450 <get_fm_def_chan>:
{
  uint8_t ret = FM_CHAN_DEF, chan_max = 0, i;
  for(i = 0; i < FM_STATIONS; i++)
  {
    if (fm_stations[i] <= FM_CHAN_MAX) {
	  if (fm_stations[i] >= chan_max) {
    4450:	e6 ea       	ldi	r30, 0xA6	; 166
    4452:	f5 e0       	ldi	r31, 0x05	; 5
  return eeprom_read_byte((uint8_t*)FM_VOLUME_ADDR);
}
//=============================================================================
uint8_t get_fm_def_chan(void)
{
  uint8_t ret = FM_CHAN_DEF, chan_max = 0, i;
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	80 e0       	ldi	r24, 0x00	; 0
  for(i = 0; i < FM_STATIONS; i++)
  {
    if (fm_stations[i] <= FM_CHAN_MAX) {
    4458:	21 91       	ld	r18, Z+
    445a:	23 3d       	cpi	r18, 0xD3	; 211
    445c:	20 f4       	brcc	.+8      	; 0x4466 <get_fm_def_chan+0x16>
	  if (fm_stations[i] >= chan_max) {
    445e:	29 17       	cp	r18, r25
    4460:	10 f0       	brcs	.+4      	; 0x4466 <get_fm_def_chan+0x16>
    4462:	92 2f       	mov	r25, r18
    4464:	82 2f       	mov	r24, r18
}
//=============================================================================
uint8_t get_fm_def_chan(void)
{
  uint8_t ret = FM_CHAN_DEF, chan_max = 0, i;
  for(i = 0; i < FM_STATIONS; i++)
    4466:	25 e0       	ldi	r18, 0x05	; 5
    4468:	e4 3c       	cpi	r30, 0xC4	; 196
    446a:	f2 07       	cpc	r31, r18
    446c:	a9 f7       	brne	.-22     	; 0x4458 <get_fm_def_chan+0x8>
	    ret = fm_stations[i];
	  }
	}
  }
  return ret;
}
    446e:	08 95       	ret

00004470 <__mulsi3>:
    4470:	62 9f       	mul	r22, r18
    4472:	d0 01       	movw	r26, r0
    4474:	73 9f       	mul	r23, r19
    4476:	f0 01       	movw	r30, r0
    4478:	82 9f       	mul	r24, r18
    447a:	e0 0d       	add	r30, r0
    447c:	f1 1d       	adc	r31, r1
    447e:	64 9f       	mul	r22, r20
    4480:	e0 0d       	add	r30, r0
    4482:	f1 1d       	adc	r31, r1
    4484:	92 9f       	mul	r25, r18
    4486:	f0 0d       	add	r31, r0
    4488:	83 9f       	mul	r24, r19
    448a:	f0 0d       	add	r31, r0
    448c:	74 9f       	mul	r23, r20
    448e:	f0 0d       	add	r31, r0
    4490:	65 9f       	mul	r22, r21
    4492:	f0 0d       	add	r31, r0
    4494:	99 27       	eor	r25, r25
    4496:	72 9f       	mul	r23, r18
    4498:	b0 0d       	add	r27, r0
    449a:	e1 1d       	adc	r30, r1
    449c:	f9 1f       	adc	r31, r25
    449e:	63 9f       	mul	r22, r19
    44a0:	b0 0d       	add	r27, r0
    44a2:	e1 1d       	adc	r30, r1
    44a4:	f9 1f       	adc	r31, r25
    44a6:	bd 01       	movw	r22, r26
    44a8:	cf 01       	movw	r24, r30
    44aa:	11 24       	eor	r1, r1
    44ac:	08 95       	ret

000044ae <__udivmodqi4>:
    44ae:	99 1b       	sub	r25, r25
    44b0:	79 e0       	ldi	r23, 0x09	; 9
    44b2:	04 c0       	rjmp	.+8      	; 0x44bc <__udivmodqi4_ep>

000044b4 <__udivmodqi4_loop>:
    44b4:	99 1f       	adc	r25, r25
    44b6:	96 17       	cp	r25, r22
    44b8:	08 f0       	brcs	.+2      	; 0x44bc <__udivmodqi4_ep>
    44ba:	96 1b       	sub	r25, r22

000044bc <__udivmodqi4_ep>:
    44bc:	88 1f       	adc	r24, r24
    44be:	7a 95       	dec	r23
    44c0:	c9 f7       	brne	.-14     	; 0x44b4 <__udivmodqi4_loop>
    44c2:	80 95       	com	r24
    44c4:	08 95       	ret

000044c6 <__udivmodhi4>:
    44c6:	aa 1b       	sub	r26, r26
    44c8:	bb 1b       	sub	r27, r27
    44ca:	51 e1       	ldi	r21, 0x11	; 17
    44cc:	07 c0       	rjmp	.+14     	; 0x44dc <__udivmodhi4_ep>

000044ce <__udivmodhi4_loop>:
    44ce:	aa 1f       	adc	r26, r26
    44d0:	bb 1f       	adc	r27, r27
    44d2:	a6 17       	cp	r26, r22
    44d4:	b7 07       	cpc	r27, r23
    44d6:	10 f0       	brcs	.+4      	; 0x44dc <__udivmodhi4_ep>
    44d8:	a6 1b       	sub	r26, r22
    44da:	b7 0b       	sbc	r27, r23

000044dc <__udivmodhi4_ep>:
    44dc:	88 1f       	adc	r24, r24
    44de:	99 1f       	adc	r25, r25
    44e0:	5a 95       	dec	r21
    44e2:	a9 f7       	brne	.-22     	; 0x44ce <__udivmodhi4_loop>
    44e4:	80 95       	com	r24
    44e6:	90 95       	com	r25
    44e8:	bc 01       	movw	r22, r24
    44ea:	cd 01       	movw	r24, r26
    44ec:	08 95       	ret

000044ee <__divmodhi4>:
    44ee:	97 fb       	bst	r25, 7
    44f0:	09 2e       	mov	r0, r25
    44f2:	07 26       	eor	r0, r23
    44f4:	0a d0       	rcall	.+20     	; 0x450a <__divmodhi4_neg1>
    44f6:	77 fd       	sbrc	r23, 7
    44f8:	04 d0       	rcall	.+8      	; 0x4502 <__divmodhi4_neg2>
    44fa:	e5 df       	rcall	.-54     	; 0x44c6 <__udivmodhi4>
    44fc:	06 d0       	rcall	.+12     	; 0x450a <__divmodhi4_neg1>
    44fe:	00 20       	and	r0, r0
    4500:	1a f4       	brpl	.+6      	; 0x4508 <__divmodhi4_exit>

00004502 <__divmodhi4_neg2>:
    4502:	70 95       	com	r23
    4504:	61 95       	neg	r22
    4506:	7f 4f       	sbci	r23, 0xFF	; 255

00004508 <__divmodhi4_exit>:
    4508:	08 95       	ret

0000450a <__divmodhi4_neg1>:
    450a:	f6 f7       	brtc	.-4      	; 0x4508 <__divmodhi4_exit>
    450c:	90 95       	com	r25
    450e:	81 95       	neg	r24
    4510:	9f 4f       	sbci	r25, 0xFF	; 255
    4512:	08 95       	ret

00004514 <__udivmodsi4>:
    4514:	a1 e2       	ldi	r26, 0x21	; 33
    4516:	1a 2e       	mov	r1, r26
    4518:	aa 1b       	sub	r26, r26
    451a:	bb 1b       	sub	r27, r27
    451c:	fd 01       	movw	r30, r26
    451e:	0d c0       	rjmp	.+26     	; 0x453a <__udivmodsi4_ep>

00004520 <__udivmodsi4_loop>:
    4520:	aa 1f       	adc	r26, r26
    4522:	bb 1f       	adc	r27, r27
    4524:	ee 1f       	adc	r30, r30
    4526:	ff 1f       	adc	r31, r31
    4528:	a2 17       	cp	r26, r18
    452a:	b3 07       	cpc	r27, r19
    452c:	e4 07       	cpc	r30, r20
    452e:	f5 07       	cpc	r31, r21
    4530:	20 f0       	brcs	.+8      	; 0x453a <__udivmodsi4_ep>
    4532:	a2 1b       	sub	r26, r18
    4534:	b3 0b       	sbc	r27, r19
    4536:	e4 0b       	sbc	r30, r20
    4538:	f5 0b       	sbc	r31, r21

0000453a <__udivmodsi4_ep>:
    453a:	66 1f       	adc	r22, r22
    453c:	77 1f       	adc	r23, r23
    453e:	88 1f       	adc	r24, r24
    4540:	99 1f       	adc	r25, r25
    4542:	1a 94       	dec	r1
    4544:	69 f7       	brne	.-38     	; 0x4520 <__udivmodsi4_loop>
    4546:	60 95       	com	r22
    4548:	70 95       	com	r23
    454a:	80 95       	com	r24
    454c:	90 95       	com	r25
    454e:	9b 01       	movw	r18, r22
    4550:	ac 01       	movw	r20, r24
    4552:	bd 01       	movw	r22, r26
    4554:	cf 01       	movw	r24, r30
    4556:	08 95       	ret

00004558 <__eerd_byte_m32>:
    4558:	e1 99       	sbic	0x1c, 1	; 28
    455a:	fe cf       	rjmp	.-4      	; 0x4558 <__eerd_byte_m32>
    455c:	9f bb       	out	0x1f, r25	; 31
    455e:	8e bb       	out	0x1e, r24	; 30
    4560:	e0 9a       	sbi	0x1c, 0	; 28
    4562:	99 27       	eor	r25, r25
    4564:	8d b3       	in	r24, 0x1d	; 29
    4566:	08 95       	ret

00004568 <__eewr_byte_m32>:
    4568:	26 2f       	mov	r18, r22

0000456a <__eewr_r18_m32>:
    456a:	e1 99       	sbic	0x1c, 1	; 28
    456c:	fe cf       	rjmp	.-4      	; 0x456a <__eewr_r18_m32>
    456e:	9f bb       	out	0x1f, r25	; 31
    4570:	8e bb       	out	0x1e, r24	; 30
    4572:	2d bb       	out	0x1d, r18	; 29
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	e2 9a       	sbi	0x1c, 2	; 28
    457a:	e1 9a       	sbi	0x1c, 1	; 28
    457c:	0f be       	out	0x3f, r0	; 63
    457e:	01 96       	adiw	r24, 0x01	; 1
    4580:	08 95       	ret

00004582 <_exit>:
    4582:	f8 94       	cli

00004584 <__stop_program>:
    4584:	ff cf       	rjmp	.-2      	; 0x4584 <__stop_program>
