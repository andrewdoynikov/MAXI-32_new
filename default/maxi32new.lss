
maxi32new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000042a  00800060  00004598  0000462c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013b  0080048a  0080048a  00004a56  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00004a58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  0000528c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000053d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f80  00000000  00000000  00005557  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003bf5  00000000  00000000  000064d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000117c  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005199  00000000  00000000  0000b248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ae0  00000000  00000000  000103e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f1d  00000000  00000000  00010ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022c8  00000000  00000000  00011de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000290  00000000  00000000  000140a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  00014339  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
       4:	0c 94 41 1e 	jmp	0x3c82	; 0x3c82 <__vector_1>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_5>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 f1 1d 	jmp	0x3be2	; 0x3be2 <__vector_11>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 00 00 15 00 00 00 00 10 10 10 15 10 10 10 00     ................
      64:	18 18 18 1d 18 18 18 00 1c 1c 1c 1d 1c 1c 1c 00     ................
      74:	1e 1e 1e 1f 1e 1e 1e 00 1f 1f 1f 1f 1f 1f 1f 00     ................
      84:	0e 15 15 17 11 11 0e 00 03 05 19 11 19 05 03 00     ................

00000094 <LcdBigNum>:
      94:	1f 1f 1f 00 00 00 00 00 00 00 00 00 00 1f 1f 1f     ................
      a4:	1f 1f 00 00 00 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
      b4:	00 00 00 00 18 18 18 00 1f 1b 13 1b 1b 1b 1f 00     ................
      c4:	1f 11 1d 11 17 11 1f 00 1f 11 1d 11 1d 11 1f 00     ................

000000d4 <__ctors_end>:
      d4:	11 24       	eor	r1, r1
      d6:	1f be       	out	0x3f, r1	; 63
      d8:	cf e5       	ldi	r28, 0x5F	; 95
      da:	d8 e0       	ldi	r29, 0x08	; 8
      dc:	de bf       	out	0x3e, r29	; 62
      de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
      e0:	14 e0       	ldi	r17, 0x04	; 4
      e2:	a0 e6       	ldi	r26, 0x60	; 96
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	e8 e9       	ldi	r30, 0x98	; 152
      e8:	f5 e4       	ldi	r31, 0x45	; 69
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
      ec:	05 90       	lpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	aa 38       	cpi	r26, 0x8A	; 138
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
      f6:	15 e0       	ldi	r17, 0x05	; 5
      f8:	aa e8       	ldi	r26, 0x8A	; 138
      fa:	b4 e0       	ldi	r27, 0x04	; 4
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	a5 3c       	cpi	r26, 0xC5	; 197
     102:	b1 07       	cpc	r27, r17
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 89 00 	call	0x112	; 0x112 <main>
     10a:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <main>:
#include "tuner.h"
#include "interface.h"
//=============================================================================
int main(void)
{
  LED_STB_OUT_init();
     112:	ba 9a       	sbi	0x17, 2	; 23
  if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
     114:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	11 f4       	brne	.+4      	; 0x120 <main+0xe>
     11c:	c2 9a       	sbi	0x18, 2	; 24
     11e:	01 c0       	rjmp	.+2      	; 0x122 <main+0x10>
     120:	c2 98       	cbi	0x18, 2	; 24
  LED_AC_WAIT_init();
     122:	bb 9a       	sbi	0x17, 3	; 23
     124:	c3 98       	cbi	0x18, 3	; 24
  LED_VENTIL_init();
     126:	89 9a       	sbi	0x11, 1	; 17
     128:	91 98       	cbi	0x12, 1	; 18
  LED_STANDBY_init();
     12a:	b8 9a       	sbi	0x17, 0	; 23
     12c:	c0 98       	cbi	0x18, 0	; 24
  LED_STANDBY_on();
     12e:	c0 98       	cbi	0x18, 0	; 24
  LCD_init();
     130:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_init>
  LCD_load_defchar();
     134:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
  LIGHT_init();
     138:	a4 9a       	sbi	0x14, 4	; 20
  LIGHT_on();
     13a:	ac 9a       	sbi	0x15, 4	; 21
  I2C_init();
     13c:	0e 94 9d 02 	call	0x53a	; 0x53a <I2C_init>
  RC5_init(RC5_ALL);
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <RC5_init>
  RTC_init();
     146:	0e 94 6e 03 	call	0x6dc	; 0x6dc <RTC_init>
  KBD_init();
     14a:	0e 94 5f 05 	call	0xabe	; 0xabe <KBD_init>
  BEEP_init();
     14e:	8f 9a       	sbi	0x11, 7	; 17
     150:	97 9a       	sbi	0x12, 7	; 18
  ENC_init();
     152:	0e 94 bd 06 	call	0xd7a	; 0xd7a <ENC_init>
  LED_RC5_CMD_init();
     156:	b9 9a       	sbi	0x17, 1	; 23
     158:	c1 9a       	sbi	0x18, 1	; 24
  tda7313SetMute(1);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
  tuner_Init();
     160:	89 e7       	ldi	r24, 0x79	; 121
     162:	0e 94 dd 20 	call	0x41ba	; 0x41ba <tea5767Init>
     166:	0e 94 8e 21 	call	0x431c	; 0x431c <tuner_Init_stations>
  tuner_PowerOn();
     16a:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <tea5767PowerOn>
  RTOS_init();
     16e:	0e 94 0a 07 	call	0xe14	; 0xe14 <RTOS_init>
  BEEP();
     172:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     174:	8f e3       	ldi	r24, 0x3F	; 63
     176:	9c e9       	ldi	r25, 0x9C	; 156
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x66>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x6c>
     17e:	00 00       	nop
     180:	97 9a       	sbi	0x12, 7	; 18
//-----------------------------------------------------------------------------
  ds18x20SearchDevices();
     182:	0e 94 91 1c 	call	0x3922	; 0x3922 <ds18x20SearchDevices>
  ds18x20Process();
     186:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <ds18x20Process>
//-----------------------------------------------------------------------------
  sei(); 				        			 		// Разрешили прерывания
     18a:	78 94       	sei
  RTOS_setTask(EVENT_START, 0, 0);
     18c:	81 ea       	ldi	r24, 0xA1	; 161
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
  RTOS_setTaskFunc(scan_fault, 0, TIME_FAULT);      // моргание
     19a:	80 ea       	ldi	r24, 0xA0	; 160
     19c:	9c e0       	ldi	r25, 0x0C	; 12
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	44 ef       	ldi	r20, 0xF4	; 244
     1a4:	51 e0       	ldi	r21, 0x01	; 1
     1a6:	0e 94 80 07 	call	0xf00	; 0xf00 <RTOS_setTaskFunc>
//-----------------------------------------------------------------------------
  while(1) {
    RTOS_dispatchTask();    			     // Вызываем диспетчер в цикле.    
     1aa:	0e 94 62 08 	call	0x10c4	; 0x10c4 <RTOS_dispatchTask>
     1ae:	fd cf       	rjmp	.-6      	; 0x1aa <main+0x98>

000001b0 <lcd>:
  0x1F, 0x11, 0x1D, 0x11, 0x1D, 0x11, 0x1F, 0x00
};
//=============================================================================
void lcd(unsigned char p)
{ 
  PORT(LCD_PORT_CTRL) |= (1 << LCD_EN_PIN);
     1b0:	dc 9a       	sbi	0x1b, 4	; 27
  if (p & 0x80) { PORT(LCD_PORT_DATA) |= (1 << LCD_D7_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D7_PIN)); }
     1b2:	87 ff       	sbrs	r24, 7
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <lcd+0xa>
     1b6:	db 9a       	sbi	0x1b, 3	; 27
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <lcd+0xc>
     1ba:	db 98       	cbi	0x1b, 3	; 27
  if (p & 0x40) { PORT(LCD_PORT_DATA) |= (1 << LCD_D6_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D6_PIN)); }
     1bc:	86 ff       	sbrs	r24, 6
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <lcd+0x14>
     1c0:	da 9a       	sbi	0x1b, 2	; 27
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <lcd+0x16>
     1c4:	da 98       	cbi	0x1b, 2	; 27
  if (p & 0x20) { PORT(LCD_PORT_DATA) |= (1 << LCD_D5_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D5_PIN)); }
     1c6:	85 ff       	sbrs	r24, 5
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <lcd+0x1e>
     1ca:	d9 9a       	sbi	0x1b, 1	; 27
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <lcd+0x20>
     1ce:	d9 98       	cbi	0x1b, 1	; 27
  if (p & 0x10) { PORT(LCD_PORT_DATA) |= (1 << LCD_D4_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D4_PIN)); }
     1d0:	84 ff       	sbrs	r24, 4
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <lcd+0x28>
     1d4:	d8 9a       	sbi	0x1b, 0	; 27
     1d6:	01 c0       	rjmp	.+2      	; 0x1da <lcd+0x2a>
     1d8:	d8 98       	cbi	0x1b, 0	; 27
  PORT(LCD_PORT_CTRL) &= ~_BV(LCD_EN_PIN);
     1da:	dc 98       	cbi	0x1b, 4	; 27
     1dc:	ef e9       	ldi	r30, 0x9F	; 159
     1de:	ff e0       	ldi	r31, 0x0F	; 15
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd+0x30>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd+0x36>
     1e6:	00 00       	nop
  _delay_ms(1);
  PORT(LCD_PORT_CTRL) |= (1 << LCD_EN_PIN);
     1e8:	dc 9a       	sbi	0x1b, 4	; 27
  if (p & 0x08) { PORT(LCD_PORT_DATA) |= (1 << LCD_D7_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D7_PIN)); }
     1ea:	83 ff       	sbrs	r24, 3
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <lcd+0x42>
     1ee:	db 9a       	sbi	0x1b, 3	; 27
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <lcd+0x44>
     1f2:	db 98       	cbi	0x1b, 3	; 27
  if (p & 0x04) { PORT(LCD_PORT_DATA) |= (1 << LCD_D6_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D6_PIN)); }
     1f4:	82 ff       	sbrs	r24, 2
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <lcd+0x4c>
     1f8:	da 9a       	sbi	0x1b, 2	; 27
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <lcd+0x4e>
     1fc:	da 98       	cbi	0x1b, 2	; 27
  if (p & 0x02) { PORT(LCD_PORT_DATA) |= (1 << LCD_D5_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D5_PIN)); }
     1fe:	81 ff       	sbrs	r24, 1
     200:	02 c0       	rjmp	.+4      	; 0x206 <lcd+0x56>
     202:	d9 9a       	sbi	0x1b, 1	; 27
     204:	01 c0       	rjmp	.+2      	; 0x208 <lcd+0x58>
     206:	d9 98       	cbi	0x1b, 1	; 27
  if (p & 0x01) { PORT(LCD_PORT_DATA) |= (1 << LCD_D4_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D4_PIN)); }
     208:	80 ff       	sbrs	r24, 0
     20a:	02 c0       	rjmp	.+4      	; 0x210 <lcd+0x60>
     20c:	d8 9a       	sbi	0x1b, 0	; 27
     20e:	01 c0       	rjmp	.+2      	; 0x212 <lcd+0x62>
     210:	d8 98       	cbi	0x1b, 0	; 27
  PORT(LCD_PORT_CTRL) &= (~(1 << LCD_EN_PIN));
     212:	dc 98       	cbi	0x1b, 4	; 27
     214:	8f e9       	ldi	r24, 0x9F	; 159
     216:	9f e0       	ldi	r25, 0x0F	; 15
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <lcd+0x68>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd+0x6e>
     21e:	00 00       	nop
  _delay_ms(1);
  PORT(LCD_PORT_CTRL) |= (1 << LCD_EN_PIN);
     220:	dc 9a       	sbi	0x1b, 4	; 27
}                
     222:	08 95       	ret

00000224 <LCD_com>:
//=============================================================================
void LCD_com(unsigned char p)
{
  PORT(LCD_PORT_CTRL) &= ~_BV(LCD_RS_PIN);
     224:	dd 98       	cbi	0x1b, 5	; 27
  PORT(LCD_PORT_CTRL) |= _BV(LCD_EN_PIN);
     226:	dc 9a       	sbi	0x1b, 4	; 27
  lcd(p);
     228:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd>
}
     22c:	08 95       	ret

0000022e <LCD_dat>:
//=============================================================================
void LCD_dat(unsigned char p)
{
  PORT(LCD_PORT_CTRL) |= (1 << LCD_RS_PIN) | (1 << LCD_EN_PIN);
     22e:	9b b3       	in	r25, 0x1b	; 27
     230:	90 63       	ori	r25, 0x30	; 48
     232:	9b bb       	out	0x1b, r25	; 27
  if ((p > 0x80) && (p != 0xED)) {
     234:	81 38       	cpi	r24, 0x81	; 129
     236:	48 f0       	brcs	.+18     	; 0x24a <LCD_dat+0x1c>
     238:	8d 3e       	cpi	r24, 0xED	; 237
     23a:	39 f0       	breq	.+14     	; 0x24a <LCD_dat+0x1c>
    p = TransTable[(p & 0x7F) - 0x40];
     23c:	e8 2f       	mov	r30, r24
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	ef 77       	andi	r30, 0x7F	; 127
     242:	f0 70       	andi	r31, 0x00	; 0
     244:	e0 5e       	subi	r30, 0xE0	; 224
     246:	ff 4f       	sbci	r31, 0xFF	; 255
     248:	80 81       	ld	r24, Z
  }
  lcd(p);
     24a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd>
}
     24e:	08 95       	ret

00000250 <LCD_puts>:
  LCD_com(0x0C);
  LCD_load_bignum();
}
//=============================================================================
void LCD_puts(char *data)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	e8 2e       	mov	r14, r24
     25a:	e7 01       	movw	r28, r14
     25c:	7e 01       	movw	r14, r28
     25e:	f9 2e       	mov	r15, r25
     260:	e7 01       	movw	r28, r14
  while(*data) LCD_dat(*(data++));
     262:	02 c0       	rjmp	.+4      	; 0x268 <LCD_puts+0x18>
     264:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     268:	89 91       	ld	r24, Y+
     26a:	88 23       	and	r24, r24
     26c:	d9 f7       	brne	.-10     	; 0x264 <LCD_puts+0x14>
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	08 95       	ret

00000278 <LCD_SetXY>:
//=============================================================================
void LCD_SetXY(unsigned char x, unsigned char y)
{
     278:	64 30       	cpi	r22, 0x04	; 4
     27a:	30 f4       	brcc	.+12     	; 0x288 <LCD_SetXY+0x10>
     27c:	e6 2f       	mov	r30, r22
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	e0 56       	subi	r30, 0x60	; 96
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	90 81       	ld	r25, Z
     286:	01 c0       	rjmp	.+2      	; 0x28a <LCD_SetXY+0x12>
     288:	90 e8       	ldi	r25, 0x80	; 128
    case 0: i = 0x80; break;
    case 1: i = 0xC0; break;
    case 2: i = 0x94; break;
    case 3: i = 0xD4; break;
  }
  LCD_com(i + x);
     28a:	89 0f       	add	r24, r25
     28c:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
}
     290:	08 95       	ret

00000292 <LCD_clear>:
//=============================================================================
void LCD_clear(void)
{
  LCD_com(1 << LCD_CLR);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     298:	8f ef       	ldi	r24, 0xFF	; 255
     29a:	93 ec       	ldi	r25, 0xC3	; 195
     29c:	a9 e0       	ldi	r26, 0x09	; 9
     29e:	81 50       	subi	r24, 0x01	; 1
     2a0:	90 40       	sbci	r25, 0x00	; 0
     2a2:	a0 40       	sbci	r26, 0x00	; 0
     2a4:	e1 f7       	brne	.-8      	; 0x29e <LCD_clear+0xc>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_clear+0x16>
     2a8:	00 00       	nop
  _delay_ms(200);
}
     2aa:	08 95       	ret

000002ac <LCD_definechar>:
//=============================================================================
void LCD_definechar(const unsigned char *pc,uint8_t char_code)
{
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	0f 92       	push	r0
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	6c 01       	movw	r12, r24
  uint8_t a, pcc;
  uint16_t i;
  a = (char_code << 3) | 0x40;
     2c2:	66 0f       	add	r22, r22
     2c4:	66 0f       	add	r22, r22
     2c6:	66 0f       	add	r22, r22
     2c8:	60 64       	ori	r22, 0x40	; 64
  for (i = 0; i < 8; i++) {
     2ca:	00 e0       	ldi	r16, 0x00	; 0
     2cc:	10 e0       	ldi	r17, 0x00	; 0
    pcc = pgm_read_byte(&pc[i]);
     2ce:	f6 01       	movw	r30, r12
     2d0:	e0 0f       	add	r30, r16
     2d2:	f1 1f       	adc	r31, r17
     2d4:	f4 90       	lpm	r15, Z+
	LCD_com(a++); LCD_dat(pcc);
     2d6:	86 2f       	mov	r24, r22
     2d8:	80 0f       	add	r24, r16
     2da:	69 83       	std	Y+1, r22	; 0x01
     2dc:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     2e0:	8f 2d       	mov	r24, r15
     2e2:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
void LCD_definechar(const unsigned char *pc,uint8_t char_code)
{
  uint8_t a, pcc;
  uint16_t i;
  a = (char_code << 3) | 0x40;
  for (i = 0; i < 8; i++) {
     2e6:	0f 5f       	subi	r16, 0xFF	; 255
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ea:	69 81       	ldd	r22, Y+1	; 0x01
     2ec:	08 30       	cpi	r16, 0x08	; 8
     2ee:	11 05       	cpc	r17, r1
     2f0:	71 f7       	brne	.-36     	; 0x2ce <LCD_definechar+0x22>
    pcc = pgm_read_byte(&pc[i]);
	LCD_com(a++); LCD_dat(pcc);
  }
}
     2f2:	0f 90       	pop	r0
     2f4:	cf 91       	pop	r28
     2f6:	df 91       	pop	r29
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	df 90       	pop	r13
     300:	cf 90       	pop	r12
     302:	08 95       	ret

00000304 <LCD_progress_bar>:
//=============================================================================
void LCD_progress_bar(unsigned char progress, unsigned char maxprogress, unsigned char length)
{
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	df 93       	push	r29
     312:	cf 93       	push	r28
     314:	0f 92       	push	r0
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
uint8_t i;
uint16_t pixelprogress;
uint8_t c;
pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
     31a:	e6 e0       	ldi	r30, 0x06	; 6
     31c:	8e 9f       	mul	r24, r30
     31e:	f0 01       	movw	r30, r0
     320:	11 24       	eor	r1, r1
     322:	24 2f       	mov	r18, r20
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	e2 9f       	mul	r30, r18
     328:	c0 01       	movw	r24, r0
     32a:	e3 9f       	mul	r30, r19
     32c:	90 0d       	add	r25, r0
     32e:	f2 9f       	mul	r31, r18
     330:	90 0d       	add	r25, r0
     332:	11 24       	eor	r1, r1
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
     33a:	6b 01       	movw	r12, r22
  {
    if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    {
      c = 0;
    } else {
      c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     33c:	cb 01       	movw	r24, r22
     33e:	66 e0       	ldi	r22, 0x06	; 6
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__udivmodhi4>
     346:	e8 2e       	mov	r14, r24
{
uint8_t i;
uint16_t pixelprogress;
uint8_t c;
pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
for(i=0; i<length; i++)
     348:	00 e0       	ldi	r16, 0x00	; 0
     34a:	10 e0       	ldi	r17, 0x00	; 0
     34c:	ff 24       	eor	r15, r15
     34e:	15 c0       	rjmp	.+42     	; 0x37a <LCD_progress_bar+0x76>
{
  if( ((i * (uint16_t)PROGRESSPIXELS_PER_CHAR) + 5) > pixelprogress )
     350:	98 01       	movw	r18, r16
     352:	2b 5f       	subi	r18, 0xFB	; 251
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	c2 16       	cp	r12, r18
     358:	d3 06       	cpc	r13, r19
     35a:	28 f4       	brcc	.+10     	; 0x366 <LCD_progress_bar+0x62>
  {
    if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     35c:	c0 16       	cp	r12, r16
     35e:	d1 06       	cpc	r13, r17
     360:	20 f4       	brcc	.+8      	; 0x36a <LCD_progress_bar+0x66>
    {
      c = 0;
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	03 c0       	rjmp	.+6      	; 0x36c <LCD_progress_bar+0x68>
    } else {
      c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    }
  } else {
    c = 5;
     366:	85 e0       	ldi	r24, 0x05	; 5
     368:	01 c0       	rjmp	.+2      	; 0x36c <LCD_progress_bar+0x68>
  {
    if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    {
      c = 0;
    } else {
      c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     36a:	8e 2d       	mov	r24, r14
    }
  } else {
    c = 5;
  }
  LCD_dat(c);
     36c:	49 83       	std	Y+1, r20	; 0x01
     36e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
{
uint8_t i;
uint16_t pixelprogress;
uint8_t c;
pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
for(i=0; i<length; i++)
     372:	f3 94       	inc	r15
     374:	0a 5f       	subi	r16, 0xFA	; 250
     376:	1f 4f       	sbci	r17, 0xFF	; 255
     378:	49 81       	ldd	r20, Y+1	; 0x01
     37a:	f4 16       	cp	r15, r20
     37c:	48 f3       	brcs	.-46     	; 0x350 <LCD_progress_bar+0x4c>
    c = 5;
  }
  LCD_dat(c);
}

}
     37e:	0f 90       	pop	r0
     380:	cf 91       	pop	r28
     382:	df 91       	pop	r29
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	08 95       	ret

00000392 <LCD_space>:
//=============================================================================
void LCD_space(unsigned char n_sp)
{
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	08 2f       	mov	r16, r24
unsigned char i;
for (i = 1; i <= n_sp; i++) {
     398:	11 e0       	ldi	r17, 0x01	; 1
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <LCD_space+0x12>
  LCD_dat(' ');
     39c:	80 e2       	ldi	r24, 0x20	; 32
     39e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
}
//=============================================================================
void LCD_space(unsigned char n_sp)
{
unsigned char i;
for (i = 1; i <= n_sp; i++) {
     3a2:	1f 5f       	subi	r17, 0xFF	; 255
     3a4:	01 17       	cp	r16, r17
     3a6:	d0 f7       	brcc	.-12     	; 0x39c <LCD_space+0xa>
  LCD_dat(' ');
}
}
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <LCD_load_defchar>:
//=============================================================================
void LCD_load_defchar(void)
{
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	c0 e0       	ldi	r28, 0x00	; 0
     3b4:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char ch = 0, chn = 0;
while(ch < 64)
{
  LCD_definechar((LcdCustomChar + ch),chn++);
     3b6:	ce 01       	movw	r24, r28
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	2a 95       	dec	r18
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <LCD_load_defchar+0xc>
     3c2:	8c 5a       	subi	r24, 0xAC	; 172
     3c4:	9f 4f       	sbci	r25, 0xFF	; 255
     3c6:	6c 2f       	mov	r22, r28
     3c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_definechar>
     3cc:	8f e9       	ldi	r24, 0x9F	; 159
     3ce:	9f e0       	ldi	r25, 0x0F	; 15
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_load_defchar+0x22>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_load_defchar+0x28>
     3d6:	00 00       	nop
     3d8:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void LCD_load_defchar(void)
{
unsigned char ch = 0, chn = 0;
while(ch < 64)
     3da:	c8 30       	cpi	r28, 0x08	; 8
     3dc:	d1 05       	cpc	r29, r1
     3de:	59 f7       	brne	.-42     	; 0x3b6 <LCD_load_defchar+0x8>
{
  LCD_definechar((LcdCustomChar + ch),chn++);
  _delay_ms(1);
  ch = ch + 8;
}
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <LCD_load_bignum>:
//=============================================================================
void LCD_load_bignum(void)
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	c0 e0       	ldi	r28, 0x00	; 0
     3ec:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char ch = 0, chn = 0;
while(ch < 64)
{
  LCD_definechar((LcdBigNum + ch),chn++);
     3ee:	ce 01       	movw	r24, r28
     3f0:	33 e0       	ldi	r19, 0x03	; 3
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	3a 95       	dec	r19
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <LCD_load_bignum+0xc>
     3fa:	8c 56       	subi	r24, 0x6C	; 108
     3fc:	9f 4f       	sbci	r25, 0xFF	; 255
     3fe:	6c 2f       	mov	r22, r28
     400:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_definechar>
     404:	8f e9       	ldi	r24, 0x9F	; 159
     406:	9f e0       	ldi	r25, 0x0F	; 15
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <LCD_load_bignum+0x22>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <LCD_load_bignum+0x28>
     40e:	00 00       	nop
     410:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void LCD_load_bignum(void)
{
unsigned char ch = 0, chn = 0;
while(ch < 64)
     412:	c8 30       	cpi	r28, 0x08	; 8
     414:	d1 05       	cpc	r29, r1
     416:	59 f7       	brne	.-42     	; 0x3ee <LCD_load_bignum+0x8>
{
  LCD_definechar((LcdBigNum + ch),chn++);
  _delay_ms(1);
  ch = ch + 8;
}
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <LCD_init>:
}
//=============================================================================
void LCD_init(void)
{
  // настройка портов
  LIGHT_init();
     41e:	a4 9a       	sbi	0x14, 4	; 20
  LIGHT_on(); 
     420:	ac 9a       	sbi	0x15, 4	; 21
  DDR(LCD_PORT_DATA) |= ((1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN));
     422:	8a b3       	in	r24, 0x1a	; 26
     424:	8f 60       	ori	r24, 0x0F	; 15
     426:	8a bb       	out	0x1a, r24	; 26
  PORT(LCD_PORT_DATA) &= (~(1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN));
     428:	d8 98       	cbi	0x1b, 0	; 27
  DDR(LCD_PORT_CTRL) |= ((1 << LCD_RS_PIN) | (1 << LCD_EN_PIN) | (1 << LCD_RW_PIN)); 
     42a:	8a b3       	in	r24, 0x1a	; 26
     42c:	80 6b       	ori	r24, 0xB0	; 176
     42e:	8a bb       	out	0x1a, r24	; 26
  PORT(LCD_PORT_CTRL) &= (~(1 << LCD_RS_PIN) | (1 << LCD_EN_PIN) | (1 << LCD_RW_PIN));
     430:	dd 98       	cbi	0x1b, 5	; 27
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	93 ec       	ldi	r25, 0xC3	; 195
     436:	a9 e0       	ldi	r26, 0x09	; 9
     438:	81 50       	subi	r24, 0x01	; 1
     43a:	90 40       	sbci	r25, 0x00	; 0
     43c:	a0 40       	sbci	r26, 0x00	; 0
     43e:	e1 f7       	brne	.-8      	; 0x438 <LCD_init+0x1a>
     440:	00 c0       	rjmp	.+0      	; 0x442 <LCD_init+0x24>
     442:	00 00       	nop
  _delay_ms(200);
  LCD_com(0x33);
     444:	83 e3       	ldi	r24, 0x33	; 51
     446:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	99 ef       	ldi	r25, 0xF9	; 249
     44e:	a0 e0       	ldi	r26, 0x00	; 0
     450:	81 50       	subi	r24, 0x01	; 1
     452:	90 40       	sbci	r25, 0x00	; 0
     454:	a0 40       	sbci	r26, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <LCD_init+0x32>
     458:	00 c0       	rjmp	.+0      	; 0x45a <LCD_init+0x3c>
     45a:	00 00       	nop
  _delay_ms(20);
  LCD_com(0x32);
     45c:	82 e3       	ldi	r24, 0x32	; 50
     45e:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     462:	af e9       	ldi	r26, 0x9F	; 159
     464:	bf e0       	ldi	r27, 0x0F	; 15
     466:	11 97       	sbiw	r26, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <LCD_init+0x48>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_init+0x4e>
     46c:	00 00       	nop
  _delay_ms(1);
  LCD_com(0x28);
     46e:	88 e2       	ldi	r24, 0x28	; 40
     470:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     474:	8f e9       	ldi	r24, 0x9F	; 159
     476:	9f e0       	ldi	r25, 0x0F	; 15
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <LCD_init+0x5a>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <LCD_init+0x60>
     47e:	00 00       	nop
  _delay_ms(1);
  LCD_com(0x08);
     480:	88 e0       	ldi	r24, 0x08	; 8
     482:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     486:	af e9       	ldi	r26, 0x9F	; 159
     488:	bf e0       	ldi	r27, 0x0F	; 15
     48a:	11 97       	sbiw	r26, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_init+0x6c>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_init+0x72>
     490:	00 00       	nop
  _delay_ms(1);
  LCD_com(0x01);
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     498:	8f ef       	ldi	r24, 0xFF	; 255
     49a:	90 e7       	ldi	r25, 0x70	; 112
     49c:	a2 e0       	ldi	r26, 0x02	; 2
     49e:	81 50       	subi	r24, 0x01	; 1
     4a0:	90 40       	sbci	r25, 0x00	; 0
     4a2:	a0 40       	sbci	r26, 0x00	; 0
     4a4:	e1 f7       	brne	.-8      	; 0x49e <LCD_init+0x80>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <LCD_init+0x8a>
     4a8:	00 00       	nop
  _delay_ms(50);
  LCD_com(0x06);
     4aa:	86 e0       	ldi	r24, 0x06	; 6
     4ac:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
  LCD_com(0x0C);
     4b0:	8c e0       	ldi	r24, 0x0C	; 12
     4b2:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
  LCD_load_bignum();
     4b6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
}
     4ba:	08 95       	ret

000004bc <delay>:
#include <avr/io.h>
#include "i2c.h"
// ============================================================================
void delay(unsigned long us)
{
  us = us * 2;
     4bc:	66 0f       	add	r22, r22
     4be:	77 1f       	adc	r23, r23
     4c0:	88 1f       	adc	r24, r24
     4c2:	99 1f       	adc	r25, r25
  while (us)
     4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <delay+0x16>
  {
	asm volatile("nop\n\t"::);
     4c6:	00 00       	nop
	asm volatile("nop\n\t"::);
     4c8:	00 00       	nop
	us--;
     4ca:	61 50       	subi	r22, 0x01	; 1
     4cc:	70 40       	sbci	r23, 0x00	; 0
     4ce:	80 40       	sbci	r24, 0x00	; 0
     4d0:	90 40       	sbci	r25, 0x00	; 0
#include "i2c.h"
// ============================================================================
void delay(unsigned long us)
{
  us = us * 2;
  while (us)
     4d2:	61 15       	cp	r22, r1
     4d4:	71 05       	cpc	r23, r1
     4d6:	81 05       	cpc	r24, r1
     4d8:	91 05       	cpc	r25, r1
     4da:	a9 f7       	brne	.-22     	; 0x4c6 <delay+0xa>
  {
	asm volatile("nop\n\t"::);
	asm volatile("nop\n\t"::);
	us--;
  }
}
     4dc:	08 95       	ret

000004de <I2C_start>:
  return;
}
// ============================================================================
void I2C_start(void)
{
  RELEASE_I2C_BUS();
     4de:	a0 98       	cbi	0x14, 0	; 20
     4e0:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_DELAY);
     4e2:	6d e0       	ldi	r22, 0x0D	; 13
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SDA_0();
     4ee:	a1 9a       	sbi	0x14, 1	; 20
  delay(I2C_DELAY);
     4f0:	6d e0       	ldi	r22, 0x0D	; 13
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SCL_0();
     4fc:	a0 9a       	sbi	0x14, 0	; 20
  delay(I2C_DELAY);
     4fe:	6d e0       	ldi	r22, 0x0D	; 13
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  return;
}
     50a:	08 95       	ret

0000050c <I2C_stop>:
// ============================================================================
void I2C_stop(void)
{
  SDA_0();
     50c:	a1 9a       	sbi	0x14, 1	; 20
  SCL_1();
     50e:	a0 98       	cbi	0x14, 0	; 20
  delay(I2C_DELAY);
     510:	6d e0       	ldi	r22, 0x0D	; 13
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SDA_1();
     51c:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_DELAY);
     51e:	6d e0       	ldi	r22, 0x0D	; 13
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SCL_0();
     52a:	a0 9a       	sbi	0x14, 0	; 20
  delay(I2C_DELAY);
     52c:	6d e0       	ldi	r22, 0x0D	; 13
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  return;
}
     538:	08 95       	ret

0000053a <I2C_init>:
  }
}
// ============================================================================
void I2C_init(void)
{
  I2C_SDA_OUT_REG &= ~(_BV(SDA_PIN));
     53a:	a9 98       	cbi	0x15, 1	; 21
  I2C_SCL_OUT_REG &= ~(_BV(SCL_PIN));
     53c:	a8 98       	cbi	0x15, 0	; 21
  RELEASE_I2C_BUS();
     53e:	a0 98       	cbi	0x14, 0	; 20
     540:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_TIMEOUT);
     542:	64 e6       	ldi	r22, 0x64	; 100
     544:	7a e0       	ldi	r23, 0x0A	; 10
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  I2C_start();
     54e:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  delay(I2C_TIMEOUT);
     552:	64 e6       	ldi	r22, 0x64	; 100
     554:	7a e0       	ldi	r23, 0x0A	; 10
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  I2C_stop();
     55e:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  delay(I2C_TIMEOUT);
     562:	64 e6       	ldi	r22, 0x64	; 100
     564:	7a e0       	ldi	r23, 0x0A	; 10
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  return;
}
     56e:	08 95       	ret

00000570 <I2C_write>:
  delay(I2C_DELAY);
  return;
}
// ============================================================================
unsigned char I2C_write(unsigned char data)
{
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	08 2f       	mov	r16, r24
     576:	18 e0       	ldi	r17, 0x08	; 8
register unsigned char bit = 0;
for(bit = 0; bit <= 7; bit++)
{
  if( data & 0x80 ) { SDA_1(); } else { SDA_0(); }
     578:	07 ff       	sbrs	r16, 7
     57a:	02 c0       	rjmp	.+4      	; 0x580 <I2C_write+0x10>
     57c:	a1 98       	cbi	0x14, 1	; 20
     57e:	01 c0       	rjmp	.+2      	; 0x582 <I2C_write+0x12>
     580:	a1 9a       	sbi	0x14, 1	; 20
    SCL_1();
     582:	a0 98       	cbi	0x14, 0	; 20
    delay(I2C_DELAY);
     584:	6d e0       	ldi	r22, 0x0D	; 13
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
    SCL_0();
     590:	a0 9a       	sbi	0x14, 0	; 20
    delay(I2C_DELAY);
     592:	6d e0       	ldi	r22, 0x0D	; 13
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
     59e:	11 50       	subi	r17, 0x01	; 1
}
// ============================================================================
unsigned char I2C_write(unsigned char data)
{
register unsigned char bit = 0;
for(bit = 0; bit <= 7; bit++)
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <I2C_write+0x36>
  if( data & 0x80 ) { SDA_1(); } else { SDA_0(); }
    SCL_1();
    delay(I2C_DELAY);
    SCL_0();
    delay(I2C_DELAY);
    data = (data<<1);
     5a2:	00 0f       	add	r16, r16
     5a4:	e9 cf       	rjmp	.-46     	; 0x578 <I2C_write+0x8>
  }
  RELEASE_I2C_BUS();
     5a6:	a0 98       	cbi	0x14, 0	; 20
     5a8:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_DELAY);
     5aa:	6d e0       	ldi	r22, 0x0D	; 13
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) )
     5b6:	99 9b       	sbis	0x13, 1	; 19
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <I2C_write+0x5a>
  {
    SCL_0();
    delay(I2C_DELAY);
  }	else {
    delay(I2C_TIMEOUT);
     5ba:	64 e6       	ldi	r22, 0x64	; 100
     5bc:	7a e0       	ldi	r23, 0x0A	; 10
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
	if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) )
     5c6:	99 99       	sbic	0x13, 1	; 19
     5c8:	13 c0       	rjmp	.+38     	; 0x5f0 <I2C_write+0x80>
	{
	  SCL_0();
     5ca:	a0 9a       	sbi	0x14, 0	; 20
	  delay(I2C_DELAY);
     5cc:	6d e0       	ldi	r22, 0x0D	; 13
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
	} else { return(I2C_ERROR_DEVICE_NOT_RESPONDING); }
  }
  if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) ) 
     5d8:	99 99       	sbic	0x13, 1	; 19
     5da:	0c c0       	rjmp	.+24     	; 0x5f4 <I2C_write+0x84>
  { 
    delay(I2C_TIMEOUT);
     5dc:	64 e6       	ldi	r22, 0x64	; 100
     5de:	7a e0       	ldi	r23, 0x0A	; 10
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SCL_0();
  delay(I2C_DELAY);
  return;
}
// ============================================================================
unsigned char I2C_write(unsigned char data)
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	99 9b       	sbis	0x13, 1	; 19
     5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <I2C_write+0x86>
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <I2C_write+0x84>
    delay(I2C_TIMEOUT);
	if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) )
	{
	  SCL_0();
	  delay(I2C_DELAY);
	} else { return(I2C_ERROR_DEVICE_NOT_RESPONDING); }
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <I2C_write+0x86>
  if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) ) 
  { 
    delay(I2C_TIMEOUT);
    if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) ) { return(I2C_ERROR_DEVICE_BUSY); }
  }   
return(I2C_NO_ERROR);	  
     5f4:	80 e0       	ldi	r24, 0x00	; 0
}
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	08 95       	ret

000005fc <I2C_read>:
// ============================================================================
unsigned char I2C_read(unsigned char ack)
{
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	f8 2e       	mov	r15, r24
register unsigned char bit = 0, data = 0;
SDA_1();
     604:	a1 98       	cbi	0x14, 1	; 20
     606:	08 e0       	ldi	r16, 0x08	; 8
return(I2C_NO_ERROR);	  
}
// ============================================================================
unsigned char I2C_read(unsigned char ack)
{
register unsigned char bit = 0, data = 0;
     608:	10 e0       	ldi	r17, 0x00	; 0
SDA_1();
for(bit = 0; bit <= 7; bit++)
{
  SCL_1();
     60a:	a0 98       	cbi	0x14, 0	; 20
  delay(I2C_DELAY);
     60c:	6d e0       	ldi	r22, 0x0D	; 13
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  data = (data << 1);
     618:	11 0f       	add	r17, r17
  if( bit_is_set(I2C_SDA_PIN_REG, SDA_PIN) ) { data++; }
     61a:	99 99       	sbic	0x13, 1	; 19
     61c:	1f 5f       	subi	r17, 0xFF	; 255
    SCL_0();
     61e:	a0 9a       	sbi	0x14, 0	; 20
    delay(I2C_DELAY);
     620:	6d e0       	ldi	r22, 0x0D	; 13
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
     62c:	01 50       	subi	r16, 0x01	; 1
// ============================================================================
unsigned char I2C_read(unsigned char ack)
{
register unsigned char bit = 0, data = 0;
SDA_1();
for(bit = 0; bit <= 7; bit++)
     62e:	69 f7       	brne	.-38     	; 0x60a <I2C_read+0xe>
  data = (data << 1);
  if( bit_is_set(I2C_SDA_PIN_REG, SDA_PIN) ) { data++; }
    SCL_0();
    delay(I2C_DELAY);
  }
  if(ack == 1) { SDA_0(); }  else { SDA_1(); }
     630:	8f 2d       	mov	r24, r15
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	11 f4       	brne	.+4      	; 0x63a <I2C_read+0x3e>
     636:	a1 9a       	sbi	0x14, 1	; 20
     638:	01 c0       	rjmp	.+2      	; 0x63c <I2C_read+0x40>
     63a:	a1 98       	cbi	0x14, 1	; 20
  SCL_1();
     63c:	a0 98       	cbi	0x14, 0	; 20
  delay(I2C_DELAY);
     63e:	6d e0       	ldi	r22, 0x0D	; 13
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SCL_0();
     64a:	a0 9a       	sbi	0x14, 0	; 20
  delay(I2C_DELAY);
     64c:	6d e0       	ldi	r22, 0x0D	; 13
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  return data;
}
     658:	81 2f       	mov	r24, r17
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	08 95       	ret

00000662 <RTC_write_reg>:
#include "i2c.h"
#include "lcd_lib.h"
#include "ds1307.h"
//=============================================================================
void RTC_write_reg(unsigned char addr,unsigned char data)
{
     662:	1f 93       	push	r17
     664:	df 93       	push	r29
     666:	cf 93       	push	r28
     668:	0f 92       	push	r0
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	18 2f       	mov	r17, r24
  I2C_start();
     670:	69 83       	std	Y+1, r22	; 0x01
     672:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     676:	80 ed       	ldi	r24, 0xD0	; 208
     678:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(addr);
     67c:	81 2f       	mov	r24, r17
     67e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(data);
     682:	69 81       	ldd	r22, Y+1	; 0x01
     684:	86 2f       	mov	r24, r22
     686:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     68a:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     68e:	0f 90       	pop	r0
     690:	cf 91       	pop	r28
     692:	df 91       	pop	r29
     694:	1f 91       	pop	r17
     696:	08 95       	ret

00000698 <RTC_read_reg>:
//=============================================================================
unsigned char RTC_read_reg(unsigned char addr)
{
     698:	1f 93       	push	r17
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	0f 92       	push	r0
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	18 2f       	mov	r17, r24
  unsigned char temp = 0; 
  I2C_start();
     6a6:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     6aa:	80 ed       	ldi	r24, 0xD0	; 208
     6ac:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(addr);
     6b0:	81 2f       	mov	r24, r17
     6b2:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     6b6:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  I2C_start();
     6ba:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_READ);
     6be:	81 ed       	ldi	r24, 0xD1	; 209
     6c0:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  temp = I2C_read(I2C_NOACK);
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
  I2C_stop();
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  return temp;
}
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	0f 90       	pop	r0
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	1f 91       	pop	r17
     6da:	08 95       	ret

000006dc <RTC_init>:
//=============================================================================
void RTC_init(void)
{
  unsigned temp = 0; 
  temp = RTC_read_reg(0x00);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 4c 03 	call	0x698	; 0x698 <RTC_read_reg>
  if ((temp & 0x80) != 0) {
     6e2:	87 ff       	sbrs	r24, 7
     6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <RTC_init+0x14>
    RTC_write_reg(0x00, temp & ~0x80);
     6e6:	68 2f       	mov	r22, r24
     6e8:	6f 77       	andi	r22, 0x7F	; 127
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 31 03 	call	0x662	; 0x662 <RTC_write_reg>
  }
  RTC_write_reg(DS1307_CONTROL, 0x90);
     6f0:	87 e0       	ldi	r24, 0x07	; 7
     6f2:	60 e9       	ldi	r22, 0x90	; 144
     6f4:	0e 94 31 03 	call	0x662	; 0x662 <RTC_write_reg>
}
     6f8:	08 95       	ret

000006fa <bcd2bin>:
  I2C_stop();
}
//=============================================================================
unsigned char bcd2bin(unsigned char bcd)
{
  unsigned char temp = bcd & 0x0F; 
     6fa:	28 2f       	mov	r18, r24
     6fc:	2f 70       	andi	r18, 0x0F	; 15
  *month = bcd2bin(I2C_read(I2C_ACK));
  *year = bcd2bin(I2C_read(I2C_NOACK));
  I2C_stop();
}
//=============================================================================
unsigned char bcd2bin(unsigned char bcd)
     6fe:	98 2f       	mov	r25, r24
     700:	92 95       	swap	r25
     702:	9f 70       	andi	r25, 0x0F	; 15
     704:	99 0f       	add	r25, r25
     706:	89 2f       	mov	r24, r25
     708:	88 0f       	add	r24, r24
     70a:	88 0f       	add	r24, r24
     70c:	89 0f       	add	r24, r25
  { 
    temp += 10; 
    bcd -= 0x10; 
  } 
  return temp; 
}
     70e:	82 0f       	add	r24, r18
     710:	08 95       	ret

00000712 <RTC_get_date>:
  I2C_write(bin2bcd(year));
  I2C_stop();
}
//=============================================================================
void RTC_get_date(unsigned char *date,unsigned char *month, unsigned char *year)
{
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
     720:	8b 01       	movw	r16, r22
     722:	7a 01       	movw	r14, r20
  I2C_start();
     724:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     728:	80 ed       	ldi	r24, 0xD0	; 208
     72a:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(DS1307_DATE);
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     734:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  I2C_start();
     738:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_READ);
     73c:	81 ed       	ldi	r24, 0xD1	; 209
     73e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  *date = bcd2bin(I2C_read(I2C_ACK));
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     748:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     74c:	88 83       	st	Y, r24
  *month = bcd2bin(I2C_read(I2C_ACK));
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     754:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     758:	f8 01       	movw	r30, r16
     75a:	80 83       	st	Z, r24
  *year = bcd2bin(I2C_read(I2C_NOACK));
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     762:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     766:	f7 01       	movw	r30, r14
     768:	80 83       	st	Z, r24
  I2C_stop();
     76a:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	08 95       	ret

0000077c <RTC_get_time>:
  I2C_write(bin2bcd(hour));
  I2C_stop();
}
//=============================================================================
void RTC_get_time(unsigned char *hour,unsigned char *min,unsigned char *sec)
{
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
     78a:	8b 01       	movw	r16, r22
     78c:	7a 01       	movw	r14, r20
  I2C_start();
     78e:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     792:	80 ed       	ldi	r24, 0xD0	; 208
     794:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(0);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     79e:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  I2C_start();
     7a2:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_READ);
     7a6:	81 ed       	ldi	r24, 0xD1	; 209
     7a8:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  *sec = bcd2bin(I2C_read(I2C_ACK));
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     7b2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     7b6:	f7 01       	movw	r30, r14
     7b8:	80 83       	st	Z, r24
  *min = bcd2bin(I2C_read(I2C_ACK));
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     7c0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     7c4:	f8 01       	movw	r30, r16
     7c6:	80 83       	st	Z, r24
  *hour = bcd2bin(I2C_read(I2C_NOACK));
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     7ce:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     7d2:	88 83       	st	Y, r24
  I2C_stop();
     7d4:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	08 95       	ret

000007e6 <bin2bcd>:
  return temp; 
}
//=============================================================================
unsigned char bin2bcd(unsigned char bin)
{
  unsigned temp = 0; 
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
  while(bin > 9) 
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <bin2bcd+0xc>
  { 
    temp += 0x10; 
     7ec:	20 5f       	subi	r18, 0xF0	; 240
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
    bin -= 10; 
     7f0:	8a 50       	subi	r24, 0x0A	; 10
}
//=============================================================================
unsigned char bin2bcd(unsigned char bin)
{
  unsigned temp = 0; 
  while(bin > 9) 
     7f2:	8a 30       	cpi	r24, 0x0A	; 10
     7f4:	d8 f7       	brcc	.-10     	; 0x7ec <bin2bcd+0x6>
  { 
    temp += 0x10; 
    bin -= 10; 
  } 
  return temp + bin; 
}
     7f6:	82 0f       	add	r24, r18
     7f8:	08 95       	ret

000007fa <RTC_set_date>:
  *hour = bcd2bin(I2C_read(I2C_NOACK));
  I2C_stop();
}
//=============================================================================
void RTC_set_date(unsigned char date,unsigned char month,unsigned char year)
{
     7fa:	1f 93       	push	r17
     7fc:	df 93       	push	r29
     7fe:	cf 93       	push	r28
     800:	00 d0       	rcall	.+0      	; 0x802 <RTC_set_date+0x8>
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	18 2f       	mov	r17, r24
  I2C_start();
     808:	4a 83       	std	Y+2, r20	; 0x02
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     810:	80 ed       	ldi	r24, 0xD0	; 208
     812:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(DS1307_DATE);
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(date));
     81c:	81 2f       	mov	r24, r17
     81e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     822:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(month));
     826:	69 81       	ldd	r22, Y+1	; 0x01
     828:	86 2f       	mov	r24, r22
     82a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     82e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(year));
     832:	4a 81       	ldd	r20, Y+2	; 0x02
     834:	84 2f       	mov	r24, r20
     836:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     83a:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     83e:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	1f 91       	pop	r17
     84c:	08 95       	ret

0000084e <RTC_set_time>:
  }
  RTC_write_reg(DS1307_CONTROL, 0x90);
}
//=============================================================================
void RTC_set_time(unsigned char hour, unsigned char min, unsigned char sec)
{
     84e:	1f 93       	push	r17
     850:	df 93       	push	r29
     852:	cf 93       	push	r28
     854:	00 d0       	rcall	.+0      	; 0x856 <RTC_set_time+0x8>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	18 2f       	mov	r17, r24
  I2C_start();
     85c:	49 83       	std	Y+1, r20	; 0x01
     85e:	6a 83       	std	Y+2, r22	; 0x02
     860:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     864:	80 ed       	ldi	r24, 0xD0	; 208
     866:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(0);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(sec));
     870:	49 81       	ldd	r20, Y+1	; 0x01
     872:	84 2f       	mov	r24, r20
     874:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     878:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(min));
     87c:	6a 81       	ldd	r22, Y+2	; 0x02
     87e:	86 2f       	mov	r24, r22
     880:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     884:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(hour));
     888:	81 2f       	mov	r24, r17
     88a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     88e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     892:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	cf 91       	pop	r28
     89c:	df 91       	pop	r29
     89e:	1f 91       	pop	r17
     8a0:	08 95       	ret

000008a2 <RTC_dayofweek>:
  RTC_get_date(&d,&m,&y);
  print_dec(d,2,'0'); LCD_dat('/'); print_dec(m,2,'0'); LCD_dat('/'); print_dec(20,2,'0'); print_dec(y,2,'0');
}
//=============================================================================
uint8_t RTC_dayofweek(void)
{
     8a2:	df 93       	push	r29
     8a4:	cf 93       	push	r28
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <RTC_dayofweek+0x6>
     8a8:	0f 92       	push	r0
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
  uint8_t d, m, y;
  RTC_get_date(&d,&m,&y);
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6e 5f       	subi	r22, 0xFE	; 254
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	ae 01       	movw	r20, r28
     8ba:	4d 5f       	subi	r20, 0xFD	; 253
     8bc:	5f 4f       	sbci	r21, 0xFF	; 255
     8be:	0e 94 89 03 	call	0x712	; 0x712 <RTC_get_date>
  if (m < 3) {
     8c2:	8a 81       	ldd	r24, Y+2	; 0x02
     8c4:	83 30       	cpi	r24, 0x03	; 3
     8c6:	28 f4       	brcc	.+10     	; 0x8d2 <RTC_dayofweek+0x30>
    m += 12;
     8c8:	84 5f       	subi	r24, 0xF4	; 244
     8ca:	8a 83       	std	Y+2, r24	; 0x02
    y--;
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	81 50       	subi	r24, 0x01	; 1
     8d0:	8b 83       	std	Y+3, r24	; 0x03
  }
  return ( (13 * m + 3) / 5 + d + y + y / 4 - y / 100 + y / 400) % 7;
     8d2:	8b 81       	ldd	r24, Y+3	; 0x03
     8d4:	29 81       	ldd	r18, Y+1	; 0x01
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	28 0f       	add	r18, r24
     8da:	31 1d       	adc	r19, r1
     8dc:	98 2f       	mov	r25, r24
     8de:	96 95       	lsr	r25
     8e0:	96 95       	lsr	r25
     8e2:	29 0f       	add	r18, r25
     8e4:	31 1d       	adc	r19, r1
     8e6:	64 e6       	ldi	r22, 0x64	; 100
     8e8:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__udivmodqi4>
     8ec:	28 1b       	sub	r18, r24
     8ee:	31 09       	sbc	r19, r1
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	8d e0       	ldi	r24, 0x0D	; 13
     8f4:	98 9f       	mul	r25, r24
     8f6:	c0 01       	movw	r24, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	03 96       	adiw	r24, 0x03	; 3
     8fc:	65 e0       	ldi	r22, 0x05	; 5
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
     904:	26 0f       	add	r18, r22
     906:	37 1f       	adc	r19, r23
     908:	c9 01       	movw	r24, r18
     90a:	67 e0       	ldi	r22, 0x07	; 7
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
}
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	cf 91       	pop	r28
     91a:	df 91       	pop	r29
     91c:	08 95       	ret

0000091e <print_dec>:
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
{
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	df 93       	push	r29
     926:	cf 93       	push	r28
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	2b 97       	sbiw	r28, 0x0b	; 11
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	f6 2e       	mov	r15, r22
    y--;
  }
  return ( (13 * m + 3) / 5 + d + y + y / 4 - y / 100 + y / 400) % 7;
}
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
     93a:	e6 2f       	mov	r30, r22
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	9e 01       	movw	r18, r28
     940:	2f 5f       	subi	r18, 0xFF	; 255
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	e2 0f       	add	r30, r18
     946:	f3 1f       	adc	r31, r19
{
  unsigned char i;
  unsigned char s[10];
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
     948:	0a e0       	ldi	r16, 0x0A	; 10
     94a:	10 e0       	ldi	r17, 0x00	; 0
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
{
  unsigned char i;
  unsigned char s[10];
  for (i = 0; i < n; i++) {
     94c:	07 c0       	rjmp	.+14     	; 0x95c <print_dec+0x3e>
     94e:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
     950:	b8 01       	movw	r22, r16
     952:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__udivmodhi4>
     956:	80 5d       	subi	r24, 0xD0	; 208
     958:	80 83       	st	Z, r24
    x /= 10;
     95a:	cb 01       	movw	r24, r22
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
{
  unsigned char i;
  unsigned char s[10];
  for (i = 0; i < n; i++) {
     95c:	e2 17       	cp	r30, r18
     95e:	f3 07       	cpc	r31, r19
     960:	b1 f7       	brne	.-20     	; 0x94e <print_dec+0x30>
     962:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i=0; i<(n - 1); i++) {
     964:	8f 2d       	mov	r24, r15
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
     96a:	be 01       	movw	r22, r28
     96c:	6f 5f       	subi	r22, 0xFF	; 255
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	08 c0       	rjmp	.+16     	; 0x982 <print_dec+0x64>
     972:	fb 01       	movw	r30, r22
     974:	e2 0f       	add	r30, r18
     976:	f3 1f       	adc	r31, r19
     978:	20 81       	ld	r18, Z
     97a:	20 33       	cpi	r18, 0x30	; 48
     97c:	91 f4       	brne	.+36     	; 0x9a2 <print_dec+0x84>
     97e:	40 83       	st	Z, r20
  unsigned char s[10];
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i=0; i<(n - 1); i++) {
     980:	5f 5f       	subi	r21, 0xFF	; 255
     982:	25 2f       	mov	r18, r21
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	28 17       	cp	r18, r24
     988:	39 07       	cpc	r19, r25
     98a:	9c f3       	brlt	.-26     	; 0x972 <print_dec+0x54>
     98c:	0a c0       	rjmp	.+20     	; 0x9a2 <print_dec+0x84>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i=0; i<n; i++) LCD_dat(s[i]);
     98e:	f8 01       	movw	r30, r16
     990:	e9 0f       	add	r30, r25
     992:	f1 1d       	adc	r31, r1
     994:	80 81       	ld	r24, Z
     996:	9b 87       	std	Y+11, r25	; 0x0b
     998:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     99c:	9b 85       	ldd	r25, Y+11	; 0x0b
     99e:	9f 5f       	subi	r25, 0xFF	; 255
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <print_dec+0x8c>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i=0; i<(n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
     9a2:	90 e0       	ldi	r25, 0x00	; 0
  }
  for (i=0; i<n; i++) LCD_dat(s[i]);
     9a4:	8e 01       	movw	r16, r28
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	9f 15       	cp	r25, r15
     9ac:	80 f3       	brcs	.-32     	; 0x98e <print_dec+0x70>
}
     9ae:	2b 96       	adiw	r28, 0x0b	; 11
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	08 95       	ret

000009c6 <RTC_print_date>:
  RTC_get_time(&h,&m,&s);
  print_dec(h,2,'0'); LCD_dat(':'); print_dec(m,2,'0'); LCD_dat(':'); print_dec(s,2,'0');
}
//=============================================================================
void RTC_print_date(void)
{
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <RTC_print_date+0x6>
     9cc:	0f 92       	push	r0
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
  unsigned char d,m,y;
  RTC_get_date(&d,&m,&y);
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	be 01       	movw	r22, r28
     9d8:	6e 5f       	subi	r22, 0xFE	; 254
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	ae 01       	movw	r20, r28
     9de:	4d 5f       	subi	r20, 0xFD	; 253
     9e0:	5f 4f       	sbci	r21, 0xFF	; 255
     9e2:	0e 94 89 03 	call	0x712	; 0x712 <RTC_get_date>
  print_dec(d,2,'0'); LCD_dat('/'); print_dec(m,2,'0'); LCD_dat('/'); print_dec(20,2,'0'); print_dec(y,2,'0');
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	62 e0       	ldi	r22, 0x02	; 2
     9ec:	40 e3       	ldi	r20, 0x30	; 48
     9ee:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     9f2:	8f e2       	ldi	r24, 0x2F	; 47
     9f4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	62 e0       	ldi	r22, 0x02	; 2
     9fe:	40 e3       	ldi	r20, 0x30	; 48
     a00:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     a04:	8f e2       	ldi	r24, 0x2F	; 47
     a06:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     a0a:	84 e1       	ldi	r24, 0x14	; 20
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	62 e0       	ldi	r22, 0x02	; 2
     a10:	40 e3       	ldi	r20, 0x30	; 48
     a12:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	62 e0       	ldi	r22, 0x02	; 2
     a1c:	40 e3       	ldi	r20, 0x30	; 48
     a1e:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
}
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	cf 91       	pop	r28
     a2a:	df 91       	pop	r29
     a2c:	08 95       	ret

00000a2e <RTC_print_time>:
  } 
  return temp + bin; 
}
//=============================================================================
void RTC_print_time(void)
{
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	00 d0       	rcall	.+0      	; 0xa34 <RTC_print_time+0x6>
     a34:	0f 92       	push	r0
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
  unsigned char h,m,s;
  RTC_get_time(&h,&m,&s);
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6e 5f       	subi	r22, 0xFE	; 254
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	ae 01       	movw	r20, r28
     a46:	4d 5f       	subi	r20, 0xFD	; 253
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	0e 94 be 03 	call	0x77c	; 0x77c <RTC_get_time>
  print_dec(h,2,'0'); LCD_dat(':'); print_dec(m,2,'0'); LCD_dat(':'); print_dec(s,2,'0');
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	40 e3       	ldi	r20, 0x30	; 48
     a56:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     a5a:	8a e3       	ldi	r24, 0x3A	; 58
     a5c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	62 e0       	ldi	r22, 0x02	; 2
     a66:	40 e3       	ldi	r20, 0x30	; 48
     a68:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     a6c:	8a e3       	ldi	r24, 0x3A	; 58
     a6e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	40 e3       	ldi	r20, 0x30	; 48
     a7a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
}
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	08 95       	ret

00000a8a <print_hex>:
  }
  for (i=0; i<n; i++) LCD_dat(s[i]);
}
//=============================================================================
void print_hex(unsigned char x)
{
     a8a:	1f 93       	push	r17
  unsigned char hi, lo;
  hi = x & 0xF0;
  hi = hi >> 4;
     a8c:	28 2f       	mov	r18, r24
     a8e:	22 95       	swap	r18
     a90:	2f 70       	andi	r18, 0x0F	; 15
  hi = hi + '0';
     a92:	92 2f       	mov	r25, r18
     a94:	90 5d       	subi	r25, 0xD0	; 208
  if (hi >'9') hi = hi + 7;
     a96:	9a 33       	cpi	r25, 0x3A	; 58
     a98:	08 f0       	brcs	.+2      	; 0xa9c <print_hex+0x12>
     a9a:	99 5f       	subi	r25, 0xF9	; 249
  lo = (x & 0x0F) + '0';
     a9c:	8f 70       	andi	r24, 0x0F	; 15
     a9e:	18 2f       	mov	r17, r24
     aa0:	10 5d       	subi	r17, 0xD0	; 208
  if (lo > '9') lo = lo + 7;
     aa2:	1a 33       	cpi	r17, 0x3A	; 58
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <print_hex+0x1e>
     aa6:	19 5f       	subi	r17, 0xF9	; 249
  LCD_dat(hi); LCD_dat(lo);
     aa8:	89 2f       	mov	r24, r25
     aaa:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     aae:	81 2f       	mov	r24, r17
     ab0:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
}
     ab4:	1f 91       	pop	r17
     ab6:	08 95       	ret

00000ab8 <KBD_set_type>:
//=============================================================================
unsigned char kbd_type = 1;
//=============================================================================
void KBD_set_type(uint8_t val)
{
  kbd_type = val;
     ab8:	80 93 a4 00 	sts	0x00A4, r24
}
     abc:	08 95       	ret

00000abe <KBD_init>:
  }
}
//=============================================================================
void KBD_init(void)
{
  DDR(BUT_STANDBY) &= ~BUT_STANDBY_LINE;
     abe:	bd 98       	cbi	0x17, 5	; 23
  PORT(BUT_STANDBY) |= BUT_STANDBY_LINE;
     ac0:	c5 9a       	sbi	0x18, 5	; 24
  DDR(BUT_SET) &= ~BUT_SET_LINE;
     ac2:	be 98       	cbi	0x17, 6	; 23
  PORT(BUT_SET) |= BUT_SET_LINE;
     ac4:	c6 9a       	sbi	0x18, 6	; 24
  DDR(BUT_MENU) &= ~BUT_MENU_LINE;
     ac6:	bf 98       	cbi	0x17, 7	; 23
  PORT(BUT_MENU) |= BUT_MENU_LINE;
     ac8:	c7 9a       	sbi	0x18, 7	; 24
  DDR(BUT_SELECT) &= ~BUT_SELECT_LINE;
     aca:	a3 98       	cbi	0x14, 3	; 20
  PORT(BUT_SELECT) |= BUT_SELECT_LINE;
     acc:	ab 9a       	sbi	0x15, 3	; 21
  DDR(BUT_UP) &= ~BUT_UP_LINE;
     ace:	8c 98       	cbi	0x11, 4	; 17
  PORT(BUT_UP) |= BUT_UP_LINE;
     ad0:	94 9a       	sbi	0x12, 4	; 18
  DDR(BUT_DOWN) &= ~BUT_DOWN_LINE;
     ad2:	8d 98       	cbi	0x11, 5	; 17
  PORT(BUT_DOWN) |= BUT_DOWN_LINE;
     ad4:	95 9a       	sbi	0x12, 5	; 18
  DDR(BUT_LEFT) &= ~BUT_LEFT_LINE;
     ad6:	a2 98       	cbi	0x14, 2	; 20
  PORT(BUT_LEFT) |= BUT_LEFT_LINE;
     ad8:	aa 9a       	sbi	0x15, 2	; 21
  DDR(BUT_RIGHT) &= ~BUT_RIGHT_LINE;
     ada:	8e 98       	cbi	0x11, 6	; 17
  PORT(BUT_RIGHT) |= BUT_RIGHT_LINE;
     adc:	96 9a       	sbi	0x12, 6	; 18
  DDR(BEEPER) |= BEEPER_LINE;
     ade:	8f 9a       	sbi	0x11, 7	; 17
  PORT(BEEPER) |= BEEPER_LINE;
     ae0:	97 9a       	sbi	0x12, 7	; 18
//-----------------------------------------------------------------------------
  DDR(LED_FAULT_IN) &= ~LED_FAULT_IN_LINE;
     ae2:	a7 98       	cbi	0x14, 7	; 20
  PORT(LED_FAULT_IN) |= LED_FAULT_IN_LINE;
     ae4:	af 9a       	sbi	0x15, 7	; 21
  DDR(LED_FAULT_IMPULS0) |= LED_FAULT_IMPULS0_LINE;
     ae6:	a6 9a       	sbi	0x14, 6	; 20
  LED_FAULT_IMPULS0_off();
     ae8:	ae 98       	cbi	0x15, 6	; 21
  DDR(LED_FAULT_IMPULS1) |= LED_FAULT_IMPULS1_LINE;
     aea:	a5 9a       	sbi	0x14, 5	; 20
  LED_FAULT_IMPULS1_off();
     aec:	ad 9a       	sbi	0x15, 5	; 21
  DDR(LED_MUTE_DUBLE) |= LED_MUTE_DUBLE_LINE;
     aee:	d7 9a       	sbi	0x1a, 7	; 26
  LED_MUTE_DUBLE_1;
     af0:	df 9a       	sbi	0x1b, 7	; 27
  DDR(LED_STB_IMPULS) |= LED_STB_IMPULS_LINE;
     af2:	d6 9a       	sbi	0x1a, 6	; 26
//-----------------------------------------------------------------------------
}
     af4:	08 95       	ret

00000af6 <debounce_sw_standby>:
//=============================================================================
unsigned char debounce_sw_standby(void)
{
static uint16_t state1 = 0; //holds present state
state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_STANDBY), BUT_STANDBY_PIN)) | 0xE000;
     af6:	80 91 98 04 	lds	r24, 0x0498
     afa:	90 91 99 04 	lds	r25, 0x0499
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	90 6e       	ori	r25, 0xE0	; 224
     b04:	21 e0       	ldi	r18, 0x01	; 1
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	b5 99       	sbic	0x16, 5	; 22
     b0a:	02 c0       	rjmp	.+4      	; 0xb10 <debounce_sw_standby+0x1a>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	28 2b       	or	r18, r24
     b12:	39 2b       	or	r19, r25
     b14:	30 93 99 04 	sts	0x0499, r19
     b18:	20 93 98 04 	sts	0x0498, r18
if (state1 == 0xF000) return 1;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 ef       	ldi	r25, 0xF0	; 240
     b20:	20 30       	cpi	r18, 0x00	; 0
     b22:	39 07       	cpc	r19, r25
     b24:	09 f0       	breq	.+2      	; 0xb28 <debounce_sw_standby+0x32>
     b26:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     b28:	08 95       	ret

00000b2a <debounce_sw_left>:
//=============================================================================
unsigned char debounce_sw_left(void)
{
static uint16_t state2 = 0; //holds present state
state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_LEFT), BUT_LEFT_PIN)) | 0xE000;
     b2a:	80 91 96 04 	lds	r24, 0x0496
     b2e:	90 91 97 04 	lds	r25, 0x0497
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	90 6e       	ori	r25, 0xE0	; 224
     b38:	21 e0       	ldi	r18, 0x01	; 1
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	9a 99       	sbic	0x13, 2	; 19
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <debounce_sw_left+0x1a>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	82 2b       	or	r24, r18
     b46:	93 2b       	or	r25, r19
     b48:	90 93 97 04 	sts	0x0497, r25
     b4c:	80 93 96 04 	sts	0x0496, r24
if (state2 == 0xF000) return 1;
     b50:	20 ef       	ldi	r18, 0xF0	; 240
     b52:	80 30       	cpi	r24, 0x00	; 0
     b54:	92 07       	cpc	r25, r18
     b56:	31 f0       	breq	.+12     	; 0xb64 <debounce_sw_left+0x3a>
if (state2 == 0xE000) return 2;
     b58:	20 ee       	ldi	r18, 0xE0	; 224
     b5a:	80 30       	cpi	r24, 0x00	; 0
     b5c:	92 07       	cpc	r25, r18
     b5e:	21 f4       	brne	.+8      	; 0xb68 <debounce_sw_left+0x3e>
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_left(void)
{
static uint16_t state2 = 0; //holds present state
state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_LEFT), BUT_LEFT_PIN)) | 0xE000;
if (state2 == 0xF000) return 1;
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	08 95       	ret
if (state2 == 0xE000) return 2;
return 0;
     b68:	80 e0       	ldi	r24, 0x00	; 0
}
     b6a:	08 95       	ret

00000b6c <debounce_sw_right>:
//=============================================================================
unsigned char debounce_sw_right(void)
{
static uint16_t state3 = 0; //holds present state
state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_RIGHT), BUT_RIGHT_PIN)) | 0xE000;
     b6c:	80 91 94 04 	lds	r24, 0x0494
     b70:	90 91 95 04 	lds	r25, 0x0495
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	90 6e       	ori	r25, 0xE0	; 224
     b7a:	21 e0       	ldi	r18, 0x01	; 1
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	86 99       	sbic	0x10, 6	; 16
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <debounce_sw_right+0x1a>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	82 2b       	or	r24, r18
     b88:	93 2b       	or	r25, r19
     b8a:	90 93 95 04 	sts	0x0495, r25
     b8e:	80 93 94 04 	sts	0x0494, r24
if (state3 == 0xF000) return 1;
     b92:	20 ef       	ldi	r18, 0xF0	; 240
     b94:	80 30       	cpi	r24, 0x00	; 0
     b96:	92 07       	cpc	r25, r18
     b98:	31 f0       	breq	.+12     	; 0xba6 <debounce_sw_right+0x3a>
if (state3 == 0xE000) return 2;
     b9a:	20 ee       	ldi	r18, 0xE0	; 224
     b9c:	80 30       	cpi	r24, 0x00	; 0
     b9e:	92 07       	cpc	r25, r18
     ba0:	21 f4       	brne	.+8      	; 0xbaa <debounce_sw_right+0x3e>
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_right(void)
{
static uint16_t state3 = 0; //holds present state
state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_RIGHT), BUT_RIGHT_PIN)) | 0xE000;
if (state3 == 0xF000) return 1;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	08 95       	ret
if (state3 == 0xE000) return 2;
return 0;
     baa:	80 e0       	ldi	r24, 0x00	; 0
}
     bac:	08 95       	ret

00000bae <debounce_sw_set>:
//=============================================================================
unsigned char debounce_sw_set(void)
{
static uint16_t state4 = 0; //holds present state
state4 = (state4 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
     bae:	80 91 92 04 	lds	r24, 0x0492
     bb2:	90 91 93 04 	lds	r25, 0x0493
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	90 6e       	ori	r25, 0xE0	; 224
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	b6 99       	sbic	0x16, 6	; 22
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <debounce_sw_set+0x1a>
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	28 2b       	or	r18, r24
     bca:	39 2b       	or	r19, r25
     bcc:	30 93 93 04 	sts	0x0493, r19
     bd0:	20 93 92 04 	sts	0x0492, r18
if (state4 == 0xF000) return 1;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 ef       	ldi	r25, 0xF0	; 240
     bd8:	20 30       	cpi	r18, 0x00	; 0
     bda:	39 07       	cpc	r19, r25
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <debounce_sw_set+0x32>
     bde:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     be0:	08 95       	ret

00000be2 <debounce_sw_menu>:
//=============================================================================
unsigned char debounce_sw_menu(void)
{
static uint16_t state5 = 0; //holds present state
state5 = (state5 << 1) | (! bit_is_clear(PIN(BUT_MENU), BUT_MENU_PIN)) | 0xE000;
     be2:	86 b3       	in	r24, 0x16	; 22
     be4:	20 91 90 04 	lds	r18, 0x0490
     be8:	30 91 91 04 	lds	r19, 0x0491
     bec:	22 0f       	add	r18, r18
     bee:	33 1f       	adc	r19, r19
     bf0:	30 6e       	ori	r19, 0xE0	; 224
     bf2:	99 27       	eor	r25, r25
     bf4:	87 fd       	sbrc	r24, 7
     bf6:	90 95       	com	r25
     bf8:	88 27       	eor	r24, r24
     bfa:	99 0f       	add	r25, r25
     bfc:	88 1f       	adc	r24, r24
     bfe:	99 27       	eor	r25, r25
     c00:	28 2b       	or	r18, r24
     c02:	39 2b       	or	r19, r25
     c04:	30 93 91 04 	sts	0x0491, r19
     c08:	20 93 90 04 	sts	0x0490, r18
if (state5 == 0xF000) return 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 ef       	ldi	r25, 0xF0	; 240
     c10:	20 30       	cpi	r18, 0x00	; 0
     c12:	39 07       	cpc	r19, r25
     c14:	09 f0       	breq	.+2      	; 0xc18 <debounce_sw_menu+0x36>
     c16:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     c18:	08 95       	ret

00000c1a <debounce_sw_select>:
//=============================================================================
unsigned char debounce_sw_select(void)
{
static uint16_t state6 = 0; //holds present state
state6 = (state6 << 1) | (! bit_is_clear(PIN(BUT_SELECT), BUT_SELECT_PIN)) | 0xE000;
     c1a:	80 91 8e 04 	lds	r24, 0x048E
     c1e:	90 91 8f 04 	lds	r25, 0x048F
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	90 6e       	ori	r25, 0xE0	; 224
     c28:	21 e0       	ldi	r18, 0x01	; 1
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	9b 99       	sbic	0x13, 3	; 19
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <debounce_sw_select+0x1a>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	28 2b       	or	r18, r24
     c36:	39 2b       	or	r19, r25
     c38:	30 93 8f 04 	sts	0x048F, r19
     c3c:	20 93 8e 04 	sts	0x048E, r18
if (state6 == 0xF000) return 1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 ef       	ldi	r25, 0xF0	; 240
     c44:	20 30       	cpi	r18, 0x00	; 0
     c46:	39 07       	cpc	r19, r25
     c48:	09 f0       	breq	.+2      	; 0xc4c <debounce_sw_select+0x32>
     c4a:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     c4c:	08 95       	ret

00000c4e <debounce_sw_up>:
//=============================================================================
unsigned char debounce_sw_up(void)
{
static uint16_t state7 = 0; //holds present state
state7 = (state7 << 1) | (! bit_is_clear(PIN(BUT_UP), BUT_UP_PIN)) | 0xE000;
     c4e:	80 91 8c 04 	lds	r24, 0x048C
     c52:	90 91 8d 04 	lds	r25, 0x048D
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	90 6e       	ori	r25, 0xE0	; 224
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	84 99       	sbic	0x10, 4	; 16
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <debounce_sw_up+0x1a>
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	82 2b       	or	r24, r18
     c6a:	93 2b       	or	r25, r19
     c6c:	90 93 8d 04 	sts	0x048D, r25
     c70:	80 93 8c 04 	sts	0x048C, r24
if (state7 == 0xF000) return 1;
     c74:	20 ef       	ldi	r18, 0xF0	; 240
     c76:	80 30       	cpi	r24, 0x00	; 0
     c78:	92 07       	cpc	r25, r18
     c7a:	31 f0       	breq	.+12     	; 0xc88 <debounce_sw_up+0x3a>
if (state7 == 0xE000) return 2;
     c7c:	20 ee       	ldi	r18, 0xE0	; 224
     c7e:	80 30       	cpi	r24, 0x00	; 0
     c80:	92 07       	cpc	r25, r18
     c82:	21 f4       	brne	.+8      	; 0xc8c <debounce_sw_up+0x3e>
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_up(void)
{
static uint16_t state7 = 0; //holds present state
state7 = (state7 << 1) | (! bit_is_clear(PIN(BUT_UP), BUT_UP_PIN)) | 0xE000;
if (state7 == 0xF000) return 1;
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	08 95       	ret
if (state7 == 0xE000) return 2;
return 0;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
}
     c8e:	08 95       	ret

00000c90 <debounce_sw_down>:
//=============================================================================
unsigned char debounce_sw_down(void)
{
static uint16_t state8 = 0; //holds present state
state8 = (state8 << 1) | (! bit_is_clear(PIN(BUT_DOWN), BUT_DOWN_PIN)) | 0xE000;
     c90:	80 91 8a 04 	lds	r24, 0x048A
     c94:	90 91 8b 04 	lds	r25, 0x048B
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	90 6e       	ori	r25, 0xE0	; 224
     c9e:	21 e0       	ldi	r18, 0x01	; 1
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	85 99       	sbic	0x10, 5	; 16
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <debounce_sw_down+0x1a>
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	82 2b       	or	r24, r18
     cac:	93 2b       	or	r25, r19
     cae:	90 93 8b 04 	sts	0x048B, r25
     cb2:	80 93 8a 04 	sts	0x048A, r24
if (state8 == 0xF000) return 1;
     cb6:	20 ef       	ldi	r18, 0xF0	; 240
     cb8:	80 30       	cpi	r24, 0x00	; 0
     cba:	92 07       	cpc	r25, r18
     cbc:	31 f0       	breq	.+12     	; 0xcca <debounce_sw_down+0x3a>
if (state8 == 0xE000) return 2;
     cbe:	20 ee       	ldi	r18, 0xE0	; 224
     cc0:	80 30       	cpi	r24, 0x00	; 0
     cc2:	92 07       	cpc	r25, r18
     cc4:	21 f4       	brne	.+8      	; 0xcce <debounce_sw_down+0x3e>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_down(void)
{
static uint16_t state8 = 0; //holds present state
state8 = (state8 << 1) | (! bit_is_clear(PIN(BUT_DOWN), BUT_DOWN_PIN)) | 0xE000;
if (state8 == 0xF000) return 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	08 95       	ret
if (state8 == 0xE000) return 2;
return 0;
     cce:	80 e0       	ldi	r24, 0x00	; 0
}
     cd0:	08 95       	ret

00000cd2 <KBD_scan>:
{
  kbd_type = val;
}
//=============================================================================
void KBD_scan(void)
{
     cd2:	1f 93       	push	r17
  unsigned char key = KBD_NOKEY;
  if (debounce_sw_standby() == 1) { key = EVENT_KEY_STANDBY; }
     cd4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <debounce_sw_standby>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	11 f0       	breq	.+4      	; 0xce0 <KBD_scan+0xe>
  kbd_type = val;
}
//=============================================================================
void KBD_scan(void)
{
  unsigned char key = KBD_NOKEY;
     cdc:	1f ef       	ldi	r17, 0xFF	; 255
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <KBD_scan+0x10>
  if (debounce_sw_standby() == 1) { key = EVENT_KEY_STANDBY; }
     ce0:	14 e6       	ldi	r17, 0x64	; 100
  if (debounce_sw_menu() == 1) { key = EVENT_KEY_MENU; }
     ce2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <debounce_sw_menu>
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	09 f4       	brne	.+2      	; 0xcec <KBD_scan+0x1a>
     cea:	1c e6       	ldi	r17, 0x6C	; 108
  if (debounce_sw_set() == 1) { key = EVENT_KEY_SET; }
     cec:	0e 94 d7 05 	call	0xbae	; 0xbae <debounce_sw_set>
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <KBD_scan+0x24>
     cf4:	17 e6       	ldi	r17, 0x67	; 103
  if (debounce_sw_select() == 1) { key = EVENT_KEY_SELECT; }
     cf6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <debounce_sw_select>
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <KBD_scan+0x2e>
     cfe:	16 e6       	ldi	r17, 0x66	; 102
  if (debounce_sw_up() == 1) { key = EVENT_KEY_UP; }
     d00:	0e 94 27 06 	call	0xc4e	; 0xc4e <debounce_sw_up>
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	09 f4       	brne	.+2      	; 0xd0a <KBD_scan+0x38>
     d08:	18 e6       	ldi	r17, 0x68	; 104
  if (debounce_sw_down() == 1) { key = EVENT_KEY_DOWN; }
     d0a:	0e 94 48 06 	call	0xc90	; 0xc90 <debounce_sw_down>
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	09 f4       	brne	.+2      	; 0xd14 <KBD_scan+0x42>
     d12:	19 e6       	ldi	r17, 0x69	; 105
  if (kbd_type == 1) {
     d14:	80 91 a4 00 	lds	r24, 0x00A4
     d18:	81 30       	cpi	r24, 0x01	; 1
     d1a:	49 f4       	brne	.+18     	; 0xd2e <KBD_scan+0x5c>
    if (debounce_sw_left() >= 1) { key = EVENT_KEY_LEFT; }
     d1c:	0e 94 95 05 	call	0xb2a	; 0xb2a <debounce_sw_left>
     d20:	81 11       	cpse	r24, r1
     d22:	1a e6       	ldi	r17, 0x6A	; 106
    if (debounce_sw_right() >= 1) { key = EVENT_KEY_RIGHT; }
     d24:	0e 94 b6 05 	call	0xb6c	; 0xb6c <debounce_sw_right>
     d28:	88 23       	and	r24, r24
     d2a:	19 f5       	brne	.+70     	; 0xd72 <KBD_scan+0xa0>
     d2c:	09 c0       	rjmp	.+18     	; 0xd40 <KBD_scan+0x6e>
  } else {
    if (debounce_sw_left() == 1) { key = EVENT_KEY_LEFT; }
     d2e:	0e 94 95 05 	call	0xb2a	; 0xb2a <debounce_sw_left>
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	09 f4       	brne	.+2      	; 0xd38 <KBD_scan+0x66>
     d36:	1a e6       	ldi	r17, 0x6A	; 106
    if (debounce_sw_right() == 1) { key = EVENT_KEY_RIGHT; }
     d38:	0e 94 b6 05 	call	0xb6c	; 0xb6c <debounce_sw_right>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	c9 f0       	breq	.+50     	; 0xd72 <KBD_scan+0xa0>
  }
  if (key != KBD_NOKEY) {
     d40:	1f 3f       	cpi	r17, 0xFF	; 255
     d42:	c9 f0       	breq	.+50     	; 0xd76 <KBD_scan+0xa4>
    BEEP();
     d44:	97 98       	cbi	0x12, 7	; 18
     d46:	8f e3       	ldi	r24, 0x3F	; 63
     d48:	9c e9       	ldi	r25, 0x9C	; 156
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <KBD_scan+0x78>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <KBD_scan+0x7e>
     d50:	00 00       	nop
     d52:	97 9a       	sbi	0x12, 7	; 18
    RTOS_setTask(EVENT_KEY_PRESS, 0, 0); 
     d54:	80 ea       	ldi	r24, 0xA0	; 160
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    RTOS_setTask(key, 0, 0); 
     d62:	81 2f       	mov	r24, r17
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <KBD_scan+0xa4>
  if (debounce_sw_down() == 1) { key = EVENT_KEY_DOWN; }
  if (kbd_type == 1) {
    if (debounce_sw_left() >= 1) { key = EVENT_KEY_LEFT; }
    if (debounce_sw_right() >= 1) { key = EVENT_KEY_RIGHT; }
  } else {
    if (debounce_sw_left() == 1) { key = EVENT_KEY_LEFT; }
     d72:	1b e6       	ldi	r17, 0x6B	; 107
     d74:	e7 cf       	rjmp	.-50     	; 0xd44 <KBD_scan+0x72>
  if (key != KBD_NOKEY) {
    BEEP();
    RTOS_setTask(EVENT_KEY_PRESS, 0, 0); 
    RTOS_setTask(key, 0, 0); 
  }
}
     d76:	1f 91       	pop	r17
     d78:	08 95       	ret

00000d7a <ENC_init>:
#include "rtos.h"
#include "events.h"
//=============================================================================
void ENC_init(void)
{
  DDR(ENCODER) &= ~(1 << ENCODER_PIN_A);
     d7a:	88 98       	cbi	0x11, 0	; 17
  DDR(ENCODER) &= ~(1 << ENCODER_PIN_B);
     d7c:	8b 98       	cbi	0x11, 3	; 17
  PORT(ENCODER) |= ENCODER_LINE_A;
     d7e:	90 9a       	sbi	0x12, 0	; 18
  PORT(ENCODER) |= ENCODER_LINE_B;
     d80:	93 9a       	sbi	0x12, 3	; 18
}
     d82:	08 95       	ret

00000d84 <ENC_scan>:
{
  static unsigned char stateEnc; 	//хранит последовательность состояний энкодера
  unsigned char tmp, key;  
  unsigned char currentState = 0;
  //проверяем состояние выводов микроконтроллера
  if ((PIN(ENCODER) & (ENCODER_LINE_A)) != 0) { currentState |= (1 << 0); }
     d84:	60 b3       	in	r22, 0x10	; 16
//=============================================================================
void ENC_scan(void)
{
  static unsigned char stateEnc; 	//хранит последовательность состояний энкодера
  unsigned char tmp, key;  
  unsigned char currentState = 0;
     d86:	61 70       	andi	r22, 0x01	; 1
  //проверяем состояние выводов микроконтроллера
  if ((PIN(ENCODER) & (ENCODER_LINE_A)) != 0) { currentState |= (1 << 0); }
  if ((PIN(ENCODER) & (ENCODER_LINE_B)) != 0) { currentState |= (1 << 1); }
     d88:	83 99       	sbic	0x10, 3	; 16
     d8a:	62 60       	ori	r22, 0x02	; 2
  //если равно предыдущему, то выходим
  tmp = stateEnc;
  if (currentState == (tmp & ENC_MASK)) 
     d8c:	80 91 9a 04 	lds	r24, 0x049A
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	46 2f       	mov	r20, r22
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	9c 01       	movw	r18, r24
     d98:	23 70       	andi	r18, 0x03	; 3
     d9a:	30 70       	andi	r19, 0x00	; 0
     d9c:	42 17       	cp	r20, r18
     d9e:	53 07       	cpc	r21, r19
     da0:	c1 f1       	breq	.+112    	; 0xe12 <ENC_scan+0x8e>
  {
    return;
  }
  //если не равно, то сдвигаем и сохраняем в озу
  tmp = (tmp << 2) | currentState;
     da2:	88 0f       	add	r24, r24
     da4:	99 1f       	adc	r25, r25
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	86 2b       	or	r24, r22
  stateEnc = tmp;
     dac:	80 93 9a 04 	sts	0x049A, r24
  //сравниваем получившуюся последовательность
  if (tmp == ENC_LEFT_MASK) { key = ENC_LEFT; BEEP(); RTOS_setTask(EVENT_KEY_PRESS, 0, 0); RTOS_setTask(key, 0, 0); }
     db0:	81 3e       	cpi	r24, 0xE1	; 225
     db2:	b9 f4       	brne	.+46     	; 0xde2 <ENC_scan+0x5e>
     db4:	97 98       	cbi	0x12, 7	; 18
     db6:	8f e3       	ldi	r24, 0x3F	; 63
     db8:	9c e9       	ldi	r25, 0x9C	; 156
     dba:	01 97       	sbiw	r24, 0x01	; 1
     dbc:	f1 f7       	brne	.-4      	; 0xdba <ENC_scan+0x36>
     dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <ENC_scan+0x3c>
     dc0:	00 00       	nop
     dc2:	97 9a       	sbi	0x12, 7	; 18
     dc4:	80 ea       	ldi	r24, 0xA0	; 160
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	40 e0       	ldi	r20, 0x00	; 0
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
     dd2:	8a e6       	ldi	r24, 0x6A	; 106
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
     de0:	08 95       	ret
  if (tmp == ENC_RIGHT_MASK) { key = ENC_RIGHT;  BEEP(); RTOS_setTask(EVENT_KEY_PRESS, 0, 0); RTOS_setTask(key, 0, 0); }	 
     de2:	82 3d       	cpi	r24, 0xD2	; 210
     de4:	b1 f4       	brne	.+44     	; 0xe12 <ENC_scan+0x8e>
     de6:	97 98       	cbi	0x12, 7	; 18
     de8:	8f e3       	ldi	r24, 0x3F	; 63
     dea:	9c e9       	ldi	r25, 0x9C	; 156
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <ENC_scan+0x68>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <ENC_scan+0x6e>
     df2:	00 00       	nop
     df4:	97 9a       	sbi	0x12, 7	; 18
     df6:	80 ea       	ldi	r24, 0xA0	; 160
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
     e04:	8b e6       	ldi	r24, 0x6B	; 107
     e06:	60 e0       	ldi	r22, 0x00	; 0
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
     e12:	08 95       	ret

00000e14 <RTOS_init>:
#define DISABLE_INTERRUPT do { saveRegister = SREG; cli(); } while(0)
#define RESTORE_INTERRUPT do { SREG = saveRegister; } while(0) // использовать RESTORE только после DISABLE
//=============================================================================
void RTOS_init()
{
  TCCR2 |= (1 << CS22);        // прескалер - 64
     e14:	85 b5       	in	r24, 0x25	; 37
     e16:	84 60       	ori	r24, 0x04	; 4
     e18:	85 bd       	out	0x25, r24	; 37
  TIFR = (1 << TOV2);          // очищаем флаг прерывания таймера Т2
     e1a:	80 e4       	ldi	r24, 0x40	; 64
     e1c:	88 bf       	out	0x38, r24	; 56
  TIMSK |= (1 << TOIE2);       // разрешаем прерывание по переполнению
     e1e:	89 b7       	in	r24, 0x39	; 57
     e20:	80 64       	ori	r24, 0x40	; 64
     e22:	89 bf       	out	0x39, r24	; 57
  TIMER_COUNTER = TIMER_START; // загружаем начальное зн. в счетный регистр
     e24:	86 e0       	ldi	r24, 0x06	; 6
     e26:	84 bd       	out	0x24, r24	; 36
  arrayTail = 0;               // "хвост" в 0
     e28:	10 92 1c 05 	sts	0x051C, r1
}
     e2c:	08 95       	ret

00000e2e <RTOS_setTask>:
//=============================================================================
// Установка задачи
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
     e2e:	88 23       	and	r24, r24
     e30:	09 f4       	brne	.+2      	; 0xe34 <RTOS_setTask+0x6>
     e32:	65 c0       	rjmp	.+202    	; 0xefe <RTOS_setTask+0xd0>
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	1b c0       	rjmp	.+54     	; 0xe6e <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
     e38:	e9 2f       	mov	r30, r25
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	a3 e0       	ldi	r26, 0x03	; 3
     e3e:	ee 0f       	add	r30, r30
     e40:	ff 1f       	adc	r31, r31
     e42:	aa 95       	dec	r26
     e44:	e1 f7       	brne	.-8      	; 0xe3e <RTOS_setTask+0x10>
     e46:	e4 56       	subi	r30, 0x64	; 100
     e48:	fb 4f       	sbci	r31, 0xFB	; 251
     e4a:	22 81       	ldd	r18, Z+2	; 0x02
     e4c:	28 17       	cp	r18, r24
     e4e:	71 f4       	brne	.+28     	; 0xe6c <RTOS_setTask+0x3e>
    {
      TaskArray[i].pFunc  = 0;
     e50:	11 82       	std	Z+1, r1	; 0x01
     e52:	10 82       	st	Z, r1
      TaskArray[i].delay  = taskDelay;
     e54:	74 83       	std	Z+4, r23	; 0x04
     e56:	63 83       	std	Z+3, r22	; 0x03
      TaskArray[i].period = taskPeriod;
     e58:	56 83       	std	Z+6, r21	; 0x06
     e5a:	45 83       	std	Z+5, r20	; 0x05
      if (!taskDelay) {                       // если задержка запуска == 0
     e5c:	61 15       	cp	r22, r1
     e5e:	71 05       	cpc	r23, r1
     e60:	19 f4       	brne	.+6      	; 0xe68 <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	87 83       	std	Z+7, r24	; 0x07
     e66:	08 95       	ret
      } else TaskArray[i].run = 0;   
     e68:	17 82       	std	Z+7, r1	; 0x07
     e6a:	08 95       	ret
// Установка задачи
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
     e6c:	9f 5f       	subi	r25, 0xFF	; 255
     e6e:	20 91 1c 05 	lds	r18, 0x051C
     e72:	92 17       	cp	r25, r18
     e74:	08 f3       	brcs	.-62     	; 0xe38 <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
     e76:	20 91 1c 05 	lds	r18, 0x051C
     e7a:	20 31       	cpi	r18, 0x10	; 16
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <RTOS_setTask+0x52>
     e7e:	3f c0       	rjmp	.+126    	; 0xefe <RTOS_setTask+0xd0>
  {                                           // и есть место,то добавляем
    TaskArray[i].pFunc  = 0;
     e80:	e9 2f       	mov	r30, r25
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	33 e0       	ldi	r19, 0x03	; 3
     e86:	ee 0f       	add	r30, r30
     e88:	ff 1f       	adc	r31, r31
     e8a:	3a 95       	dec	r19
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <RTOS_setTask+0x58>
     e8e:	e4 56       	subi	r30, 0x64	; 100
     e90:	fb 4f       	sbci	r31, 0xFB	; 251
     e92:	11 82       	std	Z+1, r1	; 0x01
     e94:	10 82       	st	Z, r1
    TaskArray[arrayTail].event  = event;
     e96:	a0 91 1c 05 	lds	r26, 0x051C
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	23 e0       	ldi	r18, 0x03	; 3
     e9e:	aa 0f       	add	r26, r26
     ea0:	bb 1f       	adc	r27, r27
     ea2:	2a 95       	dec	r18
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <RTOS_setTask+0x70>
     ea6:	a4 56       	subi	r26, 0x64	; 100
     ea8:	bb 4f       	sbci	r27, 0xFB	; 251
     eaa:	12 96       	adiw	r26, 0x02	; 2
     eac:	8c 93       	st	X, r24
    TaskArray[arrayTail].delay  = taskDelay;
     eae:	a0 91 1c 05 	lds	r26, 0x051C
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	aa 0f       	add	r26, r26
     eb8:	bb 1f       	adc	r27, r27
     eba:	9a 95       	dec	r25
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <RTOS_setTask+0x88>
     ebe:	a4 56       	subi	r26, 0x64	; 100
     ec0:	bb 4f       	sbci	r27, 0xFB	; 251
     ec2:	14 96       	adiw	r26, 0x04	; 4
     ec4:	7c 93       	st	X, r23
     ec6:	6e 93       	st	-X, r22
     ec8:	13 97       	sbiw	r26, 0x03	; 3
    TaskArray[arrayTail].period = taskPeriod;
     eca:	a0 91 1c 05 	lds	r26, 0x051C
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	83 e0       	ldi	r24, 0x03	; 3
     ed2:	aa 0f       	add	r26, r26
     ed4:	bb 1f       	adc	r27, r27
     ed6:	8a 95       	dec	r24
     ed8:	e1 f7       	brne	.-8      	; 0xed2 <RTOS_setTask+0xa4>
     eda:	a4 56       	subi	r26, 0x64	; 100
     edc:	bb 4f       	sbci	r27, 0xFB	; 251
     ede:	16 96       	adiw	r26, 0x06	; 6
     ee0:	5c 93       	st	X, r21
     ee2:	4e 93       	st	-X, r20
     ee4:	15 97       	sbiw	r26, 0x05	; 5
    if (!taskDelay) {                         // если задержка запуска == 0
     ee6:	61 15       	cp	r22, r1
     ee8:	71 05       	cpc	r23, r1
     eea:	19 f4       	brne	.+6      	; 0xef2 <RTOS_setTask+0xc4>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	87 83       	std	Z+7, r24	; 0x07
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <RTOS_setTask+0xc6>
    } else TaskArray[i].run = 0;   
     ef2:	17 82       	std	Z+7, r1	; 0x07
    arrayTail++;                              // увеличиваем "хвост"
     ef4:	80 91 1c 05 	lds	r24, 0x051C
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	80 93 1c 05 	sts	0x051C, r24
     efe:	08 95       	ret

00000f00 <RTOS_setTaskFunc>:
//=============================================================================
 // Установка задачи
void RTOS_setTaskFunc (void (*taskFunc)(void), unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if(!taskFunc) return;
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	09 f4       	brne	.+2      	; 0xf06 <RTOS_setTaskFunc+0x6>
     f04:	70 c0       	rjmp	.+224    	; 0xfe6 <RTOS_setTaskFunc+0xe6>
     f06:	a0 e0       	ldi	r26, 0x00	; 0
     f08:	1e c0       	rjmp	.+60     	; 0xf46 <RTOS_setTaskFunc+0x46>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if(TaskArray[i].pFunc == taskFunc)        // если нашли, то обновляем переменные
     f0a:	ea 2f       	mov	r30, r26
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	b3 e0       	ldi	r27, 0x03	; 3
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	ba 95       	dec	r27
     f16:	e1 f7       	brne	.-8      	; 0xf10 <RTOS_setTaskFunc+0x10>
     f18:	e4 56       	subi	r30, 0x64	; 100
     f1a:	fb 4f       	sbci	r31, 0xFB	; 251
     f1c:	20 81       	ld	r18, Z
     f1e:	31 81       	ldd	r19, Z+1	; 0x01
     f20:	28 17       	cp	r18, r24
     f22:	39 07       	cpc	r19, r25
     f24:	79 f4       	brne	.+30     	; 0xf44 <RTOS_setTaskFunc+0x44>
    {
      DISABLE_INTERRUPT;
     f26:	8f b7       	in	r24, 0x3f	; 63
     f28:	80 93 1d 05 	sts	0x051D, r24
     f2c:	f8 94       	cli
      TaskArray[i].event  = EVENT_NULL;
     f2e:	8e ef       	ldi	r24, 0xFE	; 254
     f30:	82 83       	std	Z+2, r24	; 0x02
      TaskArray[i].delay  = taskDelay;
     f32:	74 83       	std	Z+4, r23	; 0x04
     f34:	63 83       	std	Z+3, r22	; 0x03
      TaskArray[i].period = taskPeriod;
     f36:	56 83       	std	Z+6, r21	; 0x06
     f38:	45 83       	std	Z+5, r20	; 0x05
      TaskArray[i].run    = 0;   
     f3a:	17 82       	std	Z+7, r1	; 0x07
      RESTORE_INTERRUPT;
     f3c:	80 91 1d 05 	lds	r24, 0x051D
     f40:	8f bf       	out	0x3f, r24	; 63
      return;                                 // обновив, выходим
     f42:	08 95       	ret
 // Установка задачи
void RTOS_setTaskFunc (void (*taskFunc)(void), unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if(!taskFunc) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
     f44:	af 5f       	subi	r26, 0xFF	; 255
     f46:	20 91 1c 05 	lds	r18, 0x051C
     f4a:	a2 17       	cp	r26, r18
     f4c:	f0 f2       	brcs	.-68     	; 0xf0a <RTOS_setTaskFunc+0xa>
      TaskArray[i].run    = 0;   
      RESTORE_INTERRUPT;
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
     f4e:	20 91 1c 05 	lds	r18, 0x051C
     f52:	20 31       	cpi	r18, 0x10	; 16
     f54:	08 f0       	brcs	.+2      	; 0xf58 <RTOS_setTaskFunc+0x58>
     f56:	47 c0       	rjmp	.+142    	; 0xfe6 <RTOS_setTaskFunc+0xe6>
  {                                           // и есть место,то добавляем
    DISABLE_INTERRUPT;
     f58:	2f b7       	in	r18, 0x3f	; 63
     f5a:	20 93 1d 05 	sts	0x051D, r18
     f5e:	f8 94       	cli
    TaskArray[arrayTail].pFunc  = taskFunc;
     f60:	e0 91 1c 05 	lds	r30, 0x051C
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	33 e0       	ldi	r19, 0x03	; 3
     f68:	ee 0f       	add	r30, r30
     f6a:	ff 1f       	adc	r31, r31
     f6c:	3a 95       	dec	r19
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <RTOS_setTaskFunc+0x68>
     f70:	e4 56       	subi	r30, 0x64	; 100
     f72:	fb 4f       	sbci	r31, 0xFB	; 251
     f74:	91 83       	std	Z+1, r25	; 0x01
     f76:	80 83       	st	Z, r24
    TaskArray[arrayTail].event  = EVENT_NULL;
     f78:	e0 91 1c 05 	lds	r30, 0x051C
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	23 e0       	ldi	r18, 0x03	; 3
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	2a 95       	dec	r18
     f86:	e1 f7       	brne	.-8      	; 0xf80 <RTOS_setTaskFunc+0x80>
     f88:	e4 56       	subi	r30, 0x64	; 100
     f8a:	fb 4f       	sbci	r31, 0xFB	; 251
     f8c:	8e ef       	ldi	r24, 0xFE	; 254
     f8e:	82 83       	std	Z+2, r24	; 0x02
    TaskArray[arrayTail].delay  = taskDelay;
     f90:	e0 91 1c 05 	lds	r30, 0x051C
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	93 e0       	ldi	r25, 0x03	; 3
     f98:	ee 0f       	add	r30, r30
     f9a:	ff 1f       	adc	r31, r31
     f9c:	9a 95       	dec	r25
     f9e:	e1 f7       	brne	.-8      	; 0xf98 <RTOS_setTaskFunc+0x98>
     fa0:	e4 56       	subi	r30, 0x64	; 100
     fa2:	fb 4f       	sbci	r31, 0xFB	; 251
     fa4:	74 83       	std	Z+4, r23	; 0x04
     fa6:	63 83       	std	Z+3, r22	; 0x03
    TaskArray[arrayTail].period = taskPeriod;
     fa8:	e0 91 1c 05 	lds	r30, 0x051C
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	ee 0f       	add	r30, r30
     fb2:	ff 1f       	adc	r31, r31
     fb4:	8a 95       	dec	r24
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <RTOS_setTaskFunc+0xb0>
     fb8:	e4 56       	subi	r30, 0x64	; 100
     fba:	fb 4f       	sbci	r31, 0xFB	; 251
     fbc:	56 83       	std	Z+6, r21	; 0x06
     fbe:	45 83       	std	Z+5, r20	; 0x05
    TaskArray[arrayTail].run    = 0;   
     fc0:	e0 91 1c 05 	lds	r30, 0x051C
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	b3 e0       	ldi	r27, 0x03	; 3
     fc8:	ee 0f       	add	r30, r30
     fca:	ff 1f       	adc	r31, r31
     fcc:	ba 95       	dec	r27
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <RTOS_setTaskFunc+0xc8>
     fd0:	e4 56       	subi	r30, 0x64	; 100
     fd2:	fb 4f       	sbci	r31, 0xFB	; 251
     fd4:	17 82       	std	Z+7, r1	; 0x07
    arrayTail++;                              // увеличиваем "хвост"
     fd6:	80 91 1c 05 	lds	r24, 0x051C
     fda:	8f 5f       	subi	r24, 0xFF	; 255
     fdc:	80 93 1c 05 	sts	0x051C, r24
    RESTORE_INTERRUPT;
     fe0:	80 91 1d 05 	lds	r24, 0x051D
     fe4:	8f bf       	out	0x3f, r24	; 63
     fe6:	08 95       	ret

00000fe8 <RTOS_deleteTask>:
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	2c c0       	rjmp	.+88     	; 0x1044 <RTOS_deleteTask+0x5c>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
     fec:	29 2f       	mov	r18, r25
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	d9 01       	movw	r26, r18
     ff2:	43 e0       	ldi	r20, 0x03	; 3
     ff4:	aa 0f       	add	r26, r26
     ff6:	bb 1f       	adc	r27, r27
     ff8:	4a 95       	dec	r20
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <RTOS_deleteTask+0xc>
     ffc:	a4 56       	subi	r26, 0x64	; 100
     ffe:	bb 4f       	sbci	r27, 0xFB	; 251
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	4c 91       	ld	r20, X
    1004:	12 97       	sbiw	r26, 0x02	; 2
    1006:	48 17       	cp	r20, r24
    1008:	e1 f4       	brne	.+56     	; 0x1042 <RTOS_deleteTask+0x5a>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    100a:	80 91 1c 05 	lds	r24, 0x051C
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	28 17       	cp	r18, r24
    1014:	39 07       	cpc	r19, r25
    1016:	79 f0       	breq	.+30     	; 0x1036 <RTOS_deleteTask+0x4e>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1018:	e0 91 1c 05 	lds	r30, 0x051C
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	83 e0       	ldi	r24, 0x03	; 3
    1020:	ee 0f       	add	r30, r30
    1022:	ff 1f       	adc	r31, r31
    1024:	8a 95       	dec	r24
    1026:	e1 f7       	brne	.-8      	; 0x1020 <RTOS_deleteTask+0x38>
    1028:	ec 56       	subi	r30, 0x6C	; 108
    102a:	fb 4f       	sbci	r31, 0xFB	; 251
    102c:	88 e0       	ldi	r24, 0x08	; 8
    102e:	01 90       	ld	r0, Z+
    1030:	0d 92       	st	X+, r0
    1032:	81 50       	subi	r24, 0x01	; 1
    1034:	e1 f7       	brne	.-8      	; 0x102e <RTOS_deleteTask+0x46>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    1036:	80 91 1c 05 	lds	r24, 0x051C
    103a:	81 50       	subi	r24, 0x01	; 1
    103c:	80 93 1c 05 	sts	0x051C, r24
      return;
    1040:	08 95       	ret
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1042:	9f 5f       	subi	r25, 0xFF	; 255
    1044:	20 91 1c 05 	lds	r18, 0x051C
    1048:	92 17       	cp	r25, r18
    104a:	80 f2       	brcs	.-96     	; 0xfec <RTOS_deleteTask+0x4>
    104c:	08 95       	ret

0000104e <RTOS_deleteTaskFunc>:
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTaskFunc (void (*taskFunc)(void)) 
{
  unsigned char i;
  for (i=0; i<arrayTail; i++)                      // проходим по списку задач
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	34 c0       	rjmp	.+104    	; 0x10ba <RTOS_deleteTaskFunc+0x6c>
  {
    if(TaskArray[i].pFunc == taskFunc)             // если задача в списке найдена
    1052:	26 2f       	mov	r18, r22
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	d9 01       	movw	r26, r18
    1058:	73 e0       	ldi	r23, 0x03	; 3
    105a:	aa 0f       	add	r26, r26
    105c:	bb 1f       	adc	r27, r27
    105e:	7a 95       	dec	r23
    1060:	e1 f7       	brne	.-8      	; 0x105a <RTOS_deleteTaskFunc+0xc>
    1062:	a4 56       	subi	r26, 0x64	; 100
    1064:	bb 4f       	sbci	r27, 0xFB	; 251
    1066:	4d 91       	ld	r20, X+
    1068:	5c 91       	ld	r21, X
    106a:	11 97       	sbiw	r26, 0x01	; 1
    106c:	48 17       	cp	r20, r24
    106e:	59 07       	cpc	r21, r25
    1070:	19 f5       	brne	.+70     	; 0x10b8 <RTOS_deleteTaskFunc+0x6a>
    {
      DISABLE_INTERRUPT;
    1072:	8f b7       	in	r24, 0x3f	; 63
    1074:	80 93 1d 05 	sts	0x051D, r24
    1078:	f8 94       	cli
      if(i != (arrayTail - 1))                     // переносим последнюю задачу
    107a:	80 91 1c 05 	lds	r24, 0x051C
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	28 17       	cp	r18, r24
    1084:	39 07       	cpc	r19, r25
    1086:	79 f0       	breq	.+30     	; 0x10a6 <RTOS_deleteTaskFunc+0x58>
      {                                            // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    1088:	e0 91 1c 05 	lds	r30, 0x051C
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	53 e0       	ldi	r21, 0x03	; 3
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	5a 95       	dec	r21
    1096:	e1 f7       	brne	.-8      	; 0x1090 <RTOS_deleteTaskFunc+0x42>
    1098:	ec 56       	subi	r30, 0x6C	; 108
    109a:	fb 4f       	sbci	r31, 0xFB	; 251
    109c:	88 e0       	ldi	r24, 0x08	; 8
    109e:	01 90       	ld	r0, Z+
    10a0:	0d 92       	st	X+, r0
    10a2:	81 50       	subi	r24, 0x01	; 1
    10a4:	e1 f7       	brne	.-8      	; 0x109e <RTOS_deleteTaskFunc+0x50>
      }
      arrayTail--;                                 // уменьшаем указатель "хвоста"
    10a6:	80 91 1c 05 	lds	r24, 0x051C
    10aa:	81 50       	subi	r24, 0x01	; 1
    10ac:	80 93 1c 05 	sts	0x051C, r24
      RESTORE_INTERRUPT;
    10b0:	80 91 1d 05 	lds	r24, 0x051D
    10b4:	8f bf       	out	0x3f, r24	; 63
      return;
    10b6:	08 95       	ret
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTaskFunc (void (*taskFunc)(void)) 
{
  unsigned char i;
  for (i=0; i<arrayTail; i++)                      // проходим по списку задач
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	20 91 1c 05 	lds	r18, 0x051C
    10be:	62 17       	cp	r22, r18
    10c0:	40 f2       	brcs	.-112    	; 0x1052 <RTOS_deleteTaskFunc+0x4>
    10c2:	08 95       	ret

000010c4 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
    10cc:	80 91 9b 04 	lds	r24, 0x049B
    10d0:	88 23       	and	r24, r24
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <RTOS_dispatchTask+0x14>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10d4:	10 e0       	ldi	r17, 0x00	; 0
    10d6:	5a c0       	rjmp	.+180    	; 0x118c <RTOS_dispatchTask+0xc8>
{
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    10d8:	10 92 9b 04 	sts	0x049B, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    { 
	  if (TaskArray[i].delay == 0) {         // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    10de:	31 e0       	ldi	r19, 0x01	; 1
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10e0:	15 c0       	rjmp	.+42     	; 0x110c <RTOS_dispatchTask+0x48>
    { 
	  if (TaskArray[i].delay == 0) {         // если время до выполнения истекло
    10e2:	e2 2f       	mov	r30, r18
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	b3 e0       	ldi	r27, 0x03	; 3
    10e8:	ee 0f       	add	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	ba 95       	dec	r27
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <RTOS_dispatchTask+0x24>
    10f0:	e4 56       	subi	r30, 0x64	; 100
    10f2:	fb 4f       	sbci	r31, 0xFB	; 251
    10f4:	83 81       	ldd	r24, Z+3	; 0x03
    10f6:	94 81       	ldd	r25, Z+4	; 0x04
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	11 f4       	brne	.+4      	; 0x1100 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    10fc:	37 83       	std	Z+7, r19	; 0x07
    10fe:	05 c0       	rjmp	.+10     	; 0x110a <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    1100:	83 81       	ldd	r24, Z+3	; 0x03
    1102:	94 81       	ldd	r25, Z+4	; 0x04
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	94 83       	std	Z+4, r25	; 0x04
    1108:	83 83       	std	Z+3, r24	; 0x03
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    110a:	2f 5f       	subi	r18, 0xFF	; 255
    110c:	80 91 1c 05 	lds	r24, 0x051C
    1110:	28 17       	cp	r18, r24
    1112:	38 f3       	brcs	.-50     	; 0x10e2 <RTOS_dispatchTask+0x1e>
    1114:	df cf       	rjmp	.-66     	; 0x10d4 <RTOS_dispatchTask+0x10>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1116:	e1 2f       	mov	r30, r17
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	a3 e0       	ldi	r26, 0x03	; 3
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	aa 95       	dec	r26
    1122:	e1 f7       	brne	.-8      	; 0x111c <RTOS_dispatchTask+0x58>
    1124:	e4 56       	subi	r30, 0x64	; 100
    1126:	fb 4f       	sbci	r31, 0xFB	; 251
    1128:	87 81       	ldd	r24, Z+7	; 0x07
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	71 f5       	brne	.+92     	; 0x118a <RTOS_dispatchTask+0xc6>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    112e:	02 81       	ldd	r16, Z+2	; 0x02
      function = TaskArray[i].pFunc;   
    1130:	c0 81       	ld	r28, Z
    1132:	d1 81       	ldd	r29, Z+1	; 0x01
      if(TaskArray[i].period == 0)                 
    1134:	25 81       	ldd	r18, Z+5	; 0x05
    1136:	36 81       	ldd	r19, Z+6	; 0x06
    1138:	21 15       	cp	r18, r1
    113a:	31 05       	cpc	r19, r1
    113c:	69 f4       	brne	.+26     	; 0x1158 <RTOS_dispatchTask+0x94>
      {  
        cli();
    113e:	f8 94       	cli
	    if (temp == EVENT_NULL) {
    1140:	0e 3f       	cpi	r16, 0xFE	; 254
    1142:	29 f4       	brne	.+10     	; 0x114e <RTOS_dispatchTask+0x8a>
          RTOS_deleteTaskFunc(TaskArray[i].pFunc); // удаляем задачу из списка,
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	0e 94 27 08 	call	0x104e	; 0x104e <RTOS_deleteTaskFunc>
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <RTOS_dispatchTask+0x90>
	    } else {
          RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <RTOS_deleteTask>
		}
        sei();
    1154:	78 94       	sei
    1156:	0c c0       	rjmp	.+24     	; 0x1170 <RTOS_dispatchTask+0xac>
      } else {
        TaskArray[i].run = 0;                  // иначе снимаем флаг запуска
    1158:	17 82       	std	Z+7, r1	; 0x07
        if (!TaskArray[i].delay)               // если задача не изменила задержку
    115a:	23 81       	ldd	r18, Z+3	; 0x03
    115c:	34 81       	ldd	r19, Z+4	; 0x04
    115e:	21 15       	cp	r18, r1
    1160:	31 05       	cpc	r19, r1
    1162:	31 f4       	brne	.+12     	; 0x1170 <RTOS_dispatchTask+0xac>
        {                                      // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    1164:	25 81       	ldd	r18, Z+5	; 0x05
    1166:	36 81       	ldd	r19, Z+6	; 0x06
    1168:	21 50       	subi	r18, 0x01	; 1
    116a:	30 40       	sbci	r19, 0x00	; 0
    116c:	34 83       	std	Z+4, r19	; 0x04
    116e:	23 83       	std	Z+3, r18	; 0x03
        }                                      // задача для себя может сделать паузу  
      }
	  if (temp == EVENT_NULL) {
    1170:	0e 3f       	cpi	r16, 0xFE	; 254
    1172:	29 f4       	brne	.+10     	; 0x117e <RTOS_dispatchTask+0xba>
        if(!function) return;
    1174:	20 97       	sbiw	r28, 0x00	; 0
    1176:	79 f0       	breq	.+30     	; 0x1196 <RTOS_dispatchTask+0xd2>
        (*function)();                         // выполняем задачу
    1178:	fe 01       	movw	r30, r28
    117a:	09 95       	icall
    117c:	06 c0       	rjmp	.+12     	; 0x118a <RTOS_dispatchTask+0xc6>
	  } else {
        pState(temp);                          // выполняем задачу
    117e:	e0 91 a5 00 	lds	r30, 0x00A5
    1182:	f0 91 a6 00 	lds	r31, 0x00A6
    1186:	80 2f       	mov	r24, r16
    1188:	09 95       	icall
	  if (TaskArray[i].delay == 0) {         // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    118a:	1f 5f       	subi	r17, 0xFF	; 255
    118c:	80 91 1c 05 	lds	r24, 0x051C
    1190:	18 17       	cp	r17, r24
    1192:	08 f4       	brcc	.+2      	; 0x1196 <RTOS_dispatchTask+0xd2>
    1194:	c0 cf       	rjmp	.-128    	; 0x1116 <RTOS_dispatchTask+0x52>
	  } else {
        pState(temp);                          // выполняем задачу
	  }
    }
  }
}
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <__vector_5>:
//=============================================================================
ISR(TIMER_ISR)
{
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    11ac:	86 e0       	ldi	r24, 0x06	; 6
    11ae:	84 bd       	out	0x24, r24	; 36
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 9b 04 	sts	0x049B, r24
}
    11b6:	8f 91       	pop	r24
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <DS18x20_scan>:
  stb_out = t;
  return t;
}
//=============================================================================
void DS18x20_scan(void)
{
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
  static unsigned char ds_state = 0;
  switch(ds_state) {
    11ca:	80 91 2c 05 	lds	r24, 0x052C
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	d1 f0       	breq	.+52     	; 0x1206 <DS18x20_scan+0x44>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	20 f0       	brcs	.+8      	; 0x11de <DS18x20_scan+0x1c>
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	09 f0       	breq	.+2      	; 0x11dc <DS18x20_scan+0x1a>
    11da:	8a c0       	rjmp	.+276    	; 0x12f0 <DS18x20_scan+0x12e>
    11dc:	1e c0       	rjmp	.+60     	; 0x121a <DS18x20_scan+0x58>
    case 0:
	  ds18x20SearchDevices();
    11de:	0e 94 91 1c 	call	0x3922	; 0x3922 <ds18x20SearchDevices>
	  if (ds18x20GetDevCount() > 0) {
    11e2:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <ds18x20GetDevCount>
    11e6:	88 23       	and	r24, r24
    11e8:	41 f0       	breq	.+16     	; 0x11fa <DS18x20_scan+0x38>
	    ds_state = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	80 93 2c 05 	sts	0x052C, r24
        RTOS_setTaskFunc(DS18x20_scan, 0, 0);
    11f0:	81 ee       	ldi	r24, 0xE1	; 225
    11f2:	98 e0       	ldi	r25, 0x08	; 8
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	77 c0       	rjmp	.+238    	; 0x12e8 <DS18x20_scan+0x126>
	  } else {
	    LED_VENTIL_off();
    11fa:	91 98       	cbi	0x12, 1	; 18
        RTOS_setTaskFunc(DS18x20_scan, 3000, 0);
    11fc:	81 ee       	ldi	r24, 0xE1	; 225
    11fe:	98 e0       	ldi	r25, 0x08	; 8
    1200:	68 eb       	ldi	r22, 0xB8	; 184
    1202:	7b e0       	ldi	r23, 0x0B	; 11
    1204:	71 c0       	rjmp	.+226    	; 0x12e8 <DS18x20_scan+0x126>
	  }
    break;
    case 1:
	  ds18x20Process();
    1206:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <ds18x20Process>
      ds_state = 2;
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	80 93 2c 05 	sts	0x052C, r24
      RTOS_setTaskFunc(DS18x20_scan, 1000, 0);
    1210:	81 ee       	ldi	r24, 0xE1	; 225
    1212:	98 e0       	ldi	r25, 0x08	; 8
    1214:	68 ee       	ldi	r22, 0xE8	; 232
    1216:	73 e0       	ldi	r23, 0x03	; 3
    1218:	67 c0       	rjmp	.+206    	; 0x12e8 <DS18x20_scan+0x126>
    break;
    case 2:
      if (ds18x20GetDevCount() >= 1) {
    121a:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <ds18x20GetDevCount>
    121e:	88 23       	and	r24, r24
    1220:	19 f1       	breq	.+70     	; 0x1268 <DS18x20_scan+0xa6>
		if ((ds18x20GetTemp(0) / 10) >= max_temp) { 
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <ds18x20GetTemp>
    1228:	0a e0       	ldi	r16, 0x0A	; 10
    122a:	10 e0       	ldi	r17, 0x00	; 0
    122c:	b8 01       	movw	r22, r16
    122e:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
    1232:	80 91 a1 05 	lds	r24, 0x05A1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	68 17       	cp	r22, r24
    123a:	79 07       	cpc	r23, r25
    123c:	14 f0       	brlt	.+4      	; 0x1242 <DS18x20_scan+0x80>
		  LED_VENTIL_on();
    123e:	91 9a       	sbi	0x12, 1	; 18
    1240:	13 c0       	rjmp	.+38     	; 0x1268 <DS18x20_scan+0xa6>
		} else {
          if (ds18x20GetDevCount() == 1) {
    1242:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <ds18x20GetDevCount>
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	79 f4       	brne	.+30     	; 0x1268 <DS18x20_scan+0xa6>
		    if ((ds18x20GetTemp(0) / 10) <= (max_temp - ONE_WIRE_GISTER)) LED_VENTIL_off();
    124a:	80 91 a1 05 	lds	r24, 0x05A1
    124e:	c8 2f       	mov	r28, r24
    1250:	d0 e0       	ldi	r29, 0x00	; 0
    1252:	21 97       	sbiw	r28, 0x01	; 1
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <ds18x20GetTemp>
    125a:	b8 01       	movw	r22, r16
    125c:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
    1260:	6c 17       	cp	r22, r28
    1262:	7d 07       	cpc	r23, r29
    1264:	0c f4       	brge	.+2      	; 0x1268 <DS18x20_scan+0xa6>
    1266:	91 98       	cbi	0x12, 1	; 18
		  }
		}
      }
      if (ds18x20GetDevCount() == 2) {
    1268:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <ds18x20GetDevCount>
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	b1 f5       	brne	.+108    	; 0x12dc <DS18x20_scan+0x11a>
		if (((ds18x20GetTemp(1) / 10) >= max_temp) || ((ds18x20GetTemp(0) / 10) >= max_temp)) {
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <ds18x20GetTemp>
    1276:	ca e0       	ldi	r28, 0x0A	; 10
    1278:	d0 e0       	ldi	r29, 0x00	; 0
    127a:	be 01       	movw	r22, r28
    127c:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
    1280:	80 91 a1 05 	lds	r24, 0x05A1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	68 17       	cp	r22, r24
    1288:	79 07       	cpc	r23, r25
    128a:	64 f4       	brge	.+24     	; 0x12a4 <DS18x20_scan+0xe2>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <ds18x20GetTemp>
    1292:	00 91 a1 05 	lds	r16, 0x05A1
    1296:	10 e0       	ldi	r17, 0x00	; 0
    1298:	be 01       	movw	r22, r28
    129a:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
    129e:	60 17       	cp	r22, r16
    12a0:	71 07       	cpc	r23, r17
    12a2:	14 f0       	brlt	.+4      	; 0x12a8 <DS18x20_scan+0xe6>
		  LED_VENTIL_on();
    12a4:	91 9a       	sbi	0x12, 1	; 18
    12a6:	1a c0       	rjmp	.+52     	; 0x12dc <DS18x20_scan+0x11a>
		} else {
		  if (((ds18x20GetTemp(1) / 10) <= (max_temp - ONE_WIRE_GISTER)) && ((ds18x20GetTemp(0) / 10) <= (max_temp - ONE_WIRE_GISTER))) LED_VENTIL_off();
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <ds18x20GetTemp>
    12ae:	01 50       	subi	r16, 0x01	; 1
    12b0:	10 40       	sbci	r17, 0x00	; 0
    12b2:	be 01       	movw	r22, r28
    12b4:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
    12b8:	60 17       	cp	r22, r16
    12ba:	71 07       	cpc	r23, r17
    12bc:	7c f4       	brge	.+30     	; 0x12dc <DS18x20_scan+0x11a>
    12be:	00 91 a1 05 	lds	r16, 0x05A1
    12c2:	10 e0       	ldi	r17, 0x00	; 0
    12c4:	01 50       	subi	r16, 0x01	; 1
    12c6:	10 40       	sbci	r17, 0x00	; 0
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <ds18x20GetTemp>
    12ce:	be 01       	movw	r22, r28
    12d0:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
    12d4:	60 17       	cp	r22, r16
    12d6:	71 07       	cpc	r23, r17
    12d8:	0c f4       	brge	.+2      	; 0x12dc <DS18x20_scan+0x11a>
    12da:	91 98       	cbi	0x12, 1	; 18
		}
      }
      ds_state = 0;
    12dc:	10 92 2c 05 	sts	0x052C, r1
      RTOS_setTaskFunc(DS18x20_scan, ONE_WIRE_TIME, 0);
    12e0:	81 ee       	ldi	r24, 0xE1	; 225
    12e2:	98 e0       	ldi	r25, 0x08	; 8
    12e4:	64 e1       	ldi	r22, 0x14	; 20
    12e6:	75 e0       	ldi	r23, 0x05	; 5
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	0e 94 80 07 	call	0xf00	; 0xf00 <RTOS_setTaskFunc>
    break;
  }
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	08 95       	ret

000012fa <alarm_beep>:
  0x01,0x01,0x03, 0x03,0x01,0x03, 0x20,0x20,0x03, 0x03,0x01,0x03, 0x01,0x01,0x03
};
//=============================================================================
void alarm_beep(void)
{
  BEEP_off()
    12fa:	97 9a       	sbi	0x12, 7	; 18
  if (time_alarm > 0) {
    12fc:	80 91 27 05 	lds	r24, 0x0527
    1300:	88 23       	and	r24, r24
    1302:	61 f0       	breq	.+24     	; 0x131c <alarm_beep+0x22>
    if (blinks == 1) { BEEP_on(); } else { BEEP_off(); }
    1304:	80 91 1e 05 	lds	r24, 0x051E
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	11 f4       	brne	.+4      	; 0x1310 <alarm_beep+0x16>
    130c:	97 98       	cbi	0x12, 7	; 18
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <alarm_beep+0x18>
    1310:	97 9a       	sbi	0x12, 7	; 18
	time_alarm--;
    1312:	80 91 27 05 	lds	r24, 0x0527
    1316:	81 50       	subi	r24, 0x01	; 1
    1318:	80 93 27 05 	sts	0x0527, r24
    131c:	08 95       	ret

0000131e <rc5_buffer_init>:
  }
}
//=============================================================================
void rc5_buffer_init(void)
{
    131e:	e7 e7       	ldi	r30, 0x77	; 119
    1320:	f5 e0       	ldi	r31, 0x05	; 5
    1322:	84 e6       	ldi	r24, 0x64	; 100
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    rc5_code[RC5_CMD][i] = 0xFF;
    1324:	9f ef       	ldi	r25, 0xFF	; 255
    1326:	91 93       	st	Z+, r25
    rc5_code[RC5_KEY][i] = 100 + i;
    1328:	82 8b       	std	Z+18, r24	; 0x12
    132a:	8f 5f       	subi	r24, 0xFF	; 255
}
//=============================================================================
void rc5_buffer_init(void)
{
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    132c:	87 37       	cpi	r24, 0x77	; 119
    132e:	d9 f7       	brne	.-10     	; 0x1326 <rc5_buffer_init+0x8>
    rc5_code[RC5_CMD][i] = 0xFF;
    rc5_code[RC5_KEY][i] = 100 + i;
  }
}
    1330:	08 95       	ret

00001332 <get_rc5_key>:
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
  uint8_t i, ret = 0xFF;
    1332:	e7 e7       	ldi	r30, 0x77	; 119
    1334:	f5 e0       	ldi	r31, 0x05	; 5
    rc5_code[RC5_KEY][i] = 100 + i;
  }
}
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t i, ret = 0xFF;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    if ( rc5_code[RC5_CMD][i] == code) {
    133a:	91 91       	ld	r25, Z+
    133c:	98 17       	cp	r25, r24
    133e:	29 f4       	brne	.+10     	; 0x134a <get_rc5_key+0x18>
	  ret = rc5_code[RC5_KEY][i];
    1340:	29 58       	subi	r18, 0x89	; 137
    1342:	3a 4f       	sbci	r19, 0xFA	; 250
    1344:	f9 01       	movw	r30, r18
    1346:	83 89       	ldd	r24, Z+19	; 0x13
	  break;
    1348:	08 95       	ret
    134a:	2f 5f       	subi	r18, 0xFF	; 255
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
}
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
  uint8_t i, ret = 0xFF;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    134e:	23 31       	cpi	r18, 0x13	; 19
    1350:	31 05       	cpc	r19, r1
    1352:	99 f7       	brne	.-26     	; 0x133a <get_rc5_key+0x8>
  }
}
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
  uint8_t i, ret = 0xFF;
    1354:	8f ef       	ldi	r24, 0xFF	; 255
	  ret = rc5_code[RC5_KEY][i];
	  break;
	}
  }
  return ret;
}
    1356:	08 95       	ret

00001358 <RC5_scan>:
//=============================================================================
void RC5_scan(void)
{
  static signed char old_flip = -1;
  unsigned char c;
  if (rc5.flip != -1) {
    1358:	80 91 a5 05 	lds	r24, 0x05A5
    135c:	8f 3f       	cpi	r24, 0xFF	; 255
    135e:	09 f4       	brne	.+2      	; 0x1362 <RC5_scan+0xa>
    1360:	40 c0       	rjmp	.+128    	; 0x13e2 <RC5_scan+0x8a>
    if ((rc5.flip != old_flip) || (rc5.code == EVENT_RC5_LEFT) || (rc5.code == EVENT_RC5_RIGHT)) {
    1362:	90 91 a5 05 	lds	r25, 0x05A5
    1366:	80 91 4a 04 	lds	r24, 0x044A
    136a:	98 17       	cp	r25, r24
    136c:	31 f4       	brne	.+12     	; 0x137a <RC5_scan+0x22>
    136e:	80 91 a3 05 	lds	r24, 0x05A3
    1372:	82 31       	cpi	r24, 0x12	; 18
    1374:	11 f0       	breq	.+4      	; 0x137a <RC5_scan+0x22>
    1376:	81 31       	cpi	r24, 0x11	; 17
    1378:	89 f5       	brne	.+98     	; 0x13dc <RC5_scan+0x84>
      LED_RC5_CMD_flip();
    137a:	c1 98       	cbi	0x18, 1	; 24
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	96 e7       	ldi	r25, 0x76	; 118
    1380:	a1 e0       	ldi	r26, 0x01	; 1
    1382:	81 50       	subi	r24, 0x01	; 1
    1384:	90 40       	sbci	r25, 0x00	; 0
    1386:	a0 40       	sbci	r26, 0x00	; 0
    1388:	e1 f7       	brne	.-8      	; 0x1382 <RC5_scan+0x2a>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <RC5_scan+0x34>
    138c:	00 00       	nop
    138e:	c1 9a       	sbi	0x18, 1	; 24
	  BEEP();
    1390:	97 98       	cbi	0x12, 7	; 18
    1392:	af e3       	ldi	r26, 0x3F	; 63
    1394:	bc e9       	ldi	r27, 0x9C	; 156
    1396:	11 97       	sbiw	r26, 0x01	; 1
    1398:	f1 f7       	brne	.-4      	; 0x1396 <RC5_scan+0x3e>
    139a:	00 c0       	rjmp	.+0      	; 0x139c <RC5_scan+0x44>
    139c:	00 00       	nop
    139e:	97 9a       	sbi	0x12, 7	; 18
	  old_flip = rc5.flip;
    13a0:	80 91 a5 05 	lds	r24, 0x05A5
    13a4:	80 93 4a 04 	sts	0x044A, r24
      RTOS_setTask(EVENT_KEY_PRESS, 0, 0); 
    13a8:	80 ea       	ldi	r24, 0xA0	; 160
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
	  if (edit_rc5 == 1) {
    13b6:	80 91 26 05 	lds	r24, 0x0526
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	19 f4       	brne	.+6      	; 0x13c4 <RC5_scan+0x6c>
        RTOS_setTask(rc5.code, 0, 0); 
    13be:	80 91 a3 05 	lds	r24, 0x05A3
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <RC5_scan+0x78>
      } else {
	    c = get_rc5_key(rc5.code);
    13c4:	80 91 a3 05 	lds	r24, 0x05A3
    13c8:	0e 94 99 09 	call	0x1332	; 0x1332 <get_rc5_key>
	    if ( c != 0xFF) RTOS_setTask(c, 0, 0); 
    13cc:	8f 3f       	cpi	r24, 0xFF	; 255
    13ce:	31 f0       	breq	.+12     	; 0x13dc <RC5_scan+0x84>
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
	  }
    }
	rc5.flip = -1;
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	80 93 a5 05 	sts	0x05A5, r24
    13e2:	08 95       	ret

000013e4 <save_rc5code_key>:
    load_rc5code_key(i);
  }
}
//=============================================================================
void save_rc5code_key(uint8_t nkey, uint8_t key)
{
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	16 2f       	mov	r17, r22
  eeprom_write_byte((uint8_t*)RC5_CODE_ADDR + nkey, key);
    13ec:	c8 2f       	mov	r28, r24
    13ee:	d0 e0       	ldi	r29, 0x00	; 0
    13f0:	ce 01       	movw	r24, r28
    13f2:	80 57       	subi	r24, 0x70	; 112
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
  rc5_code[RC5_CMD][nkey] = key;
    13fa:	c9 58       	subi	r28, 0x89	; 137
    13fc:	da 4f       	sbci	r29, 0xFA	; 250
    13fe:	18 83       	st	Y, r17
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	08 95       	ret

00001408 <save_rc5code>:
  }
  return ret;
}
//=============================================================================
void save_rc5code(void)
{
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    140e:	c7 e7       	ldi	r28, 0x77	; 119
    1410:	d5 e0       	ldi	r29, 0x05	; 5
    1412:	10 e0       	ldi	r17, 0x00	; 0
    save_rc5code_key(i, rc5_code[RC5_CMD][i]);
    1414:	69 91       	ld	r22, Y+
    1416:	81 2f       	mov	r24, r17
    1418:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <save_rc5code_key>
}
//=============================================================================
void save_rc5code(void)
{
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    141c:	1f 5f       	subi	r17, 0xFF	; 255
    141e:	13 31       	cpi	r17, 0x13	; 19
    1420:	c9 f7       	brne	.-14     	; 0x1414 <save_rc5code+0xc>
    save_rc5code_key(i, rc5_code[RC5_CMD][i]);
  }
}
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	08 95       	ret

0000142a <load_rc5code_key>:
  eeprom_write_byte((uint8_t*)RC5_CODE_ADDR + nkey, key);
  rc5_code[RC5_CMD][nkey] = key;
}
//=============================================================================
uint8_t load_rc5code_key(uint8_t nkey)
{
    142a:	1f 93       	push	r17
    142c:	18 2f       	mov	r17, r24
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)RC5_CODE_ADDR + nkey);
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	c9 01       	movw	r24, r18
    1434:	80 57       	subi	r24, 0x70	; 112
    1436:	9f 4f       	sbci	r25, 0xFF	; 255
    1438:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  if (t > EVENT_RC5_CODE_MAX) t = 0xFF;
    143c:	84 36       	cpi	r24, 0x64	; 100
    143e:	08 f0       	brcs	.+2      	; 0x1442 <load_rc5code_key+0x18>
    1440:	8f ef       	ldi	r24, 0xFF	; 255
  rc5_code[RC5_CMD][nkey] = t;
    1442:	e1 2f       	mov	r30, r17
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	e9 58       	subi	r30, 0x89	; 137
    1448:	fa 4f       	sbci	r31, 0xFA	; 250
    144a:	80 83       	st	Z, r24
  return t;
}
    144c:	1f 91       	pop	r17
    144e:	08 95       	ret

00001450 <load_rc5code>:
    save_rc5code_key(i, rc5_code[RC5_CMD][i]);
  }
}
//=============================================================================
void load_rc5code(void)
{
    1450:	1f 93       	push	r17
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    1452:	10 e0       	ldi	r17, 0x00	; 0
    load_rc5code_key(i);
    1454:	81 2f       	mov	r24, r17
    1456:	0e 94 15 0a 	call	0x142a	; 0x142a <load_rc5code_key>
}
//=============================================================================
void load_rc5code(void)
{
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    145a:	1f 5f       	subi	r17, 0xFF	; 255
    145c:	13 31       	cpi	r17, 0x13	; 19
    145e:	d1 f7       	brne	.-12     	; 0x1454 <load_rc5code+0x4>
    load_rc5code_key(i);
  }
}
    1460:	1f 91       	pop	r17
    1462:	08 95       	ret

00001464 <save_alarm_param>:
}
//=============================================================================
void save_alarm_param(void)
{
#if (ALARM_DEBUG == 0) 
  eeprom_write_byte((uint8_t*)ALARM_ONOFF_ADDR, a_onoff);
    1464:	82 e1       	ldi	r24, 0x12	; 18
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	60 91 6b 05 	lds	r22, 0x056B
    146c:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_HOUR_ADDR, a_hh);
    1470:	83 e1       	ldi	r24, 0x13	; 19
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	60 91 a2 05 	lds	r22, 0x05A2
    1478:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_MIN_ADDR, a_mm);
    147c:	84 e1       	ldi	r24, 0x14	; 20
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	60 91 73 05 	lds	r22, 0x0573
    1484:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_SEC_ADDR, a_ss);
    1488:	85 e1       	ldi	r24, 0x15	; 21
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	60 91 75 05 	lds	r22, 0x0575
    1490:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_WDAY_ADDR, (a_wday & 0x7F));
    1494:	60 91 71 05 	lds	r22, 0x0571
    1498:	6f 77       	andi	r22, 0x7F	; 127
    149a:	86 e1       	ldi	r24, 0x16	; 22
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
#endif
}
    14a2:	08 95       	ret

000014a4 <load_alarm_param>:
//=============================================================================
void load_alarm_param(void)
{
#if (ALARM_DEBUG == 0) 
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)ALARM_ONOFF_ADDR);
    14a4:	82 e1       	ldi	r24, 0x12	; 18
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  if (t > 1) a_onoff = 0; else a_onoff = t;
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	18 f0       	brcs	.+6      	; 0x14b6 <load_alarm_param+0x12>
    14b0:	10 92 6b 05 	sts	0x056B, r1
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <load_alarm_param+0x16>
    14b6:	80 93 6b 05 	sts	0x056B, r24
  t = eeprom_read_byte((uint8_t*)ALARM_HOUR_ADDR);
    14ba:	83 e1       	ldi	r24, 0x13	; 19
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  if (t > 23) { a_hh = 0; a_onoff = 0; } else a_hh = t;
    14c2:	88 31       	cpi	r24, 0x18	; 24
    14c4:	28 f0       	brcs	.+10     	; 0x14d0 <load_alarm_param+0x2c>
    14c6:	10 92 a2 05 	sts	0x05A2, r1
    14ca:	10 92 6b 05 	sts	0x056B, r1
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <load_alarm_param+0x30>
    14d0:	80 93 a2 05 	sts	0x05A2, r24
  t = eeprom_read_byte((uint8_t*)ALARM_MIN_ADDR);
    14d4:	84 e1       	ldi	r24, 0x14	; 20
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  if (t > 59) { a_mm = 0;  a_onoff = 0; } else a_mm = t;
    14dc:	8c 33       	cpi	r24, 0x3C	; 60
    14de:	28 f0       	brcs	.+10     	; 0x14ea <load_alarm_param+0x46>
    14e0:	10 92 73 05 	sts	0x0573, r1
    14e4:	10 92 6b 05 	sts	0x056B, r1
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <load_alarm_param+0x4a>
    14ea:	80 93 73 05 	sts	0x0573, r24
  t = eeprom_read_byte((uint8_t*)ALARM_SEC_ADDR);
    14ee:	85 e1       	ldi	r24, 0x15	; 21
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  if (t > 59) { a_ss = 0;  a_onoff = 0; } else a_ss = t;
    14f6:	8c 33       	cpi	r24, 0x3C	; 60
    14f8:	28 f0       	brcs	.+10     	; 0x1504 <load_alarm_param+0x60>
    14fa:	10 92 75 05 	sts	0x0575, r1
    14fe:	10 92 6b 05 	sts	0x056B, r1
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <load_alarm_param+0x64>
    1504:	80 93 75 05 	sts	0x0575, r24
  t = eeprom_read_byte((uint8_t*)ALARM_WDAY_ADDR);
    1508:	86 e1       	ldi	r24, 0x16	; 22
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  a_wday = t & 0x7F;
    1510:	8f 77       	andi	r24, 0x7F	; 127
    1512:	80 93 71 05 	sts	0x0571, r24
#else
  RTC_set_time(13, 58, 57);
  a_onoff = 1; a_hh = 14; a_mm = 00; a_ss = 0; a_wday = 0x7F;
#endif
}
    1516:	08 95       	ret

00001518 <save_as_wait>:
//=============================================================================
void save_as_wait(uint8_t temp)
{
    1518:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)AS_WAIT_ADDR, temp);
    151a:	84 e8       	ldi	r24, 0x84	; 132
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
}
    1522:	08 95       	ret

00001524 <load_as_wait>:
//=============================================================================
uint8_t load_as_wait(void)
{
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)AS_WAIT_ADDR);
    1524:	84 e8       	ldi	r24, 0x84	; 132
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  if (t > MAX_AS_WAIT) t = DEF_AS_WAIT;
    152c:	8b 30       	cpi	r24, 0x0B	; 11
    152e:	08 f0       	brcs	.+2      	; 0x1532 <load_as_wait+0xe>
    1530:	83 e0       	ldi	r24, 0x03	; 3
  as_wait = t;
    1532:	80 93 76 05 	sts	0x0576, r24
  return t;
}
    1536:	08 95       	ret

00001538 <save_max_temperature>:
//=============================================================================
void save_max_temperature(uint8_t temp)
{
    1538:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)MAX_TEMPERATURE_ADDR, temp);
    153a:	82 e8       	ldi	r24, 0x82	; 130
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
}
    1542:	08 95       	ret

00001544 <load_max_temperature>:
//=============================================================================
uint8_t load_max_temperature(void)
{
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)MAX_TEMPERATURE_ADDR);
    1544:	82 e8       	ldi	r24, 0x82	; 130
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  if ((t > MAX_TEMP) || (t < MIN_TEMP)) t = DEF_TEMP;
    154c:	98 2f       	mov	r25, r24
    154e:	9e 51       	subi	r25, 0x1E	; 30
    1550:	98 33       	cpi	r25, 0x38	; 56
    1552:	08 f0       	brcs	.+2      	; 0x1556 <load_max_temperature+0x12>
    1554:	8d e2       	ldi	r24, 0x2D	; 45
  max_temp = t;
    1556:	80 93 a1 05 	sts	0x05A1, r24
  return t;
}
    155a:	08 95       	ret

0000155c <save_stb_out>:
//=============================================================================
void save_stb_out(uint8_t temp)
{
    155c:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)STANDBY_OUT_ADDR, temp);
    155e:	83 e8       	ldi	r24, 0x83	; 131
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
}
    1566:	08 95       	ret

00001568 <load_stb_out>:
//=============================================================================
uint8_t load_stb_out(void)
{
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)STANDBY_OUT_ADDR);
    1568:	83 e8       	ldi	r24, 0x83	; 131
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
    1570:	81 11       	cpse	r24, r1
    1572:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = STANDBY_OUT_DEF;
  stb_out = t;
    1574:	80 93 74 05 	sts	0x0574, r24
  return t;
}
    1578:	08 95       	ret

0000157a <check_fault>:
}
//=============================================================================
uint8_t check_fault(void)
{
  uint8_t r = 0;
  if (BitIsClear(PIN(LED_FAULT_IN), LED_FAULT_IN_PIN)) {
    157a:	9f 99       	sbic	0x13, 7	; 19
    157c:	0f c0       	rjmp	.+30     	; 0x159c <check_fault+0x22>
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	99 ef       	ldi	r25, 0xF9	; 249
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	81 50       	subi	r24, 0x01	; 1
    1586:	90 40       	sbci	r25, 0x00	; 0
    1588:	a0 40       	sbci	r26, 0x00	; 0
    158a:	e1 f7       	brne	.-8      	; 0x1584 <check_fault+0xa>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <check_fault+0x14>
    158e:	00 00       	nop
    _delay_ms(20);
    if (BitIsClear(PIN(LED_FAULT_IN), LED_FAULT_IN_PIN)) {
    1590:	9f 99       	sbic	0x13, 7	; 19
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <check_fault+0x26>
      fault_on = 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	80 93 28 05 	sts	0x0528, r24
    159a:	08 95       	ret
  }
}
//=============================================================================
uint8_t check_fault(void)
{
  uint8_t r = 0;
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	08 95       	ret
    15a0:	80 e0       	ldi	r24, 0x00	; 0
      fault_on = 1;
	  r = 1;
    }
  }
  return r;
}
    15a2:	08 95       	ret

000015a4 <lcd_bigchar>:
//=============================================================================
void lcd_bigchar(unsigned char col, unsigned char x)
{
    15a4:	bf 92       	push	r11
    15a6:	cf 92       	push	r12
    15a8:	df 92       	push	r13
    15aa:	ef 92       	push	r14
    15ac:	ff 92       	push	r15
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	b8 2e       	mov	r11, r24
    15b8:	06 2f       	mov	r16, r22
  unsigned char i;
  i = x * 3;
  LCD_SetXY(col, 0);
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
}
//=============================================================================
void lcd_bigchar(unsigned char col, unsigned char x)
{
  unsigned char i;
  i = x * 3;
    15c0:	80 2f       	mov	r24, r16
    15c2:	88 0f       	add	r24, r24
    15c4:	80 0f       	add	r24, r16
  LCD_SetXY(col, 0);
  LCD_dat(bignumchars1[i]); LCD_dat(bignumchars1[i + 1]); LCD_dat(bignumchars1[i + 2]); LCD_dat(' ');
    15c6:	c8 2f       	mov	r28, r24
    15c8:	d0 e0       	ldi	r29, 0x00	; 0
    15ca:	2e e0       	ldi	r18, 0x0E	; 14
    15cc:	e2 2e       	mov	r14, r18
    15ce:	24 e0       	ldi	r18, 0x04	; 4
    15d0:	f2 2e       	mov	r15, r18
    15d2:	f7 01       	movw	r30, r14
    15d4:	ec 0f       	add	r30, r28
    15d6:	fd 1f       	adc	r31, r29
    15d8:	80 81       	ld	r24, Z
    15da:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    15de:	8e 01       	movw	r16, r28
    15e0:	0f 5f       	subi	r16, 0xFF	; 255
    15e2:	1f 4f       	sbci	r17, 0xFF	; 255
    15e4:	f7 01       	movw	r30, r14
    15e6:	e0 0f       	add	r30, r16
    15e8:	f1 1f       	adc	r31, r17
    15ea:	80 81       	ld	r24, Z
    15ec:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    15f0:	92 e0       	ldi	r25, 0x02	; 2
    15f2:	c9 2e       	mov	r12, r25
    15f4:	d1 2c       	mov	r13, r1
    15f6:	cc 0e       	add	r12, r28
    15f8:	dd 1e       	adc	r13, r29
    15fa:	f7 01       	movw	r30, r14
    15fc:	ec 0d       	add	r30, r12
    15fe:	fd 1d       	adc	r31, r13
    1600:	80 81       	ld	r24, Z
    1602:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_SetXY(col, 1);
    160c:	8b 2d       	mov	r24, r11
    160e:	61 e0       	ldi	r22, 0x01	; 1
    1610:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  LCD_dat(bignumchars2[i]); LCD_dat(bignumchars2[i + 1]); LCD_dat(bignumchars2[i + 2]); LCD_dat(' ');
    1614:	8c e2       	ldi	r24, 0x2C	; 44
    1616:	e8 2e       	mov	r14, r24
    1618:	84 e0       	ldi	r24, 0x04	; 4
    161a:	f8 2e       	mov	r15, r24
    161c:	ce 0d       	add	r28, r14
    161e:	df 1d       	adc	r29, r15
    1620:	88 81       	ld	r24, Y
    1622:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1626:	f7 01       	movw	r30, r14
    1628:	e0 0f       	add	r30, r16
    162a:	f1 1f       	adc	r31, r17
    162c:	80 81       	ld	r24, Z
    162e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1632:	ec 0c       	add	r14, r12
    1634:	fd 1c       	adc	r15, r13
    1636:	f7 01       	movw	r30, r14
    1638:	80 81       	ld	r24, Z
    163a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    163e:	80 e2       	ldi	r24, 0x20	; 32
    1640:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
}
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	bf 90       	pop	r11
    1656:	08 95       	ret

00001658 <show_bigtime>:
//=============================================================================
void show_bigtime(void)
{
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	00 d0       	rcall	.+0      	; 0x1662 <show_bigtime+0xa>
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
  unsigned char h, m, s, w;
  RTC_get_time(&h, &m, &s);
    1668:	ce 01       	movw	r24, r28
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	be 01       	movw	r22, r28
    166e:	6e 5f       	subi	r22, 0xFE	; 254
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	ae 01       	movw	r20, r28
    1674:	4d 5f       	subi	r20, 0xFD	; 253
    1676:	5f 4f       	sbci	r21, 0xFF	; 255
    1678:	0e 94 be 03 	call	0x77c	; 0x77c <RTC_get_time>
  w = RTC_dayofweek();
    167c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <RTC_dayofweek>
    1680:	08 2f       	mov	r16, r24
  if (blinks)
    1682:	80 91 1e 05 	lds	r24, 0x051E
    1686:	88 23       	and	r24, r24
    1688:	69 f0       	breq	.+26     	; 0x16a4 <show_bigtime+0x4c>
  { 
    LCD_SetXY(10, 0); LCD_dat(0x04);
    168a:	8a e0       	ldi	r24, 0x0A	; 10
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_SetXY(10, 1); LCD_dat(0x04);
    1698:	8a e0       	ldi	r24, 0x0A	; 10
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    16a0:	84 e0       	ldi	r24, 0x04	; 4
    16a2:	0c c0       	rjmp	.+24     	; 0x16bc <show_bigtime+0x64>
  } else {
    LCD_SetXY(10, 0); LCD_dat(0x20);
    16a4:	8a e0       	ldi	r24, 0x0A	; 10
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    16ac:	80 e2       	ldi	r24, 0x20	; 32
    16ae:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_SetXY(10, 1); LCD_dat(0x20);
    16b2:	8a e0       	ldi	r24, 0x0A	; 10
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  }
  lcd_bigchar(2, h / 10); lcd_bigchar(6, h % 10); lcd_bigchar(11, m / 10); lcd_bigchar(15, m % 10);
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	1a e0       	ldi	r17, 0x0A	; 10
    16c4:	61 2f       	mov	r22, r17
    16c6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__udivmodqi4>
    16ca:	68 2f       	mov	r22, r24
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_bigchar>
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	61 2f       	mov	r22, r17
    16d6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__udivmodqi4>
    16da:	86 e0       	ldi	r24, 0x06	; 6
    16dc:	69 2f       	mov	r22, r25
    16de:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_bigchar>
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	61 2f       	mov	r22, r17
    16e6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__udivmodqi4>
    16ea:	68 2f       	mov	r22, r24
    16ec:	8b e0       	ldi	r24, 0x0B	; 11
    16ee:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_bigchar>
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	61 2f       	mov	r22, r17
    16f6:	0e 94 60 22 	call	0x44c0	; 0x44c0 <__udivmodqi4>
    16fa:	8f e0       	ldi	r24, 0x0F	; 15
    16fc:	69 2f       	mov	r22, r25
    16fe:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <lcd_bigchar>
  if (fault_on == 0) {
    1702:	80 91 28 05 	lds	r24, 0x0528
    1706:	88 23       	and	r24, r24
    1708:	79 f5       	brne	.+94     	; 0x1768 <show_bigtime+0x110>
    if (!mute) {
    170a:	80 91 24 05 	lds	r24, 0x0524
    170e:	88 23       	and	r24, r24
    1710:	a9 f4       	brne	.+42     	; 0x173c <show_bigtime+0xe4>
      LCD_SetXY(5, 2); RTC_print_date();
    1712:	85 e0       	ldi	r24, 0x05	; 5
    1714:	62 e0       	ldi	r22, 0x02	; 2
    1716:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    171a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <RTC_print_date>
      LCD_SetXY(5, 3); LCD_puts(den_dw_full[w]);
    171e:	85 e0       	ldi	r24, 0x05	; 5
    1720:	63 e0       	ldi	r22, 0x03	; 3
    1722:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1726:	e0 2f       	mov	r30, r16
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	e4 55       	subi	r30, 0x54	; 84
    1730:	fe 4f       	sbci	r31, 0xFE	; 254
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    173a:	37 c0       	rjmp	.+110    	; 0x17aa <show_bigtime+0x152>
    } else {
      LCD_SetXY(5, 3); if (!blinks) LCD_puts(MSG_MUTE); else LCD_space(10);
    173c:	85 e0       	ldi	r24, 0x05	; 5
    173e:	63 e0       	ldi	r22, 0x03	; 3
    1740:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1744:	80 91 1e 05 	lds	r24, 0x051E
    1748:	88 23       	and	r24, r24
    174a:	29 f4       	brne	.+10     	; 0x1756 <show_bigtime+0xfe>
    174c:	87 ea       	ldi	r24, 0xA7	; 167
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    1754:	03 c0       	rjmp	.+6      	; 0x175c <show_bigtime+0x104>
    1756:	8a e0       	ldi	r24, 0x0A	; 10
    1758:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
      LCD_SetXY(5, 2); LCD_space(10);
    175c:	85 e0       	ldi	r24, 0x05	; 5
    175e:	62 e0       	ldi	r22, 0x02	; 2
    1760:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1764:	8a e0       	ldi	r24, 0x0A	; 10
    1766:	1f c0       	rjmp	.+62     	; 0x17a6 <show_bigtime+0x14e>
    }
  } else {
    LCD_SetXY(0, 2); LCD_space(20);
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	62 e0       	ldi	r22, 0x02	; 2
    176c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1770:	84 e1       	ldi	r24, 0x14	; 20
    1772:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    LCD_SetXY(0, 3); LCD_space(5);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	63 e0       	ldi	r22, 0x03	; 3
    177a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    177e:	85 e0       	ldi	r24, 0x05	; 5
    1780:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
	if (blinks) LCD_puts(MSG_FAULT); else LCD_space(9);
    1784:	80 91 1e 05 	lds	r24, 0x051E
    1788:	88 23       	and	r24, r24
    178a:	29 f0       	breq	.+10     	; 0x1796 <show_bigtime+0x13e>
    178c:	82 eb       	ldi	r24, 0xB2	; 178
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    1794:	03 c0       	rjmp	.+6      	; 0x179c <show_bigtime+0x144>
    1796:	89 e0       	ldi	r24, 0x09	; 9
    1798:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    LCD_SetXY(15, 3); LCD_space(5);
    179c:	8f e0       	ldi	r24, 0x0F	; 15
    179e:	63 e0       	ldi	r22, 0x03	; 3
    17a0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    17a4:	85 e0       	ldi	r24, 0x05	; 5
    17a6:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
  }
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <show_temperature>:
//=============================================================================
void show_temperature(void)
{
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
  int16_t t = 0;
  LCD_SetXY(0, 3);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	63 e0       	ldi	r22, 0x03	; 3
    17c2:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (ds18x20GetDevCount() >= 1) {
    17c6:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <ds18x20GetDevCount>
    17ca:	88 23       	and	r24, r24
    17cc:	89 f1       	breq	.+98     	; 0x1830 <show_temperature+0x76>
    t = ds18x20GetTemp(0) / 10;
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <ds18x20GetTemp>
    17d4:	6a e0       	ldi	r22, 0x0A	; 10
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
    17dc:	eb 01       	movw	r28, r22
#if (TEMP_BLINK_MAX == 1) 
    if (t >= max_temp)  {
    17de:	80 91 a1 05 	lds	r24, 0x05A1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	68 17       	cp	r22, r24
    17e6:	79 07       	cpc	r23, r25
    17e8:	44 f0       	brlt	.+16     	; 0x17fa <show_temperature+0x40>
	  if (blinks == 0) {
    17ea:	80 91 1e 05 	lds	r24, 0x051E
    17ee:	88 23       	and	r24, r24
    17f0:	41 f0       	breq	.+16     	; 0x1802 <show_temperature+0x48>
	    if (t < 0) LCD_dat('-'); else LCD_dat('+');
	    print_dec(t, 2,' '); LCD_dat('C');
	  } else {
	    LCD_space(4);
    17f2:	84 e0       	ldi	r24, 0x04	; 4
    17f4:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <show_temperature+0x5e>
	  }
    } else {
	  if (t < 0) LCD_dat('-'); else LCD_dat('+');
    17fa:	77 ff       	sbrs	r23, 7
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <show_temperature+0x48>
    17fe:	8d e2       	ldi	r24, 0x2D	; 45
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <show_temperature+0x4a>
    1802:	8b e2       	ldi	r24, 0x2B	; 43
    1804:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  print_dec(t, 2,' '); LCD_dat('C');
    1808:	ce 01       	movw	r24, r28
    180a:	62 e0       	ldi	r22, 0x02	; 2
    180c:	40 e2       	ldi	r20, 0x20	; 32
    180e:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    1812:	83 e4       	ldi	r24, 0x43	; 67
    1814:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	}
    if (ds18x20GetDevCount() == 1) {
    1818:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <ds18x20GetDevCount>
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	41 f4       	brne	.+16     	; 0x1830 <show_temperature+0x76>
      LCD_SetXY(15, 3);
    1820:	8f e0       	ldi	r24, 0x0F	; 15
    1822:	63 e0       	ldi	r22, 0x03	; 3
    1824:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
	  LCD_puts("     ");
    1828:	8c eb       	ldi	r24, 0xBC	; 188
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
#else
   if (t < 0) LCD_dat('-'); else LCD_dat('+');
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  }
  LCD_SetXY(16, 3);
    1830:	80 e1       	ldi	r24, 0x10	; 16
    1832:	63 e0       	ldi	r22, 0x03	; 3
    1834:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (ds18x20GetDevCount() == 2) {
    1838:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <ds18x20GetDevCount>
    183c:	82 30       	cpi	r24, 0x02	; 2
    183e:	29 f5       	brne	.+74     	; 0x188a <show_temperature+0xd0>
    t = ds18x20GetTemp(1) / 10;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	0e 94 b2 1d 	call	0x3b64	; 0x3b64 <ds18x20GetTemp>
    1846:	6a e0       	ldi	r22, 0x0A	; 10
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
    184e:	eb 01       	movw	r28, r22
#if (TEMP_BLINK_MAX == 1) 
    if (t >= max_temp)  {
    1850:	80 91 a1 05 	lds	r24, 0x05A1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	68 17       	cp	r22, r24
    1858:	79 07       	cpc	r23, r25
    185a:	44 f0       	brlt	.+16     	; 0x186c <show_temperature+0xb2>
	  if (blinks == 0) {
    185c:	80 91 1e 05 	lds	r24, 0x051E
    1860:	88 23       	and	r24, r24
    1862:	41 f0       	breq	.+16     	; 0x1874 <show_temperature+0xba>
	    if (t < 0) LCD_dat('-'); else LCD_dat('+');
	    print_dec(t, 2,' '); LCD_dat('C');
	  } else {
	    LCD_space(4);
    1864:	84 e0       	ldi	r24, 0x04	; 4
    1866:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    186a:	0f c0       	rjmp	.+30     	; 0x188a <show_temperature+0xd0>
	  }
    } else {
	  if (t < 0) LCD_dat('-'); else LCD_dat('+');
    186c:	77 ff       	sbrs	r23, 7
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <show_temperature+0xba>
    1870:	8d e2       	ldi	r24, 0x2D	; 45
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <show_temperature+0xbc>
    1874:	8b e2       	ldi	r24, 0x2B	; 43
    1876:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  print_dec(t, 2,' '); LCD_dat('C');
    187a:	ce 01       	movw	r24, r28
    187c:	62 e0       	ldi	r22, 0x02	; 2
    187e:	40 e2       	ldi	r20, 0x20	; 32
    1880:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    1884:	83 e4       	ldi	r24, 0x43	; 67
    1886:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
#else
   if (t < 0) LCD_dat('-'); else LCD_dat('+');
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  }
}
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	08 95       	ret

00001890 <show_freq>:
//=============================================================================
void show_freq(void)
{
    1890:	ff 92       	push	r15
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	27 97       	sbiw	r28, 0x07	; 7
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
  unsigned char i;
  unsigned char s[6];
  uint16_t freq = tuner_ChanToFreq(tuner_GetChan(channel));
    18aa:	80 91 2a 05 	lds	r24, 0x052A
    18ae:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    18b2:	0e 94 97 21 	call	0x432e	; 0x432e <tuner_ChanToFreq>
    18b6:	f8 2e       	mov	r15, r24
  if (tuner_GetChan(channel) > FM_CHAN_MAX) {
    18b8:	80 91 2a 05 	lds	r24, 0x052A
    18bc:	9f 83       	std	Y+7, r25	; 0x07
    18be:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    18c2:	9f 81       	ldd	r25, Y+7	; 0x07
    18c4:	83 3d       	cpi	r24, 0xD3	; 211
    18c6:	28 f0       	brcs	.+10     	; 0x18d2 <show_freq+0x42>
    LCD_puts(MSG_ERROR_CHANNEL);
    18c8:	82 ec       	ldi	r24, 0xC2	; 194
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    18d0:	2b c0       	rjmp	.+86     	; 0x1928 <show_freq+0x98>
    18d2:	fe 01       	movw	r30, r28
    18d4:	36 96       	adiw	r30, 0x06	; 6
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  }
}
//=============================================================================
void show_freq(void)
    18d6:	8e 01       	movw	r16, r28
    18d8:	0f 5f       	subi	r16, 0xFF	; 255
    18da:	1f 4f       	sbci	r17, 0xFF	; 255
  uint16_t freq = tuner_ChanToFreq(tuner_GetChan(channel));
  if (tuner_GetChan(channel) > FM_CHAN_MAX) {
    LCD_puts(MSG_ERROR_CHANNEL);
  } else {
    for (i = 0; i < 5; i++) {
      s[5 - i - 1] = '0' + (freq % 10);
    18dc:	2a e0       	ldi	r18, 0x0A	; 10
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	8f 2d       	mov	r24, r15
    18e2:	b9 01       	movw	r22, r18
    18e4:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__udivmodhi4>
    18e8:	80 5d       	subi	r24, 0xD0	; 208
    18ea:	82 93       	st	-Z, r24
      freq /= 10;
    18ec:	f6 2e       	mov	r15, r22
    18ee:	97 2f       	mov	r25, r23
  unsigned char s[6];
  uint16_t freq = tuner_ChanToFreq(tuner_GetChan(channel));
  if (tuner_GetChan(channel) > FM_CHAN_MAX) {
    LCD_puts(MSG_ERROR_CHANNEL);
  } else {
    for (i = 0; i < 5; i++) {
    18f0:	e0 17       	cp	r30, r16
    18f2:	f1 07       	cpc	r31, r17
    18f4:	a9 f7       	brne	.-22     	; 0x18e0 <show_freq+0x50>
      s[5 - i - 1] = '0' + (freq % 10);
      freq /= 10;
    }
    if (s[0] == '0') { s[0] = ' '; }
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	80 33       	cpi	r24, 0x30	; 48
    18fa:	11 f4       	brne	.+4      	; 0x1900 <show_freq+0x70>
    18fc:	80 e2       	ldi	r24, 0x20	; 32
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	8e 01       	movw	r16, r28
    1902:	0f 5f       	subi	r16, 0xFF	; 255
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
#endif
  }
}
//=============================================================================
void show_freq(void)
{
    1906:	ff 24       	eor	r15, r15
    1908:	06 c0       	rjmp	.+12     	; 0x1916 <show_freq+0x86>
      s[5 - i - 1] = '0' + (freq % 10);
      freq /= 10;
    }
    if (s[0] == '0') { s[0] = ' '; }
    for (i = 0; i < 5; i++) {
      if (i == 3) { LCD_dat('.'); }
    190a:	8f 2d       	mov	r24, r15
    190c:	83 30       	cpi	r24, 0x03	; 3
    190e:	19 f4       	brne	.+6      	; 0x1916 <show_freq+0x86>
    1910:	8e e2       	ldi	r24, 0x2E	; 46
    1912:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
      LCD_dat(s[i]);
    1916:	f8 01       	movw	r30, r16
    1918:	81 91       	ld	r24, Z+
    191a:	8f 01       	movw	r16, r30
    191c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    for (i = 0; i < 5; i++) {
      s[5 - i - 1] = '0' + (freq % 10);
      freq /= 10;
    }
    if (s[0] == '0') { s[0] = ' '; }
    for (i = 0; i < 5; i++) {
    1920:	f3 94       	inc	r15
    1922:	ff 2d       	mov	r31, r15
    1924:	f5 30       	cpi	r31, 0x05	; 5
    1926:	89 f7       	brne	.-30     	; 0x190a <show_freq+0x7a>
      if (i == 3) { LCD_dat('.'); }
      LCD_dat(s[i]);
    }
  }
}
    1928:	27 96       	adiw	r28, 0x07	; 7
    192a:	0f b6       	in	r0, 0x3f	; 63
    192c:	f8 94       	cli
    192e:	de bf       	out	0x3e, r29	; 62
    1930:	0f be       	out	0x3f, r0	; 63
    1932:	cd bf       	out	0x3d, r28	; 61
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	08 95       	ret

00001940 <scan_fault>:
  sei();
}
//=============================================================================
void scan_fault(void)
{
  if (fault_on == 0) {
    1940:	80 91 28 05 	lds	r24, 0x0528
    1944:	88 23       	and	r24, r24
    1946:	c9 f4       	brne	.+50     	; 0x197a <scan_fault+0x3a>
    if (check_fault() == 1) {
    1948:	0e 94 bd 0a 	call	0x157a	; 0x157a <check_fault>
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	a9 f4       	brne	.+42     	; 0x197a <scan_fault+0x3a>
	  fault_on = 1;
    1950:	80 93 28 05 	sts	0x0528, r24
  	  BEEP(); 
    1954:	97 98       	cbi	0x12, 7	; 18
    1956:	8f e3       	ldi	r24, 0x3F	; 63
    1958:	9c e9       	ldi	r25, 0x9C	; 156
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <scan_fault+0x1a>
    195e:	00 c0       	rjmp	.+0      	; 0x1960 <scan_fault+0x20>
    1960:	00 00       	nop
    1962:	97 9a       	sbi	0x12, 7	; 18
	  if (main_mode != MODE_STANDBY) {
    1964:	80 91 2b 05 	lds	r24, 0x052B
    1968:	88 23       	and	r24, r24
    196a:	39 f0       	breq	.+14     	; 0x197a <scan_fault+0x3a>
        RTOS_setTask(EVENT_KEY_STANDBY, 0, 0);
    196c:	84 e6       	ldi	r24, 0x64	; 100
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    197a:	08 95       	ret

0000197c <show_lcd_main>:

  }
}
//=============================================================================
void show_lcd_main(void)
{
    197c:	1f 93       	push	r17
  LCD_SetXY(0, 0); LCD_puts(input[tda7313GetInput()]);
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1986:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <tda7313GetInput>
    198a:	e8 2f       	mov	r30, r24
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	ea 5b       	subi	r30, 0xBA	; 186
    1994:	fd 4f       	sbci	r31, 0xFD	; 253
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(17, 0);
    199e:	81 e1       	ldi	r24, 0x11	; 17
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (a_onoff == 1) LCD_dat(ALARM_CHAR); else LCD_dat(' ');
    19a6:	80 91 6b 05 	lds	r24, 0x056B
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	11 f4       	brne	.+4      	; 0x19b2 <show_lcd_main+0x36>
    19ae:	8a e2       	ldi	r24, 0x2A	; 42
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <show_lcd_main+0x38>
    19b2:	80 e2       	ldi	r24, 0x20	; 32
    19b4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_SetXY(19, 0);
    19b8:	83 e1       	ldi	r24, 0x13	; 19
    19ba:	60 e0       	ldi	r22, 0x00	; 0
    19bc:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (tda7313GetLoudness()) LCD_dat(LOUDNESS_CHAR); else LCD_dat(' ');
    19c0:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <tda7313GetLoudness>
    19c4:	88 23       	and	r24, r24
    19c6:	11 f0       	breq	.+4      	; 0x19cc <show_lcd_main+0x50>
    19c8:	8c e4       	ldi	r24, 0x4C	; 76
    19ca:	01 c0       	rjmp	.+2      	; 0x19ce <show_lcd_main+0x52>
    19cc:	80 e2       	ldi	r24, 0x20	; 32
    19ce:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_SetXY(6, 0); RTC_print_time();
    19d2:	86 e0       	ldi	r24, 0x06	; 6
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    19da:	0e 94 17 05 	call	0xa2e	; 0xa2e <RTC_print_time>
  LCD_SetXY(0, 1);
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	61 e0       	ldi	r22, 0x01	; 1
    19e2:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (tda7313GetInput() == FM_INPUT) {
    19e6:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <tda7313GetInput>
    19ea:	82 30       	cpi	r24, 0x02	; 2
    19ec:	09 f5       	brne	.+66     	; 0x1a30 <show_lcd_main+0xb4>
    if (fm_mode == VOLUME_MODE) {
    19ee:	80 91 29 05 	lds	r24, 0x0529
    19f2:	88 23       	and	r24, r24
    19f4:	21 f0       	breq	.+8      	; 0x19fe <show_lcd_main+0x82>
	  LCD_puts(MSG_CHANNEL);
    } else {
	  if (blinks) LCD_puts(MSG_CHANNEL); else LCD_puts("   ");
    19f6:	80 91 1e 05 	lds	r24, 0x051E
    19fa:	88 23       	and	r24, r24
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <show_lcd_main+0x88>
    19fe:	89 ec       	ldi	r24, 0xC9	; 201
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <show_lcd_main+0x8c>
    1a04:	8d ec       	ldi	r24, 0xCD	; 205
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
	}
	print_dec(channel + 1, 2, '0'); LCD_dat(' '); show_freq(); LCD_puts(MSG_MHZ);
    1a0c:	80 91 2a 05 	lds	r24, 0x052A
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	62 e0       	ldi	r22, 0x02	; 2
    1a16:	40 e3       	ldi	r20, 0x30	; 48
    1a18:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    1a1c:	80 e2       	ldi	r24, 0x20	; 32
    1a1e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1a22:	0e 94 48 0c 	call	0x1890	; 0x1890 <show_freq>
    1a26:	81 ed       	ldi	r24, 0xD1	; 209
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    1a2e:	03 c0       	rjmp	.+6      	; 0x1a36 <show_lcd_main+0xba>
  } else {
    LCD_space(19);
    1a30:	83 e1       	ldi	r24, 0x13	; 19
    1a32:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
  }
  LCD_SetXY(0, 2); LCD_puts(mainmenu[mmenu]);
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	62 e0       	ldi	r22, 0x02	; 2
    1a3a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1a3e:	e0 91 20 05 	lds	r30, 0x0520
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	ee 0f       	add	r30, r30
    1a46:	ff 1f       	adc	r31, r31
    1a48:	e6 5d       	subi	r30, 0xD6	; 214
    1a4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    1a54:	82 e1       	ldi	r24, 0x12	; 18
    1a56:	62 e0       	ldi	r22, 0x02	; 2
    1a58:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1a5c:	80 91 20 05 	lds	r24, 0x0520
    1a60:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	62 e0       	ldi	r22, 0x02	; 2
    1a68:	40 e3       	ldi	r20, 0x30	; 48
    1a6a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
  LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	63 e0       	ldi	r22, 0x03	; 3
    1a72:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1a76:	80 91 20 05 	lds	r24, 0x0520
    1a7a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    1a7e:	18 2f       	mov	r17, r24
    1a80:	80 91 20 05 	lds	r24, 0x0520
    1a84:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <tda7313Get_Max_Param>
    1a88:	68 2f       	mov	r22, r24
    1a8a:	81 2f       	mov	r24, r17
    1a8c:	44 e1       	ldi	r20, 0x14	; 20
    1a8e:	0e 94 82 01 	call	0x304	; 0x304 <LCD_progress_bar>
}
    1a92:	1f 91       	pop	r17
    1a94:	08 95       	ret

00001a96 <run_main>:
    break;
  }
}
//=============================================================================
void run_main(unsigned char event)
{
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	18 2f       	mov	r17, r24
  uint8_t in;
  if ((event >= EVENT_KEY_1) && (event <= EVENT_KEY_9)) {
    1a9c:	08 2f       	mov	r16, r24
    1a9e:	0e 56       	subi	r16, 0x6E	; 110
    1aa0:	09 30       	cpi	r16, 0x09	; 9
    1aa2:	c0 f4       	brcc	.+48     	; 0x1ad4 <run_main+0x3e>
    tda7313SetInput(FM_INPUT);
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <tda7313SetInput>
	tda7313Send_Param();
    1aaa:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <tda7313Send_Param>
    tda7313SetMute(0);
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
    channel = event - 110;
    1ab4:	00 93 2a 05 	sts	0x052A, r16
    tuner_SetChan(tuner_GetChan(channel));
    1ab8:	80 2f       	mov	r24, r16
    1aba:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    1abe:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
    show_lcd_main();
    1ac2:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
    RTOS_setTask(EVENT_SAVE_CHANNEL, TIME_SAVE_PARAM, 0);
    1ac6:	88 ea       	ldi	r24, 0xA8	; 168
    1ac8:	60 ed       	ldi	r22, 0xD0	; 208
    1aca:	77 e0       	ldi	r23, 0x07	; 7
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
  }
  switch(event) {
    1ad4:	1d 36       	cpi	r17, 0x6D	; 109
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <run_main+0x44>
    1ad8:	e2 c0       	rjmp	.+452    	; 0x1c9e <run_main+0x208>
    1ada:	1e 36       	cpi	r17, 0x6E	; 110
    1adc:	10 f5       	brcc	.+68     	; 0x1b22 <run_main+0x8c>
    1ade:	18 36       	cpi	r17, 0x68	; 104
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <run_main+0x4e>
    1ae2:	93 c0       	rjmp	.+294    	; 0x1c0a <run_main+0x174>
    1ae4:	19 36       	cpi	r17, 0x69	; 105
    1ae6:	80 f4       	brcc	.+32     	; 0x1b08 <run_main+0x72>
    1ae8:	15 36       	cpi	r17, 0x65	; 101
    1aea:	09 f4       	brne	.+2      	; 0x1aee <run_main+0x58>
    1aec:	67 c0       	rjmp	.+206    	; 0x1bbc <run_main+0x126>
    1aee:	16 36       	cpi	r17, 0x66	; 102
    1af0:	20 f4       	brcc	.+8      	; 0x1afa <run_main+0x64>
    1af2:	14 36       	cpi	r17, 0x64	; 100
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <run_main+0x62>
    1af6:	0f c1       	rjmp	.+542    	; 0x1d16 <run_main+0x280>
    1af8:	4e c0       	rjmp	.+156    	; 0x1b96 <run_main+0x100>
    1afa:	16 36       	cpi	r17, 0x66	; 102
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <run_main+0x6a>
    1afe:	72 c0       	rjmp	.+228    	; 0x1be4 <run_main+0x14e>
    1b00:	17 36       	cpi	r17, 0x67	; 103
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <run_main+0x70>
    1b04:	08 c1       	rjmp	.+528    	; 0x1d16 <run_main+0x280>
    1b06:	dc c0       	rjmp	.+440    	; 0x1cc0 <run_main+0x22a>
    1b08:	1a 36       	cpi	r17, 0x6A	; 106
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <run_main+0x78>
    1b0c:	bd c0       	rjmp	.+378    	; 0x1c88 <run_main+0x1f2>
    1b0e:	1a 36       	cpi	r17, 0x6A	; 106
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <run_main+0x7e>
    1b12:	a4 c0       	rjmp	.+328    	; 0x1c5c <run_main+0x1c6>
    1b14:	1b 36       	cpi	r17, 0x6B	; 107
    1b16:	09 f4       	brne	.+2      	; 0x1b1a <run_main+0x84>
    1b18:	bc c0       	rjmp	.+376    	; 0x1c92 <run_main+0x1fc>
    1b1a:	1c 36       	cpi	r17, 0x6C	; 108
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <run_main+0x8a>
    1b1e:	fb c0       	rjmp	.+502    	; 0x1d16 <run_main+0x280>
    1b20:	4d c0       	rjmp	.+154    	; 0x1bbc <run_main+0x126>
    1b22:	15 3a       	cpi	r17, 0xA5	; 165
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <run_main+0x92>
    1b26:	dd c0       	rjmp	.+442    	; 0x1ce2 <run_main+0x24c>
    1b28:	16 3a       	cpi	r17, 0xA6	; 166
    1b2a:	78 f4       	brcc	.+30     	; 0x1b4a <run_main+0xb4>
    1b2c:	10 3a       	cpi	r17, 0xA0	; 160
    1b2e:	d1 f0       	breq	.+52     	; 0x1b64 <run_main+0xce>
    1b30:	11 3a       	cpi	r17, 0xA1	; 161
    1b32:	20 f4       	brcc	.+8      	; 0x1b3c <run_main+0xa6>
    1b34:	1c 39       	cpi	r17, 0x9C	; 156
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <run_main+0xa4>
    1b38:	ee c0       	rjmp	.+476    	; 0x1d16 <run_main+0x280>
    1b3a:	1b c0       	rjmp	.+54     	; 0x1b72 <run_main+0xdc>
    1b3c:	13 3a       	cpi	r17, 0xA3	; 163
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <run_main+0xac>
    1b40:	61 c0       	rjmp	.+194    	; 0x1c04 <run_main+0x16e>
    1b42:	14 3a       	cpi	r17, 0xA4	; 164
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <run_main+0xb2>
    1b46:	e7 c0       	rjmp	.+462    	; 0x1d16 <run_main+0x280>
    1b48:	e2 c0       	rjmp	.+452    	; 0x1d0e <run_main+0x278>
    1b4a:	17 3a       	cpi	r17, 0xA7	; 167
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <run_main+0xba>
    1b4e:	d5 c0       	rjmp	.+426    	; 0x1cfa <run_main+0x264>
    1b50:	17 3a       	cpi	r17, 0xA7	; 167
    1b52:	08 f4       	brcc	.+2      	; 0x1b56 <run_main+0xc0>
    1b54:	d7 c0       	rjmp	.+430    	; 0x1d04 <run_main+0x26e>
    1b56:	18 3a       	cpi	r17, 0xA8	; 168
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <run_main+0xc6>
    1b5a:	ca c0       	rjmp	.+404    	; 0x1cf0 <run_main+0x25a>
    1b5c:	1d 3f       	cpi	r17, 0xFD	; 253
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <run_main+0xcc>
    1b60:	da c0       	rjmp	.+436    	; 0x1d16 <run_main+0x280>
    1b62:	27 c0       	rjmp	.+78     	; 0x1bb2 <run_main+0x11c>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    1b64:	10 92 1f 05 	sts	0x051F, r1
	  LIGHT_on();
    1b68:	ac 9a       	sbi	0x15, 4	; 21
	  BEEP_off();
    1b6a:	97 9a       	sbi	0x12, 7	; 18
      time_alarm = 0;
    1b6c:	10 92 27 05 	sts	0x0527, r1
    break;
    1b70:	d2 c0       	rjmp	.+420    	; 0x1d16 <run_main+0x280>
    case EVENT_NOKEY:
      main_mode = MODE_NOKEY;
    1b72:	82 e0       	ldi	r24, 0x02	; 2
    1b74:	80 93 2b 05 	sts	0x052B, r24
	  nokey = 0;
    1b78:	10 92 1f 05 	sts	0x051F, r1
	  LCD_clear();
    1b7c:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    1b80:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
	  old_pState = run_main;
    1b84:	8b e4       	ldi	r24, 0x4B	; 75
    1b86:	9d e0       	ldi	r25, 0x0D	; 13
    1b88:	90 93 6d 05 	sts	0x056D, r25
    1b8c:	80 93 6c 05 	sts	0x056C, r24
      SET_STATE(run_nokey);
    1b90:	8e e8       	ldi	r24, 0x8E	; 142
    1b92:	9e e0       	ldi	r25, 0x0E	; 14
    1b94:	21 c0       	rjmp	.+66     	; 0x1bd8 <run_main+0x142>
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    break;
    case EVENT_KEY_STANDBY:
      SET_STATE(run_stop);
    1b96:	8b e3       	ldi	r24, 0x3B	; 59
    1b98:	9f e0       	ldi	r25, 0x0F	; 15
    1b9a:	90 93 a6 00 	sts	0x00A6, r25
    1b9e:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_SAVE_PARAM, 0, 0);
    1ba2:	85 ea       	ldi	r24, 0xA5	; 165
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    1bb0:	b2 c0       	rjmp	.+356    	; 0x1d16 <run_main+0x280>
    case EVENT_TIMER_SECOND:
      show_lcd_main();
    1bb2:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
	  alarm_beep();
    1bb6:	0e 94 7d 09 	call	0x12fa	; 0x12fa <alarm_beep>
    break;
    1bba:	ad c0       	rjmp	.+346    	; 0x1d16 <run_main+0x280>
    case EVENT_KEY_MUTE:
    case EVENT_KEY_MENU:
      main_mode = MODE_MUTE;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	80 93 2b 05 	sts	0x052B, r24
      LED_MUTE_DUBLE_0;
    1bc2:	df 98       	cbi	0x1b, 7	; 27
	  mute = 1;
    1bc4:	80 93 24 05 	sts	0x0524, r24
      tda7313SetMute(1);
    1bc8:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
	  LCD_clear();
    1bcc:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    1bd0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_mute);
    1bd4:	8d ec       	ldi	r24, 0xCD	; 205
    1bd6:	9e e0       	ldi	r25, 0x0E	; 14
    1bd8:	90 93 a6 00 	sts	0x00A6, r25
    1bdc:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    1be0:	8d ef       	ldi	r24, 0xFD	; 253
    1be2:	e0 cf       	rjmp	.-64     	; 0x1ba4 <run_main+0x10e>
    break;
    case EVENT_KEY_SELECT:
	  in = tda7313GetInput();
    1be4:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <tda7313GetInput>
	  if ( in < INPUT_MAX) tda7313SetInput(in + 1); else tda7313SetInput(0);
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	10 f4       	brcc	.+4      	; 0x1bf0 <run_main+0x15a>
    1bec:	8f 5f       	subi	r24, 0xFF	; 255
    1bee:	01 c0       	rjmp	.+2      	; 0x1bf2 <run_main+0x15c>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <tda7313SetInput>
      RTOS_setTask(EVENT_SAVE_INPUT, TIME_SAVE_PARAM, 0);
    1bf6:	86 ea       	ldi	r24, 0xA6	; 166
    1bf8:	60 ed       	ldi	r22, 0xD0	; 208
    1bfa:	77 e0       	ldi	r23, 0x07	; 7
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
	  mmenu = MM_VOLUME;
    1c04:	10 92 20 05 	sts	0x0520, r1
    1c08:	84 c0       	rjmp	.+264    	; 0x1d12 <run_main+0x27c>
      show_lcd_main();
    break;
    case EVENT_KEY_UP:
      if (fm_mode == VOLUME_MODE) {
    1c0a:	80 91 29 05 	lds	r24, 0x0529
    1c0e:	88 23       	and	r24, r24
    1c10:	69 f4       	brne	.+26     	; 0x1c2c <run_main+0x196>
	    if (mmenu > 0) mmenu--; else mmenu = MMENU_MAX;
    1c12:	80 91 20 05 	lds	r24, 0x0520
    1c16:	88 23       	and	r24, r24
    1c18:	11 f0       	breq	.+4      	; 0x1c1e <run_main+0x188>
    1c1a:	81 50       	subi	r24, 0x01	; 1
    1c1c:	01 c0       	rjmp	.+2      	; 0x1c20 <run_main+0x18a>
    1c1e:	87 e0       	ldi	r24, 0x07	; 7
    1c20:	80 93 20 05 	sts	0x0520, r24
        RTOS_setTask(EVENT_RETURN_VOLUME, TIME_RETURN_VOLUME, 0);
    1c24:	83 ea       	ldi	r24, 0xA3	; 163
    1c26:	60 e1       	ldi	r22, 0x10	; 16
    1c28:	77 e2       	ldi	r23, 0x27	; 39
    1c2a:	45 c0       	rjmp	.+138    	; 0x1cb6 <run_main+0x220>
	  } else {
	    if (channel > 0) channel--; else channel = FM_STATIONS - 1;
    1c2c:	80 91 2a 05 	lds	r24, 0x052A
    1c30:	88 23       	and	r24, r24
    1c32:	11 f0       	breq	.+4      	; 0x1c38 <run_main+0x1a2>
    1c34:	81 50       	subi	r24, 0x01	; 1
    1c36:	01 c0       	rjmp	.+2      	; 0x1c3a <run_main+0x1a4>
    1c38:	8d e1       	ldi	r24, 0x1D	; 29
    1c3a:	80 93 2a 05 	sts	0x052A, r24
	    tuner_SetChan(tuner_GetChan(channel));
    1c3e:	80 91 2a 05 	lds	r24, 0x052A
    1c42:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    1c46:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
        RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    1c4a:	84 ea       	ldi	r24, 0xA4	; 164
    1c4c:	60 e1       	ldi	r22, 0x10	; 16
    1c4e:	77 e2       	ldi	r23, 0x27	; 39
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
        RTOS_setTask(EVENT_SAVE_CHANNEL, TIME_SAVE_PARAM, 0);
    1c58:	88 ea       	ldi	r24, 0xA8	; 168
    1c5a:	2b c0       	rjmp	.+86     	; 0x1cb2 <run_main+0x21c>
	  }
      show_lcd_main();
    break;
    case EVENT_KEY_DOWN:
      if (fm_mode == VOLUME_MODE) {
    1c5c:	80 91 29 05 	lds	r24, 0x0529
    1c60:	88 23       	and	r24, r24
    1c62:	49 f4       	brne	.+18     	; 0x1c76 <run_main+0x1e0>
	    if (mmenu < MMENU_MAX) mmenu++; else mmenu = 0;
    1c64:	80 91 20 05 	lds	r24, 0x0520
    1c68:	87 30       	cpi	r24, 0x07	; 7
    1c6a:	10 f4       	brcc	.+4      	; 0x1c70 <run_main+0x1da>
    1c6c:	8f 5f       	subi	r24, 0xFF	; 255
    1c6e:	d8 cf       	rjmp	.-80     	; 0x1c20 <run_main+0x18a>
    1c70:	10 92 20 05 	sts	0x0520, r1
    1c74:	d7 cf       	rjmp	.-82     	; 0x1c24 <run_main+0x18e>
        RTOS_setTask(EVENT_RETURN_VOLUME, TIME_RETURN_VOLUME, 0);
	  } else {
	    if (channel < FM_STATIONS - 1) channel++; else channel = 0;
    1c76:	80 91 2a 05 	lds	r24, 0x052A
    1c7a:	8d 31       	cpi	r24, 0x1D	; 29
    1c7c:	10 f4       	brcc	.+4      	; 0x1c82 <run_main+0x1ec>
    1c7e:	8f 5f       	subi	r24, 0xFF	; 255
    1c80:	dc cf       	rjmp	.-72     	; 0x1c3a <run_main+0x1a4>
    1c82:	10 92 2a 05 	sts	0x052A, r1
    1c86:	db cf       	rjmp	.-74     	; 0x1c3e <run_main+0x1a8>
    case EVENT_RETURN_VOLUME:
	  mmenu = MM_VOLUME;
      show_lcd_main();
    break;
    case EVENT_KEY_LEFT:
	  tda7313Set_Param_down(mmenu);
    1c88:	80 91 20 05 	lds	r24, 0x0520
    1c8c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <tda7313Set_Param_down>
    1c90:	04 c0       	rjmp	.+8      	; 0x1c9a <run_main+0x204>
      RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
      show_lcd_main();
    break;
    case EVENT_KEY_RIGHT:
      tda7313Set_Param_up(mmenu);
    1c92:	80 91 20 05 	lds	r24, 0x0520
    1c96:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <tda7313Set_Param_up>
      RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
    1c9a:	85 ea       	ldi	r24, 0xA5	; 165
    1c9c:	0a c0       	rjmp	.+20     	; 0x1cb2 <run_main+0x21c>
      show_lcd_main();
    break;
    case EVENT_KEY_LOUDNESS:
	  if (tda7313GetLoudness() == 0) tda7313SetLoudness(1); else tda7313SetLoudness(0);
    1c9e:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <tda7313GetLoudness>
    1ca2:	88 23       	and	r24, r24
    1ca4:	11 f4       	brne	.+4      	; 0x1caa <run_main+0x214>
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	01 c0       	rjmp	.+2      	; 0x1cac <run_main+0x216>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <tda7313SetLoudness>
      RTOS_setTask(EVENT_SAVE_LOUDNESS, TIME_SAVE_PARAM, 0);
    1cb0:	87 ea       	ldi	r24, 0xA7	; 167
    1cb2:	60 ed       	ldi	r22, 0xD0	; 208
    1cb4:	77 e0       	ldi	r23, 0x07	; 7
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	50 e0       	ldi	r21, 0x00	; 0
    1cba:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    1cbe:	29 c0       	rjmp	.+82     	; 0x1d12 <run_main+0x27c>
      show_lcd_main();
    break;
    case EVENT_KEY_SET:
	  if (tda7313GetInput() == IN_3) fm_mode = !fm_mode; 
    1cc0:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <tda7313GetInput>
    1cc4:	82 30       	cpi	r24, 0x02	; 2
    1cc6:	39 f4       	brne	.+14     	; 0x1cd6 <run_main+0x240>
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 91 29 05 	lds	r25, 0x0529
    1cce:	91 11       	cpse	r25, r1
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	80 93 29 05 	sts	0x0529, r24
      show_lcd_main();
    1cd6:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
      RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    1cda:	84 ea       	ldi	r24, 0xA4	; 164
    1cdc:	60 e1       	ldi	r22, 0x10	; 16
    1cde:	77 e2       	ldi	r23, 0x27	; 39
    1ce0:	63 cf       	rjmp	.-314    	; 0x1ba8 <run_main+0x112>
    break;
    case EVENT_SAVE_PARAM:
      tda7313_Save_param(tda7313GetInput(), mmenu);
    1ce2:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <tda7313GetInput>
    1ce6:	60 91 20 05 	lds	r22, 0x0520
    1cea:	0e 94 17 20 	call	0x402e	; 0x402e <tda7313_Save_param>
    break;
    1cee:	13 c0       	rjmp	.+38     	; 0x1d16 <run_main+0x280>
    case EVENT_SAVE_CHANNEL:
      tuner_Save_channel(channel);
    1cf0:	80 91 2a 05 	lds	r24, 0x052A
    1cf4:	0e 94 18 22 	call	0x4430	; 0x4430 <tuner_Save_channel>
    break;
    1cf8:	0e c0       	rjmp	.+28     	; 0x1d16 <run_main+0x280>
    case EVENT_SAVE_LOUDNESS:
      tda7313_Save_Loudness(tda7313GetLoudness());	  
    1cfa:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <tda7313GetLoudness>
    1cfe:	0e 94 03 20 	call	0x4006	; 0x4006 <tda7313_Save_Loudness>
    break;
    1d02:	09 c0       	rjmp	.+18     	; 0x1d16 <run_main+0x280>
    case EVENT_SAVE_INPUT:
      tda7313_Save_Input(tda7313GetInput());	  
    1d04:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <tda7313GetInput>
    1d08:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <tda7313_Save_Input>
    break;
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <run_main+0x280>
    case EVENT_RETURN_MODE:
	  fm_mode = VOLUME_MODE;
    1d0e:	10 92 29 05 	sts	0x0529, r1
      show_lcd_main();
    1d12:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
    break;

  }
}
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	08 95       	ret

00001d1c <run_nokey>:
  }
}
//=============================================================================
void run_nokey(unsigned char event)
{
  switch(event) {
    1d1c:	8c 39       	cpi	r24, 0x9C	; 156
    1d1e:	51 f0       	breq	.+20     	; 0x1d34 <run_nokey+0x18>
    1d20:	8d 39       	cpi	r24, 0x9D	; 157
    1d22:	18 f4       	brcc	.+6      	; 0x1d2a <run_nokey+0xe>
    1d24:	84 36       	cpi	r24, 0x64	; 100
    1d26:	c1 f5       	brne	.+112    	; 0x1d98 <run_nokey+0x7c>
    1d28:	1f c0       	rjmp	.+62     	; 0x1d68 <run_nokey+0x4c>
    1d2a:	80 3a       	cpi	r24, 0xA0	; 160
    1d2c:	29 f0       	breq	.+10     	; 0x1d38 <run_nokey+0x1c>
    1d2e:	8d 3f       	cpi	r24, 0xFD	; 253
    1d30:	99 f5       	brne	.+102    	; 0x1d98 <run_nokey+0x7c>
    1d32:	2c c0       	rjmp	.+88     	; 0x1d8c <run_nokey+0x70>
    case EVENT_NOKEY:
	  LIGHT_off();
    1d34:	ac 98       	cbi	0x15, 4	; 21
    break;
    1d36:	08 95       	ret
    case EVENT_KEY_PRESS:
      time_alarm = 0;
    1d38:	10 92 27 05 	sts	0x0527, r1
	  nokey = 0;
    1d3c:	10 92 1f 05 	sts	0x051F, r1
      main_mode = MODE_MAIN;
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	80 93 2b 05 	sts	0x052B, r24
	  LIGHT_on();
    1d46:	ac 9a       	sbi	0x15, 4	; 21
	  LCD_clear();
    1d48:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    1d4c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
      SET_STATE(old_pState);
    1d50:	80 91 6c 05 	lds	r24, 0x056C
    1d54:	90 91 6d 05 	lds	r25, 0x056D
    1d58:	90 93 a6 00 	sts	0x00A6, r25
    1d5c:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_main();
    1d60:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
	  BEEP_off();
    1d64:	97 9a       	sbi	0x12, 7	; 18
    break;
    1d66:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    1d68:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    1d6c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_stop);
    1d70:	8b e3       	ldi	r24, 0x3B	; 59
    1d72:	9f e0       	ldi	r25, 0x0F	; 15
    1d74:	90 93 a6 00 	sts	0x00A6, r25
    1d78:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_SAVE_PARAM, 0, 0);
    1d7c:	85 ea       	ldi	r24, 0xA5	; 165
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	70 e0       	ldi	r23, 0x00	; 0
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    1d8a:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_bigtime();
    1d8c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <show_bigtime>
	  show_temperature();
    1d90:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <show_temperature>
	  alarm_beep();
    1d94:	0e 94 7d 09 	call	0x12fa	; 0x12fa <alarm_beep>
    1d98:	08 95       	ret

00001d9a <run_mute>:
  }
}
//=============================================================================
void run_mute(unsigned char event)
{
  switch(event) {
    1d9a:	8c 39       	cpi	r24, 0x9C	; 156
    1d9c:	99 f0       	breq	.+38     	; 0x1dc4 <run_mute+0x2a>
    1d9e:	8d 39       	cpi	r24, 0x9D	; 157
    1da0:	28 f4       	brcc	.+10     	; 0x1dac <run_mute+0x12>
    1da2:	85 36       	cpi	r24, 0x65	; 101
    1da4:	89 f0       	breq	.+34     	; 0x1dc8 <run_mute+0x2e>
    1da6:	8c 36       	cpi	r24, 0x6C	; 108
    1da8:	59 f5       	brne	.+86     	; 0x1e00 <run_mute+0x66>
    1daa:	0e c0       	rjmp	.+28     	; 0x1dc8 <run_mute+0x2e>
    1dac:	80 3a       	cpi	r24, 0xA0	; 160
    1dae:	19 f0       	breq	.+6      	; 0x1db6 <run_mute+0x1c>
    1db0:	8d 3f       	cpi	r24, 0xFD	; 253
    1db2:	31 f5       	brne	.+76     	; 0x1e00 <run_mute+0x66>
    1db4:	1f c0       	rjmp	.+62     	; 0x1df4 <run_mute+0x5a>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    1db6:	10 92 1f 05 	sts	0x051F, r1
	  LIGHT_on();
    1dba:	ac 9a       	sbi	0x15, 4	; 21
	  BEEP_off();
    1dbc:	97 9a       	sbi	0x12, 7	; 18
      time_alarm = 0;
    1dbe:	10 92 27 05 	sts	0x0527, r1
    break;
    1dc2:	08 95       	ret
    case EVENT_NOKEY:
	  LIGHT_off();
    1dc4:	ac 98       	cbi	0x15, 4	; 21
    break;
    1dc6:	08 95       	ret
    case EVENT_KEY_MUTE:
    case EVENT_KEY_MENU:
	  LIGHT_on();
    1dc8:	ac 9a       	sbi	0x15, 4	; 21
	  nokey = 0;
    1dca:	10 92 1f 05 	sts	0x051F, r1
	  LCD_clear();
    1dce:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    1dd2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
      LED_MUTE_DUBLE_1;
    1dd6:	df 9a       	sbi	0x1b, 7	; 27
	  mute = 0;
    1dd8:	10 92 24 05 	sts	0x0524, r1
      tda7313SetMute(0);
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
      SET_STATE(run_main);
    1de2:	8b e4       	ldi	r24, 0x4B	; 75
    1de4:	9d e0       	ldi	r25, 0x0D	; 13
    1de6:	90 93 a6 00 	sts	0x00A6, r25
    1dea:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_main();
    1dee:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
    break;
    1df2:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_bigtime();
    1df4:	0e 94 2c 0b 	call	0x1658	; 0x1658 <show_bigtime>
	  show_temperature();
    1df8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <show_temperature>
	  alarm_beep();
    1dfc:	0e 94 7d 09 	call	0x12fa	; 0x12fa <alarm_beep>
    1e00:	08 95       	ret

00001e02 <volume_step_down>:
  }
  sei();
}
//=============================================================================
void volume_step_down(void)
{
    1e02:	ff 92       	push	r15
    1e04:	0f 93       	push	r16
    1e06:	1f 93       	push	r17
  uint8_t vol_down, i;
  vol_down = tda7313Get_Param(TDA_VOLUME);
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    1e0e:	08 2f       	mov	r16, r24
  show_lcd_main();
    1e10:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
  cli();
    1e14:	f8 94       	cli
  for(i = vol_down; i > 0; i--)
    1e16:	10 2f       	mov	r17, r16
    1e18:	23 c0       	rjmp	.+70     	; 0x1e60 <volume_step_down+0x5e>
  {
    tda7313Set_Param_down(TDA_VOLUME);
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <tda7313Set_Param_down>
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    1e20:	82 e1       	ldi	r24, 0x12	; 18
    1e22:	62 e0       	ldi	r22, 0x02	; 2
    1e24:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1e28:	80 91 20 05 	lds	r24, 0x0520
    1e2c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	62 e0       	ldi	r22, 0x02	; 2
    1e34:	40 e3       	ldi	r20, 0x30	; 48
    1e36:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	63 e0       	ldi	r22, 0x03	; 3
    1e3e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1e42:	80 91 20 05 	lds	r24, 0x0520
    1e46:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    1e4a:	f8 2e       	mov	r15, r24
    1e4c:	80 91 20 05 	lds	r24, 0x0520
    1e50:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <tda7313Get_Max_Param>
    1e54:	68 2f       	mov	r22, r24
    1e56:	8f 2d       	mov	r24, r15
    1e58:	44 e1       	ldi	r20, 0x14	; 20
    1e5a:	0e 94 82 01 	call	0x304	; 0x304 <LCD_progress_bar>
{
  uint8_t vol_down, i;
  vol_down = tda7313Get_Param(TDA_VOLUME);
  show_lcd_main();
  cli();
  for(i = vol_down; i > 0; i--)
    1e5e:	11 50       	subi	r17, 0x01	; 1
    1e60:	11 23       	and	r17, r17
    1e62:	d9 f6       	brne	.-74     	; 0x1e1a <volume_step_down+0x18>
  {
    tda7313Set_Param_down(TDA_VOLUME);
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
  }
  tda7313Set_Param_no_send(TDA_VOLUME, vol_down);
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	60 2f       	mov	r22, r16
    1e68:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <tda7313Set_Param_no_send>
  sei();
    1e6c:	78 94       	sei
}
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ff 90       	pop	r15
    1e74:	08 95       	ret

00001e76 <run_stop>:
  }
}
//=============================================================================
void run_stop(unsigned char event)
{
  switch(event) {
    1e76:	85 3a       	cpi	r24, 0xA5	; 165
    1e78:	51 f0       	breq	.+20     	; 0x1e8e <run_stop+0x18>
    1e7a:	86 3a       	cpi	r24, 0xA6	; 166
    1e7c:	18 f4       	brcc	.+6      	; 0x1e84 <run_stop+0xe>
    1e7e:	89 39       	cpi	r24, 0x99	; 153
    1e80:	f1 f5       	brne	.+124    	; 0x1efe <run_stop+0x88>
    1e82:	0c c0       	rjmp	.+24     	; 0x1e9c <run_stop+0x26>
    1e84:	8a 3a       	cpi	r24, 0xAA	; 170
    1e86:	01 f1       	breq	.+64     	; 0x1ec8 <run_stop+0x52>
    1e88:	8c 3a       	cpi	r24, 0xAC	; 172
    1e8a:	c9 f5       	brne	.+114    	; 0x1efe <run_stop+0x88>
    1e8c:	11 c0       	rjmp	.+34     	; 0x1eb0 <run_stop+0x3a>
    case EVENT_SAVE_PARAM:
      main_mode = MODE_STANDBY;
    1e8e:	10 92 2b 05 	sts	0x052B, r1
	  LED_STANDBY_on();
    1e92:	c0 98       	cbi	0x18, 0	; 24
      RTOS_setTask(EVENT_SHOW_VOL_DOWN, 0, 0);
    1e94:	89 e9       	ldi	r24, 0x99	; 153
    1e96:	60 e0       	ldi	r22, 0x00	; 0
    1e98:	70 e0       	ldi	r23, 0x00	; 0
    1e9a:	11 c0       	rjmp	.+34     	; 0x1ebe <run_stop+0x48>
    break;
    case EVENT_SHOW_VOL_DOWN:
	  if (mute == 0) {
    1e9c:	80 91 24 05 	lds	r24, 0x0524
    1ea0:	88 23       	and	r24, r24
    1ea2:	11 f4       	brne	.+4      	; 0x1ea8 <run_stop+0x32>
	    volume_step_down();
    1ea4:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <volume_step_down>
      }
      RTOS_setTask(EVENT_SET_AS_WAIT_OFF, 100, 0);
    1ea8:	8c ea       	ldi	r24, 0xAC	; 172
    1eaa:	64 e6       	ldi	r22, 0x64	; 100
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	07 c0       	rjmp	.+14     	; 0x1ebe <run_stop+0x48>
    break;
    case EVENT_SET_AS_WAIT_OFF:
      tda7313SetMute(1);
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
	  LED_AC_WAIT_off();
    1eb6:	c3 98       	cbi	0x18, 3	; 24
      RTOS_setTask(EVENT_SET_STB_OUT_OFF, 400, 0);
    1eb8:	8a ea       	ldi	r24, 0xAA	; 170
    1eba:	60 e9       	ldi	r22, 0x90	; 144
    1ebc:	71 e0       	ldi	r23, 0x01	; 1
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	50 e0       	ldi	r21, 0x00	; 0
    1ec2:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    1ec6:	08 95       	ret
    case EVENT_SET_STB_OUT_OFF:
      LED_STANDBY_on();
    1ec8:	c0 98       	cbi	0x18, 0	; 24
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    1eca:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	11 f4       	brne	.+4      	; 0x1ed6 <run_stop+0x60>
    1ed2:	c2 9a       	sbi	0x18, 2	; 24
    1ed4:	01 c0       	rjmp	.+2      	; 0x1ed8 <run_stop+0x62>
    1ed6:	c2 98       	cbi	0x18, 2	; 24
	  LCD_clear();
    1ed8:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    1edc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
	  mmenu = MM_VOLUME;
    1ee0:	10 92 20 05 	sts	0x0520, r1
      SET_STATE(run_standby);
    1ee4:	8d e1       	ldi	r24, 0x1D	; 29
    1ee6:	91 e1       	ldi	r25, 0x11	; 17
    1ee8:	90 93 a6 00 	sts	0x00A6, r25
    1eec:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    1ef0:	8d ef       	ldi	r24, 0xFD	; 253
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    1efe:	08 95       	ret

00001f00 <volume_step_up>:
    }
  }
}
//=============================================================================
void volume_step_up(void)
{
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
  unsigned char i;
  vol_up = tda7313Get_Param(TDA_VOLUME);
    1f04:	80 e0       	ldi	r24, 0x00	; 0
    1f06:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    1f0a:	80 93 6a 05 	sts	0x056A, r24
  tda7313Set_Param(TDA_VOLUME, 0);
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <tda7313Set_Param>
  show_lcd_main();
    1f16:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
  cli();
    1f1a:	f8 94       	cli
  for(i = 0; i < vol_up; i++)
    1f1c:	10 e0       	ldi	r17, 0x00	; 0
    1f1e:	23 c0       	rjmp	.+70     	; 0x1f66 <volume_step_up+0x66>
  {
    tda7313Set_Param_up(TDA_VOLUME);
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <tda7313Set_Param_up>
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    1f26:	82 e1       	ldi	r24, 0x12	; 18
    1f28:	62 e0       	ldi	r22, 0x02	; 2
    1f2a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1f2e:	80 91 20 05 	lds	r24, 0x0520
    1f32:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	62 e0       	ldi	r22, 0x02	; 2
    1f3a:	40 e3       	ldi	r20, 0x30	; 48
    1f3c:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	63 e0       	ldi	r22, 0x03	; 3
    1f44:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1f48:	80 91 20 05 	lds	r24, 0x0520
    1f4c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    1f50:	08 2f       	mov	r16, r24
    1f52:	80 91 20 05 	lds	r24, 0x0520
    1f56:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <tda7313Get_Max_Param>
    1f5a:	68 2f       	mov	r22, r24
    1f5c:	80 2f       	mov	r24, r16
    1f5e:	44 e1       	ldi	r20, 0x14	; 20
    1f60:	0e 94 82 01 	call	0x304	; 0x304 <LCD_progress_bar>
  unsigned char i;
  vol_up = tda7313Get_Param(TDA_VOLUME);
  tda7313Set_Param(TDA_VOLUME, 0);
  show_lcd_main();
  cli();
  for(i = 0; i < vol_up; i++)
    1f64:	1f 5f       	subi	r17, 0xFF	; 255
    1f66:	80 91 6a 05 	lds	r24, 0x056A
    1f6a:	18 17       	cp	r17, r24
    1f6c:	c8 f2       	brcs	.-78     	; 0x1f20 <volume_step_up+0x20>
  {
    tda7313Set_Param_up(TDA_VOLUME);
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
  }
  sei();
    1f6e:	78 94       	sei
}
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	08 95       	ret

00001f76 <run_start>:
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
    1f76:	89 3a       	cpi	r24, 0xA9	; 169
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <run_start+0x6>
    1f7a:	42 c0       	rjmp	.+132    	; 0x2000 <run_start+0x8a>
    1f7c:	8a 3a       	cpi	r24, 0xAA	; 170
    1f7e:	20 f4       	brcc	.+8      	; 0x1f88 <run_start+0x12>
    1f80:	8a 39       	cpi	r24, 0x9A	; 154
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <run_start+0x10>
    1f84:	74 c0       	rjmp	.+232    	; 0x206e <run_start+0xf8>
    1f86:	5a c0       	rjmp	.+180    	; 0x203c <run_start+0xc6>
    1f88:	8b 3a       	cpi	r24, 0xAB	; 171
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <run_start+0x18>
    1f8c:	4e c0       	rjmp	.+156    	; 0x202a <run_start+0xb4>
    1f8e:	8d 3a       	cpi	r24, 0xAD	; 173
    1f90:	09 f0       	breq	.+2      	; 0x1f94 <run_start+0x1e>
    1f92:	6d c0       	rjmp	.+218    	; 0x206e <run_start+0xf8>
    case EVENT_LOAD_PARAM:
	  LCD_SetXY(0, 2); LCD_space(20);
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	62 e0       	ldi	r22, 0x02	; 2
    1f98:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1f9c:	84 e1       	ldi	r24, 0x14	; 20
    1f9e:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
	  LCD_SetXY(0, 3); LCD_space(20);
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	63 e0       	ldi	r22, 0x03	; 3
    1fa6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1faa:	84 e1       	ldi	r24, 0x14	; 20
    1fac:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
      LCD_SetXY(3, 3); LCD_puts(MSG_LOAD_PARAM);
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	63 e0       	ldi	r22, 0x03	; 3
    1fb4:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1fb8:	85 ed       	ldi	r24, 0xD5	; 213
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
      tuner_SetChan(tuner_GetChan(channel));
    1fc0:	80 91 2a 05 	lds	r24, 0x052A
    1fc4:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    1fc8:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
	  fault_on = 0; 
    1fcc:	10 92 28 05 	sts	0x0528, r1
      rc5_buffer_init();
    1fd0:	0e 94 8f 09 	call	0x131e	; 0x131e <rc5_buffer_init>
	  load_rc5code();
    1fd4:	0e 94 28 0a 	call	0x1450	; 0x1450 <load_rc5code>
	  load_alarm_param();
    1fd8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <load_alarm_param>
      load_max_temperature();
    1fdc:	0e 94 a2 0a 	call	0x1544	; 0x1544 <load_max_temperature>
      load_stb_out();
    1fe0:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
      load_as_wait();
    1fe4:	0e 94 92 0a 	call	0x1524	; 0x1524 <load_as_wait>
	  tuner_Load_all_stations();
    1fe8:	0e 94 01 22 	call	0x4402	; 0x4402 <tuner_Load_all_stations>
      channel = tuner_Load_channel();
    1fec:	0e 94 1e 22 	call	0x443c	; 0x443c <tuner_Load_channel>
    1ff0:	80 93 2a 05 	sts	0x052A, r24
      tda7313_Load_all_param();
    1ff4:	0e 94 72 20 	call	0x40e4	; 0x40e4 <tda7313_Load_all_param>
      RTOS_setTask(EVENT_SET_STB_OUT_ON, 0, 0);
    1ff8:	89 ea       	ldi	r24, 0xA9	; 169
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	70 e0       	ldi	r23, 0x00	; 0
    1ffe:	19 c0       	rjmp	.+50     	; 0x2032 <run_start+0xbc>
    break;
    case EVENT_SET_STB_OUT_ON:
      if (load_stb_out() == 1) { LED_STB_OUT_0; } else { LED_STB_OUT_1; }
    2000:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	11 f4       	brne	.+4      	; 0x200c <run_start+0x96>
    2008:	c2 98       	cbi	0x18, 2	; 24
    200a:	01 c0       	rjmp	.+2      	; 0x200e <run_start+0x98>
    200c:	c2 9a       	sbi	0x18, 2	; 24
      RTOS_setTask(EVENT_SET_AS_WAIT_ON, (as_wait * 1000), 0);
    200e:	20 91 76 05 	lds	r18, 0x0576
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	88 ee       	ldi	r24, 0xE8	; 232
    2016:	93 e0       	ldi	r25, 0x03	; 3
    2018:	28 9f       	mul	r18, r24
    201a:	b0 01       	movw	r22, r0
    201c:	29 9f       	mul	r18, r25
    201e:	70 0d       	add	r23, r0
    2020:	38 9f       	mul	r19, r24
    2022:	70 0d       	add	r23, r0
    2024:	11 24       	eor	r1, r1
    2026:	8b ea       	ldi	r24, 0xAB	; 171
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <run_start+0xbc>
    break;
    case EVENT_SET_AS_WAIT_ON:
	  LED_AC_WAIT_on();
    202a:	c3 9a       	sbi	0x18, 3	; 24
      RTOS_setTask(EVENT_SHOW_VOL_UP, 300, 0);
    202c:	8a e9       	ldi	r24, 0x9A	; 154
    202e:	6c e2       	ldi	r22, 0x2C	; 44
    2030:	71 e0       	ldi	r23, 0x01	; 1
    2032:	40 e0       	ldi	r20, 0x00	; 0
    2034:	50 e0       	ldi	r21, 0x00	; 0
    2036:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    203a:	08 95       	ret
    case EVENT_SHOW_VOL_UP:
      LED_STANDBY_off();
    203c:	c0 9a       	sbi	0x18, 0	; 24
	  LCD_clear();
    203e:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    2042:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
	  mute = 0;
    2046:	10 92 24 05 	sts	0x0524, r1
      tda7313SetMute(0);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
      volume_step_up();
    2050:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <volume_step_up>
      main_mode = MODE_MAIN;
    2054:	83 e0       	ldi	r24, 0x03	; 3
    2056:	80 93 2b 05 	sts	0x052B, r24
      show_lcd_main();
    205a:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
	  nokey = 0;
    205e:	10 92 1f 05 	sts	0x051F, r1
      SET_STATE(run_main);
    2062:	8b e4       	ldi	r24, 0x4B	; 75
    2064:	9d e0       	ldi	r25, 0x0D	; 13
    2066:	90 93 a6 00 	sts	0x00A6, r25
    206a:	80 93 a5 00 	sts	0x00A5, r24
    206e:	08 95       	ret

00002070 <show_lcd_option>:
    break;
  }
}
//=============================================================================
void show_lcd_option(void)
{
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
  uint8_t i;
  LCD_SetXY(0, 0); LCD_puts(MSG_MENU_OPTIONS);
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2080:	85 ee       	ldi	r24, 0xE5	; 229
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(0, 2); LCD_puts(optionmenu[omenu]);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	62 e0       	ldi	r22, 0x02	; 2
    208c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2090:	e0 91 21 05 	lds	r30, 0x0521
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	ef 53       	subi	r30, 0x3F	; 63
    209c:	fd 4f       	sbci	r31, 0xFD	; 253
    209e:	80 81       	ld	r24, Z
    20a0:	91 81       	ldd	r25, Z+1	; 0x01
    20a2:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  switch(omenu) {
    20a6:	80 91 21 05 	lds	r24, 0x0521
    20aa:	83 30       	cpi	r24, 0x03	; 3
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <show_lcd_option+0x40>
    20ae:	7c c0       	rjmp	.+248    	; 0x21a8 <show_lcd_option+0x138>
    20b0:	84 30       	cpi	r24, 0x04	; 4
    20b2:	28 f4       	brcc	.+10     	; 0x20be <show_lcd_option+0x4e>
    20b4:	81 30       	cpi	r24, 0x01	; 1
    20b6:	b9 f0       	breq	.+46     	; 0x20e6 <show_lcd_option+0x76>
    20b8:	82 30       	cpi	r24, 0x02	; 2
    20ba:	f8 f4       	brcc	.+62     	; 0x20fa <show_lcd_option+0x8a>
    20bc:	0d c0       	rjmp	.+26     	; 0x20d8 <show_lcd_option+0x68>
    20be:	85 30       	cpi	r24, 0x05	; 5
    20c0:	09 f4       	brne	.+2      	; 0x20c4 <show_lcd_option+0x54>
    20c2:	8f c0       	rjmp	.+286    	; 0x21e2 <show_lcd_option+0x172>
    20c4:	85 30       	cpi	r24, 0x05	; 5
    20c6:	08 f4       	brcc	.+2      	; 0x20ca <show_lcd_option+0x5a>
    20c8:	7c c0       	rjmp	.+248    	; 0x21c2 <show_lcd_option+0x152>
    20ca:	86 30       	cpi	r24, 0x06	; 6
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <show_lcd_option+0x60>
    20ce:	99 c0       	rjmp	.+306    	; 0x2202 <show_lcd_option+0x192>
    20d0:	87 30       	cpi	r24, 0x07	; 7
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <show_lcd_option+0x66>
    20d4:	9b c0       	rjmp	.+310    	; 0x220c <show_lcd_option+0x19c>
    20d6:	97 c0       	rjmp	.+302    	; 0x2206 <show_lcd_option+0x196>
    case OM_SET_TIME:
	  LCD_SetXY(10, 2); RTC_print_time(); LCD_space(3);
    20d8:	8a e0       	ldi	r24, 0x0A	; 10
    20da:	62 e0       	ldi	r22, 0x02	; 2
    20dc:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    20e0:	0e 94 17 05 	call	0xa2e	; 0xa2e <RTC_print_time>
    20e4:	7c c0       	rjmp	.+248    	; 0x21de <show_lcd_option+0x16e>
    break;
    case OM_SET_DATE:
	  LCD_SetXY(10, 2); RTC_print_date(); LCD_dat(' ');
    20e6:	8a e0       	ldi	r24, 0x0A	; 10
    20e8:	62 e0       	ldi	r22, 0x02	; 2
    20ea:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    20ee:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <RTC_print_date>
    20f2:	80 e2       	ldi	r24, 0x20	; 32
    20f4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    break;
    20f8:	89 c0       	rjmp	.+274    	; 0x220c <show_lcd_option+0x19c>
    case OM_SET_ALARM:
	  LCD_SetXY(17, 1); LCD_puts(alarm_onoff[a_onoff]);
    20fa:	81 e1       	ldi	r24, 0x11	; 17
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2102:	e0 91 6b 05 	lds	r30, 0x056B
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	ee 0f       	add	r30, r30
    210a:	ff 1f       	adc	r31, r31
    210c:	e7 52       	subi	r30, 0x27	; 39
    210e:	fd 4f       	sbci	r31, 0xFD	; 253
    2110:	80 81       	ld	r24, Z
    2112:	91 81       	ldd	r25, Z+1	; 0x01
    2114:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
	  LCD_SetXY(12, 2);
    2118:	8c e0       	ldi	r24, 0x0C	; 12
    211a:	62 e0       	ldi	r22, 0x02	; 2
    211c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    2120:	80 91 a2 05 	lds	r24, 0x05A2
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	62 e0       	ldi	r22, 0x02	; 2
    2128:	40 e3       	ldi	r20, 0x30	; 48
    212a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    212e:	8a e3       	ldi	r24, 0x3A	; 58
    2130:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2134:	80 91 73 05 	lds	r24, 0x0573
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	62 e0       	ldi	r22, 0x02	; 2
    213c:	40 e3       	ldi	r20, 0x30	; 48
    213e:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2142:	8a e3       	ldi	r24, 0x3A	; 58
    2144:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	62 e0       	ldi	r22, 0x02	; 2
    214e:	40 e3       	ldi	r20, 0x30	; 48
    2150:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2154:	80 e2       	ldi	r24, 0x20	; 32
    2156:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  LCD_SetXY(0, 3);
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	63 e0       	ldi	r22, 0x03	; 3
    215e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2162:	00 e5       	ldi	r16, 0x50	; 80
    2164:	11 e0       	ldi	r17, 0x01	; 1
    2166:	c0 e0       	ldi	r28, 0x00	; 0
    2168:	d0 e0       	ldi	r29, 0x00	; 0
      for(i = 0; i < 7; i++) {
	    if (BitIsSet(a_wday, i)) {
    216a:	80 91 71 05 	lds	r24, 0x0571
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0c 2e       	mov	r0, r28
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <show_lcd_option+0x108>
    2174:	95 95       	asr	r25
    2176:	87 95       	ror	r24
    2178:	0a 94       	dec	r0
    217a:	e2 f7       	brpl	.-8      	; 0x2174 <show_lcd_option+0x104>
    217c:	80 ff       	sbrs	r24, 0
    217e:	04 c0       	rjmp	.+8      	; 0x2188 <show_lcd_option+0x118>
		  LCD_puts(den_dw[i]); 
    2180:	f8 01       	movw	r30, r16
    2182:	80 81       	ld	r24, Z
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	02 c0       	rjmp	.+4      	; 0x218c <show_lcd_option+0x11c>
	    } else {
		  LCD_puts("  ");
    2188:	86 ef       	ldi	r24, 0xF6	; 246
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
		}
		if (i < 6) LCD_dat(':');
    2190:	c6 30       	cpi	r28, 0x06	; 6
    2192:	19 f0       	breq	.+6      	; 0x219a <show_lcd_option+0x12a>
    2194:	8a e3       	ldi	r24, 0x3A	; 58
    2196:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    219a:	21 96       	adiw	r28, 0x01	; 1
    219c:	0e 5f       	subi	r16, 0xFE	; 254
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    case OM_SET_ALARM:
	  LCD_SetXY(17, 1); LCD_puts(alarm_onoff[a_onoff]);
	  LCD_SetXY(12, 2);
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
	  LCD_SetXY(0, 3);
      for(i = 0; i < 7; i++) {
    21a0:	c7 30       	cpi	r28, 0x07	; 7
    21a2:	d1 05       	cpc	r29, r1
    21a4:	11 f7       	brne	.-60     	; 0x216a <show_lcd_option+0xfa>
    21a6:	32 c0       	rjmp	.+100    	; 0x220c <show_lcd_option+0x19c>
		}
		if (i < 6) LCD_dat(':');
	  }
    break;
    case OM_SET_STANBY_OUT:
	  LCD_SetXY(16, 2); print_dec(stb_out, 1, ' '); LCD_space(4);
    21a8:	80 e1       	ldi	r24, 0x10	; 16
    21aa:	62 e0       	ldi	r22, 0x02	; 2
    21ac:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    21b0:	80 91 74 05 	lds	r24, 0x0574
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	61 e0       	ldi	r22, 0x01	; 1
    21b8:	40 e2       	ldi	r20, 0x20	; 32
    21ba:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    21be:	84 e0       	ldi	r24, 0x04	; 4
    21c0:	23 c0       	rjmp	.+70     	; 0x2208 <show_lcd_option+0x198>
    break;
    case OM_SET_TEMP_MAX:
	  LCD_SetXY(14, 2); print_dec(max_temp, 2, ' '); LCD_dat('C'); LCD_space(3);
    21c2:	8e e0       	ldi	r24, 0x0E	; 14
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    21ca:	80 91 a1 05 	lds	r24, 0x05A1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	62 e0       	ldi	r22, 0x02	; 2
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    21d8:	83 e4       	ldi	r24, 0x43	; 67
    21da:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    21de:	83 e0       	ldi	r24, 0x03	; 3
    21e0:	13 c0       	rjmp	.+38     	; 0x2208 <show_lcd_option+0x198>
    break;
    case OM_SET_AS_TIME_ON:
	  LCD_SetXY(15, 2); print_dec(as_wait, 2, ' '); LCD_puts(MSG_SEC); 
    21e2:	8f e0       	ldi	r24, 0x0F	; 15
    21e4:	62 e0       	ldi	r22, 0x02	; 2
    21e6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    21ea:	80 91 76 05 	lds	r24, 0x0576
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	62 e0       	ldi	r22, 0x02	; 2
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    21f8:	89 ef       	ldi	r24, 0xF9	; 249
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    break;
    2200:	05 c0       	rjmp	.+10     	; 0x220c <show_lcd_option+0x19c>
    case OM_SET_FM_STATIONS:
	  LCD_space(5);
    2202:	85 e0       	ldi	r24, 0x05	; 5
    2204:	01 c0       	rjmp	.+2      	; 0x2208 <show_lcd_option+0x198>
    break;
    case OM_SET_RC5_CODE:
	  LCD_space(7);
    2206:	87 e0       	ldi	r24, 0x07	; 7
    2208:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    break;
  }
  if (omenu != OM_SET_ALARM) { 
    220c:	80 91 21 05 	lds	r24, 0x0521
    2210:	82 30       	cpi	r24, 0x02	; 2
    2212:	71 f0       	breq	.+28     	; 0x2230 <show_lcd_option+0x1c0>
    LCD_SetXY(0, 3); LCD_space(20);
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	63 e0       	ldi	r22, 0x03	; 3
    2218:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    221c:	84 e1       	ldi	r24, 0x14	; 20
    221e:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    LCD_SetXY(16, 1); LCD_space(4);
    2222:	80 e1       	ldi	r24, 0x10	; 16
    2224:	61 e0       	ldi	r22, 0x01	; 1
    2226:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
  }
}
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	08 95       	ret

0000223a <run_standby>:
  }
}
//=============================================================================
void run_standby(unsigned char event)
{
  switch(event) {
    223a:	81 3a       	cpi	r24, 0xA1	; 161
    223c:	41 f1       	breq	.+80     	; 0x228e <run_standby+0x54>
    223e:	82 3a       	cpi	r24, 0xA2	; 162
    2240:	98 f4       	brcc	.+38     	; 0x2268 <run_standby+0x2e>
    2242:	87 39       	cpi	r24, 0x97	; 151
    2244:	09 f4       	brne	.+2      	; 0x2248 <run_standby+0xe>
    2246:	4e c0       	rjmp	.+156    	; 0x22e4 <run_standby+0xaa>
    2248:	88 39       	cpi	r24, 0x98	; 152
    224a:	38 f4       	brcc	.+14     	; 0x225a <run_standby+0x20>
    224c:	84 36       	cpi	r24, 0x64	; 100
    224e:	09 f4       	brne	.+2      	; 0x2252 <run_standby+0x18>
    2250:	9a c0       	rjmp	.+308    	; 0x2386 <run_standby+0x14c>
    2252:	8c 36       	cpi	r24, 0x6C	; 108
    2254:	09 f0       	breq	.+2      	; 0x2258 <run_standby+0x1e>
    2256:	d3 c0       	rjmp	.+422    	; 0x23fe <run_standby+0x1c4>
    2258:	be c0       	rjmp	.+380    	; 0x23d6 <run_standby+0x19c>
    225a:	8c 39       	cpi	r24, 0x9C	; 156
    225c:	09 f4       	brne	.+2      	; 0x2260 <run_standby+0x26>
    225e:	80 c0       	rjmp	.+256    	; 0x2360 <run_standby+0x126>
    2260:	80 3a       	cpi	r24, 0xA0	; 160
    2262:	09 f0       	breq	.+2      	; 0x2266 <run_standby+0x2c>
    2264:	cc c0       	rjmp	.+408    	; 0x23fe <run_standby+0x1c4>
    2266:	7e c0       	rjmp	.+252    	; 0x2364 <run_standby+0x12a>
    2268:	82 3b       	cpi	r24, 0xB2	; 178
    226a:	09 f4       	brne	.+2      	; 0x226e <run_standby+0x34>
    226c:	a0 c0       	rjmp	.+320    	; 0x23ae <run_standby+0x174>
    226e:	83 3b       	cpi	r24, 0xB3	; 179
    2270:	38 f4       	brcc	.+14     	; 0x2280 <run_standby+0x46>
    2272:	8e 3a       	cpi	r24, 0xAE	; 174
    2274:	09 f4       	brne	.+2      	; 0x2278 <run_standby+0x3e>
    2276:	47 c0       	rjmp	.+142    	; 0x2306 <run_standby+0xcc>
    2278:	81 3b       	cpi	r24, 0xB1	; 177
    227a:	09 f0       	breq	.+2      	; 0x227e <run_standby+0x44>
    227c:	c0 c0       	rjmp	.+384    	; 0x23fe <run_standby+0x1c4>
    227e:	91 c0       	rjmp	.+290    	; 0x23a2 <run_standby+0x168>
    2280:	83 3b       	cpi	r24, 0xB3	; 179
    2282:	09 f4       	brne	.+2      	; 0x2286 <run_standby+0x4c>
    2284:	9a c0       	rjmp	.+308    	; 0x23ba <run_standby+0x180>
    2286:	8d 3f       	cpi	r24, 0xFD	; 253
    2288:	09 f0       	breq	.+2      	; 0x228c <run_standby+0x52>
    228a:	b9 c0       	rjmp	.+370    	; 0x23fe <run_standby+0x1c4>
    228c:	70 c0       	rjmp	.+224    	; 0x236e <run_standby+0x134>
    case EVENT_START:
	  fault_on = 0; 
    228e:	10 92 28 05 	sts	0x0528, r1
      LCD_SetXY(2, 0); LCD_puts(MSG_LOGO1);
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    229a:	8d ef       	ldi	r24, 0xFD	; 253
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
      LCD_SetXY(4, 1); LCD_puts(MSG_LOGO2);
    22a2:	84 e0       	ldi	r24, 0x04	; 4
    22a4:	61 e0       	ldi	r22, 0x01	; 1
    22a6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    22aa:	8d e0       	ldi	r24, 0x0D	; 13
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
      tda7313SetMute(1);
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
      rc5_buffer_init();
    22b8:	0e 94 8f 09 	call	0x131e	; 0x131e <rc5_buffer_init>
	  load_rc5code();
    22bc:	0e 94 28 0a 	call	0x1450	; 0x1450 <load_rc5code>
	  load_alarm_param();
    22c0:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <load_alarm_param>
      load_max_temperature();
    22c4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <load_max_temperature>
      load_stb_out();
    22c8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
      load_as_wait();
    22cc:	0e 94 92 0a 	call	0x1524	; 0x1524 <load_as_wait>
	  tuner_Load_all_stations();
    22d0:	0e 94 01 22 	call	0x4402	; 0x4402 <tuner_Load_all_stations>
      channel = tuner_Load_channel();
    22d4:	0e 94 1e 22 	call	0x443c	; 0x443c <tuner_Load_channel>
    22d8:	80 93 2a 05 	sts	0x052A, r24
      tda7313_Load_all_param();
    22dc:	0e 94 72 20 	call	0x40e4	; 0x40e4 <tda7313_Load_all_param>
      RTOS_setTask(EVENT_SHOW_DS_CNT, 500, 0);
    22e0:	87 e9       	ldi	r24, 0x97	; 151
    22e2:	68 c0       	rjmp	.+208    	; 0x23b4 <run_standby+0x17a>
    break;
    case EVENT_SHOW_DS_CNT:
      LCD_SetXY(1, 3); LCD_puts(MSG_DS_FOUND); print_dec(ds18x20GetDevCount(), 2,'0');
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	63 e0       	ldi	r22, 0x03	; 3
    22e8:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    22ec:	89 e1       	ldi	r24, 0x19	; 25
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    22f4:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <ds18x20GetDevCount>
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	62 e0       	ldi	r22, 0x02	; 2
    22fc:	40 e3       	ldi	r20, 0x30	; 48
    22fe:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
      RTOS_setTask(EVENT_START_TASK, 500, 0);
    2302:	8e ea       	ldi	r24, 0xAE	; 174
    2304:	57 c0       	rjmp	.+174    	; 0x23b4 <run_standby+0x17a>
    break;
    case EVENT_START_TASK:
      RTOS_setTaskFunc(set_blink, 0, BLINK_TIME);       // моргание
    2306:	85 ed       	ldi	r24, 0xD5	; 213
    2308:	99 e1       	ldi	r25, 0x19	; 25
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	48 e5       	ldi	r20, 0x58	; 88
    2310:	52 e0       	ldi	r21, 0x02	; 2
    2312:	0e 94 80 07 	call	0xf00	; 0xf00 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(KBD_scan, 0, KBD_SCAN_TIME);		// запускаем опрос кнопок
    2316:	89 e6       	ldi	r24, 0x69	; 105
    2318:	96 e0       	ldi	r25, 0x06	; 6
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	45 e0       	ldi	r20, 0x05	; 5
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	0e 94 80 07 	call	0xf00	; 0xf00 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(ENC_scan, 0, ENC_SCAN_TIME);		// запускаем опрос енкодера
    2326:	82 ec       	ldi	r24, 0xC2	; 194
    2328:	96 e0       	ldi	r25, 0x06	; 6
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	70 e0       	ldi	r23, 0x00	; 0
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	0e 94 80 07 	call	0xf00	; 0xf00 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(RC5_scan, 0, RC5_SCAN_TIME);		// запускаем опрос RC5
    2336:	8c ea       	ldi	r24, 0xAC	; 172
    2338:	99 e0       	ldi	r25, 0x09	; 9
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	70 e0       	ldi	r23, 0x00	; 0
    233e:	45 e0       	ldi	r20, 0x05	; 5
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	0e 94 80 07 	call	0xf00	; 0xf00 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(DS18x20_scan, 0, 0);      		// запускаем опрос датчиков температуры
    2346:	81 ee       	ldi	r24, 0xE1	; 225
    2348:	98 e0       	ldi	r25, 0x08	; 8
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	70 e0       	ldi	r23, 0x00	; 0
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	0e 94 80 07 	call	0xf00	; 0xf00 <RTOS_setTaskFunc>
	  LCD_clear();
    2356:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    235a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
    break;
    235e:	08 95       	ret
    case EVENT_NOKEY:
	  LIGHT_off();
    2360:	ac 98       	cbi	0x15, 4	; 21
    break;
    2362:	08 95       	ret
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2364:	10 92 1f 05 	sts	0x051F, r1
	  LIGHT_on();
    2368:	ac 9a       	sbi	0x15, 4	; 21
	  BEEP_off();
    236a:	97 9a       	sbi	0x12, 7	; 18
    break;
    236c:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_bigtime();
    236e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <show_bigtime>
      if (fault_on == 0) {
    2372:	80 91 28 05 	lds	r24, 0x0528
    2376:	88 23       	and	r24, r24
    2378:	09 f0       	breq	.+2      	; 0x237c <run_standby+0x142>
    237a:	41 c0       	rjmp	.+130    	; 0x23fe <run_standby+0x1c4>
	    show_temperature();
    237c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <show_temperature>
	    alarm_beep();
    2380:	0e 94 7d 09 	call	0x12fa	; 0x12fa <alarm_beep>
    2384:	08 95       	ret
	  }
    break;
    case EVENT_KEY_STANDBY:
	  if (fault_on == 0) {
    2386:	80 91 28 05 	lds	r24, 0x0528
    238a:	88 23       	and	r24, r24
    238c:	41 f4       	brne	.+16     	; 0x239e <run_standby+0x164>
        SET_STATE(run_start);
    238e:	8b eb       	ldi	r24, 0xBB	; 187
    2390:	9f e0       	ldi	r25, 0x0F	; 15
    2392:	90 93 a6 00 	sts	0x00A6, r25
    2396:	80 93 a5 00 	sts	0x00A5, r24
        RTOS_setTask(EVENT_LOAD_PARAM, 0, 0);
    239a:	8d ea       	ldi	r24, 0xAD	; 173
    239c:	15 c0       	rjmp	.+42     	; 0x23c8 <run_standby+0x18e>
	  } else {
	    RTOS_setTask(EVENT_START_IMPULS, 0, 0);
    239e:	81 eb       	ldi	r24, 0xB1	; 177
    23a0:	13 c0       	rjmp	.+38     	; 0x23c8 <run_standby+0x18e>
	  }
    break;
    case EVENT_START_IMPULS:
      LED_FAULT_IMPULS0_on();
    23a2:	ae 9a       	sbi	0x15, 6	; 21
      LED_FAULT_IMPULS1_on();
    23a4:	ad 98       	cbi	0x15, 5	; 21
      RTOS_setTask(EVENT_STOP_IMPULS, 1000, 0);
    23a6:	82 eb       	ldi	r24, 0xB2	; 178
    23a8:	68 ee       	ldi	r22, 0xE8	; 232
    23aa:	73 e0       	ldi	r23, 0x03	; 3
    23ac:	0f c0       	rjmp	.+30     	; 0x23cc <run_standby+0x192>
    break;
    case EVENT_STOP_IMPULS:
      LED_FAULT_IMPULS0_off();
    23ae:	ae 98       	cbi	0x15, 6	; 21
      LED_FAULT_IMPULS1_off();
    23b0:	ad 9a       	sbi	0x15, 5	; 21
      RTOS_setTask(EVENT_CHECK_FAULT, 500, 0);
    23b2:	83 eb       	ldi	r24, 0xB3	; 179
    23b4:	64 ef       	ldi	r22, 0xF4	; 244
    23b6:	71 e0       	ldi	r23, 0x01	; 1
    23b8:	09 c0       	rjmp	.+18     	; 0x23cc <run_standby+0x192>
    break;
    case EVENT_CHECK_FAULT:
      if (check_fault() == 0) {
    23ba:	0e 94 bd 0a 	call	0x157a	; 0x157a <check_fault>
    23be:	88 23       	and	r24, r24
    23c0:	f1 f4       	brne	.+60     	; 0x23fe <run_standby+0x1c4>
        fault_on = 0;
    23c2:	10 92 28 05 	sts	0x0528, r1
        RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    23c6:	8d ef       	ldi	r24, 0xFD	; 253
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    23d4:	08 95       	ret
      }
    break;
    case EVENT_KEY_MENU:
	  LCD_clear();
    23d6:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    23da:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
      tda7313SetMute(1);
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
	  omenu = OM_SET_TIME;
    23e4:	10 92 21 05 	sts	0x0521, r1
	  main_mode = MODE_OPTIONS;
    23e8:	84 e0       	ldi	r24, 0x04	; 4
    23ea:	80 93 2b 05 	sts	0x052B, r24
      SET_STATE(run_option);
    23ee:	89 e0       	ldi	r24, 0x09	; 9
    23f0:	9b e1       	ldi	r25, 0x1B	; 27
    23f2:	90 93 a6 00 	sts	0x00A6, r25
    23f6:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    23fa:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
    23fe:	08 95       	ret

00002400 <show_lcd_edit_time>:
  }
}
//=============================================================================
void show_lcd_edit_time(void)
{
  LCD_SetXY(10, 2);
    2400:	8a e0       	ldi	r24, 0x0A	; 10
    2402:	62 e0       	ldi	r22, 0x02	; 2
    2404:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (nedit == 0)
    2408:	80 91 23 05 	lds	r24, 0x0523
    240c:	88 23       	and	r24, r24
    240e:	31 f5       	brne	.+76     	; 0x245c <show_lcd_edit_time+0x5c>
  {
	if (blinks == 1) print_dec(hh, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    2410:	80 91 1e 05 	lds	r24, 0x051E
    2414:	81 30       	cpi	r24, 0x01	; 1
    2416:	41 f4       	brne	.+16     	; 0x2428 <show_lcd_edit_time+0x28>
    2418:	80 91 a0 05 	lds	r24, 0x05A0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	62 e0       	ldi	r22, 0x02	; 2
    2420:	40 e3       	ldi	r20, 0x30	; 48
    2422:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2426:	06 c0       	rjmp	.+12     	; 0x2434 <show_lcd_edit_time+0x34>
    2428:	80 e2       	ldi	r24, 0x20	; 32
    242a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    242e:	80 e2       	ldi	r24, 0x20	; 32
    2430:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_dat(':'); print_dec(mm, 2, '0'); LCD_dat(':'); print_dec(0, 2, '0');
    2434:	8a e3       	ldi	r24, 0x3A	; 58
    2436:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    243a:	80 91 69 05 	lds	r24, 0x0569
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	62 e0       	ldi	r22, 0x02	; 2
    2442:	40 e3       	ldi	r20, 0x30	; 48
    2444:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2448:	8a e3       	ldi	r24, 0x3A	; 58
    244a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	62 e0       	ldi	r22, 0x02	; 2
    2454:	40 e3       	ldi	r20, 0x30	; 48
    2456:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    245a:	08 95       	ret
  } else if (nedit == 1) {
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	29 f5       	brne	.+74     	; 0x24aa <show_lcd_edit_time+0xaa>
    print_dec(hh, 2, '0'); LCD_dat(':');
    2460:	80 91 a0 05 	lds	r24, 0x05A0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	62 e0       	ldi	r22, 0x02	; 2
    2468:	40 e3       	ldi	r20, 0x30	; 48
    246a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    246e:	8a e3       	ldi	r24, 0x3A	; 58
    2470:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	if (blinks == 1) print_dec(mm, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    2474:	80 91 1e 05 	lds	r24, 0x051E
    2478:	81 30       	cpi	r24, 0x01	; 1
    247a:	41 f4       	brne	.+16     	; 0x248c <show_lcd_edit_time+0x8c>
    247c:	80 91 69 05 	lds	r24, 0x0569
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	62 e0       	ldi	r22, 0x02	; 2
    2484:	40 e3       	ldi	r20, 0x30	; 48
    2486:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    248a:	06 c0       	rjmp	.+12     	; 0x2498 <show_lcd_edit_time+0x98>
    248c:	80 e2       	ldi	r24, 0x20	; 32
    248e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2492:	80 e2       	ldi	r24, 0x20	; 32
    2494:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_dat(':'); print_dec(0, 2, '0');
    2498:	8a e3       	ldi	r24, 0x3A	; 58
    249a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	62 e0       	ldi	r22, 0x02	; 2
    24a4:	40 e3       	ldi	r20, 0x30	; 48
    24a6:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    24aa:	08 95       	ret

000024ac <run_edit_time>:
  }
}
//=============================================================================
void run_edit_time(unsigned char event)
{
  switch(event) {
    24ac:	8b 36       	cpi	r24, 0x6B	; 107
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <run_edit_time+0x6>
    24b0:	51 c0       	rjmp	.+162    	; 0x2554 <run_edit_time+0xa8>
    24b2:	8c 36       	cpi	r24, 0x6C	; 108
    24b4:	48 f4       	brcc	.+18     	; 0x24c8 <run_edit_time+0x1c>
    24b6:	87 36       	cpi	r24, 0x67	; 103
    24b8:	09 f4       	brne	.+2      	; 0x24bc <run_edit_time+0x10>
    24ba:	6c c0       	rjmp	.+216    	; 0x2594 <run_edit_time+0xe8>
    24bc:	8a 36       	cpi	r24, 0x6A	; 106
    24be:	59 f1       	breq	.+86     	; 0x2516 <run_edit_time+0x6a>
    24c0:	84 36       	cpi	r24, 0x64	; 100
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <run_edit_time+0x1a>
    24c4:	8d c0       	rjmp	.+282    	; 0x25e0 <run_edit_time+0x134>
    24c6:	15 c0       	rjmp	.+42     	; 0x24f2 <run_edit_time+0x46>
    24c8:	8c 39       	cpi	r24, 0x9C	; 156
    24ca:	61 f0       	breq	.+24     	; 0x24e4 <run_edit_time+0x38>
    24cc:	8d 39       	cpi	r24, 0x9D	; 157
    24ce:	20 f4       	brcc	.+8      	; 0x24d8 <run_edit_time+0x2c>
    24d0:	8c 36       	cpi	r24, 0x6C	; 108
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <run_edit_time+0x2a>
    24d4:	85 c0       	rjmp	.+266    	; 0x25e0 <run_edit_time+0x134>
    24d6:	79 c0       	rjmp	.+242    	; 0x25ca <run_edit_time+0x11e>
    24d8:	80 3a       	cpi	r24, 0xA0	; 160
    24da:	41 f0       	breq	.+16     	; 0x24ec <run_edit_time+0x40>
    24dc:	8d 3f       	cpi	r24, 0xFD	; 253
    24de:	09 f0       	breq	.+2      	; 0x24e2 <run_edit_time+0x36>
    24e0:	7f c0       	rjmp	.+254    	; 0x25e0 <run_edit_time+0x134>
    24e2:	70 c0       	rjmp	.+224    	; 0x25c4 <run_edit_time+0x118>
    case EVENT_NOKEY:
	  nokey = 0;
    24e4:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    24e8:	8c e6       	ldi	r24, 0x6C	; 108
    24ea:	0e c0       	rjmp	.+28     	; 0x2508 <run_edit_time+0x5c>
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    24ec:	10 92 1f 05 	sts	0x051F, r1
    break;
    24f0:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    24f2:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    24f6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    24fa:	8d e1       	ldi	r24, 0x1D	; 29
    24fc:	91 e1       	ldi	r25, 0x11	; 17
    24fe:	90 93 a6 00 	sts	0x00A6, r25
    2502:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    2506:	8d ef       	ldi	r24, 0xFD	; 253
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    2514:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_time();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_time();
    251c:	0e 94 00 12 	call	0x2400	; 0x2400 <show_lcd_edit_time>
	  if (nedit == 0) { if (hh > 0) hh--;  else hh = 23; } 
    2520:	80 91 23 05 	lds	r24, 0x0523
    2524:	88 23       	and	r24, r24
    2526:	51 f4       	brne	.+20     	; 0x253c <run_edit_time+0x90>
    2528:	80 91 a0 05 	lds	r24, 0x05A0
    252c:	88 23       	and	r24, r24
    252e:	11 f0       	breq	.+4      	; 0x2534 <run_edit_time+0x88>
    2530:	81 50       	subi	r24, 0x01	; 1
    2532:	01 c0       	rjmp	.+2      	; 0x2536 <run_edit_time+0x8a>
    2534:	87 e1       	ldi	r24, 0x17	; 23
    2536:	80 93 a0 05 	sts	0x05A0, r24
    253a:	28 c0       	rjmp	.+80     	; 0x258c <run_edit_time+0xe0>
	  if (nedit == 1) { if (mm > 0) mm--; else mm = 59; }
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	31 f5       	brne	.+76     	; 0x258c <run_edit_time+0xe0>
    2540:	80 91 69 05 	lds	r24, 0x0569
    2544:	88 23       	and	r24, r24
    2546:	11 f0       	breq	.+4      	; 0x254c <run_edit_time+0xa0>
    2548:	81 50       	subi	r24, 0x01	; 1
    254a:	01 c0       	rjmp	.+2      	; 0x254e <run_edit_time+0xa2>
    254c:	8b e3       	ldi	r24, 0x3B	; 59
    254e:	80 93 69 05 	sts	0x0569, r24
    2552:	1c c0       	rjmp	.+56     	; 0x258c <run_edit_time+0xe0>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_time();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_time();
    255a:	0e 94 00 12 	call	0x2400	; 0x2400 <show_lcd_edit_time>
	  if (nedit == 0) { if (hh < 23) hh++;  else hh = 0; } 
    255e:	80 91 23 05 	lds	r24, 0x0523
    2562:	88 23       	and	r24, r24
    2564:	49 f4       	brne	.+18     	; 0x2578 <run_edit_time+0xcc>
    2566:	80 91 a0 05 	lds	r24, 0x05A0
    256a:	87 31       	cpi	r24, 0x17	; 23
    256c:	10 f4       	brcc	.+4      	; 0x2572 <run_edit_time+0xc6>
    256e:	8f 5f       	subi	r24, 0xFF	; 255
    2570:	e2 cf       	rjmp	.-60     	; 0x2536 <run_edit_time+0x8a>
    2572:	10 92 a0 05 	sts	0x05A0, r1
    2576:	0a c0       	rjmp	.+20     	; 0x258c <run_edit_time+0xe0>
	  if (nedit == 1) { if (mm < 59) mm++; else mm = 0; }
    2578:	81 30       	cpi	r24, 0x01	; 1
    257a:	41 f4       	brne	.+16     	; 0x258c <run_edit_time+0xe0>
    257c:	80 91 69 05 	lds	r24, 0x0569
    2580:	8b 33       	cpi	r24, 0x3B	; 59
    2582:	10 f4       	brcc	.+4      	; 0x2588 <run_edit_time+0xdc>
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	e3 cf       	rjmp	.-58     	; 0x254e <run_edit_time+0xa2>
    2588:	10 92 69 05 	sts	0x0569, r1
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    258c:	8d ef       	ldi	r24, 0xFD	; 253
    258e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <RTOS_deleteTask>
    2592:	18 c0       	rjmp	.+48     	; 0x25c4 <run_edit_time+0x118>
      show_lcd_edit_time();
    break;
    case EVENT_KEY_SET:
	  if (nedit < 1) {
    2594:	80 91 23 05 	lds	r24, 0x0523
    2598:	88 23       	and	r24, r24
    259a:	21 f4       	brne	.+8      	; 0x25a4 <run_edit_time+0xf8>
	    nedit++;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	80 93 23 05 	sts	0x0523, r24
    25a2:	10 c0       	rjmp	.+32     	; 0x25c4 <run_edit_time+0x118>
	  } else {
	    nedit = 0;
    25a4:	10 92 23 05 	sts	0x0523, r1
        RTC_set_time(hh, mm, 0);
    25a8:	80 91 a0 05 	lds	r24, 0x05A0
    25ac:	60 91 69 05 	lds	r22, 0x0569
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	0e 94 27 04 	call	0x84e	; 0x84e <RTC_set_time>
        RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    25b6:	8c e6       	ldi	r24, 0x6C	; 108
    25b8:	60 e0       	ldi	r22, 0x00	; 0
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	50 e0       	ldi	r21, 0x00	; 0
    25c0:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
	  }
      show_lcd_edit_time();
    25c4:	0e 94 00 12 	call	0x2400	; 0x2400 <show_lcd_edit_time>
    break;
    25c8:	08 95       	ret
    case EVENT_KEY_MENU:
	  edit_rc5 = 1;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	80 93 26 05 	sts	0x0526, r24
      SET_STATE(run_option);
    25d0:	89 e0       	ldi	r24, 0x09	; 9
    25d2:	9b e1       	ldi	r25, 0x1B	; 27
    25d4:	90 93 a6 00 	sts	0x00A6, r25
    25d8:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    25dc:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
    25e0:	08 95       	ret

000025e2 <show_lcd_edit_date>:
  }
}
//=============================================================================
void show_lcd_edit_date(void)
{
  LCD_SetXY(10, 2);
    25e2:	8a e0       	ldi	r24, 0x0A	; 10
    25e4:	62 e0       	ldi	r22, 0x02	; 2
    25e6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (nedit == 0)
    25ea:	80 91 23 05 	lds	r24, 0x0523
    25ee:	88 23       	and	r24, r24
    25f0:	b1 f4       	brne	.+44     	; 0x261e <show_lcd_edit_date+0x3c>
  {
	if (blinks == 1) print_dec(dd, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    25f2:	80 91 1e 05 	lds	r24, 0x051E
    25f6:	81 30       	cpi	r24, 0x01	; 1
    25f8:	41 f4       	brne	.+16     	; 0x260a <show_lcd_edit_date+0x28>
    25fa:	80 91 72 05 	lds	r24, 0x0572
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	62 e0       	ldi	r22, 0x02	; 2
    2602:	40 e3       	ldi	r20, 0x30	; 48
    2604:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2608:	06 c0       	rjmp	.+12     	; 0x2616 <show_lcd_edit_date+0x34>
    260a:	80 e2       	ldi	r24, 0x20	; 32
    260c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2610:	80 e2       	ldi	r24, 0x20	; 32
    2612:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_dat('/'); print_dec(ms, 2, '0'); LCD_dat('/'); print_dec(2000 + yy, 4, '0');
    2616:	8f e2       	ldi	r24, 0x2F	; 47
    2618:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    261c:	10 c0       	rjmp	.+32     	; 0x263e <show_lcd_edit_date+0x5c>
  } else if (nedit == 1) {
    261e:	81 30       	cpi	r24, 0x01	; 1
    2620:	01 f5       	brne	.+64     	; 0x2662 <show_lcd_edit_date+0x80>
    print_dec(dd, 2, '0'); LCD_dat('/');
    2622:	80 91 72 05 	lds	r24, 0x0572
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	62 e0       	ldi	r22, 0x02	; 2
    262a:	40 e3       	ldi	r20, 0x30	; 48
    262c:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2630:	8f e2       	ldi	r24, 0x2F	; 47
    2632:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	if (blinks == 1) print_dec(ms, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    2636:	80 91 1e 05 	lds	r24, 0x051E
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	41 f4       	brne	.+16     	; 0x264e <show_lcd_edit_date+0x6c>
    263e:	80 91 70 05 	lds	r24, 0x0570
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	62 e0       	ldi	r22, 0x02	; 2
    2646:	40 e3       	ldi	r20, 0x30	; 48
    2648:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    264c:	06 c0       	rjmp	.+12     	; 0x265a <show_lcd_edit_date+0x78>
    264e:	80 e2       	ldi	r24, 0x20	; 32
    2650:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2654:	80 e2       	ldi	r24, 0x20	; 32
    2656:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_dat('/'); print_dec(2000 + yy, 4, '0');
    265a:	8f e2       	ldi	r24, 0x2F	; 47
    265c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2660:	1a c0       	rjmp	.+52     	; 0x2696 <show_lcd_edit_date+0xb4>
  } else if (nedit == 2) {
    2662:	82 30       	cpi	r24, 0x02	; 2
    2664:	29 f5       	brne	.+74     	; 0x26b0 <show_lcd_edit_date+0xce>
    print_dec(dd, 2, '0'); LCD_dat('/'); print_dec(ms, 2, '0'); LCD_dat('/');
    2666:	80 91 72 05 	lds	r24, 0x0572
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	62 e0       	ldi	r22, 0x02	; 2
    266e:	40 e3       	ldi	r20, 0x30	; 48
    2670:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2674:	8f e2       	ldi	r24, 0x2F	; 47
    2676:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    267a:	80 91 70 05 	lds	r24, 0x0570
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	62 e0       	ldi	r22, 0x02	; 2
    2682:	40 e3       	ldi	r20, 0x30	; 48
    2684:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2688:	8f e2       	ldi	r24, 0x2F	; 47
    268a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	if (blinks == 1) print_dec(2000 + yy, 4, '0'); else { LCD_space(4); }
    268e:	80 91 1e 05 	lds	r24, 0x051E
    2692:	81 30       	cpi	r24, 0x01	; 1
    2694:	51 f4       	brne	.+20     	; 0x26aa <show_lcd_edit_date+0xc8>
    2696:	80 91 9d 05 	lds	r24, 0x059D
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	80 53       	subi	r24, 0x30	; 48
    269e:	98 4f       	sbci	r25, 0xF8	; 248
    26a0:	64 e0       	ldi	r22, 0x04	; 4
    26a2:	40 e3       	ldi	r20, 0x30	; 48
    26a4:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    26a8:	08 95       	ret
    26aa:	84 e0       	ldi	r24, 0x04	; 4
    26ac:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    26b0:	08 95       	ret

000026b2 <run_edit_date>:
  }
}
//=============================================================================
//=============================================================================
void run_edit_date(unsigned char event)
{
    26b2:	1f 93       	push	r17
  switch(event) {
    26b4:	8b 36       	cpi	r24, 0x6B	; 107
    26b6:	09 f4       	brne	.+2      	; 0x26ba <run_edit_date+0x8>
    26b8:	58 c0       	rjmp	.+176    	; 0x276a <run_edit_date+0xb8>
    26ba:	8c 36       	cpi	r24, 0x6C	; 108
    26bc:	48 f4       	brcc	.+18     	; 0x26d0 <run_edit_date+0x1e>
    26be:	87 36       	cpi	r24, 0x67	; 103
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <run_edit_date+0x12>
    26c2:	7c c0       	rjmp	.+248    	; 0x27bc <run_edit_date+0x10a>
    26c4:	8a 36       	cpi	r24, 0x6A	; 106
    26c6:	51 f1       	breq	.+84     	; 0x271c <run_edit_date+0x6a>
    26c8:	84 36       	cpi	r24, 0x64	; 100
    26ca:	09 f0       	breq	.+2      	; 0x26ce <run_edit_date+0x1c>
    26cc:	9b c0       	rjmp	.+310    	; 0x2804 <run_edit_date+0x152>
    26ce:	1b c0       	rjmp	.+54     	; 0x2706 <run_edit_date+0x54>
    26d0:	8c 39       	cpi	r24, 0x9C	; 156
    26d2:	61 f0       	breq	.+24     	; 0x26ec <run_edit_date+0x3a>
    26d4:	8d 39       	cpi	r24, 0x9D	; 157
    26d6:	20 f4       	brcc	.+8      	; 0x26e0 <run_edit_date+0x2e>
    26d8:	8c 36       	cpi	r24, 0x6C	; 108
    26da:	09 f0       	breq	.+2      	; 0x26de <run_edit_date+0x2c>
    26dc:	93 c0       	rjmp	.+294    	; 0x2804 <run_edit_date+0x152>
    26de:	8a c0       	rjmp	.+276    	; 0x27f4 <run_edit_date+0x142>
    26e0:	80 3a       	cpi	r24, 0xA0	; 160
    26e2:	71 f0       	breq	.+28     	; 0x2700 <run_edit_date+0x4e>
    26e4:	8d 3f       	cpi	r24, 0xFD	; 253
    26e6:	09 f0       	breq	.+2      	; 0x26ea <run_edit_date+0x38>
    26e8:	8d c0       	rjmp	.+282    	; 0x2804 <run_edit_date+0x152>
    26ea:	81 c0       	rjmp	.+258    	; 0x27ee <run_edit_date+0x13c>
    case EVENT_NOKEY:
	  nokey = 0;
    26ec:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    26f0:	8c e6       	ldi	r24, 0x6C	; 108
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	70 e0       	ldi	r23, 0x00	; 0
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    26fe:	82 c0       	rjmp	.+260    	; 0x2804 <run_edit_date+0x152>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2700:	10 92 1f 05 	sts	0x051F, r1
    break;
    2704:	7f c0       	rjmp	.+254    	; 0x2804 <run_edit_date+0x152>
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    2706:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    270a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    270e:	8d e1       	ldi	r24, 0x1D	; 29
    2710:	91 e1       	ldi	r25, 0x11	; 17
    2712:	90 93 a6 00 	sts	0x00A6, r25
    2716:	80 93 a5 00 	sts	0x00A5, r24
    break;
    271a:	74 c0       	rjmp	.+232    	; 0x2804 <run_edit_date+0x152>
    case EVENT_TIMER_SECOND:
      show_lcd_edit_date();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_date();
    2722:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <show_lcd_edit_date>
	  if (nedit == 0) { if (dd > 0) dd--;  else dd = 31; } 
    2726:	80 91 23 05 	lds	r24, 0x0523
    272a:	88 23       	and	r24, r24
    272c:	51 f4       	brne	.+20     	; 0x2742 <run_edit_date+0x90>
    272e:	80 91 72 05 	lds	r24, 0x0572
    2732:	88 23       	and	r24, r24
    2734:	11 f0       	breq	.+4      	; 0x273a <run_edit_date+0x88>
    2736:	81 50       	subi	r24, 0x01	; 1
    2738:	01 c0       	rjmp	.+2      	; 0x273c <run_edit_date+0x8a>
    273a:	8f e1       	ldi	r24, 0x1F	; 31
    273c:	80 93 72 05 	sts	0x0572, r24
    2740:	39 c0       	rjmp	.+114    	; 0x27b4 <run_edit_date+0x102>
	  if (nedit == 1) { if (ms > 0) ms--; else ms = 12; }
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	51 f4       	brne	.+20     	; 0x275a <run_edit_date+0xa8>
    2746:	80 91 70 05 	lds	r24, 0x0570
    274a:	88 23       	and	r24, r24
    274c:	11 f0       	breq	.+4      	; 0x2752 <run_edit_date+0xa0>
    274e:	81 50       	subi	r24, 0x01	; 1
    2750:	01 c0       	rjmp	.+2      	; 0x2754 <run_edit_date+0xa2>
    2752:	8c e0       	ldi	r24, 0x0C	; 12
    2754:	80 93 70 05 	sts	0x0570, r24
    2758:	2d c0       	rjmp	.+90     	; 0x27b4 <run_edit_date+0x102>
	  if (nedit == 2) { if (yy > 0) yy--; }
    275a:	82 30       	cpi	r24, 0x02	; 2
    275c:	59 f5       	brne	.+86     	; 0x27b4 <run_edit_date+0x102>
    275e:	80 91 9d 05 	lds	r24, 0x059D
    2762:	88 23       	and	r24, r24
    2764:	39 f1       	breq	.+78     	; 0x27b4 <run_edit_date+0x102>
    2766:	81 50       	subi	r24, 0x01	; 1
    2768:	23 c0       	rjmp	.+70     	; 0x27b0 <run_edit_date+0xfe>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_date();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    276a:	11 e0       	ldi	r17, 0x01	; 1
    276c:	10 93 1e 05 	sts	0x051E, r17
      show_lcd_edit_date();
    2770:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <show_lcd_edit_date>
	  if (nedit == 0) { if (dd < 31) dd++;  else dd = 1; } 
    2774:	80 91 23 05 	lds	r24, 0x0523
    2778:	88 23       	and	r24, r24
    277a:	49 f4       	brne	.+18     	; 0x278e <run_edit_date+0xdc>
    277c:	80 91 72 05 	lds	r24, 0x0572
    2780:	8f 31       	cpi	r24, 0x1F	; 31
    2782:	10 f4       	brcc	.+4      	; 0x2788 <run_edit_date+0xd6>
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	da cf       	rjmp	.-76     	; 0x273c <run_edit_date+0x8a>
    2788:	10 93 72 05 	sts	0x0572, r17
    278c:	13 c0       	rjmp	.+38     	; 0x27b4 <run_edit_date+0x102>
	  if (nedit == 1) { if (ms < 12) ms++; else ms = 1; }
    278e:	81 30       	cpi	r24, 0x01	; 1
    2790:	41 f4       	brne	.+16     	; 0x27a2 <run_edit_date+0xf0>
    2792:	90 91 70 05 	lds	r25, 0x0570
    2796:	9c 30       	cpi	r25, 0x0C	; 12
    2798:	e8 f6       	brcc	.-70     	; 0x2754 <run_edit_date+0xa2>
    279a:	9f 5f       	subi	r25, 0xFF	; 255
    279c:	90 93 70 05 	sts	0x0570, r25
    27a0:	09 c0       	rjmp	.+18     	; 0x27b4 <run_edit_date+0x102>
	  if (nedit == 2) { if (yy < TIME_YEAR_MAX) yy++; }
    27a2:	82 30       	cpi	r24, 0x02	; 2
    27a4:	39 f4       	brne	.+14     	; 0x27b4 <run_edit_date+0x102>
    27a6:	80 91 9d 05 	lds	r24, 0x059D
    27aa:	83 36       	cpi	r24, 0x63	; 99
    27ac:	18 f4       	brcc	.+6      	; 0x27b4 <run_edit_date+0x102>
    27ae:	8f 5f       	subi	r24, 0xFF	; 255
    27b0:	80 93 9d 05 	sts	0x059D, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    27b4:	8d ef       	ldi	r24, 0xFD	; 253
    27b6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <RTOS_deleteTask>
    27ba:	19 c0       	rjmp	.+50     	; 0x27ee <run_edit_date+0x13c>
      show_lcd_edit_date();
    break;
    case EVENT_KEY_SET:
	  if (nedit < 2) {
    27bc:	80 91 23 05 	lds	r24, 0x0523
    27c0:	82 30       	cpi	r24, 0x02	; 2
    27c2:	20 f4       	brcc	.+8      	; 0x27cc <run_edit_date+0x11a>
	    nedit++;
    27c4:	8f 5f       	subi	r24, 0xFF	; 255
    27c6:	80 93 23 05 	sts	0x0523, r24
    27ca:	11 c0       	rjmp	.+34     	; 0x27ee <run_edit_date+0x13c>
	  } else {
	    nedit = 0;
    27cc:	10 92 23 05 	sts	0x0523, r1
        RTC_set_date(dd, ms, yy);
    27d0:	80 91 72 05 	lds	r24, 0x0572
    27d4:	60 91 70 05 	lds	r22, 0x0570
    27d8:	40 91 9d 05 	lds	r20, 0x059D
    27dc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <RTC_set_date>
        RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    27e0:	8c e6       	ldi	r24, 0x6C	; 108
    27e2:	60 e0       	ldi	r22, 0x00	; 0
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	40 e0       	ldi	r20, 0x00	; 0
    27e8:	50 e0       	ldi	r21, 0x00	; 0
    27ea:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
	  }
      show_lcd_edit_date();
    27ee:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <show_lcd_edit_date>
    break;
    27f2:	08 c0       	rjmp	.+16     	; 0x2804 <run_edit_date+0x152>
    case EVENT_KEY_MENU:
      SET_STATE(run_option);
    27f4:	89 e0       	ldi	r24, 0x09	; 9
    27f6:	9b e1       	ldi	r25, 0x1B	; 27
    27f8:	90 93 a6 00 	sts	0x00A6, r25
    27fc:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2800:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
    break;
  }
}
    2804:	1f 91       	pop	r17
    2806:	08 95       	ret

00002808 <show_lcd_edit_alarm>:
    break;
  }
}
//=============================================================================
void show_lcd_edit_alarm(void)
{
    2808:	0f 93       	push	r16
    280a:	1f 93       	push	r17
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
  uint8_t i;
  switch(nedit) {
    2810:	80 91 23 05 	lds	r24, 0x0523
    2814:	82 30       	cpi	r24, 0x02	; 2
    2816:	09 f4       	brne	.+2      	; 0x281a <show_lcd_edit_alarm+0x12>
    2818:	42 c0       	rjmp	.+132    	; 0x289e <show_lcd_edit_alarm+0x96>
    281a:	83 30       	cpi	r24, 0x03	; 3
    281c:	30 f4       	brcc	.+12     	; 0x282a <show_lcd_edit_alarm+0x22>
    281e:	88 23       	and	r24, r24
    2820:	41 f0       	breq	.+16     	; 0x2832 <show_lcd_edit_alarm+0x2a>
    2822:	81 30       	cpi	r24, 0x01	; 1
    2824:	09 f0       	breq	.+2      	; 0x2828 <show_lcd_edit_alarm+0x20>
    2826:	d9 c0       	rjmp	.+434    	; 0x29da <show_lcd_edit_alarm+0x1d2>
    2828:	20 c0       	rjmp	.+64     	; 0x286a <show_lcd_edit_alarm+0x62>
    282a:	8a 30       	cpi	r24, 0x0A	; 10
    282c:	08 f0       	brcs	.+2      	; 0x2830 <show_lcd_edit_alarm+0x28>
    282e:	d5 c0       	rjmp	.+426    	; 0x29da <show_lcd_edit_alarm+0x1d2>
    2830:	63 c0       	rjmp	.+198    	; 0x28f8 <show_lcd_edit_alarm+0xf0>
    case ALARM_ONOFF:
      LCD_SetXY(17, 1); 
    2832:	81 e1       	ldi	r24, 0x11	; 17
    2834:	61 e0       	ldi	r22, 0x01	; 1
    2836:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
	  if (blinks) LCD_puts(alarm_onoff[a_onoff]); else LCD_space(3);
    283a:	80 91 1e 05 	lds	r24, 0x051E
    283e:	88 23       	and	r24, r24
    2840:	61 f0       	breq	.+24     	; 0x285a <show_lcd_edit_alarm+0x52>
    2842:	e0 91 6b 05 	lds	r30, 0x056B
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	ee 0f       	add	r30, r30
    284a:	ff 1f       	adc	r31, r31
    284c:	e7 52       	subi	r30, 0x27	; 39
    284e:	fd 4f       	sbci	r31, 0xFD	; 253
    2850:	80 81       	ld	r24, Z
    2852:	91 81       	ldd	r25, Z+1	; 0x01
    2854:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    2858:	03 c0       	rjmp	.+6      	; 0x2860 <show_lcd_edit_alarm+0x58>
    285a:	83 e0       	ldi	r24, 0x03	; 3
    285c:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
	  LCD_SetXY(12, 2);
    2860:	8c e0       	ldi	r24, 0x0C	; 12
    2862:	62 e0       	ldi	r22, 0x02	; 2
    2864:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2868:	08 c0       	rjmp	.+16     	; 0x287a <show_lcd_edit_alarm+0x72>
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    break;
    case ALARM_HOUR:
	  LCD_SetXY(12, 2);
    286a:	8c e0       	ldi	r24, 0x0C	; 12
    286c:	62 e0       	ldi	r22, 0x02	; 2
    286e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
      if (blinks) print_dec(a_hh,2,'0'); else { LCD_dat(' '); LCD_dat(' '); }
    2872:	80 91 1e 05 	lds	r24, 0x051E
    2876:	88 23       	and	r24, r24
    2878:	41 f0       	breq	.+16     	; 0x288a <show_lcd_edit_alarm+0x82>
    287a:	80 91 a2 05 	lds	r24, 0x05A2
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	62 e0       	ldi	r22, 0x02	; 2
    2882:	40 e3       	ldi	r20, 0x30	; 48
    2884:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2888:	06 c0       	rjmp	.+12     	; 0x2896 <show_lcd_edit_alarm+0x8e>
    288a:	80 e2       	ldi	r24, 0x20	; 32
    288c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2890:	80 e2       	ldi	r24, 0x20	; 32
    2892:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    2896:	8a e3       	ldi	r24, 0x3A	; 58
    2898:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    289c:	12 c0       	rjmp	.+36     	; 0x28c2 <show_lcd_edit_alarm+0xba>
    break;
    case ALARM_MIN:
	  LCD_SetXY(12, 2);
    289e:	8c e0       	ldi	r24, 0x0C	; 12
    28a0:	62 e0       	ldi	r22, 0x02	; 2
    28a2:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
      print_dec(a_hh,2,'0'); LCD_dat(':');
    28a6:	80 91 a2 05 	lds	r24, 0x05A2
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	62 e0       	ldi	r22, 0x02	; 2
    28ae:	40 e3       	ldi	r20, 0x30	; 48
    28b0:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    28b4:	8a e3       	ldi	r24, 0x3A	; 58
    28b6:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  if (blinks)  print_dec(a_mm,2,'0'); else { LCD_dat(' '); LCD_dat(' '); }
    28ba:	80 91 1e 05 	lds	r24, 0x051E
    28be:	88 23       	and	r24, r24
    28c0:	41 f0       	breq	.+16     	; 0x28d2 <show_lcd_edit_alarm+0xca>
    28c2:	80 91 73 05 	lds	r24, 0x0573
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	62 e0       	ldi	r22, 0x02	; 2
    28ca:	40 e3       	ldi	r20, 0x30	; 48
    28cc:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    28d0:	06 c0       	rjmp	.+12     	; 0x28de <show_lcd_edit_alarm+0xd6>
    28d2:	80 e2       	ldi	r24, 0x20	; 32
    28d4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    28d8:	80 e2       	ldi	r24, 0x20	; 32
    28da:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    28de:	8a e3       	ldi	r24, 0x3A	; 58
    28e0:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	62 e0       	ldi	r22, 0x02	; 2
    28ea:	40 e3       	ldi	r20, 0x30	; 48
    28ec:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    28f0:	80 e2       	ldi	r24, 0x20	; 32
    28f2:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    break;
    28f6:	71 c0       	rjmp	.+226    	; 0x29da <show_lcd_edit_alarm+0x1d2>
    case ALARM_WE:
    case ALARM_TH:
    case ALARM_FR:
    case ALARM_SA:
    case ALARM_SU:
      LCD_SetXY(17, 1); 
    28f8:	81 e1       	ldi	r24, 0x11	; 17
    28fa:	61 e0       	ldi	r22, 0x01	; 1
    28fc:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
	  LCD_puts(alarm_onoff[a_onoff]);
    2900:	e0 91 6b 05 	lds	r30, 0x056B
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	ee 0f       	add	r30, r30
    2908:	ff 1f       	adc	r31, r31
    290a:	e7 52       	subi	r30, 0x27	; 39
    290c:	fd 4f       	sbci	r31, 0xFD	; 253
    290e:	80 81       	ld	r24, Z
    2910:	91 81       	ldd	r25, Z+1	; 0x01
    2912:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
	  LCD_SetXY(12, 2);
    2916:	8c e0       	ldi	r24, 0x0C	; 12
    2918:	62 e0       	ldi	r22, 0x02	; 2
    291a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    291e:	80 91 a2 05 	lds	r24, 0x05A2
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	62 e0       	ldi	r22, 0x02	; 2
    2926:	40 e3       	ldi	r20, 0x30	; 48
    2928:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    292c:	8a e3       	ldi	r24, 0x3A	; 58
    292e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2932:	80 91 73 05 	lds	r24, 0x0573
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	62 e0       	ldi	r22, 0x02	; 2
    293a:	40 e3       	ldi	r20, 0x30	; 48
    293c:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2940:	8a e3       	ldi	r24, 0x3A	; 58
    2942:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	62 e0       	ldi	r22, 0x02	; 2
    294c:	40 e3       	ldi	r20, 0x30	; 48
    294e:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2952:	80 e2       	ldi	r24, 0x20	; 32
    2954:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  LCD_SetXY(0, 3);
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	63 e0       	ldi	r22, 0x03	; 3
    295c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2960:	00 e5       	ldi	r16, 0x50	; 80
    2962:	11 e0       	ldi	r17, 0x01	; 1
    2964:	c0 e0       	ldi	r28, 0x00	; 0
    2966:	d0 e0       	ldi	r29, 0x00	; 0
      for(i = 0; i < 7; i++) {
	    if (BitIsSet(a_wday, i)) {
    2968:	80 91 71 05 	lds	r24, 0x0571
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	0c 2e       	mov	r0, r28
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <show_lcd_edit_alarm+0x16e>
    2972:	95 95       	asr	r25
    2974:	87 95       	ror	r24
    2976:	0a 94       	dec	r0
    2978:	e2 f7       	brpl	.-8      	; 0x2972 <show_lcd_edit_alarm+0x16a>
    297a:	20 91 1e 05 	lds	r18, 0x051E
    297e:	80 ff       	sbrs	r24, 0
    2980:	0d c0       	rjmp	.+26     	; 0x299c <show_lcd_edit_alarm+0x194>
		  if ((blinks == 1) || (nedit - ALARM_MO != i)) LCD_puts(den_dw[i]); else { LCD_dat(' '); LCD_dat(' '); }
    2982:	21 30       	cpi	r18, 0x01	; 1
    2984:	39 f0       	breq	.+14     	; 0x2994 <show_lcd_edit_alarm+0x18c>
    2986:	80 91 23 05 	lds	r24, 0x0523
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	03 97       	sbiw	r24, 0x03	; 3
    298e:	8c 17       	cp	r24, r28
    2990:	9d 07       	cpc	r25, r29
    2992:	91 f0       	breq	.+36     	; 0x29b8 <show_lcd_edit_alarm+0x1b0>
    2994:	f8 01       	movw	r30, r16
    2996:	80 81       	ld	r24, Z
    2998:	91 81       	ldd	r25, Z+1	; 0x01
    299a:	0b c0       	rjmp	.+22     	; 0x29b2 <show_lcd_edit_alarm+0x1aa>
	    } else {
		  if ((blinks == 1) && ((nedit - ALARM_MO) == i)) { LCD_puts(MSG_NO_WDAY); } else { LCD_dat(' '); LCD_dat(' '); }
    299c:	21 30       	cpi	r18, 0x01	; 1
    299e:	61 f4       	brne	.+24     	; 0x29b8 <show_lcd_edit_alarm+0x1b0>
    29a0:	80 91 23 05 	lds	r24, 0x0523
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	03 97       	sbiw	r24, 0x03	; 3
    29a8:	8c 17       	cp	r24, r28
    29aa:	9d 07       	cpc	r25, r29
    29ac:	29 f4       	brne	.+10     	; 0x29b8 <show_lcd_edit_alarm+0x1b0>
    29ae:	89 e2       	ldi	r24, 0x29	; 41
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    29b6:	06 c0       	rjmp	.+12     	; 0x29c4 <show_lcd_edit_alarm+0x1bc>
    29b8:	80 e2       	ldi	r24, 0x20	; 32
    29ba:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    29be:	80 e2       	ldi	r24, 0x20	; 32
    29c0:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
		}
		if (i < 6) LCD_dat(':');
    29c4:	c6 30       	cpi	r28, 0x06	; 6
    29c6:	19 f0       	breq	.+6      	; 0x29ce <show_lcd_edit_alarm+0x1c6>
    29c8:	8a e3       	ldi	r24, 0x3A	; 58
    29ca:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    29ce:	21 96       	adiw	r28, 0x01	; 1
    29d0:	0e 5f       	subi	r16, 0xFE	; 254
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
      LCD_SetXY(17, 1); 
	  LCD_puts(alarm_onoff[a_onoff]);
	  LCD_SetXY(12, 2);
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
	  LCD_SetXY(0, 3);
      for(i = 0; i < 7; i++) {
    29d4:	c7 30       	cpi	r28, 0x07	; 7
    29d6:	d1 05       	cpc	r29, r1
    29d8:	39 f6       	brne	.-114    	; 0x2968 <show_lcd_edit_alarm+0x160>
		}
		if (i < 6) LCD_dat(':');
	  }
    break;
  }
}
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	08 95       	ret

000029e4 <run_edit_alarm>:
}
//=============================================================================
//=============================================================================
void run_edit_alarm(unsigned char event)
{
  switch(event) {
    29e4:	8b 36       	cpi	r24, 0x6B	; 107
    29e6:	09 f4       	brne	.+2      	; 0x29ea <run_edit_alarm+0x6>
    29e8:	55 c0       	rjmp	.+170    	; 0x2a94 <run_edit_alarm+0xb0>
    29ea:	8c 36       	cpi	r24, 0x6C	; 108
    29ec:	48 f4       	brcc	.+18     	; 0x2a00 <run_edit_alarm+0x1c>
    29ee:	87 36       	cpi	r24, 0x67	; 103
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <run_edit_alarm+0x10>
    29f2:	a7 c0       	rjmp	.+334    	; 0x2b42 <run_edit_alarm+0x15e>
    29f4:	8a 36       	cpi	r24, 0x6A	; 106
    29f6:	51 f1       	breq	.+84     	; 0x2a4c <run_edit_alarm+0x68>
    29f8:	84 36       	cpi	r24, 0x64	; 100
    29fa:	09 f0       	breq	.+2      	; 0x29fe <run_edit_alarm+0x1a>
    29fc:	e4 c0       	rjmp	.+456    	; 0x2bc6 <run_edit_alarm+0x1e2>
    29fe:	1b c0       	rjmp	.+54     	; 0x2a36 <run_edit_alarm+0x52>
    2a00:	8c 39       	cpi	r24, 0x9C	; 156
    2a02:	61 f0       	breq	.+24     	; 0x2a1c <run_edit_alarm+0x38>
    2a04:	8d 39       	cpi	r24, 0x9D	; 157
    2a06:	20 f4       	brcc	.+8      	; 0x2a10 <run_edit_alarm+0x2c>
    2a08:	8c 36       	cpi	r24, 0x6C	; 108
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <run_edit_alarm+0x2a>
    2a0c:	dc c0       	rjmp	.+440    	; 0x2bc6 <run_edit_alarm+0x1e2>
    2a0e:	cc c0       	rjmp	.+408    	; 0x2ba8 <run_edit_alarm+0x1c4>
    2a10:	80 3a       	cpi	r24, 0xA0	; 160
    2a12:	71 f0       	breq	.+28     	; 0x2a30 <run_edit_alarm+0x4c>
    2a14:	8d 3f       	cpi	r24, 0xFD	; 253
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <run_edit_alarm+0x36>
    2a18:	d6 c0       	rjmp	.+428    	; 0x2bc6 <run_edit_alarm+0x1e2>
    2a1a:	c3 c0       	rjmp	.+390    	; 0x2ba2 <run_edit_alarm+0x1be>
    case EVENT_NOKEY:
	  nokey = 0;
    2a1c:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2a20:	8c e6       	ldi	r24, 0x6C	; 108
    2a22:	60 e0       	ldi	r22, 0x00	; 0
    2a24:	70 e0       	ldi	r23, 0x00	; 0
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    2a2e:	08 95       	ret
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2a30:	10 92 1f 05 	sts	0x051F, r1
    break;
    2a34:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    2a36:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    2a3a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    2a3e:	8d e1       	ldi	r24, 0x1D	; 29
    2a40:	91 e1       	ldi	r25, 0x11	; 17
    2a42:	90 93 a6 00 	sts	0x00A6, r25
    2a46:	80 93 a5 00 	sts	0x00A5, r24
    break;
    2a4a:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_alarm();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_alarm();
    2a52:	0e 94 04 14 	call	0x2808	; 0x2808 <show_lcd_edit_alarm>
      switch(nedit) {
    2a56:	80 91 23 05 	lds	r24, 0x0523
    2a5a:	82 30       	cpi	r24, 0x02	; 2
    2a5c:	89 f0       	breq	.+34     	; 0x2a80 <run_edit_alarm+0x9c>
    2a5e:	83 30       	cpi	r24, 0x03	; 3
    2a60:	50 f5       	brcc	.+84     	; 0x2ab6 <run_edit_alarm+0xd2>
    2a62:	88 23       	and	r24, r24
    2a64:	61 f1       	breq	.+88     	; 0x2abe <run_edit_alarm+0xda>
    2a66:	81 30       	cpi	r24, 0x01	; 1
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <run_edit_alarm+0x88>
    2a6a:	67 c0       	rjmp	.+206    	; 0x2b3a <run_edit_alarm+0x156>
        case ALARM_ONOFF:
		  a_onoff = !a_onoff;
        break;
        case ALARM_HOUR:
		  if (a_hh > 0) a_hh--; else a_hh = 23;
    2a6c:	80 91 a2 05 	lds	r24, 0x05A2
    2a70:	88 23       	and	r24, r24
    2a72:	11 f0       	breq	.+4      	; 0x2a78 <run_edit_alarm+0x94>
    2a74:	81 50       	subi	r24, 0x01	; 1
    2a76:	01 c0       	rjmp	.+2      	; 0x2a7a <run_edit_alarm+0x96>
    2a78:	87 e1       	ldi	r24, 0x17	; 23
    2a7a:	80 93 a2 05 	sts	0x05A2, r24
    2a7e:	5d c0       	rjmp	.+186    	; 0x2b3a <run_edit_alarm+0x156>
        break;
        case ALARM_MIN:
		  if (a_mm > 0) a_mm--; else a_mm = 59;
    2a80:	80 91 73 05 	lds	r24, 0x0573
    2a84:	88 23       	and	r24, r24
    2a86:	11 f0       	breq	.+4      	; 0x2a8c <run_edit_alarm+0xa8>
    2a88:	81 50       	subi	r24, 0x01	; 1
    2a8a:	01 c0       	rjmp	.+2      	; 0x2a8e <run_edit_alarm+0xaa>
    2a8c:	8b e3       	ldi	r24, 0x3B	; 59
    2a8e:	80 93 73 05 	sts	0x0573, r24
    2a92:	53 c0       	rjmp	.+166    	; 0x2b3a <run_edit_alarm+0x156>
      }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_alarm();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_alarm();
    2a9a:	0e 94 04 14 	call	0x2808	; 0x2808 <show_lcd_edit_alarm>
      switch(nedit) {
    2a9e:	80 91 23 05 	lds	r24, 0x0523
    2aa2:	82 30       	cpi	r24, 0x02	; 2
    2aa4:	e9 f0       	breq	.+58     	; 0x2ae0 <run_edit_alarm+0xfc>
    2aa6:	83 30       	cpi	r24, 0x03	; 3
    2aa8:	30 f4       	brcc	.+12     	; 0x2ab6 <run_edit_alarm+0xd2>
    2aaa:	88 23       	and	r24, r24
    2aac:	41 f0       	breq	.+16     	; 0x2abe <run_edit_alarm+0xda>
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <run_edit_alarm+0xd0>
    2ab2:	43 c0       	rjmp	.+134    	; 0x2b3a <run_edit_alarm+0x156>
    2ab4:	0c c0       	rjmp	.+24     	; 0x2ace <run_edit_alarm+0xea>
    2ab6:	8a 30       	cpi	r24, 0x0A	; 10
    2ab8:	08 f0       	brcs	.+2      	; 0x2abc <run_edit_alarm+0xd8>
    2aba:	3f c0       	rjmp	.+126    	; 0x2b3a <run_edit_alarm+0x156>
    2abc:	1a c0       	rjmp	.+52     	; 0x2af2 <run_edit_alarm+0x10e>
        case ALARM_ONOFF:
		  a_onoff = !a_onoff;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	90 91 6b 05 	lds	r25, 0x056B
    2ac4:	91 11       	cpse	r25, r1
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	80 93 6b 05 	sts	0x056B, r24
        break;
    2acc:	36 c0       	rjmp	.+108    	; 0x2b3a <run_edit_alarm+0x156>
        case ALARM_HOUR:
		  if (a_hh < 23) a_hh++; else a_hh = 0;
    2ace:	80 91 a2 05 	lds	r24, 0x05A2
    2ad2:	87 31       	cpi	r24, 0x17	; 23
    2ad4:	10 f4       	brcc	.+4      	; 0x2ada <run_edit_alarm+0xf6>
    2ad6:	8f 5f       	subi	r24, 0xFF	; 255
    2ad8:	d0 cf       	rjmp	.-96     	; 0x2a7a <run_edit_alarm+0x96>
    2ada:	10 92 a2 05 	sts	0x05A2, r1
    2ade:	2d c0       	rjmp	.+90     	; 0x2b3a <run_edit_alarm+0x156>
        break;
        case ALARM_MIN:
		  if (a_mm < 59) a_mm++; else a_mm = 0;
    2ae0:	80 91 73 05 	lds	r24, 0x0573
    2ae4:	8b 33       	cpi	r24, 0x3B	; 59
    2ae6:	10 f4       	brcc	.+4      	; 0x2aec <run_edit_alarm+0x108>
    2ae8:	8f 5f       	subi	r24, 0xFF	; 255
    2aea:	d1 cf       	rjmp	.-94     	; 0x2a8e <run_edit_alarm+0xaa>
    2aec:	10 92 73 05 	sts	0x0573, r1
    2af0:	24 c0       	rjmp	.+72     	; 0x2b3a <run_edit_alarm+0x156>
        case ALARM_WE:
        case ALARM_TH:
        case ALARM_FR:
        case ALARM_SA:
        case ALARM_SU:
		  if (BitIsSet(a_wday, nedit - ALARM_MO)) ClearBit(a_wday, nedit - ALARM_MO); else SetBit(a_wday, nedit - ALARM_MO);
    2af2:	60 91 71 05 	lds	r22, 0x0571
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	03 97       	sbiw	r24, 0x03	; 3
    2afa:	46 2f       	mov	r20, r22
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	08 2e       	mov	r0, r24
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <run_edit_alarm+0x122>
    2b02:	55 95       	asr	r21
    2b04:	47 95       	ror	r20
    2b06:	0a 94       	dec	r0
    2b08:	e2 f7       	brpl	.-8      	; 0x2b02 <run_edit_alarm+0x11e>
    2b0a:	40 ff       	sbrs	r20, 0
    2b0c:	0c c0       	rjmp	.+24     	; 0x2b26 <run_edit_alarm+0x142>
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	50 e0       	ldi	r21, 0x00	; 0
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <run_edit_alarm+0x134>
    2b14:	44 0f       	add	r20, r20
    2b16:	55 1f       	adc	r21, r21
    2b18:	8a 95       	dec	r24
    2b1a:	e2 f7       	brpl	.-8      	; 0x2b14 <run_edit_alarm+0x130>
    2b1c:	40 95       	com	r20
    2b1e:	46 23       	and	r20, r22
    2b20:	40 93 71 05 	sts	0x0571, r20
    2b24:	0a c0       	rjmp	.+20     	; 0x2b3a <run_edit_alarm+0x156>
    2b26:	21 e0       	ldi	r18, 0x01	; 1
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <run_edit_alarm+0x14c>
    2b2c:	22 0f       	add	r18, r18
    2b2e:	33 1f       	adc	r19, r19
    2b30:	8a 95       	dec	r24
    2b32:	e2 f7       	brpl	.-8      	; 0x2b2c <run_edit_alarm+0x148>
    2b34:	26 2b       	or	r18, r22
    2b36:	20 93 71 05 	sts	0x0571, r18
        break;
      }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2b3a:	8d ef       	ldi	r24, 0xFD	; 253
    2b3c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <RTOS_deleteTask>
    2b40:	30 c0       	rjmp	.+96     	; 0x2ba2 <run_edit_alarm+0x1be>
      show_lcd_edit_alarm();
    break;
    case EVENT_KEY_SET:
	  if (nedit < ALARM_SU) {
    2b42:	80 91 23 05 	lds	r24, 0x0523
    2b46:	89 30       	cpi	r24, 0x09	; 9
    2b48:	d0 f4       	brcc	.+52     	; 0x2b7e <run_edit_alarm+0x19a>
	    if (a_onoff == 1) {
    2b4a:	90 91 6b 05 	lds	r25, 0x056B
    2b4e:	91 30       	cpi	r25, 0x01	; 1
    2b50:	21 f4       	brne	.+8      	; 0x2b5a <run_edit_alarm+0x176>
	      nedit++;
    2b52:	8f 5f       	subi	r24, 0xFF	; 255
    2b54:	80 93 23 05 	sts	0x0523, r24
    2b58:	09 c0       	rjmp	.+18     	; 0x2b6c <run_edit_alarm+0x188>
        } else {
          save_alarm_param();
    2b5a:	0e 94 32 0a 	call	0x1464	; 0x1464 <save_alarm_param>
          RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2b5e:	8c e6       	ldi	r24, 0x6C	; 108
    2b60:	60 e0       	ldi	r22, 0x00	; 0
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
		}
	    blinks = 1;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	80 93 1e 05 	sts	0x051E, r24
        show_lcd_edit_alarm();
    2b72:	0e 94 04 14 	call	0x2808	; 0x2808 <show_lcd_edit_alarm>
	    RTOS_deleteTask(EVENT_TIMER_SECOND);
    2b76:	8d ef       	ldi	r24, 0xFD	; 253
    2b78:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <RTOS_deleteTask>
    2b7c:	09 c0       	rjmp	.+18     	; 0x2b90 <run_edit_alarm+0x1ac>
	  } else {
        save_alarm_param();
    2b7e:	0e 94 32 0a 	call	0x1464	; 0x1464 <save_alarm_param>
        RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2b82:	8c e6       	ldi	r24, 0x6C	; 108
    2b84:	60 e0       	ldi	r22, 0x00	; 0
    2b86:	70 e0       	ldi	r23, 0x00	; 0
    2b88:	40 e0       	ldi	r20, 0x00	; 0
    2b8a:	50 e0       	ldi	r21, 0x00	; 0
    2b8c:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
	  }
	  if (nedit >= ALARM_MO) KBD_set_type(0); else KBD_set_type(1);
    2b90:	80 91 23 05 	lds	r24, 0x0523
    2b94:	83 30       	cpi	r24, 0x03	; 3
    2b96:	10 f0       	brcs	.+4      	; 0x2b9c <run_edit_alarm+0x1b8>
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <run_edit_alarm+0x1ba>
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      show_lcd_edit_alarm();
    2ba2:	0e 94 04 14 	call	0x2808	; 0x2808 <show_lcd_edit_alarm>
    break;
    2ba6:	08 95       	ret
    case EVENT_KEY_MENU:
      show_lcd_edit_alarm();
    2ba8:	0e 94 04 14 	call	0x2808	; 0x2808 <show_lcd_edit_alarm>
      nokey = 0;
    2bac:	10 92 1f 05 	sts	0x051F, r1
	  KBD_set_type(1);
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      SET_STATE(run_option);
    2bb6:	89 e0       	ldi	r24, 0x09	; 9
    2bb8:	9b e1       	ldi	r25, 0x1B	; 27
    2bba:	90 93 a6 00 	sts	0x00A6, r25
    2bbe:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2bc2:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
    2bc6:	08 95       	ret

00002bc8 <show_lcd_edit_as_wait>:
  }
}
//=============================================================================
void show_lcd_edit_as_wait(void)
{
  LCD_SetXY(15, 2); 
    2bc8:	8f e0       	ldi	r24, 0x0F	; 15
    2bca:	62 e0       	ldi	r22, 0x02	; 2
    2bcc:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (blinks) print_dec(old_as_wait, 2, ' '); else { LCD_dat(' '); LCD_dat(' '); }
    2bd0:	80 91 1e 05 	lds	r24, 0x051E
    2bd4:	88 23       	and	r24, r24
    2bd6:	41 f0       	breq	.+16     	; 0x2be8 <show_lcd_edit_as_wait+0x20>
    2bd8:	80 91 9f 05 	lds	r24, 0x059F
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	62 e0       	ldi	r22, 0x02	; 2
    2be0:	40 e2       	ldi	r20, 0x20	; 32
    2be2:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2be6:	06 c0       	rjmp	.+12     	; 0x2bf4 <show_lcd_edit_as_wait+0x2c>
    2be8:	80 e2       	ldi	r24, 0x20	; 32
    2bea:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2bee:	80 e2       	ldi	r24, 0x20	; 32
    2bf0:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_puts(MSG_SEC); 
    2bf4:	89 ef       	ldi	r24, 0xF9	; 249
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
}
    2bfc:	08 95       	ret

00002bfe <run_edit_as_wait>:
}
//=============================================================================
//=============================================================================
void run_edit_as_wait(unsigned char event)
{
  switch(event) {
    2bfe:	8b 36       	cpi	r24, 0x6B	; 107
    2c00:	a9 f1       	breq	.+106    	; 0x2c6c <run_edit_as_wait+0x6e>
    2c02:	8c 36       	cpi	r24, 0x6C	; 108
    2c04:	48 f4       	brcc	.+18     	; 0x2c18 <run_edit_as_wait+0x1a>
    2c06:	87 36       	cpi	r24, 0x67	; 103
    2c08:	09 f4       	brne	.+2      	; 0x2c0c <run_edit_as_wait+0xe>
    2c0a:	42 c0       	rjmp	.+132    	; 0x2c90 <run_edit_as_wait+0x92>
    2c0c:	8a 36       	cpi	r24, 0x6A	; 106
    2c0e:	19 f1       	breq	.+70     	; 0x2c56 <run_edit_as_wait+0x58>
    2c10:	84 36       	cpi	r24, 0x64	; 100
    2c12:	09 f0       	breq	.+2      	; 0x2c16 <run_edit_as_wait+0x18>
    2c14:	5a c0       	rjmp	.+180    	; 0x2cca <run_edit_as_wait+0xcc>
    2c16:	14 c0       	rjmp	.+40     	; 0x2c40 <run_edit_as_wait+0x42>
    2c18:	8c 39       	cpi	r24, 0x9C	; 156
    2c1a:	61 f0       	breq	.+24     	; 0x2c34 <run_edit_as_wait+0x36>
    2c1c:	8d 39       	cpi	r24, 0x9D	; 157
    2c1e:	20 f4       	brcc	.+8      	; 0x2c28 <run_edit_as_wait+0x2a>
    2c20:	8c 36       	cpi	r24, 0x6C	; 108
    2c22:	09 f0       	breq	.+2      	; 0x2c26 <run_edit_as_wait+0x28>
    2c24:	52 c0       	rjmp	.+164    	; 0x2cca <run_edit_as_wait+0xcc>
    2c26:	46 c0       	rjmp	.+140    	; 0x2cb4 <run_edit_as_wait+0xb6>
    2c28:	80 3a       	cpi	r24, 0xA0	; 160
    2c2a:	39 f0       	breq	.+14     	; 0x2c3a <run_edit_as_wait+0x3c>
    2c2c:	8d 3f       	cpi	r24, 0xFD	; 253
    2c2e:	09 f0       	breq	.+2      	; 0x2c32 <run_edit_as_wait+0x34>
    2c30:	4c c0       	rjmp	.+152    	; 0x2cca <run_edit_as_wait+0xcc>
    2c32:	2b c0       	rjmp	.+86     	; 0x2c8a <run_edit_as_wait+0x8c>
    case EVENT_NOKEY:
	  nokey = 0;
    2c34:	10 92 1f 05 	sts	0x051F, r1
    2c38:	35 c0       	rjmp	.+106    	; 0x2ca4 <run_edit_as_wait+0xa6>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2c3a:	10 92 1f 05 	sts	0x051F, r1
    break;
    2c3e:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    2c40:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    2c44:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    2c48:	8d e1       	ldi	r24, 0x1D	; 29
    2c4a:	91 e1       	ldi	r25, 0x11	; 17
    2c4c:	90 93 a6 00 	sts	0x00A6, r25
    2c50:	80 93 a5 00 	sts	0x00A5, r24
    break;
    2c54:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_as_wait();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_as_wait();
    2c5c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <show_lcd_edit_as_wait>
	  if (old_as_wait > MIN_AS_WAIT) old_as_wait--;
    2c60:	80 91 9f 05 	lds	r24, 0x059F
    2c64:	88 23       	and	r24, r24
    2c66:	71 f0       	breq	.+28     	; 0x2c84 <run_edit_as_wait+0x86>
    2c68:	81 50       	subi	r24, 0x01	; 1
    2c6a:	0a c0       	rjmp	.+20     	; 0x2c80 <run_edit_as_wait+0x82>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_as_wait();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_as_wait();
    2c72:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <show_lcd_edit_as_wait>
	  if (old_as_wait < MAX_AS_WAIT) old_as_wait++;
    2c76:	80 91 9f 05 	lds	r24, 0x059F
    2c7a:	8a 30       	cpi	r24, 0x0A	; 10
    2c7c:	18 f4       	brcc	.+6      	; 0x2c84 <run_edit_as_wait+0x86>
    2c7e:	8f 5f       	subi	r24, 0xFF	; 255
    2c80:	80 93 9f 05 	sts	0x059F, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2c84:	8d ef       	ldi	r24, 0xFD	; 253
    2c86:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <RTOS_deleteTask>
      show_lcd_edit_as_wait();
    2c8a:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <show_lcd_edit_as_wait>
    break;
    2c8e:	08 95       	ret
    case EVENT_KEY_SET:
      nedit = 0;
    2c90:	10 92 23 05 	sts	0x0523, r1
	  as_wait = old_as_wait;
    2c94:	80 91 9f 05 	lds	r24, 0x059F
    2c98:	80 93 76 05 	sts	0x0576, r24
	  save_as_wait(as_wait);
    2c9c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <save_as_wait>
      show_lcd_edit_as_wait();
    2ca0:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <show_lcd_edit_as_wait>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2ca4:	8c e6       	ldi	r24, 0x6C	; 108
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	70 e0       	ldi	r23, 0x00	; 0
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    2cb2:	08 95       	ret
    case EVENT_KEY_MENU:
	  KBD_set_type(1);
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      SET_STATE(run_option);
    2cba:	89 e0       	ldi	r24, 0x09	; 9
    2cbc:	9b e1       	ldi	r25, 0x1B	; 27
    2cbe:	90 93 a6 00 	sts	0x00A6, r25
    2cc2:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2cc6:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
    2cca:	08 95       	ret

00002ccc <show_lcd_edit_temp_max>:
  }
}
//=============================================================================
void show_lcd_edit_temp_max(void)
{
  LCD_SetXY(14, 2); 
    2ccc:	8e e0       	ldi	r24, 0x0E	; 14
    2cce:	62 e0       	ldi	r22, 0x02	; 2
    2cd0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (blinks) print_dec(old_max_temp, 2, ' '); else { LCD_dat(' '); LCD_dat(' '); }
    2cd4:	80 91 1e 05 	lds	r24, 0x051E
    2cd8:	88 23       	and	r24, r24
    2cda:	41 f0       	breq	.+16     	; 0x2cec <show_lcd_edit_temp_max+0x20>
    2cdc:	80 91 6f 05 	lds	r24, 0x056F
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	62 e0       	ldi	r22, 0x02	; 2
    2ce4:	40 e2       	ldi	r20, 0x20	; 32
    2ce6:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2cea:	06 c0       	rjmp	.+12     	; 0x2cf8 <show_lcd_edit_temp_max+0x2c>
    2cec:	80 e2       	ldi	r24, 0x20	; 32
    2cee:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2cf2:	80 e2       	ldi	r24, 0x20	; 32
    2cf4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_dat('C'); LCD_space(3);
    2cf8:	83 e4       	ldi	r24, 0x43	; 67
    2cfa:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2cfe:	83 e0       	ldi	r24, 0x03	; 3
    2d00:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
}
    2d04:	08 95       	ret

00002d06 <run_edit_temp_max>:
}
//=============================================================================
//=============================================================================
void run_edit_temp_max(unsigned char event)
{
  switch(event) {
    2d06:	8b 36       	cpi	r24, 0x6B	; 107
    2d08:	a9 f1       	breq	.+106    	; 0x2d74 <run_edit_temp_max+0x6e>
    2d0a:	8c 36       	cpi	r24, 0x6C	; 108
    2d0c:	48 f4       	brcc	.+18     	; 0x2d20 <run_edit_temp_max+0x1a>
    2d0e:	87 36       	cpi	r24, 0x67	; 103
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <run_edit_temp_max+0xe>
    2d12:	42 c0       	rjmp	.+132    	; 0x2d98 <run_edit_temp_max+0x92>
    2d14:	8a 36       	cpi	r24, 0x6A	; 106
    2d16:	19 f1       	breq	.+70     	; 0x2d5e <run_edit_temp_max+0x58>
    2d18:	84 36       	cpi	r24, 0x64	; 100
    2d1a:	09 f0       	breq	.+2      	; 0x2d1e <run_edit_temp_max+0x18>
    2d1c:	5a c0       	rjmp	.+180    	; 0x2dd2 <run_edit_temp_max+0xcc>
    2d1e:	14 c0       	rjmp	.+40     	; 0x2d48 <run_edit_temp_max+0x42>
    2d20:	8c 39       	cpi	r24, 0x9C	; 156
    2d22:	61 f0       	breq	.+24     	; 0x2d3c <run_edit_temp_max+0x36>
    2d24:	8d 39       	cpi	r24, 0x9D	; 157
    2d26:	20 f4       	brcc	.+8      	; 0x2d30 <run_edit_temp_max+0x2a>
    2d28:	8c 36       	cpi	r24, 0x6C	; 108
    2d2a:	09 f0       	breq	.+2      	; 0x2d2e <run_edit_temp_max+0x28>
    2d2c:	52 c0       	rjmp	.+164    	; 0x2dd2 <run_edit_temp_max+0xcc>
    2d2e:	46 c0       	rjmp	.+140    	; 0x2dbc <run_edit_temp_max+0xb6>
    2d30:	80 3a       	cpi	r24, 0xA0	; 160
    2d32:	39 f0       	breq	.+14     	; 0x2d42 <run_edit_temp_max+0x3c>
    2d34:	8d 3f       	cpi	r24, 0xFD	; 253
    2d36:	09 f0       	breq	.+2      	; 0x2d3a <run_edit_temp_max+0x34>
    2d38:	4c c0       	rjmp	.+152    	; 0x2dd2 <run_edit_temp_max+0xcc>
    2d3a:	2b c0       	rjmp	.+86     	; 0x2d92 <run_edit_temp_max+0x8c>
    case EVENT_NOKEY:
	  nokey = 0;
    2d3c:	10 92 1f 05 	sts	0x051F, r1
    2d40:	35 c0       	rjmp	.+106    	; 0x2dac <run_edit_temp_max+0xa6>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2d42:	10 92 1f 05 	sts	0x051F, r1
    break;
    2d46:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    2d48:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    2d4c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    2d50:	8d e1       	ldi	r24, 0x1D	; 29
    2d52:	91 e1       	ldi	r25, 0x11	; 17
    2d54:	90 93 a6 00 	sts	0x00A6, r25
    2d58:	80 93 a5 00 	sts	0x00A5, r24
    break;
    2d5c:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_temp_max();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_temp_max();
    2d64:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <show_lcd_edit_temp_max>
	  if (old_max_temp > MIN_TEMP) old_max_temp--;
    2d68:	80 91 6f 05 	lds	r24, 0x056F
    2d6c:	8f 31       	cpi	r24, 0x1F	; 31
    2d6e:	70 f0       	brcs	.+28     	; 0x2d8c <run_edit_temp_max+0x86>
    2d70:	81 50       	subi	r24, 0x01	; 1
    2d72:	0a c0       	rjmp	.+20     	; 0x2d88 <run_edit_temp_max+0x82>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_temp_max();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_temp_max();
    2d7a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <show_lcd_edit_temp_max>
	  if (old_max_temp < MAX_TEMP) old_max_temp++;
    2d7e:	80 91 6f 05 	lds	r24, 0x056F
    2d82:	85 35       	cpi	r24, 0x55	; 85
    2d84:	18 f4       	brcc	.+6      	; 0x2d8c <run_edit_temp_max+0x86>
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	80 93 6f 05 	sts	0x056F, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2d8c:	8d ef       	ldi	r24, 0xFD	; 253
    2d8e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <RTOS_deleteTask>
      show_lcd_edit_temp_max();
    2d92:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <show_lcd_edit_temp_max>
    break;
    2d96:	08 95       	ret
    case EVENT_KEY_SET:
      nedit = 0;
    2d98:	10 92 23 05 	sts	0x0523, r1
	  max_temp = old_max_temp;
    2d9c:	80 91 6f 05 	lds	r24, 0x056F
    2da0:	80 93 a1 05 	sts	0x05A1, r24
      save_max_temperature(max_temp);
    2da4:	0e 94 9c 0a 	call	0x1538	; 0x1538 <save_max_temperature>
      show_lcd_edit_temp_max();
    2da8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <show_lcd_edit_temp_max>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2dac:	8c e6       	ldi	r24, 0x6C	; 108
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	70 e0       	ldi	r23, 0x00	; 0
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    2dba:	08 95       	ret
    case EVENT_KEY_MENU:
	  KBD_set_type(1);
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      SET_STATE(run_option);
    2dc2:	89 e0       	ldi	r24, 0x09	; 9
    2dc4:	9b e1       	ldi	r25, 0x1B	; 27
    2dc6:	90 93 a6 00 	sts	0x00A6, r25
    2dca:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2dce:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
    2dd2:	08 95       	ret

00002dd4 <show_lcd_edit_stb_out>:
  }
}
//=============================================================================
void show_lcd_edit_stb_out(void)
{
  LCD_SetXY(16, 2); 
    2dd4:	80 e1       	ldi	r24, 0x10	; 16
    2dd6:	62 e0       	ldi	r22, 0x02	; 2
    2dd8:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (blinks == 1) print_dec(stb_out, 1, ' '); else LCD_dat(' ');
    2ddc:	80 91 1e 05 	lds	r24, 0x051E
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	41 f4       	brne	.+16     	; 0x2df4 <show_lcd_edit_stb_out+0x20>
    2de4:	80 91 74 05 	lds	r24, 0x0574
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	61 e0       	ldi	r22, 0x01	; 1
    2dec:	40 e2       	ldi	r20, 0x20	; 32
    2dee:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2df2:	08 95       	ret
    2df4:	80 e2       	ldi	r24, 0x20	; 32
    2df6:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2dfa:	08 95       	ret

00002dfc <run_edit_stb_out>:
}
//=============================================================================
//=============================================================================
void run_edit_stb_out(unsigned char event)
{
  switch(event) {
    2dfc:	8b 36       	cpi	r24, 0x6B	; 107
    2dfe:	c1 f1       	breq	.+112    	; 0x2e70 <run_edit_stb_out+0x74>
    2e00:	8c 36       	cpi	r24, 0x6C	; 108
    2e02:	48 f4       	brcc	.+18     	; 0x2e16 <run_edit_stb_out+0x1a>
    2e04:	87 36       	cpi	r24, 0x67	; 103
    2e06:	09 f4       	brne	.+2      	; 0x2e0a <run_edit_stb_out+0xe>
    2e08:	45 c0       	rjmp	.+138    	; 0x2e94 <run_edit_stb_out+0x98>
    2e0a:	8a 36       	cpi	r24, 0x6A	; 106
    2e0c:	89 f1       	breq	.+98     	; 0x2e70 <run_edit_stb_out+0x74>
    2e0e:	84 36       	cpi	r24, 0x64	; 100
    2e10:	09 f0       	breq	.+2      	; 0x2e14 <run_edit_stb_out+0x18>
    2e12:	67 c0       	rjmp	.+206    	; 0x2ee2 <run_edit_stb_out+0xe6>
    2e14:	1b c0       	rjmp	.+54     	; 0x2e4c <run_edit_stb_out+0x50>
    2e16:	8c 39       	cpi	r24, 0x9C	; 156
    2e18:	61 f0       	breq	.+24     	; 0x2e32 <run_edit_stb_out+0x36>
    2e1a:	8d 39       	cpi	r24, 0x9D	; 157
    2e1c:	20 f4       	brcc	.+8      	; 0x2e26 <run_edit_stb_out+0x2a>
    2e1e:	8c 36       	cpi	r24, 0x6C	; 108
    2e20:	09 f0       	breq	.+2      	; 0x2e24 <run_edit_stb_out+0x28>
    2e22:	5f c0       	rjmp	.+190    	; 0x2ee2 <run_edit_stb_out+0xe6>
    2e24:	4c c0       	rjmp	.+152    	; 0x2ebe <run_edit_stb_out+0xc2>
    2e26:	80 3a       	cpi	r24, 0xA0	; 160
    2e28:	71 f0       	breq	.+28     	; 0x2e46 <run_edit_stb_out+0x4a>
    2e2a:	8d 3f       	cpi	r24, 0xFD	; 253
    2e2c:	09 f0       	breq	.+2      	; 0x2e30 <run_edit_stb_out+0x34>
    2e2e:	59 c0       	rjmp	.+178    	; 0x2ee2 <run_edit_stb_out+0xe6>
    2e30:	2e c0       	rjmp	.+92     	; 0x2e8e <run_edit_stb_out+0x92>
    case EVENT_NOKEY:
	  nokey = 0;
    2e32:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2e36:	8c e6       	ldi	r24, 0x6C	; 108
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	40 e0       	ldi	r20, 0x00	; 0
    2e3e:	50 e0       	ldi	r21, 0x00	; 0
    2e40:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    2e44:	08 95       	ret
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2e46:	10 92 1f 05 	sts	0x051F, r1
    break;
    2e4a:	08 95       	ret
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    2e4c:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    2e50:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    2e54:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
    2e58:	81 30       	cpi	r24, 0x01	; 1
    2e5a:	11 f4       	brne	.+4      	; 0x2e60 <run_edit_stb_out+0x64>
    2e5c:	c2 9a       	sbi	0x18, 2	; 24
    2e5e:	01 c0       	rjmp	.+2      	; 0x2e62 <run_edit_stb_out+0x66>
    2e60:	c2 98       	cbi	0x18, 2	; 24
      SET_STATE(run_standby);
    2e62:	8d e1       	ldi	r24, 0x1D	; 29
    2e64:	91 e1       	ldi	r25, 0x11	; 17
    2e66:	90 93 a6 00 	sts	0x00A6, r25
    2e6a:	80 93 a5 00 	sts	0x00A5, r24
    break;
    2e6e:	08 95       	ret
	  stb_out = !stb_out;
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_stb_out();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_stb_out();
    2e76:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <show_lcd_edit_stb_out>
	  stb_out = !stb_out;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	90 91 74 05 	lds	r25, 0x0574
    2e80:	91 11       	cpse	r25, r1
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	80 93 74 05 	sts	0x0574, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2e88:	8d ef       	ldi	r24, 0xFD	; 253
    2e8a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <RTOS_deleteTask>
      show_lcd_edit_stb_out();
    2e8e:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <show_lcd_edit_stb_out>
    break;
    2e92:	08 95       	ret
    case EVENT_KEY_SET:
	  save_stb_out(stb_out);
    2e94:	80 91 74 05 	lds	r24, 0x0574
    2e98:	0e 94 ae 0a 	call	0x155c	; 0x155c <save_stb_out>
      nedit = 0;
    2e9c:	10 92 23 05 	sts	0x0523, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2ea0:	8c e6       	ldi	r24, 0x6C	; 108
    2ea2:	60 e0       	ldi	r22, 0x00	; 0
    2ea4:	70 e0       	ldi	r23, 0x00	; 0
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
      show_lcd_edit_stb_out();
    2eae:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <show_lcd_edit_stb_out>
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    2eb2:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
    2eb6:	81 30       	cpi	r24, 0x01	; 1
    2eb8:	89 f0       	breq	.+34     	; 0x2edc <run_edit_stb_out+0xe0>
    2eba:	c2 98       	cbi	0x18, 2	; 24
    2ebc:	08 95       	ret
    break;
    case EVENT_KEY_MENU:
	  KBD_set_type(1);
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      SET_STATE(run_option);
    2ec4:	89 e0       	ldi	r24, 0x09	; 9
    2ec6:	9b e1       	ldi	r25, 0x1B	; 27
    2ec8:	90 93 a6 00 	sts	0x00A6, r25
    2ecc:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2ed0:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    2ed4:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
    2ed8:	81 30       	cpi	r24, 0x01	; 1
    2eda:	11 f4       	brne	.+4      	; 0x2ee0 <run_edit_stb_out+0xe4>
    2edc:	c2 9a       	sbi	0x18, 2	; 24
    2ede:	08 95       	ret
    2ee0:	c2 98       	cbi	0x18, 2	; 24
    2ee2:	08 95       	ret

00002ee4 <show_lcd_edit_fm_stations>:
    break;
  }
}
//=============================================================================
void show_lcd_edit_fm_stations(void)
{
    2ee4:	1f 93       	push	r17
  LCD_SetXY(0, 0); LCD_puts(optionmenu[OM_SET_FM_STATIONS]);
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2eee:	80 91 cd 02 	lds	r24, 0x02CD
    2ef2:	90 91 ce 02 	lds	r25, 0x02CE
    2ef6:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(0, 1); LCD_puts(MSG_CHANNEL); print_dec(channel + 1, 2, '0'); LCD_dat(' ');
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	61 e0       	ldi	r22, 0x01	; 1
    2efe:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2f02:	89 ec       	ldi	r24, 0xC9	; 201
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    2f0a:	80 91 2a 05 	lds	r24, 0x052A
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	01 96       	adiw	r24, 0x01	; 1
    2f12:	62 e0       	ldi	r22, 0x02	; 2
    2f14:	40 e3       	ldi	r20, 0x30	; 48
    2f16:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2f1a:	80 e2       	ldi	r24, 0x20	; 32
    2f1c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  show_freq(); if ((nedit == FM_NORMAL_MODE) || (blinks == 1)) LCD_puts(MSG_MHZ); else LCD_space(3);
    2f20:	0e 94 48 0c 	call	0x1890	; 0x1890 <show_freq>
    2f24:	80 91 23 05 	lds	r24, 0x0523
    2f28:	88 23       	and	r24, r24
    2f2a:	21 f0       	breq	.+8      	; 0x2f34 <show_lcd_edit_fm_stations+0x50>
    2f2c:	80 91 1e 05 	lds	r24, 0x051E
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	29 f4       	brne	.+10     	; 0x2f3e <show_lcd_edit_fm_stations+0x5a>
    2f34:	81 ed       	ldi	r24, 0xD1	; 209
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    2f3c:	03 c0       	rjmp	.+6      	; 0x2f44 <show_lcd_edit_fm_stations+0x60>
    2f3e:	83 e0       	ldi	r24, 0x03	; 3
    2f40:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
  LCD_SetXY(0, 2); LCD_puts(mainmenu[MM_VOLUME]);
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	62 e0       	ldi	r22, 0x02	; 2
    2f48:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2f4c:	80 91 2a 02 	lds	r24, 0x022A
    2f50:	90 91 2b 02 	lds	r25, 0x022B
    2f54:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    2f58:	82 e1       	ldi	r24, 0x12	; 18
    2f5a:	62 e0       	ldi	r22, 0x02	; 2
    2f5c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2f60:	80 91 20 05 	lds	r24, 0x0520
    2f64:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	62 e0       	ldi	r22, 0x02	; 2
    2f6c:	40 e3       	ldi	r20, 0x30	; 48
    2f6e:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
  LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	63 e0       	ldi	r22, 0x03	; 3
    2f76:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2f7a:	80 91 20 05 	lds	r24, 0x0520
    2f7e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    2f82:	18 2f       	mov	r17, r24
    2f84:	80 91 20 05 	lds	r24, 0x0520
    2f88:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <tda7313Get_Max_Param>
    2f8c:	68 2f       	mov	r22, r24
    2f8e:	81 2f       	mov	r24, r17
    2f90:	44 e1       	ldi	r20, 0x14	; 20
    2f92:	0e 94 82 01 	call	0x304	; 0x304 <LCD_progress_bar>
}
    2f96:	1f 91       	pop	r17
    2f98:	08 95       	ret

00002f9a <run_edit_fm_stations>:
  if (blinks == 1) print_dec(stb_out, 1, ' '); else LCD_dat(' ');
}
//=============================================================================
//=============================================================================
void run_edit_fm_stations(unsigned char event)
{
    2f9a:	1f 93       	push	r17
  switch(event) {
    2f9c:	8c 39       	cpi	r24, 0x9C	; 156
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <run_edit_fm_stations+0x8>
    2fa0:	6b c0       	rjmp	.+214    	; 0x3078 <run_edit_fm_stations+0xde>
    2fa2:	8d 39       	cpi	r24, 0x9D	; 157
    2fa4:	e0 f4       	brcc	.+56     	; 0x2fde <run_edit_fm_stations+0x44>
    2fa6:	88 36       	cpi	r24, 0x68	; 104
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <run_edit_fm_stations+0x12>
    2faa:	90 c0       	rjmp	.+288    	; 0x30cc <run_edit_fm_stations+0x132>
    2fac:	89 36       	cpi	r24, 0x69	; 105
    2fae:	50 f4       	brcc	.+20     	; 0x2fc4 <run_edit_fm_stations+0x2a>
    2fb0:	86 36       	cpi	r24, 0x66	; 102
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <run_edit_fm_stations+0x1c>
    2fb4:	0a c1       	rjmp	.+532    	; 0x31ca <run_edit_fm_stations+0x230>
    2fb6:	87 36       	cpi	r24, 0x67	; 103
    2fb8:	08 f0       	brcs	.+2      	; 0x2fbc <run_edit_fm_stations+0x22>
    2fba:	19 c1       	rjmp	.+562    	; 0x31ee <run_edit_fm_stations+0x254>
    2fbc:	84 36       	cpi	r24, 0x64	; 100
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <run_edit_fm_stations+0x28>
    2fc0:	83 c1       	rjmp	.+774    	; 0x32c8 <run_edit_fm_stations+0x32e>
    2fc2:	80 c0       	rjmp	.+256    	; 0x30c4 <run_edit_fm_stations+0x12a>
    2fc4:	8a 36       	cpi	r24, 0x6A	; 106
    2fc6:	09 f4       	brne	.+2      	; 0x2fca <run_edit_fm_stations+0x30>
    2fc8:	a4 c0       	rjmp	.+328    	; 0x3112 <run_edit_fm_stations+0x178>
    2fca:	8a 36       	cpi	r24, 0x6A	; 106
    2fcc:	08 f4       	brcc	.+2      	; 0x2fd0 <run_edit_fm_stations+0x36>
    2fce:	93 c0       	rjmp	.+294    	; 0x30f6 <run_edit_fm_stations+0x15c>
    2fd0:	8b 36       	cpi	r24, 0x6B	; 107
    2fd2:	09 f4       	brne	.+2      	; 0x2fd6 <run_edit_fm_stations+0x3c>
    2fd4:	c1 c0       	rjmp	.+386    	; 0x3158 <run_edit_fm_stations+0x1be>
    2fd6:	8c 36       	cpi	r24, 0x6C	; 108
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <run_edit_fm_stations+0x42>
    2fda:	76 c1       	rjmp	.+748    	; 0x32c8 <run_edit_fm_stations+0x32e>
    2fdc:	3e c1       	rjmp	.+636    	; 0x325a <run_edit_fm_stations+0x2c0>
    2fde:	8a 3a       	cpi	r24, 0xAA	; 170
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <run_edit_fm_stations+0x4a>
    2fe2:	41 c0       	rjmp	.+130    	; 0x3066 <run_edit_fm_stations+0xcc>
    2fe4:	8b 3a       	cpi	r24, 0xAB	; 171
    2fe6:	80 f4       	brcc	.+32     	; 0x3008 <run_edit_fm_stations+0x6e>
    2fe8:	84 3a       	cpi	r24, 0xA4	; 164
    2fea:	09 f4       	brne	.+2      	; 0x2fee <run_edit_fm_stations+0x54>
    2fec:	56 c0       	rjmp	.+172    	; 0x309a <run_edit_fm_stations+0x100>
    2fee:	85 3a       	cpi	r24, 0xA5	; 165
    2ff0:	20 f4       	brcc	.+8      	; 0x2ffa <run_edit_fm_stations+0x60>
    2ff2:	80 3a       	cpi	r24, 0xA0	; 160
    2ff4:	09 f0       	breq	.+2      	; 0x2ff8 <run_edit_fm_stations+0x5e>
    2ff6:	68 c1       	rjmp	.+720    	; 0x32c8 <run_edit_fm_stations+0x32e>
    2ff8:	62 c0       	rjmp	.+196    	; 0x30be <run_edit_fm_stations+0x124>
    2ffa:	85 3a       	cpi	r24, 0xA5	; 165
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <run_edit_fm_stations+0x66>
    2ffe:	df c0       	rjmp	.+446    	; 0x31be <run_edit_fm_stations+0x224>
    3000:	89 3a       	cpi	r24, 0xA9	; 169
    3002:	09 f0       	breq	.+2      	; 0x3006 <run_edit_fm_stations+0x6c>
    3004:	61 c1       	rjmp	.+706    	; 0x32c8 <run_edit_fm_stations+0x32e>
    3006:	0b c0       	rjmp	.+22     	; 0x301e <run_edit_fm_stations+0x84>
    3008:	8c 3a       	cpi	r24, 0xAC	; 172
    300a:	29 f1       	breq	.+74     	; 0x3056 <run_edit_fm_stations+0xbc>
    300c:	8c 3a       	cpi	r24, 0xAC	; 172
    300e:	90 f0       	brcs	.+36     	; 0x3034 <run_edit_fm_stations+0x9a>
    3010:	8f 3a       	cpi	r24, 0xAF	; 175
    3012:	09 f4       	brne	.+2      	; 0x3016 <run_edit_fm_stations+0x7c>
    3014:	2a c1       	rjmp	.+596    	; 0x326a <run_edit_fm_stations+0x2d0>
    3016:	8d 3f       	cpi	r24, 0xFD	; 253
    3018:	09 f0       	breq	.+2      	; 0x301c <run_edit_fm_stations+0x82>
    301a:	56 c1       	rjmp	.+684    	; 0x32c8 <run_edit_fm_stations+0x32e>
    301c:	e5 c0       	rjmp	.+458    	; 0x31e8 <run_edit_fm_stations+0x24e>
    case EVENT_SET_STB_OUT_ON:
      if (load_stb_out() == 1) { LED_STB_OUT_0; } else { LED_STB_OUT_1; }
    301e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
    3022:	81 30       	cpi	r24, 0x01	; 1
    3024:	11 f4       	brne	.+4      	; 0x302a <run_edit_fm_stations+0x90>
    3026:	c2 98       	cbi	0x18, 2	; 24
    3028:	01 c0       	rjmp	.+2      	; 0x302c <run_edit_fm_stations+0x92>
    302a:	c2 9a       	sbi	0x18, 2	; 24
      RTOS_setTask(EVENT_SET_AS_WAIT_ON, 1000, 0);
    302c:	8b ea       	ldi	r24, 0xAB	; 171
    302e:	68 ee       	ldi	r22, 0xE8	; 232
    3030:	73 e0       	ldi	r23, 0x03	; 3
    3032:	16 c1       	rjmp	.+556    	; 0x3260 <run_edit_fm_stations+0x2c6>
    break;
    case EVENT_SET_AS_WAIT_ON:
      LED_AC_WAIT_on();
    3034:	c3 9a       	sbi	0x18, 3	; 24
      tuner_SetChan(tuner_GetChan(channel));
    3036:	80 91 2a 05 	lds	r24, 0x052A
    303a:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    303e:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
	  tda7313Set_Param(MM_VOLUME, tda7313_Load_vol_fm_edit());
    3042:	0e 94 bb 20 	call	0x4176	; 0x4176 <tda7313_Load_vol_fm_edit>
    3046:	68 2f       	mov	r22, r24
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <tda7313Set_Param>
      tda7313SetMute(0);
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
    3054:	c9 c0       	rjmp	.+402    	; 0x31e8 <run_edit_fm_stations+0x24e>
      show_lcd_edit_fm_stations();
    break;
    case EVENT_SET_AS_WAIT_OFF:
	  tuner_SetMute(1);
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	0e 94 6e 21 	call	0x42dc	; 0x42dc <tea5767SetMute>
      LED_AC_WAIT_off();
    305c:	c3 98       	cbi	0x18, 3	; 24
      RTOS_setTask(EVENT_SET_STB_OUT_OFF, 100, 0);
    305e:	8a ea       	ldi	r24, 0xAA	; 170
    3060:	64 e6       	ldi	r22, 0x64	; 100
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	fd c0       	rjmp	.+506    	; 0x3260 <run_edit_fm_stations+0x2c6>
    break;
    case EVENT_SET_STB_OUT_OFF:
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    3066:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	11 f4       	brne	.+4      	; 0x3072 <run_edit_fm_stations+0xd8>
    306e:	c2 9a       	sbi	0x18, 2	; 24
    3070:	01 c0       	rjmp	.+2      	; 0x3074 <run_edit_fm_stations+0xda>
    3072:	c2 98       	cbi	0x18, 2	; 24
      RTOS_setTask(EVENT_STOP_FM_EDIT, 0, 0);
    3074:	8f ea       	ldi	r24, 0xAF	; 175
    3076:	f2 c0       	rjmp	.+484    	; 0x325c <run_edit_fm_stations+0x2c2>
    break;
    case EVENT_NOKEY:
	  if (nedit == FM_NORMAL_MODE) {
    3078:	80 91 23 05 	lds	r24, 0x0523
    307c:	88 23       	and	r24, r24
    307e:	41 f4       	brne	.+16     	; 0x3090 <run_edit_fm_stations+0xf6>
        RTOS_setTask(EVENT_SET_AS_WAIT_OFF, 0, 0);
    3080:	8c ea       	ldi	r24, 0xAC	; 172
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	40 e0       	ldi	r20, 0x00	; 0
    3088:	50 e0       	ldi	r21, 0x00	; 0
    308a:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    308e:	ac c0       	rjmp	.+344    	; 0x31e8 <run_edit_fm_stations+0x24e>
      } else {
	    nedit = FM_NORMAL_MODE;
    3090:	10 92 23 05 	sts	0x0523, r1
	    nokey = 0;
    3094:	10 92 1f 05 	sts	0x051F, r1
    3098:	a7 c0       	rjmp	.+334    	; 0x31e8 <run_edit_fm_stations+0x24e>
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_RETURN_MODE:
	  if (nedit == FM_EDIT_MODE) {
    309a:	80 91 23 05 	lds	r24, 0x0523
    309e:	81 30       	cpi	r24, 0x01	; 1
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <run_edit_fm_stations+0x10a>
    30a2:	a2 c0       	rjmp	.+324    	; 0x31e8 <run_edit_fm_stations+0x24e>
	    tuner_SetChannel(channel, old_chan);
    30a4:	80 91 2a 05 	lds	r24, 0x052A
    30a8:	60 91 68 05 	lds	r22, 0x0568
    30ac:	0e 94 c7 21 	call	0x438e	; 0x438e <tuner_SetChannel>
	    tuner_SetChan(old_chan);
    30b0:	80 91 68 05 	lds	r24, 0x0568
    30b4:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
	    nedit = FM_NORMAL_MODE;
    30b8:	10 92 23 05 	sts	0x0523, r1
    30bc:	95 c0       	rjmp	.+298    	; 0x31e8 <run_edit_fm_stations+0x24e>
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    30be:	10 92 1f 05 	sts	0x051F, r1
    break;
    30c2:	02 c1       	rjmp	.+516    	; 0x32c8 <run_edit_fm_stations+0x32e>
    case EVENT_KEY_STANDBY:
	  key_stb = 1;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	80 93 25 05 	sts	0x0525, r24
    30ca:	c7 c0       	rjmp	.+398    	; 0x325a <run_edit_fm_stations+0x2c0>
    break;
    case EVENT_TIMER_SECOND:
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_UP:
	  if (nedit == FM_NORMAL_MODE) {
    30cc:	80 91 23 05 	lds	r24, 0x0523
    30d0:	88 23       	and	r24, r24
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <run_edit_fm_stations+0x13c>
    30d4:	89 c0       	rjmp	.+274    	; 0x31e8 <run_edit_fm_stations+0x24e>
	    if (channel > 0) channel--; else channel = FM_STATIONS - 1;
    30d6:	80 91 2a 05 	lds	r24, 0x052A
    30da:	88 23       	and	r24, r24
    30dc:	11 f0       	breq	.+4      	; 0x30e2 <run_edit_fm_stations+0x148>
    30de:	81 50       	subi	r24, 0x01	; 1
    30e0:	01 c0       	rjmp	.+2      	; 0x30e4 <run_edit_fm_stations+0x14a>
    30e2:	8d e1       	ldi	r24, 0x1D	; 29
    30e4:	80 93 2a 05 	sts	0x052A, r24
	    tuner_SetChan(tuner_GetChan(channel));
    30e8:	80 91 2a 05 	lds	r24, 0x052A
    30ec:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    30f0:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
    30f4:	79 c0       	rjmp	.+242    	; 0x31e8 <run_edit_fm_stations+0x24e>
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_DOWN:
	  if (nedit == FM_NORMAL_MODE) {
    30f6:	80 91 23 05 	lds	r24, 0x0523
    30fa:	88 23       	and	r24, r24
    30fc:	09 f0       	breq	.+2      	; 0x3100 <run_edit_fm_stations+0x166>
    30fe:	74 c0       	rjmp	.+232    	; 0x31e8 <run_edit_fm_stations+0x24e>
	    if (channel < FM_STATIONS - 1) channel++; else channel = 0;
    3100:	80 91 2a 05 	lds	r24, 0x052A
    3104:	8d 31       	cpi	r24, 0x1D	; 29
    3106:	10 f4       	brcc	.+4      	; 0x310c <run_edit_fm_stations+0x172>
    3108:	8f 5f       	subi	r24, 0xFF	; 255
    310a:	ec cf       	rjmp	.-40     	; 0x30e4 <run_edit_fm_stations+0x14a>
    310c:	10 92 2a 05 	sts	0x052A, r1
    3110:	eb cf       	rjmp	.-42     	; 0x30e8 <run_edit_fm_stations+0x14e>
	    tuner_SetChan(tuner_GetChan(channel));
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_fm_stations();
    3118:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <show_lcd_edit_fm_stations>
	  if (nedit == FM_NORMAL_MODE) {
    311c:	80 91 23 05 	lds	r24, 0x0523
    3120:	88 23       	and	r24, r24
    3122:	29 f4       	brne	.+10     	; 0x312e <run_edit_fm_stations+0x194>
	    tda7313Set_Param_down(mmenu);
    3124:	80 91 20 05 	lds	r24, 0x0520
    3128:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <tda7313Set_Param_down>
    312c:	22 c0       	rjmp	.+68     	; 0x3172 <run_edit_fm_stations+0x1d8>
        RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
	  } else {
        if ( tuner_GetChan(channel) > FM_CHAN_MIN) tuner_SetChan(tuner_GetChan(channel) - 1);
    312e:	80 91 2a 05 	lds	r24, 0x052A
    3132:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    3136:	88 23       	and	r24, r24
    3138:	39 f0       	breq	.+14     	; 0x3148 <run_edit_fm_stations+0x1ae>
    313a:	80 91 2a 05 	lds	r24, 0x052A
    313e:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    3142:	81 50       	subi	r24, 0x01	; 1
    3144:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
		tuner_SetChannel(channel, tuner_GetChan(channel) - 1);
    3148:	10 91 2a 05 	lds	r17, 0x052A
    314c:	81 2f       	mov	r24, r17
    314e:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    3152:	68 2f       	mov	r22, r24
    3154:	61 50       	subi	r22, 0x01	; 1
    3156:	25 c0       	rjmp	.+74     	; 0x31a2 <run_edit_fm_stations+0x208>
	  }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	80 93 1e 05 	sts	0x051E, r24
      show_lcd_edit_fm_stations();
    315e:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <show_lcd_edit_fm_stations>
	  if (nedit == FM_NORMAL_MODE) {
    3162:	80 91 23 05 	lds	r24, 0x0523
    3166:	88 23       	and	r24, r24
    3168:	41 f4       	brne	.+16     	; 0x317a <run_edit_fm_stations+0x1e0>
	    tda7313Set_Param_up(mmenu);
    316a:	80 91 20 05 	lds	r24, 0x0520
    316e:	0e 94 a4 1f 	call	0x3f48	; 0x3f48 <tda7313Set_Param_up>
        RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
    3172:	85 ea       	ldi	r24, 0xA5	; 165
    3174:	60 ed       	ldi	r22, 0xD0	; 208
    3176:	77 e0       	ldi	r23, 0x07	; 7
    3178:	1a c0       	rjmp	.+52     	; 0x31ae <run_edit_fm_stations+0x214>
	  } else {
        if ( tuner_GetChan(channel) < FM_CHAN_MAX) tuner_SetChan(tuner_GetChan(channel) + 1);
    317a:	80 91 2a 05 	lds	r24, 0x052A
    317e:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    3182:	82 3d       	cpi	r24, 0xD2	; 210
    3184:	38 f4       	brcc	.+14     	; 0x3194 <run_edit_fm_stations+0x1fa>
    3186:	80 91 2a 05 	lds	r24, 0x052A
    318a:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    318e:	8f 5f       	subi	r24, 0xFF	; 255
    3190:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
		tuner_SetChannel(channel, tuner_GetChan(channel) + 1);
    3194:	10 91 2a 05 	lds	r17, 0x052A
    3198:	81 2f       	mov	r24, r17
    319a:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    319e:	68 2f       	mov	r22, r24
    31a0:	6f 5f       	subi	r22, 0xFF	; 255
    31a2:	81 2f       	mov	r24, r17
    31a4:	0e 94 c7 21 	call	0x438e	; 0x438e <tuner_SetChannel>
        RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    31a8:	84 ea       	ldi	r24, 0xA4	; 164
    31aa:	60 e1       	ldi	r22, 0x10	; 16
    31ac:	77 e2       	ldi	r23, 0x27	; 39
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	50 e0       	ldi	r21, 0x00	; 0
    31b2:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
	  }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    31b6:	8d ef       	ldi	r24, 0xFD	; 253
    31b8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <RTOS_deleteTask>
    31bc:	15 c0       	rjmp	.+42     	; 0x31e8 <run_edit_fm_stations+0x24e>
      show_lcd_edit_fm_stations();
    break;
    case EVENT_SAVE_PARAM:
      tda7313_Save_vol_fm_edit(tda7313Get_Param(0));
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <tda7313Get_Param>
    31c4:	0e 94 b5 20 	call	0x416a	; 0x416a <tda7313_Save_vol_fm_edit>
    break;
    31c8:	7f c0       	rjmp	.+254    	; 0x32c8 <run_edit_fm_stations+0x32e>
    case EVENT_KEY_SELECT:
	  tuner_SetChannel(channel, 0xFF);
    31ca:	80 91 2a 05 	lds	r24, 0x052A
    31ce:	6f ef       	ldi	r22, 0xFF	; 255
    31d0:	0e 94 c7 21 	call	0x438e	; 0x438e <tuner_SetChannel>
      tuner_SetChan(0xFF);
    31d4:	8f ef       	ldi	r24, 0xFF	; 255
    31d6:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
	  nedit = FM_NORMAL_MODE;
    31da:	10 92 23 05 	sts	0x0523, r1
      tuner_Save_stations(channel, 0xFF);
    31de:	80 91 2a 05 	lds	r24, 0x052A
    31e2:	6f ef       	ldi	r22, 0xFF	; 255
    31e4:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <tuner_Save_stations>
      show_lcd_edit_fm_stations();
    31e8:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <show_lcd_edit_fm_stations>
    break;
    31ec:	6d c0       	rjmp	.+218    	; 0x32c8 <run_edit_fm_stations+0x32e>
    case EVENT_KEY_SET:
	  if (nedit == FM_NORMAL_MODE) {
    31ee:	80 91 23 05 	lds	r24, 0x0523
    31f2:	88 23       	and	r24, r24
    31f4:	e9 f4       	brne	.+58     	; 0x3230 <run_edit_fm_stations+0x296>
	    old_chan = tuner_GetChan(channel);
    31f6:	80 91 2a 05 	lds	r24, 0x052A
    31fa:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    31fe:	80 93 68 05 	sts	0x0568, r24
	    if (old_chan > FM_CHAN_MAX) {
    3202:	83 3d       	cpi	r24, 0xD3	; 211
    3204:	60 f0       	brcs	.+24     	; 0x321e <run_edit_fm_stations+0x284>
		  tuner_SetChannel(channel, get_fm_def_chan());
    3206:	10 91 2a 05 	lds	r17, 0x052A
    320a:	0e 94 31 22 	call	0x4462	; 0x4462 <get_fm_def_chan>
    320e:	68 2f       	mov	r22, r24
    3210:	81 2f       	mov	r24, r17
    3212:	0e 94 c7 21 	call	0x438e	; 0x438e <tuner_SetChannel>
	      tuner_SetChan(get_fm_def_chan());
    3216:	0e 94 31 22 	call	0x4462	; 0x4462 <get_fm_def_chan>
    321a:	0e 94 b1 21 	call	0x4362	; 0x4362 <tuner_SetChan>
		}
        RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    321e:	84 ea       	ldi	r24, 0xA4	; 164
    3220:	60 e1       	ldi	r22, 0x10	; 16
    3222:	77 e2       	ldi	r23, 0x27	; 39
    3224:	40 e0       	ldi	r20, 0x00	; 0
    3226:	50 e0       	ldi	r21, 0x00	; 0
    3228:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
        show_lcd_edit_fm_stations();
    322c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <show_lcd_edit_fm_stations>
	  }
	  if (nedit == FM_EDIT_MODE) {
    3230:	80 91 23 05 	lds	r24, 0x0523
    3234:	81 30       	cpi	r24, 0x01	; 1
    3236:	49 f4       	brne	.+18     	; 0x324a <run_edit_fm_stations+0x2b0>
        tuner_Save_stations(channel, tuner_GetChan(channel));
    3238:	10 91 2a 05 	lds	r17, 0x052A
    323c:	81 2f       	mov	r24, r17
    323e:	0e 94 a7 21 	call	0x434e	; 0x434e <tuner_GetChan>
    3242:	68 2f       	mov	r22, r24
    3244:	81 2f       	mov	r24, r17
    3246:	0e 94 d8 21 	call	0x43b0	; 0x43b0 <tuner_Save_stations>
	  }
      nedit = !nedit;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 91 23 05 	lds	r25, 0x0523
    3250:	91 11       	cpse	r25, r1
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	80 93 23 05 	sts	0x0523, r24
    break;
    3258:	37 c0       	rjmp	.+110    	; 0x32c8 <run_edit_fm_stations+0x32e>
    case EVENT_KEY_MENU:
      RTOS_setTask(EVENT_SET_AS_WAIT_OFF, 0, 0);
    325a:	8c ea       	ldi	r24, 0xAC	; 172
    325c:	60 e0       	ldi	r22, 0x00	; 0
    325e:	70 e0       	ldi	r23, 0x00	; 0
    3260:	40 e0       	ldi	r20, 0x00	; 0
    3262:	50 e0       	ldi	r21, 0x00	; 0
    3264:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    3268:	2f c0       	rjmp	.+94     	; 0x32c8 <run_edit_fm_stations+0x32e>
    case EVENT_STOP_FM_EDIT:
      LCD_clear();
    326a:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      channel = tuner_Load_channel();
    326e:	0e 94 1e 22 	call	0x443c	; 0x443c <tuner_Load_channel>
    3272:	80 93 2a 05 	sts	0x052A, r24
	  tda7313SetInput(tda7313_Load_Input());
    3276:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <tda7313_Load_Input>
    327a:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <tda7313SetInput>
      tda7313Set_Param_no_send(TDA_VOLUME, tda7313_Load_param(tda7313GetInput(), TDA_VOLUME)), 
    327e:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <tda7313GetInput>
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	0e 94 58 20 	call	0x40b0	; 0x40b0 <tda7313_Load_param>
    3288:	68 2f       	mov	r22, r24
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	0e 94 b2 1e 	call	0x3d64	; 0x3d64 <tda7313Set_Param_no_send>
      tda7313SetMute(1);
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
      tuner_Save_all_stations();
    3296:	0e 94 ea 21 	call	0x43d4	; 0x43d4 <tuner_Save_all_stations>
	  if (key_stb == 1) {
    329a:	80 91 25 05 	lds	r24, 0x0525
    329e:	81 30       	cpi	r24, 0x01	; 1
    32a0:	59 f4       	brne	.+22     	; 0x32b8 <run_edit_fm_stations+0x31e>
        key_stb = 0;
    32a2:	10 92 25 05 	sts	0x0525, r1
        LCD_load_bignum();
    32a6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
        SET_STATE(run_standby);
    32aa:	8d e1       	ldi	r24, 0x1D	; 29
    32ac:	91 e1       	ldi	r25, 0x11	; 17
    32ae:	90 93 a6 00 	sts	0x00A6, r25
    32b2:	80 93 a5 00 	sts	0x00A5, r24
    32b6:	08 c0       	rjmp	.+16     	; 0x32c8 <run_edit_fm_stations+0x32e>
	  } else {
        SET_STATE(run_option);
    32b8:	89 e0       	ldi	r24, 0x09	; 9
    32ba:	9b e1       	ldi	r25, 0x1B	; 27
    32bc:	90 93 a6 00 	sts	0x00A6, r25
    32c0:	80 93 a5 00 	sts	0x00A5, r24
        show_lcd_option();
    32c4:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
	  }
    break;
  }
}
    32c8:	1f 91       	pop	r17
    32ca:	08 95       	ret

000032cc <run_alarm>:
}
//=============================================================================
//=============================================================================
void run_alarm(unsigned char event)
{
  switch(event) {
    32cc:	80 3a       	cpi	r24, 0xA0	; 160
    32ce:	29 f0       	breq	.+10     	; 0x32da <run_alarm+0xe>
    32d0:	8d 3f       	cpi	r24, 0xFD	; 253
    32d2:	e9 f0       	breq	.+58     	; 0x330e <run_alarm+0x42>
    32d4:	84 36       	cpi	r24, 0x64	; 100
    32d6:	79 f5       	brne	.+94     	; 0x3336 <run_alarm+0x6a>
    32d8:	0b c0       	rjmp	.+22     	; 0x32f0 <run_alarm+0x24>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    32da:	10 92 1f 05 	sts	0x051F, r1
	  LCD_clear();
    32de:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    32e2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
	  time_alarm = 0;
    32e6:	10 92 27 05 	sts	0x0527, r1
      SET_STATE(run_main);
    32ea:	8b e4       	ldi	r24, 0x4B	; 75
    32ec:	9d e0       	ldi	r25, 0x0D	; 13
    32ee:	0a c0       	rjmp	.+20     	; 0x3304 <run_alarm+0x38>
    break;
    case EVENT_KEY_STANDBY:
	  LCD_clear();
    32f0:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    32f4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      tda7313SetMute(1);
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
      LED_STANDBY_on();
    32fe:	c0 98       	cbi	0x18, 0	; 24
      SET_STATE(run_standby);
    3300:	8d e1       	ldi	r24, 0x1D	; 29
    3302:	91 e1       	ldi	r25, 0x11	; 17
    3304:	90 93 a6 00 	sts	0x00A6, r25
    3308:	80 93 a5 00 	sts	0x00A5, r24
    break;
    330c:	08 95       	ret
    case EVENT_TIMER_SECOND:
	  nokey = 0;
    330e:	10 92 1f 05 	sts	0x051F, r1
      if (time_alarm > 0) {
    3312:	80 91 27 05 	lds	r24, 0x0527
    3316:	88 23       	and	r24, r24
    3318:	21 f0       	breq	.+8      	; 0x3322 <run_alarm+0x56>
		time_alarm--;
    331a:	81 50       	subi	r24, 0x01	; 1
    331c:	80 93 27 05 	sts	0x0527, r24
    3320:	08 95       	ret
      } else {
	    LCD_clear();
    3322:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
        LCD_load_defchar();
    3326:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
        SET_STATE(run_main);
    332a:	8b e4       	ldi	r24, 0x4B	; 75
    332c:	9d e0       	ldi	r25, 0x0D	; 13
    332e:	90 93 a6 00 	sts	0x00A6, r25
    3332:	80 93 a5 00 	sts	0x00A5, r24
    3336:	08 95       	ret

00003338 <check_alarm>:
    break;
  }
}
//=============================================================================
uint8_t check_alarm(void)
{
    3338:	0f 93       	push	r16
    333a:	1f 93       	push	r17
    333c:	df 93       	push	r29
    333e:	cf 93       	push	r28
    3340:	00 d0       	rcall	.+0      	; 0x3342 <check_alarm+0xa>
    3342:	0f 92       	push	r0
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
  unsigned char h,m,s;
  if (a_onoff == 1) {
    3348:	80 91 6b 05 	lds	r24, 0x056B
    334c:	81 30       	cpi	r24, 0x01	; 1
    334e:	21 f5       	brne	.+72     	; 0x3398 <check_alarm+0x60>
    if (BitIsSet(a_wday, RTC_dayofweek())) {
    3350:	00 91 71 05 	lds	r16, 0x0571
    3354:	10 e0       	ldi	r17, 0x00	; 0
    3356:	0e 94 51 04 	call	0x8a2	; 0x8a2 <RTC_dayofweek>
    335a:	98 01       	movw	r18, r16
    335c:	02 c0       	rjmp	.+4      	; 0x3362 <check_alarm+0x2a>
    335e:	35 95       	asr	r19
    3360:	27 95       	ror	r18
    3362:	8a 95       	dec	r24
    3364:	e2 f7       	brpl	.-8      	; 0x335e <check_alarm+0x26>
    3366:	20 ff       	sbrs	r18, 0
    3368:	17 c0       	rjmp	.+46     	; 0x3398 <check_alarm+0x60>
      RTC_get_time(&h,&m,&s);
    336a:	ce 01       	movw	r24, r28
    336c:	01 96       	adiw	r24, 0x01	; 1
    336e:	be 01       	movw	r22, r28
    3370:	6e 5f       	subi	r22, 0xFE	; 254
    3372:	7f 4f       	sbci	r23, 0xFF	; 255
    3374:	ae 01       	movw	r20, r28
    3376:	4d 5f       	subi	r20, 0xFD	; 253
    3378:	5f 4f       	sbci	r21, 0xFF	; 255
    337a:	0e 94 be 03 	call	0x77c	; 0x77c <RTC_get_time>
	  if ((a_hh == h) && (a_mm == m) && (s == 0)) {
    337e:	90 91 a2 05 	lds	r25, 0x05A2
    3382:	89 81       	ldd	r24, Y+1	; 0x01
    3384:	98 17       	cp	r25, r24
    3386:	41 f4       	brne	.+16     	; 0x3398 <check_alarm+0x60>
    3388:	90 91 73 05 	lds	r25, 0x0573
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	98 17       	cp	r25, r24
    3390:	19 f4       	brne	.+6      	; 0x3398 <check_alarm+0x60>
	default:
    break;
  }
}
//=============================================================================
uint8_t check_alarm(void)
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	9b 81       	ldd	r25, Y+3	; 0x03
    3396:	91 11       	cpse	r25, r1
	  if ((a_hh == h) && (a_mm == m) && (s == 0)) {
        return 1;
	  }
	} 
  }
  return 0;
    3398:	80 e0       	ldi	r24, 0x00	; 0
}
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	1f 91       	pop	r17
    33a6:	0f 91       	pop	r16
    33a8:	08 95       	ret

000033aa <set_blink>:
  }
}
//=============================================================================
void set_blink(void)
{
  blinks = !blinks;
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	90 91 1e 05 	lds	r25, 0x051E
    33b0:	91 11       	cpse	r25, r1
    33b2:	80 e0       	ldi	r24, 0x00	; 0
    33b4:	80 93 1e 05 	sts	0x051E, r24
  if (nokey < NOKEY_TIME * 2) {
    33b8:	80 91 1f 05 	lds	r24, 0x051F
    33bc:	8c 33       	cpi	r24, 0x3C	; 60
    33be:	20 f4       	brcc	.+8      	; 0x33c8 <set_blink+0x1e>
    nokey++;
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	80 93 1f 05 	sts	0x051F, r24
    33c6:	07 c0       	rjmp	.+14     	; 0x33d6 <set_blink+0x2c>
  } else {
    RTOS_setTask(EVENT_NOKEY, 0, 0);
    33c8:	8c e9       	ldi	r24, 0x9C	; 156
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
  }
  if ((check_alarm() == 1) && (main_mode != MODE_OPTIONS) && (fault_on == 0)) {
    33d6:	0e 94 9c 19 	call	0x3338	; 0x3338 <check_alarm>
    33da:	81 30       	cpi	r24, 0x01	; 1
    33dc:	b1 f5       	brne	.+108    	; 0x344a <set_blink+0xa0>
    33de:	80 91 2b 05 	lds	r24, 0x052B
    33e2:	84 30       	cpi	r24, 0x04	; 4
    33e4:	91 f1       	breq	.+100    	; 0x344a <set_blink+0xa0>
    33e6:	80 91 28 05 	lds	r24, 0x0528
    33ea:	88 23       	and	r24, r24
    33ec:	71 f5       	brne	.+92     	; 0x344a <set_blink+0xa0>
	BEEP(); 
    33ee:	97 98       	cbi	0x12, 7	; 18
    33f0:	8f e3       	ldi	r24, 0x3F	; 63
    33f2:	9c e9       	ldi	r25, 0x9C	; 156
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <set_blink+0x4a>
    33f8:	00 c0       	rjmp	.+0      	; 0x33fa <set_blink+0x50>
    33fa:	00 00       	nop
    33fc:	97 9a       	sbi	0x12, 7	; 18
    time_alarm = ALARM_BEEP;
    33fe:	88 e7       	ldi	r24, 0x78	; 120
    3400:	80 93 27 05 	sts	0x0527, r24
    tda7313SetInput(FM_INPUT);
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <tda7313SetInput>
    tda7313_Save_Input(FM_INPUT);
    340a:	82 e0       	ldi	r24, 0x02	; 2
    340c:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <tda7313_Save_Input>
	LIGHT_on();
    3410:	ac 9a       	sbi	0x15, 4	; 21
	if (main_mode == MODE_STANDBY) {
    3412:	80 91 2b 05 	lds	r24, 0x052B
    3416:	88 23       	and	r24, r24
    3418:	29 f4       	brne	.+10     	; 0x3424 <set_blink+0x7a>
      tda7313SetMute(1);
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
      RTOS_setTask(EVENT_KEY_STANDBY, 0, 0);
    3420:	84 e6       	ldi	r24, 0x64	; 100
    3422:	07 c0       	rjmp	.+14     	; 0x3432 <set_blink+0x88>
	} else if (main_mode == MODE_NOKEY) {
    3424:	82 30       	cpi	r24, 0x02	; 2
    3426:	11 f4       	brne	.+4      	; 0x342c <set_blink+0x82>
      RTOS_setTask(EVENT_KEY_PRESS, 0, 0);
    3428:	80 ea       	ldi	r24, 0xA0	; 160
    342a:	03 c0       	rjmp	.+6      	; 0x3432 <set_blink+0x88>
	} else if (main_mode == MODE_MUTE) {
    342c:	81 30       	cpi	r24, 0x01	; 1
    342e:	41 f4       	brne	.+16     	; 0x3440 <set_blink+0x96>
      RTOS_setTask(EVENT_KEY_MUTE, 0, 0);
    3430:	85 e6       	ldi	r24, 0x65	; 101
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	40 e0       	ldi	r20, 0x00	; 0
    3438:	50 e0       	ldi	r21, 0x00	; 0
    343a:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    343e:	08 95       	ret
	} else if (main_mode == MODE_MAIN) {
    3440:	83 30       	cpi	r24, 0x03	; 3
    3442:	51 f4       	brne	.+20     	; 0x3458 <set_blink+0xae>
      show_lcd_main();
    3444:	0e 94 be 0c 	call	0x197c	; 0x197c <show_lcd_main>
    3448:	08 95       	ret
	}
 	return;
  }
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    344a:	8d ef       	ldi	r24, 0xFD	; 253
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	40 e0       	ldi	r20, 0x00	; 0
    3452:	50 e0       	ldi	r21, 0x00	; 0
    3454:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    3458:	08 95       	ret

0000345a <show_lcd_edit_rc5_code>:
  }
}
//=============================================================================
void show_lcd_edit_rc5_code(void)
{
  LCD_SetXY(0, 0); LCD_puts(optionmenu[OM_SET_RC5_CODE]);
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	60 e0       	ldi	r22, 0x00	; 0
    345e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    3462:	80 91 cf 02 	lds	r24, 0x02CF
    3466:	90 91 d0 02 	lds	r25, 0x02D0
    346a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(0, 2); LCD_puts(rc5_menu[rc5menu]);
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	62 e0       	ldi	r22, 0x02	; 2
    3472:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    3476:	e0 91 22 05 	lds	r30, 0x0522
    347a:	f0 e0       	ldi	r31, 0x00	; 0
    347c:	ee 0f       	add	r30, r30
    347e:	ff 1f       	adc	r31, r31
    3480:	e9 51       	subi	r30, 0x19	; 25
    3482:	fc 4f       	sbci	r31, 0xFC	; 252
    3484:	80 81       	ld	r24, Z
    3486:	91 81       	ldd	r25, Z+1	; 0x01
    3488:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(14, 2); 
    348c:	8e e0       	ldi	r24, 0x0E	; 14
    348e:	62 e0       	ldi	r22, 0x02	; 2
    3490:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (rc5_code[RC5_CMD][rc5menu] == 0xFF) {
    3494:	e0 91 22 05 	lds	r30, 0x0522
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	e9 58       	subi	r30, 0x89	; 137
    349c:	fa 4f       	sbci	r31, 0xFA	; 250
    349e:	80 81       	ld	r24, Z
    34a0:	8f 3f       	cpi	r24, 0xFF	; 255
    34a2:	29 f4       	brne	.+10     	; 0x34ae <show_lcd_edit_rc5_code+0x54>
    LCD_puts(MSG_NO_RC5);
    34a4:	8c e2       	ldi	r24, 0x2C	; 44
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    34ac:	05 c0       	rjmp	.+10     	; 0x34b8 <show_lcd_edit_rc5_code+0x5e>
  } else {
    print_dec(rc5_code[RC5_CMD][rc5menu], 2, '0');
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	62 e0       	ldi	r22, 0x02	; 2
    34b2:	40 e3       	ldi	r20, 0x30	; 48
    34b4:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
  }
  LCD_dat(':');
    34b8:	8a e3       	ldi	r24, 0x3A	; 58
    34ba:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  if (blinks == 1) {
    34be:	80 91 1e 05 	lds	r24, 0x051E
    34c2:	81 30       	cpi	r24, 0x01	; 1
    34c4:	79 f4       	brne	.+30     	; 0x34e4 <show_lcd_edit_rc5_code+0x8a>
    if (rc5_cmd == 0xFF) {
    34c6:	80 91 0d 04 	lds	r24, 0x040D
    34ca:	8f 3f       	cpi	r24, 0xFF	; 255
    34cc:	29 f4       	brne	.+10     	; 0x34d8 <show_lcd_edit_rc5_code+0x7e>
      LCD_puts(MSG_NO_RC5);
    34ce:	8c e2       	ldi	r24, 0x2C	; 44
    34d0:	91 e0       	ldi	r25, 0x01	; 1
    34d2:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    34d6:	08 95       	ret
    } else {
      print_dec(rc5_cmd, 2, '0');
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	62 e0       	ldi	r22, 0x02	; 2
    34dc:	40 e3       	ldi	r20, 0x30	; 48
    34de:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    34e2:	08 95       	ret
    }
  } else {
    LCD_space(2);
    34e4:	82 e0       	ldi	r24, 0x02	; 2
    34e6:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    34ea:	08 95       	ret

000034ec <run_edit_rc5_code>:
  return 0;
}
//=============================================================================
//=============================================================================
void run_edit_rc5_code(unsigned char event)
{
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	0f 92       	push	r0
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
  if (event < EVENT_RC5_CODE_MAX) {
    34f6:	83 36       	cpi	r24, 0x63	; 99
    34f8:	48 f4       	brcc	.+18     	; 0x350c <run_edit_rc5_code+0x20>
    blinks = 1;
    34fa:	91 e0       	ldi	r25, 0x01	; 1
    34fc:	90 93 1e 05 	sts	0x051E, r25
    rc5_cmd = event;
    3500:	80 93 0d 04 	sts	0x040D, r24
    show_lcd_edit_rc5_code();
    3504:	89 83       	std	Y+1, r24	; 0x01
    3506:	0e 94 2d 1a 	call	0x345a	; 0x345a <show_lcd_edit_rc5_code>
    350a:	89 81       	ldd	r24, Y+1	; 0x01
  }
  switch(event) {
    350c:	8c 36       	cpi	r24, 0x6C	; 108
    350e:	09 f4       	brne	.+2      	; 0x3512 <run_edit_rc5_code+0x26>
    3510:	68 c0       	rjmp	.+208    	; 0x35e2 <run_edit_rc5_code+0xf6>
    3512:	8d 36       	cpi	r24, 0x6D	; 109
    3514:	78 f4       	brcc	.+30     	; 0x3534 <run_edit_rc5_code+0x48>
    3516:	87 36       	cpi	r24, 0x67	; 103
    3518:	09 f4       	brne	.+2      	; 0x351c <run_edit_rc5_code+0x30>
    351a:	4a c0       	rjmp	.+148    	; 0x35b0 <run_edit_rc5_code+0xc4>
    351c:	88 36       	cpi	r24, 0x68	; 104
    351e:	20 f4       	brcc	.+8      	; 0x3528 <run_edit_rc5_code+0x3c>
    3520:	84 36       	cpi	r24, 0x64	; 100
    3522:	09 f0       	breq	.+2      	; 0x3526 <run_edit_rc5_code+0x3a>
    3524:	72 c0       	rjmp	.+228    	; 0x360a <run_edit_rc5_code+0x11e>
    3526:	22 c0       	rjmp	.+68     	; 0x356c <run_edit_rc5_code+0x80>
    3528:	88 36       	cpi	r24, 0x68	; 104
    352a:	69 f1       	breq	.+90     	; 0x3586 <run_edit_rc5_code+0x9a>
    352c:	89 36       	cpi	r24, 0x69	; 105
    352e:	09 f0       	breq	.+2      	; 0x3532 <run_edit_rc5_code+0x46>
    3530:	6c c0       	rjmp	.+216    	; 0x360a <run_edit_rc5_code+0x11e>
    3532:	33 c0       	rjmp	.+102    	; 0x359a <run_edit_rc5_code+0xae>
    3534:	80 3a       	cpi	r24, 0xA0	; 160
    3536:	b9 f0       	breq	.+46     	; 0x3566 <run_edit_rc5_code+0x7a>
    3538:	81 3a       	cpi	r24, 0xA1	; 161
    353a:	20 f4       	brcc	.+8      	; 0x3544 <run_edit_rc5_code+0x58>
    353c:	8c 39       	cpi	r24, 0x9C	; 156
    353e:	09 f0       	breq	.+2      	; 0x3542 <run_edit_rc5_code+0x56>
    3540:	64 c0       	rjmp	.+200    	; 0x360a <run_edit_rc5_code+0x11e>
    3542:	07 c0       	rjmp	.+14     	; 0x3552 <run_edit_rc5_code+0x66>
    3544:	80 3b       	cpi	r24, 0xB0	; 176
    3546:	09 f4       	brne	.+2      	; 0x354a <run_edit_rc5_code+0x5e>
    3548:	59 c0       	rjmp	.+178    	; 0x35fc <run_edit_rc5_code+0x110>
    354a:	8d 3f       	cpi	r24, 0xFD	; 253
    354c:	09 f0       	breq	.+2      	; 0x3550 <run_edit_rc5_code+0x64>
    354e:	5d c0       	rjmp	.+186    	; 0x360a <run_edit_rc5_code+0x11e>
    3550:	2c c0       	rjmp	.+88     	; 0x35aa <run_edit_rc5_code+0xbe>
    case EVENT_NOKEY:
	  nokey = 0;
    3552:	10 92 1f 05 	sts	0x051F, r1
      RTOS_setTask(EVENT_KEY_STANDBY, 0, 0);
    3556:	84 e6       	ldi	r24, 0x64	; 100
    3558:	60 e0       	ldi	r22, 0x00	; 0
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	40 e0       	ldi	r20, 0x00	; 0
    355e:	50 e0       	ldi	r21, 0x00	; 0
    3560:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    3564:	52 c0       	rjmp	.+164    	; 0x360a <run_edit_rc5_code+0x11e>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    3566:	10 92 1f 05 	sts	0x051F, r1
    break;
    356a:	4f c0       	rjmp	.+158    	; 0x360a <run_edit_rc5_code+0x11e>
    case EVENT_KEY_STANDBY:
      edit_rc5 = 0;
    356c:	10 92 26 05 	sts	0x0526, r1
	  LCD_clear();
    3570:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    3574:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    3578:	8d e1       	ldi	r24, 0x1D	; 29
    357a:	91 e1       	ldi	r25, 0x11	; 17
    357c:	90 93 a6 00 	sts	0x00A6, r25
    3580:	80 93 a5 00 	sts	0x00A5, r24
    break;
    3584:	42 c0       	rjmp	.+132    	; 0x360a <run_edit_rc5_code+0x11e>
    case EVENT_TIMER_SECOND:
      show_lcd_edit_rc5_code();
    break;
    case EVENT_KEY_UP:
	  if (rc5menu > 0) rc5menu--; else rc5menu = RC5_MENU_MAX;
    3586:	80 91 22 05 	lds	r24, 0x0522
    358a:	88 23       	and	r24, r24
    358c:	11 f0       	breq	.+4      	; 0x3592 <run_edit_rc5_code+0xa6>
    358e:	81 50       	subi	r24, 0x01	; 1
    3590:	01 c0       	rjmp	.+2      	; 0x3594 <run_edit_rc5_code+0xa8>
    3592:	82 e1       	ldi	r24, 0x12	; 18
    3594:	80 93 22 05 	sts	0x0522, r24
    3598:	08 c0       	rjmp	.+16     	; 0x35aa <run_edit_rc5_code+0xbe>
      show_lcd_edit_rc5_code();
    break;
    case EVENT_KEY_DOWN:
	  if (rc5menu < RC5_MENU_MAX) rc5menu++; else rc5menu = 0;
    359a:	80 91 22 05 	lds	r24, 0x0522
    359e:	82 31       	cpi	r24, 0x12	; 18
    35a0:	10 f4       	brcc	.+4      	; 0x35a6 <run_edit_rc5_code+0xba>
    35a2:	8f 5f       	subi	r24, 0xFF	; 255
    35a4:	f7 cf       	rjmp	.-18     	; 0x3594 <run_edit_rc5_code+0xa8>
    35a6:	10 92 22 05 	sts	0x0522, r1
      show_lcd_edit_rc5_code();
    35aa:	0e 94 2d 1a 	call	0x345a	; 0x345a <show_lcd_edit_rc5_code>
    break;
    35ae:	2d c0       	rjmp	.+90     	; 0x360a <run_edit_rc5_code+0x11e>
    case EVENT_KEY_SET:
	  save_rc5code_key(rc5menu, rc5_cmd);
    35b0:	80 91 22 05 	lds	r24, 0x0522
    35b4:	60 91 0d 04 	lds	r22, 0x040D
    35b8:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <save_rc5code_key>
      LCD_SetXY(4, 3); LCD_puts(MSG_SAVE_RC5);
    35bc:	84 e0       	ldi	r24, 0x04	; 4
    35be:	63 e0       	ldi	r22, 0x03	; 3
    35c0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    35c4:	8f e2       	ldi	r24, 0x2F	; 47
    35c6:	91 e0       	ldi	r25, 0x01	; 1
    35c8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
      RTOS_setTask(EVENT_CLEAR, 500, 0);
    35cc:	80 eb       	ldi	r24, 0xB0	; 176
    35ce:	64 ef       	ldi	r22, 0xF4	; 244
    35d0:	71 e0       	ldi	r23, 0x01	; 1
    35d2:	40 e0       	ldi	r20, 0x00	; 0
    35d4:	50 e0       	ldi	r21, 0x00	; 0
    35d6:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
      rc5_cmd = 0xFF;
    35da:	8f ef       	ldi	r24, 0xFF	; 255
    35dc:	80 93 0d 04 	sts	0x040D, r24
    break;
    35e0:	14 c0       	rjmp	.+40     	; 0x360a <run_edit_rc5_code+0x11e>
    case EVENT_KEY_MENU:
	  save_rc5code();
    35e2:	0e 94 04 0a 	call	0x1408	; 0x1408 <save_rc5code>
      edit_rc5 = 0;
    35e6:	10 92 26 05 	sts	0x0526, r1
      SET_STATE(run_option);
    35ea:	89 e0       	ldi	r24, 0x09	; 9
    35ec:	9b e1       	ldi	r25, 0x1B	; 27
    35ee:	90 93 a6 00 	sts	0x00A6, r25
    35f2:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    35f6:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
    break;
    35fa:	07 c0       	rjmp	.+14     	; 0x360a <run_edit_rc5_code+0x11e>
    case EVENT_CLEAR:
      LCD_SetXY(0, 3); LCD_space(20);
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	63 e0       	ldi	r22, 0x03	; 3
    3600:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    3604:	84 e1       	ldi	r24, 0x14	; 20
    3606:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    break;
  }
}
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <run_option>:
  LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
}
//=============================================================================
void run_option(unsigned char event)
{
  switch(event) {
    3612:	8c 36       	cpi	r24, 0x6C	; 108
    3614:	09 f4       	brne	.+2      	; 0x3618 <run_option+0x6>
    3616:	fe c0       	rjmp	.+508    	; 0x3814 <run_option+0x202>
    3618:	8d 36       	cpi	r24, 0x6D	; 109
    361a:	78 f4       	brcc	.+30     	; 0x363a <run_option+0x28>
    361c:	87 36       	cpi	r24, 0x67	; 103
    361e:	09 f4       	brne	.+2      	; 0x3622 <run_option+0x10>
    3620:	40 c0       	rjmp	.+128    	; 0x36a2 <run_option+0x90>
    3622:	88 36       	cpi	r24, 0x68	; 104
    3624:	20 f4       	brcc	.+8      	; 0x362e <run_option+0x1c>
    3626:	84 36       	cpi	r24, 0x64	; 100
    3628:	09 f0       	breq	.+2      	; 0x362c <run_option+0x1a>
    362a:	02 c1       	rjmp	.+516    	; 0x3830 <run_option+0x21e>
    362c:	21 c0       	rjmp	.+66     	; 0x3670 <run_option+0x5e>
    362e:	88 36       	cpi	r24, 0x68	; 104
    3630:	19 f1       	breq	.+70     	; 0x3678 <run_option+0x66>
    3632:	89 36       	cpi	r24, 0x69	; 105
    3634:	09 f0       	breq	.+2      	; 0x3638 <run_option+0x26>
    3636:	fc c0       	rjmp	.+504    	; 0x3830 <run_option+0x21e>
    3638:	29 c0       	rjmp	.+82     	; 0x368c <run_option+0x7a>
    363a:	89 3a       	cpi	r24, 0xA9	; 169
    363c:	09 f4       	brne	.+2      	; 0x3640 <run_option+0x2e>
    363e:	d5 c0       	rjmp	.+426    	; 0x37ea <run_option+0x1d8>
    3640:	8a 3a       	cpi	r24, 0xAA	; 170
    3642:	30 f4       	brcc	.+12     	; 0x3650 <run_option+0x3e>
    3644:	8c 39       	cpi	r24, 0x9C	; 156
    3646:	59 f0       	breq	.+22     	; 0x365e <run_option+0x4c>
    3648:	80 3a       	cpi	r24, 0xA0	; 160
    364a:	09 f0       	breq	.+2      	; 0x364e <run_option+0x3c>
    364c:	f1 c0       	rjmp	.+482    	; 0x3830 <run_option+0x21e>
    364e:	0d c0       	rjmp	.+26     	; 0x366a <run_option+0x58>
    3650:	8b 3a       	cpi	r24, 0xAB	; 171
    3652:	09 f4       	brne	.+2      	; 0x3656 <run_option+0x44>
    3654:	dd c0       	rjmp	.+442    	; 0x3810 <run_option+0x1fe>
    3656:	8d 3f       	cpi	r24, 0xFD	; 253
    3658:	09 f0       	breq	.+2      	; 0x365c <run_option+0x4a>
    365a:	ea c0       	rjmp	.+468    	; 0x3830 <run_option+0x21e>
    365c:	1f c0       	rjmp	.+62     	; 0x369c <run_option+0x8a>
    case EVENT_NOKEY:
      main_mode = MODE_NOKEY;
    365e:	82 e0       	ldi	r24, 0x02	; 2
    3660:	80 93 2b 05 	sts	0x052B, r24
	  nokey = 0;
    3664:	10 92 1f 05 	sts	0x051F, r1
    3668:	03 c0       	rjmp	.+6      	; 0x3670 <run_option+0x5e>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    366a:	10 92 1f 05 	sts	0x051F, r1
    break;
    366e:	08 95       	ret
    case EVENT_KEY_STANDBY:
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    3670:	8c e6       	ldi	r24, 0x6C	; 108
    3672:	60 e0       	ldi	r22, 0x00	; 0
    3674:	70 e0       	ldi	r23, 0x00	; 0
    3676:	c7 c0       	rjmp	.+398    	; 0x3806 <run_option+0x1f4>
    break;
    case EVENT_TIMER_SECOND:
      show_lcd_option();
    break;
    case EVENT_KEY_UP:
	  if (omenu > 0) omenu--; else omenu = OPTION_MAX;
    3678:	80 91 21 05 	lds	r24, 0x0521
    367c:	88 23       	and	r24, r24
    367e:	11 f0       	breq	.+4      	; 0x3684 <run_option+0x72>
    3680:	81 50       	subi	r24, 0x01	; 1
    3682:	01 c0       	rjmp	.+2      	; 0x3686 <run_option+0x74>
    3684:	87 e0       	ldi	r24, 0x07	; 7
    3686:	80 93 21 05 	sts	0x0521, r24
    368a:	08 c0       	rjmp	.+16     	; 0x369c <run_option+0x8a>
      show_lcd_option();
    break;
    case EVENT_KEY_DOWN:
	  if (omenu < OPTION_MAX) omenu++; else omenu = 0;
    368c:	80 91 21 05 	lds	r24, 0x0521
    3690:	87 30       	cpi	r24, 0x07	; 7
    3692:	10 f4       	brcc	.+4      	; 0x3698 <run_option+0x86>
    3694:	8f 5f       	subi	r24, 0xFF	; 255
    3696:	f7 cf       	rjmp	.-18     	; 0x3686 <run_option+0x74>
    3698:	10 92 21 05 	sts	0x0521, r1
      show_lcd_option();
    369c:	0e 94 38 10 	call	0x2070	; 0x2070 <show_lcd_option>
    break;
    36a0:	08 95       	ret
    case EVENT_KEY_SET:
      nedit = 0;
    36a2:	10 92 23 05 	sts	0x0523, r1
      switch(omenu) {
    36a6:	80 91 21 05 	lds	r24, 0x0521
    36aa:	83 30       	cpi	r24, 0x03	; 3
    36ac:	09 f4       	brne	.+2      	; 0x36b0 <run_option+0x9e>
    36ae:	44 c0       	rjmp	.+136    	; 0x3738 <run_option+0x126>
    36b0:	84 30       	cpi	r24, 0x04	; 4
    36b2:	28 f4       	brcc	.+10     	; 0x36be <run_option+0xac>
    36b4:	81 30       	cpi	r24, 0x01	; 1
    36b6:	09 f1       	breq	.+66     	; 0x36fa <run_option+0xe8>
    36b8:	82 30       	cpi	r24, 0x02	; 2
    36ba:	80 f5       	brcc	.+96     	; 0x371c <run_option+0x10a>
    36bc:	0d c0       	rjmp	.+26     	; 0x36d8 <run_option+0xc6>
    36be:	85 30       	cpi	r24, 0x05	; 5
    36c0:	09 f4       	brne	.+2      	; 0x36c4 <run_option+0xb2>
    36c2:	53 c0       	rjmp	.+166    	; 0x376a <run_option+0x158>
    36c4:	85 30       	cpi	r24, 0x05	; 5
    36c6:	08 f4       	brcc	.+2      	; 0x36ca <run_option+0xb8>
    36c8:	43 c0       	rjmp	.+134    	; 0x3750 <run_option+0x13e>
    36ca:	86 30       	cpi	r24, 0x06	; 6
    36cc:	09 f4       	brne	.+2      	; 0x36d0 <run_option+0xbe>
    36ce:	5d c0       	rjmp	.+186    	; 0x378a <run_option+0x178>
    36d0:	87 30       	cpi	r24, 0x07	; 7
    36d2:	09 f0       	breq	.+2      	; 0x36d6 <run_option+0xc4>
    36d4:	ad c0       	rjmp	.+346    	; 0x3830 <run_option+0x21e>
    36d6:	79 c0       	rjmp	.+242    	; 0x37ca <run_option+0x1b8>
        case OM_SET_TIME:
          RTC_get_time(&hh, &mm, &ss);
    36d8:	80 ea       	ldi	r24, 0xA0	; 160
    36da:	95 e0       	ldi	r25, 0x05	; 5
    36dc:	69 e6       	ldi	r22, 0x69	; 105
    36de:	75 e0       	ldi	r23, 0x05	; 5
    36e0:	4e e6       	ldi	r20, 0x6E	; 110
    36e2:	55 e0       	ldi	r21, 0x05	; 5
    36e4:	0e 94 be 03 	call	0x77c	; 0x77c <RTC_get_time>
          SET_STATE(run_edit_time);
    36e8:	86 e5       	ldi	r24, 0x56	; 86
    36ea:	92 e1       	ldi	r25, 0x12	; 18
    36ec:	90 93 a6 00 	sts	0x00A6, r25
    36f0:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_time();
    36f4:	0e 94 00 12 	call	0x2400	; 0x2400 <show_lcd_edit_time>
        break;
    36f8:	08 95       	ret
        case OM_SET_DATE:
          RTC_get_date(&dd, &ms, &yy);
    36fa:	82 e7       	ldi	r24, 0x72	; 114
    36fc:	95 e0       	ldi	r25, 0x05	; 5
    36fe:	60 e7       	ldi	r22, 0x70	; 112
    3700:	75 e0       	ldi	r23, 0x05	; 5
    3702:	4d e9       	ldi	r20, 0x9D	; 157
    3704:	55 e0       	ldi	r21, 0x05	; 5
    3706:	0e 94 89 03 	call	0x712	; 0x712 <RTC_get_date>
          SET_STATE(run_edit_date);
    370a:	89 e5       	ldi	r24, 0x59	; 89
    370c:	93 e1       	ldi	r25, 0x13	; 19
    370e:	90 93 a6 00 	sts	0x00A6, r25
    3712:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_date();
    3716:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <show_lcd_edit_date>
        break;
    371a:	08 95       	ret
        case OM_SET_ALARM:
          KBD_set_type(0);
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
          load_alarm_param();
    3722:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <load_alarm_param>
          SET_STATE(run_edit_alarm);
    3726:	82 ef       	ldi	r24, 0xF2	; 242
    3728:	94 e1       	ldi	r25, 0x14	; 20
    372a:	90 93 a6 00 	sts	0x00A6, r25
    372e:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_alarm();
    3732:	0e 94 04 14 	call	0x2808	; 0x2808 <show_lcd_edit_alarm>
        break;
    3736:	08 95       	ret
        case OM_SET_STANBY_OUT:
		  KBD_set_type(0);
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
          SET_STATE(run_edit_stb_out);
    373e:	8e ef       	ldi	r24, 0xFE	; 254
    3740:	96 e1       	ldi	r25, 0x16	; 22
    3742:	90 93 a6 00 	sts	0x00A6, r25
    3746:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_stb_out();
    374a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <show_lcd_edit_stb_out>
        break;
    374e:	08 95       	ret
        case OM_SET_TEMP_MAX:
		  old_max_temp = max_temp;
    3750:	80 91 a1 05 	lds	r24, 0x05A1
    3754:	80 93 6f 05 	sts	0x056F, r24
          SET_STATE(run_edit_temp_max);
    3758:	83 e8       	ldi	r24, 0x83	; 131
    375a:	96 e1       	ldi	r25, 0x16	; 22
    375c:	90 93 a6 00 	sts	0x00A6, r25
    3760:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_temp_max();
    3764:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <show_lcd_edit_temp_max>
        break;
    3768:	08 95       	ret
        case OM_SET_AS_TIME_ON:
		  KBD_set_type(0);
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
		  old_as_wait = as_wait;
    3770:	80 91 76 05 	lds	r24, 0x0576
    3774:	80 93 9f 05 	sts	0x059F, r24
          SET_STATE(run_edit_as_wait);
    3778:	8f ef       	ldi	r24, 0xFF	; 255
    377a:	95 e1       	ldi	r25, 0x15	; 21
    377c:	90 93 a6 00 	sts	0x00A6, r25
    3780:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_as_wait();
    3784:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <show_lcd_edit_as_wait>
        break;
    3788:	08 95       	ret
        case OM_SET_FM_STATIONS:
	      LCD_clear();
    378a:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
          channel = 0;
    378e:	10 92 2a 05 	sts	0x052A, r1
		  key_stb = 0;
    3792:	10 92 25 05 	sts	0x0525, r1
          tda7313SetMute(1);
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <tda7313SetMute>
		  tda7313SetInput(FM_INPUT);
    379c:	82 e0       	ldi	r24, 0x02	; 2
    379e:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <tda7313SetInput>
	      tda7313Set_Param(MM_VOLUME, 0);
    37a2:	80 e0       	ldi	r24, 0x00	; 0
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <tda7313Set_Param>
          SET_STATE(run_edit_fm_stations);
    37aa:	8d ec       	ldi	r24, 0xCD	; 205
    37ac:	97 e1       	ldi	r25, 0x17	; 23
    37ae:	90 93 a6 00 	sts	0x00A6, r25
    37b2:	80 93 a5 00 	sts	0x00A5, r24
          RTOS_setTask(EVENT_SET_STB_OUT_ON, 0, 0);
    37b6:	89 ea       	ldi	r24, 0xA9	; 169
    37b8:	60 e0       	ldi	r22, 0x00	; 0
    37ba:	70 e0       	ldi	r23, 0x00	; 0
    37bc:	40 e0       	ldi	r20, 0x00	; 0
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
		  show_lcd_edit_fm_stations();
    37c4:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <show_lcd_edit_fm_stations>
        break;
    37c8:	08 95       	ret
        case OM_SET_RC5_CODE:
	      LCD_clear();
    37ca:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
		  rc5menu = KEY_STANDBY;
    37ce:	10 92 22 05 	sts	0x0522, r1
		  edit_rc5 = 1;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	80 93 26 05 	sts	0x0526, r24
          SET_STATE(run_edit_rc5_code);
    37d8:	86 e7       	ldi	r24, 0x76	; 118
    37da:	9a e1       	ldi	r25, 0x1A	; 26
    37dc:	90 93 a6 00 	sts	0x00A6, r25
    37e0:	80 93 a5 00 	sts	0x00A5, r24
		  show_lcd_edit_rc5_code();
    37e4:	0e 94 2d 1a 	call	0x345a	; 0x345a <show_lcd_edit_rc5_code>
        break;
    37e8:	08 95       	ret
      }
    break;
    case EVENT_SET_STB_OUT_ON:
      if (load_stb_out() == 1) { LED_STB_OUT_0; } else { LED_STB_OUT_1; }
    37ea:	0e 94 b4 0a 	call	0x1568	; 0x1568 <load_stb_out>
    37ee:	81 30       	cpi	r24, 0x01	; 1
    37f0:	11 f4       	brne	.+4      	; 0x37f6 <run_option+0x1e4>
    37f2:	c2 98       	cbi	0x18, 2	; 24
    37f4:	01 c0       	rjmp	.+2      	; 0x37f8 <run_option+0x1e6>
    37f6:	c2 9a       	sbi	0x18, 2	; 24
      RTOS_setTask(EVENT_SET_AS_WAIT_ON, (as_wait * 200), 0);
    37f8:	60 91 76 05 	lds	r22, 0x0576
    37fc:	88 ec       	ldi	r24, 0xC8	; 200
    37fe:	68 9f       	mul	r22, r24
    3800:	b0 01       	movw	r22, r0
    3802:	11 24       	eor	r1, r1
    3804:	8b ea       	ldi	r24, 0xAB	; 171
    3806:	40 e0       	ldi	r20, 0x00	; 0
    3808:	50 e0       	ldi	r21, 0x00	; 0
    380a:	0e 94 17 07 	call	0xe2e	; 0xe2e <RTOS_setTask>
    break;
    380e:	08 95       	ret
    case EVENT_SET_AS_WAIT_ON:
	  LED_AC_WAIT_on();
    3810:	c3 9a       	sbi	0x18, 3	; 24
    break;
    3812:	08 95       	ret
    case EVENT_KEY_MENU:
      main_mode = MODE_STANDBY;
    3814:	10 92 2b 05 	sts	0x052B, r1
	  omenu = 0;
    3818:	10 92 21 05 	sts	0x0521, r1
	  LCD_clear();
    381c:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    3820:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    3824:	8d e1       	ldi	r24, 0x1D	; 29
    3826:	91 e1       	ldi	r25, 0x11	; 17
    3828:	90 93 a6 00 	sts	0x00A6, r25
    382c:	80 93 a5 00 	sts	0x00A5, r24
    3830:	08 95       	ret

00003832 <ds18x20SendBit>:
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit)
{
  cli();
    3832:	f8 94       	cli
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;						/* Pin as output (0) */
    3834:	bc 9a       	sbi	0x17, 4	; 23
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
    3836:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3838:	90 e2       	ldi	r25, 0x20	; 32
    383a:	9a 95       	dec	r25
    383c:	f1 f7       	brne	.-4      	; 0x383a <ds18x20SendBit+0x8>
  _delay_us(6);
  if (!bit)	_delay_us(54);
    383e:	88 23       	and	r24, r24
    3840:	31 f4       	brne	.+12     	; 0x384e <ds18x20SendBit+0x1c>
    3842:	e7 ed       	ldi	r30, 0xD7	; 215
    3844:	f0 e0       	ldi	r31, 0x00	; 0
    3846:	31 97       	sbiw	r30, 0x01	; 1
    3848:	f1 f7       	brne	.-4      	; 0x3846 <ds18x20SendBit+0x14>
    384a:	00 c0       	rjmp	.+0      	; 0x384c <ds18x20SendBit+0x1a>
    384c:	00 00       	nop
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
    384e:	bc 98       	cbi	0x17, 4	; 23
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
    3850:	c4 9a       	sbi	0x18, 4	; 24
    3852:	f5 e3       	ldi	r31, 0x35	; 53
    3854:	fa 95       	dec	r31
    3856:	f1 f7       	brne	.-4      	; 0x3854 <ds18x20SendBit+0x22>
    3858:	00 00       	nop
  _delay_us(10);
  if (bit) _delay_us(54);
    385a:	88 23       	and	r24, r24
    385c:	31 f0       	breq	.+12     	; 0x386a <ds18x20SendBit+0x38>
    385e:	87 ed       	ldi	r24, 0xD7	; 215
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	01 97       	sbiw	r24, 0x01	; 1
    3864:	f1 f7       	brne	.-4      	; 0x3862 <ds18x20SendBit+0x30>
    3866:	00 c0       	rjmp	.+0      	; 0x3868 <ds18x20SendBit+0x36>
    3868:	00 00       	nop
  sei();
    386a:	78 94       	sei
  return;
}
    386c:	08 95       	ret

0000386e <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
static void ds18x20SendByte(uint8_t byte)
{
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	08 2f       	mov	r16, r24
    3874:	18 e0       	ldi	r17, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01);
    3876:	80 2f       	mov	r24, r16
    3878:	81 70       	andi	r24, 0x01	; 1
    387a:	0e 94 19 1c 	call	0x3832	; 0x3832 <ds18x20SendBit>
	byte >>= 1;
    387e:	06 95       	lsr	r16
    3880:	11 50       	subi	r17, 0x01	; 1
}
//=============================================================================
static void ds18x20SendByte(uint8_t byte)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    3882:	c9 f7       	brne	.-14     	; 0x3876 <ds18x20SendByte+0x8>
	ds18x20SendBit(byte & 0x01);
	byte >>= 1;
  }
  return;
}
    3884:	1f 91       	pop	r17
    3886:	0f 91       	pop	r16
    3888:	08 95       	ret

0000388a <ds18x20GetBit>:
}

static uint8_t ds18x20GetBit(void)
{
  uint8_t ret;
  cli();
    388a:	f8 94       	cli
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;						/* Pin as output (0) */
    388c:	bc 9a       	sbi	0x17, 4	; 23
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
    388e:	c4 98       	cbi	0x18, 4	; 24
    3890:	80 e2       	ldi	r24, 0x20	; 32
    3892:	8a 95       	dec	r24
    3894:	f1 f7       	brne	.-4      	; 0x3892 <ds18x20GetBit+0x8>
  _delay_us(6);										/* Strob */
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
    3896:	bc 98       	cbi	0x17, 4	; 23
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
    3898:	c4 9a       	sbi	0x18, 4	; 24
    389a:	e0 e3       	ldi	r30, 0x30	; 48
    389c:	ea 95       	dec	r30
    389e:	f1 f7       	brne	.-4      	; 0x389c <ds18x20GetBit+0x12>
  _delay_us(9);
  ret = PIN(ONE_WIRE) & ONE_WIRE_LINE;
    38a0:	86 b3       	in	r24, 0x16	; 22
    38a2:	eb ed       	ldi	r30, 0xDB	; 219
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	31 97       	sbiw	r30, 0x01	; 1
    38a8:	f1 f7       	brne	.-4      	; 0x38a6 <ds18x20GetBit+0x1c>
    38aa:	00 c0       	rjmp	.+0      	; 0x38ac <ds18x20GetBit+0x22>
    38ac:	00 00       	nop
  _delay_us(55);
  sei();
    38ae:	78 94       	sei
  return ret;
}
    38b0:	80 71       	andi	r24, 0x10	; 16
    38b2:	08 95       	ret

000038b4 <ds18x20IsOnBus>:
static uint8_t devCount = 0;
//=============================================================================
static uint8_t ds18x20IsOnBus(void)
{
  uint8_t ret;
  cli();
    38b4:	f8 94       	cli
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;						/* Pin as output (0) */
    38b6:	bc 9a       	sbi	0x17, 4	; 23
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
    38b8:	c4 98       	cbi	0x18, 4	; 24
    38ba:	8f e7       	ldi	r24, 0x7F	; 127
    38bc:	97 e0       	ldi	r25, 0x07	; 7
    38be:	01 97       	sbiw	r24, 0x01	; 1
    38c0:	f1 f7       	brne	.-4      	; 0x38be <ds18x20IsOnBus+0xa>
    38c2:	00 c0       	rjmp	.+0      	; 0x38c4 <ds18x20IsOnBus+0x10>
    38c4:	00 00       	nop
  _delay_us(480);										/* Reset */
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
    38c6:	bc 98       	cbi	0x17, 4	; 23
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
    38c8:	c4 9a       	sbi	0x18, 4	; 24
    38ca:	e7 e1       	ldi	r30, 0x17	; 23
    38cc:	f1 e0       	ldi	r31, 0x01	; 1
    38ce:	31 97       	sbiw	r30, 0x01	; 1
    38d0:	f1 f7       	brne	.-4      	; 0x38ce <ds18x20IsOnBus+0x1a>
    38d2:	00 c0       	rjmp	.+0      	; 0x38d4 <ds18x20IsOnBus+0x20>
    38d4:	00 00       	nop
  _delay_us(70);										/* Wait for response */
  ret = !(PIN(ONE_WIRE) & ONE_WIRE_LINE);
    38d6:	96 b3       	in	r25, 0x16	; 22
    38d8:	e7 e6       	ldi	r30, 0x67	; 103
    38da:	f6 e0       	ldi	r31, 0x06	; 6
    38dc:	31 97       	sbiw	r30, 0x01	; 1
    38de:	f1 f7       	brne	.-4      	; 0x38dc <ds18x20IsOnBus+0x28>
    38e0:	00 c0       	rjmp	.+0      	; 0x38e2 <ds18x20IsOnBus+0x2e>
    38e2:	00 00       	nop
  _delay_us(410);
  sei();
    38e4:	78 94       	sei
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
  _delay_us(480);										/* Reset */
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
  _delay_us(70);										/* Wait for response */
  ret = !(PIN(ONE_WIRE) & ONE_WIRE_LINE);
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	94 fd       	sbrc	r25, 4
    38ea:	80 e0       	ldi	r24, 0x00	; 0
  _delay_us(410);
  sei();
  return ret;
}
    38ec:	08 95       	ret

000038ee <ds18x20GetAddress>:
  return;
}
//=============================================================================
uint8_t ds18x20GetAddress(uint8_t num, uint8_t c)
{
  if (num > devCount) return 0;
    38ee:	90 91 2d 05 	lds	r25, 0x052D
    38f2:	98 17       	cp	r25, r24
    38f4:	90 f0       	brcs	.+36     	; 0x391a <ds18x20GetAddress+0x2c>
  if (c > 8) return 0;
    38f6:	69 30       	cpi	r22, 0x09	; 9
    38f8:	90 f4       	brcc	.+36     	; 0x391e <ds18x20GetAddress+0x30>
  return (devs[num - 1].id[c]);
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	01 97       	sbiw	r24, 0x01	; 1
    38fe:	fc 01       	movw	r30, r24
    3900:	24 e0       	ldi	r18, 0x04	; 4
    3902:	ee 0f       	add	r30, r30
    3904:	ff 1f       	adc	r31, r31
    3906:	2a 95       	dec	r18
    3908:	e1 f7       	brne	.-8      	; 0x3902 <ds18x20GetAddress+0x14>
    390a:	e8 0f       	add	r30, r24
    390c:	f9 1f       	adc	r31, r25
    390e:	e2 5d       	subi	r30, 0xD2	; 210
    3910:	fa 4f       	sbci	r31, 0xFA	; 250
    3912:	e6 0f       	add	r30, r22
    3914:	f1 1d       	adc	r31, r1
    3916:	81 85       	ldd	r24, Z+9	; 0x09
    3918:	08 95       	ret
  return;
}
//=============================================================================
uint8_t ds18x20GetAddress(uint8_t num, uint8_t c)
{
  if (num > devCount) return 0;
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	08 95       	ret
  if (c > 8) return 0;
    391e:	80 e0       	ldi	r24, 0x00	; 0
  return (devs[num - 1].id[c]);
}
    3920:	08 95       	ret

00003922 <ds18x20SearchDevices>:
  }
  return newDeviation;
}
//=============================================================================
void ds18x20SearchDevices(void)
{
    3922:	af 92       	push	r10
    3924:	bf 92       	push	r11
    3926:	cf 92       	push	r12
    3928:	df 92       	push	r13
    392a:	ef 92       	push	r14
    392c:	ff 92       	push	r15
    392e:	0f 93       	push	r16
    3930:	1f 93       	push	r17
    3932:	cf 93       	push	r28
    3934:	df 93       	push	r29
  uint8_t lastDeviation;
  uint8_t count = 0;
  /* Reset addresses */
  for (i = 0; i < DS18X20_MAX_DEV; i++)
	for (j = 0; j < DS18X20_ID_LEN; j++)
	  devs[i].id[j] = 0x00;
    3936:	10 92 37 05 	sts	0x0537, r1
    393a:	10 92 38 05 	sts	0x0538, r1
    393e:	10 92 39 05 	sts	0x0539, r1
    3942:	10 92 3a 05 	sts	0x053A, r1
    3946:	10 92 3b 05 	sts	0x053B, r1
    394a:	10 92 3c 05 	sts	0x053C, r1
    394e:	10 92 3d 05 	sts	0x053D, r1
    3952:	10 92 3e 05 	sts	0x053E, r1
    3956:	10 92 48 05 	sts	0x0548, r1
    395a:	10 92 49 05 	sts	0x0549, r1
    395e:	10 92 4a 05 	sts	0x054A, r1
    3962:	10 92 4b 05 	sts	0x054B, r1
    3966:	10 92 4c 05 	sts	0x054C, r1
    396a:	10 92 4d 05 	sts	0x054D, r1
    396e:	10 92 4e 05 	sts	0x054E, r1
    3972:	10 92 4f 05 	sts	0x054F, r1
    3976:	cc 24       	eor	r12, r12
    3978:	bb 24       	eor	r11, r11
    397a:	87 e3       	ldi	r24, 0x37	; 55
    397c:	95 e0       	ldi	r25, 0x05	; 5
    397e:	8c 01       	movw	r16, r24
    3980:	dc 01       	movw	r26, r24
    3982:	f8 01       	movw	r30, r16
	/* Search all sensors */
  newID = devs[0].id;
  lastDeviation = 0;
  currentID = newID;
  do {
    for (j = 0; j < DS18X20_ID_LEN; j++)
    3984:	80 e0       	ldi	r24, 0x00	; 0
      newID[j] = currentID[j];
    3986:	9d 91       	ld	r25, X+
    3988:	91 93       	st	Z+, r25
	/* Search all sensors */
  newID = devs[0].id;
  lastDeviation = 0;
  currentID = newID;
  do {
    for (j = 0; j < DS18X20_ID_LEN; j++)
    398a:	8f 5f       	subi	r24, 0xFF	; 255
    398c:	88 30       	cpi	r24, 0x08	; 8
    398e:	d9 f7       	brne	.-10     	; 0x3986 <ds18x20SearchDevices+0x64>
      newID[j] = currentID[j];
  	  if (!ds18x20IsOnBus()) {
    3990:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <ds18x20IsOnBus>
    3994:	88 23       	and	r24, r24
    3996:	19 f4       	brne	.+6      	; 0x399e <ds18x20SearchDevices+0x7c>
	    devCount = 0;
    3998:	10 92 2d 05 	sts	0x052D, r1
	    return;
    399c:	50 c0       	rjmp	.+160    	; 0x3a3e <ds18x20SearchDevices+0x11c>
  uint8_t newDeviation = 0;
  uint8_t bitMask = 0x01;
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
    399e:	80 ef       	ldi	r24, 0xF0	; 240
    39a0:	0e 94 37 1c 	call	0x386e	; 0x386e <ds18x20SendByte>
    39a4:	e8 01       	movw	r28, r16
}
//=============================================================================
static uint8_t ds18x20SearchRom(uint8_t *bitPattern, uint8_t lastDeviation)
{
  uint8_t currBit;
  uint8_t newDeviation = 0;
    39a6:	dd 24       	eor	r13, r13
  uint8_t bitMask = 0x01;
    39a8:	ff 24       	eor	r15, r15
    39aa:	f3 94       	inc	r15
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
  /* Walk through all 64 bits */
  for (currBit = 0; currBit < DS18X20_ID_LEN * 8; currBit++)
    39ac:	ee 24       	eor	r14, r14
  {
	/* Read bit from bus twice. */
	bitA = ds18x20GetBit();
    39ae:	0e 94 45 1c 	call	0x388a	; 0x388a <ds18x20GetBit>
    39b2:	a8 2e       	mov	r10, r24
	bitB = ds18x20GetBit();
    39b4:	0e 94 45 1c 	call	0x388a	; 0x388a <ds18x20GetBit>
	if (bitA && bitB) {								/* Both bits 1 = ERROR */
    39b8:	aa 20       	and	r10, r10
    39ba:	19 f0       	breq	.+6      	; 0x39c2 <ds18x20SearchDevices+0xa0>
    39bc:	88 23       	and	r24, r24
    39be:	81 f0       	breq	.+32     	; 0x39e0 <ds18x20SearchDevices+0xbe>
    39c0:	27 c0       	rjmp	.+78     	; 0x3a10 <ds18x20SearchDevices+0xee>
	  return 0xFF;
	} else if (!(bitA || bitB)) {					/* Both bits 0 */
    39c2:	88 23       	and	r24, r24
    39c4:	81 f4       	brne	.+32     	; 0x39e6 <ds18x20SearchDevices+0xc4>
	  if (currBit == lastDeviation) {				/* Select 1 if device has been selected */
    39c6:	eb 14       	cp	r14, r11
    39c8:	59 f0       	breq	.+22     	; 0x39e0 <ds18x20SearchDevices+0xbe>
    39ca:	98 81       	ld	r25, Y
	  *bitPattern |= bitMask;
	  } else if (currBit > lastDeviation) {		/* Select 0 if no, and remember device */
    39cc:	be 14       	cp	r11, r14
    39ce:	28 f4       	brcc	.+10     	; 0x39da <ds18x20SearchDevices+0xb8>
	    (*bitPattern) &= ~bitMask;
    39d0:	8f 2d       	mov	r24, r15
    39d2:	80 95       	com	r24
    39d4:	89 23       	and	r24, r25
    39d6:	88 83       	st	Y, r24
    39d8:	0c c0       	rjmp	.+24     	; 0x39f2 <ds18x20SearchDevices+0xd0>
	    newDeviation = currBit;
	  } else if (!(*bitPattern & bitMask)) {		 /* Otherwise just remember device */
    39da:	9f 21       	and	r25, r15
    39dc:	51 f0       	breq	.+20     	; 0x39f2 <ds18x20SearchDevices+0xd0>
    39de:	0a c0       	rjmp	.+20     	; 0x39f4 <ds18x20SearchDevices+0xd2>
	    newDeviation = currBit;
	  }
    } else { /* Bits differ */
	  if (bitA) *bitPattern |= bitMask; else *bitPattern &= ~bitMask;
    39e0:	88 81       	ld	r24, Y
    39e2:	8f 29       	or	r24, r15
    39e4:	04 c0       	rjmp	.+8      	; 0x39ee <ds18x20SearchDevices+0xcc>
    39e6:	9f 2d       	mov	r25, r15
    39e8:	90 95       	com	r25
    39ea:	88 81       	ld	r24, Y
    39ec:	89 23       	and	r24, r25
    39ee:	88 83       	st	Y, r24
    39f0:	01 c0       	rjmp	.+2      	; 0x39f4 <ds18x20SearchDevices+0xd2>
	  if (currBit == lastDeviation) {				/* Select 1 if device has been selected */
	  *bitPattern |= bitMask;
	  } else if (currBit > lastDeviation) {		/* Select 0 if no, and remember device */
	    (*bitPattern) &= ~bitMask;
	    newDeviation = currBit;
	  } else if (!(*bitPattern & bitMask)) {		 /* Otherwise just remember device */
    39f2:	de 2c       	mov	r13, r14
	  }
    } else { /* Bits differ */
	  if (bitA) *bitPattern |= bitMask; else *bitPattern &= ~bitMask;
    }
    /* Send the selected bit to the bus. */
    ds18x20SendBit(*bitPattern & bitMask);
    39f4:	88 81       	ld	r24, Y
    39f6:	8f 21       	and	r24, r15
    39f8:	0e 94 19 1c 	call	0x3832	; 0x3832 <ds18x20SendBit>
    /* Adjust bitMask and bitPattern pointer. */
    bitMask <<= 1;
    39fc:	ff 0c       	add	r15, r15
    if (!bitMask)
    39fe:	19 f4       	brne	.+6      	; 0x3a06 <ds18x20SearchDevices+0xe4>
    {
	  bitMask = 0x01;
	  bitPattern++;
    3a00:	21 96       	adiw	r28, 0x01	; 1
    ds18x20SendBit(*bitPattern & bitMask);
    /* Adjust bitMask and bitPattern pointer. */
    bitMask <<= 1;
    if (!bitMask)
    {
	  bitMask = 0x01;
    3a02:	ff 24       	eor	r15, r15
    3a04:	f3 94       	inc	r15
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
  /* Walk through all 64 bits */
  for (currBit = 0; currBit < DS18X20_ID_LEN * 8; currBit++)
    3a06:	e3 94       	inc	r14
    3a08:	8e 2d       	mov	r24, r14
    3a0a:	80 34       	cpi	r24, 0x40	; 64
    3a0c:	81 f6       	brne	.-96     	; 0x39ae <ds18x20SearchDevices+0x8c>
    3a0e:	02 c0       	rjmp	.+4      	; 0x3a14 <ds18x20SearchDevices+0xf2>
  {
	/* Read bit from bus twice. */
	bitA = ds18x20GetBit();
	bitB = ds18x20GetBit();
	if (bitA && bitB) {								/* Both bits 1 = ERROR */
	  return 0xFF;
    3a10:	dd 24       	eor	r13, r13
    3a12:	da 94       	dec	r13
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
	  count++;
    3a14:	c3 94       	inc	r12
	  newID=devs[count].id;
  } while (lastDeviation != 0);
    3a16:	dd 20       	and	r13, r13
    3a18:	81 f0       	breq	.+32     	; 0x3a3a <ds18x20SearchDevices+0x118>
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
	  count++;
	  newID=devs[count].id;
    3a1a:	8c 2d       	mov	r24, r12
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	9c 01       	movw	r18, r24
    3a20:	44 e0       	ldi	r20, 0x04	; 4
    3a22:	22 0f       	add	r18, r18
    3a24:	33 1f       	adc	r19, r19
    3a26:	4a 95       	dec	r20
    3a28:	e1 f7       	brne	.-8      	; 0x3a22 <ds18x20SearchDevices+0x100>
    3a2a:	28 0f       	add	r18, r24
    3a2c:	39 1f       	adc	r19, r25
  	  if (!ds18x20IsOnBus()) {
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
    3a2e:	c8 01       	movw	r24, r16
      newID[j] = currentID[j];
  	  if (!ds18x20IsOnBus()) {
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
    3a30:	bd 2c       	mov	r11, r13
	  currentID = newID;
	  count++;
	  newID=devs[count].id;
    3a32:	89 01       	movw	r16, r18
    3a34:	09 5c       	subi	r16, 0xC9	; 201
    3a36:	1a 4f       	sbci	r17, 0xFA	; 250
    3a38:	a3 cf       	rjmp	.-186    	; 0x3980 <ds18x20SearchDevices+0x5e>
  } while (lastDeviation != 0);
  devCount = count;
    3a3a:	c0 92 2d 05 	sts	0x052D, r12
  return;
}
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	ff 90       	pop	r15
    3a48:	ef 90       	pop	r14
    3a4a:	df 90       	pop	r13
    3a4c:	cf 90       	pop	r12
    3a4e:	bf 90       	pop	r11
    3a50:	af 90       	pop	r10
    3a52:	08 95       	ret

00003a54 <ds18x20Process>:
//=============================================================================
uint8_t ds18x20Process(void)
{
    3a54:	af 92       	push	r10
    3a56:	bf 92       	push	r11
    3a58:	cf 92       	push	r12
    3a5a:	df 92       	push	r13
    3a5c:	ef 92       	push	r14
    3a5e:	ff 92       	push	r15
    3a60:	0f 93       	push	r16
    3a62:	1f 93       	push	r17
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	0f 92       	push	r0
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
static void ds18x20GetAllTemps()
{
  uint8_t i, j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
    3a6e:	ff 24       	eor	r15, r15
    3a70:	5a c0       	rjmp	.+180    	; 0x3b26 <ds18x20Process+0xd2>
  {
	if (ds18x20IsOnBus())
    3a72:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <ds18x20IsOnBus>
    3a76:	88 23       	and	r24, r24
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <ds18x20Process+0x28>
    3a7a:	54 c0       	rjmp	.+168    	; 0x3b24 <ds18x20Process+0xd0>
}
//=============================================================================
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
    3a7c:	85 e5       	ldi	r24, 0x55	; 85
    3a7e:	0e 94 37 1c 	call	0x386e	; 0x386e <ds18x20SendByte>
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
    3a82:	8f 2d       	mov	r24, r15
    3a84:	90 e0       	ldi	r25, 0x00	; 0
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
    3a86:	6c 01       	movw	r12, r24
    3a88:	e4 e0       	ldi	r30, 0x04	; 4
    3a8a:	cc 0c       	add	r12, r12
    3a8c:	dd 1c       	adc	r13, r13
    3a8e:	ea 95       	dec	r30
    3a90:	e1 f7       	brne	.-8      	; 0x3a8a <ds18x20Process+0x36>
    3a92:	c8 0e       	add	r12, r24
    3a94:	d9 1e       	adc	r13, r25
    3a96:	87 e3       	ldi	r24, 0x37	; 55
    3a98:	95 e0       	ldi	r25, 0x05	; 5
    3a9a:	c8 0e       	add	r12, r24
    3a9c:	d9 1e       	adc	r13, r25
    3a9e:	08 e0       	ldi	r16, 0x08	; 8
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
  for (i = 0; i < 8; i++)
	ds18x20SendByte(dev->id[i]);
    3aa0:	d6 01       	movw	r26, r12
    3aa2:	8d 91       	ld	r24, X+
    3aa4:	6d 01       	movw	r12, r26
    3aa6:	0e 94 37 1c 	call	0x386e	; 0x386e <ds18x20SendByte>
    3aaa:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
  for (i = 0; i < 8; i++)
    3aac:	c9 f7       	brne	.-14     	; 0x3aa0 <ds18x20Process+0x4c>
  for (i = 0; i < devCount; i++)
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
    3aae:	8e eb       	ldi	r24, 0xBE	; 190
    3ab0:	0e 94 37 1c 	call	0x386e	; 0x386e <ds18x20SendByte>
    3ab4:	70 e5       	ldi	r23, 0x50	; 80
    3ab6:	a7 2e       	mov	r10, r23
    3ab8:	75 e0       	ldi	r23, 0x05	; 5
    3aba:	b7 2e       	mov	r11, r23
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
    3abc:	85 01       	movw	r16, r10
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
    3abe:	ee 24       	eor	r14, r14
    3ac0:	68 e0       	ldi	r22, 0x08	; 8
    3ac2:	d6 2e       	mov	r13, r22
}
//=============================================================================
static uint8_t ds18x20GetByte(void)
{
  uint8_t i, ret;
  ret = 0;
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    3ac6:	96 95       	lsr	r25
	if (ds18x20GetBit()) ret |= 0x80;
    3ac8:	99 83       	std	Y+1, r25	; 0x01
    3aca:	0e 94 45 1c 	call	0x388a	; 0x388a <ds18x20GetBit>
    3ace:	99 81       	ldd	r25, Y+1	; 0x01
    3ad0:	81 11       	cpse	r24, r1
    3ad2:	90 68       	ori	r25, 0x80	; 128
    3ad4:	da 94       	dec	r13
//=============================================================================
static uint8_t ds18x20GetByte(void)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    3ad6:	b9 f7       	brne	.-18     	; 0x3ac6 <ds18x20Process+0x72>
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
	  for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
		arr[j] = ds18x20GetByte();
    3ad8:	f8 01       	movw	r30, r16
    3ada:	91 93       	st	Z+, r25
    3adc:	8f 01       	movw	r16, r30

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    3ade:	e9 26       	eor	r14, r25
    3ae0:	88 e0       	ldi	r24, 0x08	; 8
    3ae2:	9c e8       	ldi	r25, 0x8C	; 140
    3ae4:	e6 94       	lsr	r14
    3ae6:	08 f4       	brcc	.+2      	; 0x3aea <ds18x20Process+0x96>
    3ae8:	e9 26       	eor	r14, r25
    3aea:	8a 95       	dec	r24
    3aec:	d9 f7       	brne	.-10     	; 0x3ae4 <ds18x20Process+0x90>
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
	  for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    3aee:	f5 e0       	ldi	r31, 0x05	; 5
    3af0:	09 35       	cpi	r16, 0x59	; 89
    3af2:	1f 07       	cpc	r17, r31
    3af4:	29 f7       	brne	.-54     	; 0x3ac0 <ds18x20Process+0x6c>
		arr[j] = ds18x20GetByte();
		crc = _crc_ibutton_update(crc, arr[j]);
	  }
  	  if (crc == 0)
    3af6:	ee 20       	and	r14, r14
    3af8:	a9 f4       	brne	.+42     	; 0x3b24 <ds18x20Process+0xd0>
	  {
		for (j = 0; j < DS18X20_SCRATCH_LEN; j++)  devs[i].sp[j] = arr[j];
    3afa:	8f 2d       	mov	r24, r15
    3afc:	90 e0       	ldi	r25, 0x00	; 0
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
    3afe:	fc 01       	movw	r30, r24
    3b00:	54 e0       	ldi	r21, 0x04	; 4
    3b02:	ee 0f       	add	r30, r30
    3b04:	ff 1f       	adc	r31, r31
    3b06:	5a 95       	dec	r21
    3b08:	e1 f7       	brne	.-8      	; 0x3b02 <ds18x20Process+0xae>
    3b0a:	e8 0f       	add	r30, r24
    3b0c:	f9 1f       	adc	r31, r25
    3b0e:	e2 5d       	subi	r30, 0xD2	; 210
    3b10:	fa 4f       	sbci	r31, 0xFA	; 250
		arr[j] = ds18x20GetByte();
		crc = _crc_ibutton_update(crc, arr[j]);
	  }
  	  if (crc == 0)
	  {
		for (j = 0; j < DS18X20_SCRATCH_LEN; j++)  devs[i].sp[j] = arr[j];
    3b12:	d5 01       	movw	r26, r10
    3b14:	8d 91       	ld	r24, X+
    3b16:	5d 01       	movw	r10, r26
    3b18:	81 93       	st	Z+, r24
    3b1a:	b9 e5       	ldi	r27, 0x59	; 89
    3b1c:	ab 16       	cp	r10, r27
    3b1e:	b5 e0       	ldi	r27, 0x05	; 5
    3b20:	bb 06       	cpc	r11, r27
    3b22:	b9 f7       	brne	.-18     	; 0x3b12 <ds18x20Process+0xbe>
static void ds18x20GetAllTemps()
{
  uint8_t i, j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
    3b24:	f3 94       	inc	r15
    3b26:	80 91 2d 05 	lds	r24, 0x052D
    3b2a:	f8 16       	cp	r15, r24
    3b2c:	08 f4       	brcc	.+2      	; 0x3b30 <ds18x20Process+0xdc>
    3b2e:	a1 cf       	rjmp	.-190    	; 0x3a72 <ds18x20Process+0x1e>
//=============================================================================
uint8_t ds18x20Process(void)
{
  ds18x20GetAllTemps();
  /* Convert temperature */
  if (ds18x20IsOnBus())
    3b30:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <ds18x20IsOnBus>
    3b34:	88 23       	and	r24, r24
    3b36:	41 f0       	breq	.+16     	; 0x3b48 <ds18x20Process+0xf4>
  return;
}
//=============================================================================
static void ds18x20ConvertTemp(void)
{
  ds18x20SendByte(DS18X20_CMD_SKIP_ROM);
    3b38:	8c ec       	ldi	r24, 0xCC	; 204
    3b3a:	0e 94 37 1c 	call	0x386e	; 0x386e <ds18x20SendByte>
  ds18x20SendByte(DS18X20_CMD_CONVERT);
    3b3e:	84 e4       	ldi	r24, 0x44	; 68
    3b40:	0e 94 37 1c 	call	0x386e	; 0x386e <ds18x20SendByte>
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;
    3b44:	c4 9a       	sbi	0x18, 4	; 24
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;
    3b46:	bc 9a       	sbi	0x17, 4	; 23
  ds18x20GetAllTemps();
  /* Convert temperature */
  if (ds18x20IsOnBus())
	ds18x20ConvertTemp();
  return devCount;
}
    3b48:	80 91 2d 05 	lds	r24, 0x052D
    3b4c:	0f 90       	pop	r0
    3b4e:	cf 91       	pop	r28
    3b50:	df 91       	pop	r29
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	ff 90       	pop	r15
    3b58:	ef 90       	pop	r14
    3b5a:	df 90       	pop	r13
    3b5c:	cf 90       	pop	r12
    3b5e:	bf 90       	pop	r11
    3b60:	af 90       	pop	r10
    3b62:	08 95       	ret

00003b64 <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t num)
{
  int16_t ret = devs[num].temp;
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	fc 01       	movw	r30, r24
    3b68:	b4 e0       	ldi	r27, 0x04	; 4
    3b6a:	ee 0f       	add	r30, r30
    3b6c:	ff 1f       	adc	r31, r31
    3b6e:	ba 95       	dec	r27
    3b70:	e1 f7       	brne	.-8      	; 0x3b6a <ds18x20GetTemp+0x6>
    3b72:	e8 0f       	add	r30, r24
    3b74:	f9 1f       	adc	r31, r25
    3b76:	e2 5d       	subi	r30, 0xD2	; 210
    3b78:	fa 4f       	sbci	r31, 0xFA	; 250
    3b7a:	60 81       	ld	r22, Z
    3b7c:	71 81       	ldd	r23, Z+1	; 0x01
  if (devs[num].id[0] == 0x28) /* DS18B20 */
    3b7e:	81 85       	ldd	r24, Z+9	; 0x09
    3b80:	88 32       	cpi	r24, 0x28	; 40
    3b82:	61 f4       	brne	.+24     	; 0x3b9c <ds18x20GetTemp+0x38>
	ret = ret * 5 / 8;
    3b84:	cb 01       	movw	r24, r22
    3b86:	88 0f       	add	r24, r24
    3b88:	99 1f       	adc	r25, r25
    3b8a:	88 0f       	add	r24, r24
    3b8c:	99 1f       	adc	r25, r25
    3b8e:	86 0f       	add	r24, r22
    3b90:	97 1f       	adc	r25, r23
    3b92:	68 e0       	ldi	r22, 0x08	; 8
    3b94:	70 e0       	ldi	r23, 0x00	; 0
    3b96:	0e 94 80 22 	call	0x4500	; 0x4500 <__divmodhi4>
    3b9a:	09 c0       	rjmp	.+18     	; 0x3bae <ds18x20GetTemp+0x4a>
  else if (devs[num].id[0] == 0x10) /* DS18S20 */
    3b9c:	80 31       	cpi	r24, 0x10	; 16
    3b9e:	39 f4       	brne	.+14     	; 0x3bae <ds18x20GetTemp+0x4a>
	ret = ret * 5;
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	88 0f       	add	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	88 0f       	add	r24, r24
    3ba8:	99 1f       	adc	r25, r25
    3baa:	68 0f       	add	r22, r24
    3bac:	79 1f       	adc	r23, r25
	/* Return value is in 0.1В°C units */
  return ret;
}
    3bae:	cb 01       	movw	r24, r22
    3bb0:	08 95       	ret

00003bb2 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(void)
{
  return devCount;
}
    3bb2:	80 91 2d 05 	lds	r24, 0x052D
    3bb6:	08 95       	ret

00003bb8 <RC5_init>:
static uint8_t nbits;
static uint8_t nint;
//=============================================================================
void RC5_init(uint8_t addr)
{
  nint  = 0; nbits = 0; rc5.flip = -1; rc5_addr = addr;
    3bb8:	10 92 5b 05 	sts	0x055B, r1
    3bbc:	10 92 5c 05 	sts	0x055C, r1
    3bc0:	9f ef       	ldi	r25, 0xFF	; 255
    3bc2:	90 93 a5 05 	sts	0x05A5, r25
    3bc6:	80 93 5d 05 	sts	0x055D, r24
        
#if (RC5_PRESCALE==1024)
  TCCR0 = (1 << CS02) | (1 << CS00);
    3bca:	85 e0       	ldi	r24, 0x05	; 5
    3bcc:	83 bf       	out	0x33, r24	; 51
  TCCR0 = (1 << CS01) | (1 << CS00);
#else
#error This RC5_PRESCALE is not supported
#endif /* RC5_PRESCALE */
#if (RC5_INT == RC5_INT0)               
  MCUCR = (MCUCR | (1 << ISC01)) & ~ (1 << ISC00);
    3bce:	85 b7       	in	r24, 0x35	; 53
    3bd0:	8c 7f       	andi	r24, 0xFC	; 252
    3bd2:	82 60       	ori	r24, 0x02	; 2
    3bd4:	85 bf       	out	0x35, r24	; 53
  GIFR = (1 << INTF0);
    3bd6:	80 e4       	ldi	r24, 0x40	; 64
    3bd8:	8a bf       	out	0x3a, r24	; 58
  GICR |= (1 << INT0);
    3bda:	8b b7       	in	r24, 0x3b	; 59
    3bdc:	80 64       	ori	r24, 0x40	; 64
    3bde:	8b bf       	out	0x3b, r24	; 59
  GIFR = (1 << INTF1);
  GICR |= (1 << INT1);
#else
#error please define RC5_INT
#endif /* RC5_INT */
}
    3be0:	08 95       	ret

00003be2 <__vector_11>:
//=============================================================================
ISR(TIMER0_OVF_vect)
{
    3be2:	1f 92       	push	r1
    3be4:	0f 92       	push	r0
    3be6:	0f b6       	in	r0, 0x3f	; 63
    3be8:	0f 92       	push	r0
    3bea:	11 24       	eor	r1, r1
    3bec:	2f 93       	push	r18
    3bee:	3f 93       	push	r19
    3bf0:	4f 93       	push	r20
    3bf2:	8f 93       	push	r24
    3bf4:	9f 93       	push	r25
  TIMSK &= ~(1 << TOIE0);
    3bf6:	89 b7       	in	r24, 0x39	; 57
    3bf8:	8e 7f       	andi	r24, 0xFE	; 254
    3bfa:	89 bf       	out	0x39, r24	; 57
  uint8_t _nbits = nbits;
    3bfc:	20 91 5c 05 	lds	r18, 0x055C
  code_t _code = code;
    3c00:	80 91 59 05 	lds	r24, 0x0559
    3c04:	90 91 5a 05 	lds	r25, 0x055A

  if (26 == _nbits)
    3c08:	2a 31       	cpi	r18, 0x1A	; 26
    3c0a:	19 f4       	brne	.+6      	; 0x3c12 <__vector_11+0x30>
  {
    _nbits++; _code.w <<= 1;
    3c0c:	88 0f       	add	r24, r24
    3c0e:	99 1f       	adc	r25, r25
    3c10:	02 c0       	rjmp	.+4      	; 0x3c16 <__vector_11+0x34>
  }
  if (27 == _nbits && _code.b[1] >= 0x30 /* AGC == 3 */ && 0 > rc5.flip)
    3c12:	2b 31       	cpi	r18, 0x1B	; 27
    3c14:	f9 f4       	brne	.+62     	; 0x3c54 <__vector_11+0x72>
    3c16:	90 33       	cpi	r25, 0x30	; 48
    3c18:	e8 f0       	brcs	.+58     	; 0x3c54 <__vector_11+0x72>
    3c1a:	20 91 a5 05 	lds	r18, 0x05A5
    3c1e:	27 ff       	sbrs	r18, 7
    3c20:	19 c0       	rjmp	.+50     	; 0x3c54 <__vector_11+0x72>
  {
    uint8_t _rc5_code;
    uint8_t _rc5_addr;
    /* we do the bit manipulation stuff by hand, because of code size */
    _rc5_code = _code.b[0] & 0x3f; /* 0b00111111 : #0..#5 */
    3c22:	48 2f       	mov	r20, r24
    _code.w <<= 2;
    3c24:	88 0f       	add	r24, r24
    3c26:	99 1f       	adc	r25, r25
    3c28:	88 0f       	add	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    _rc5_addr = _code.b[1] & 0x1f; /* 0b00011111 : #6..#10 */
    3c2c:	29 2f       	mov	r18, r25
    3c2e:	2f 71       	andi	r18, 0x1F	; 31
    if (rc5_addr & 0x80 || rc5_addr == _rc5_addr)
    3c30:	30 91 5d 05 	lds	r19, 0x055D
    3c34:	37 fd       	sbrc	r19, 7
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <__vector_11+0x5a>
    3c38:	32 17       	cp	r19, r18
    3c3a:	61 f4       	brne	.+24     	; 0x3c54 <__vector_11+0x72>
  if (27 == _nbits && _code.b[1] >= 0x30 /* AGC == 3 */ && 0 > rc5.flip)
  {
    uint8_t _rc5_code;
    uint8_t _rc5_addr;
    /* we do the bit manipulation stuff by hand, because of code size */
    _rc5_code = _code.b[0] & 0x3f; /* 0b00111111 : #0..#5 */
    3c3c:	84 2f       	mov	r24, r20
    3c3e:	8f 73       	andi	r24, 0x3F	; 63
    _code.w <<= 2;
    _rc5_addr = _code.b[1] & 0x1f; /* 0b00011111 : #6..#10 */
    if (rc5_addr & 0x80 || rc5_addr == _rc5_addr)
    {
      rc5.code = _rc5_code + 1;
    3c40:	8f 5f       	subi	r24, 0xFF	; 255
    3c42:	80 93 a3 05 	sts	0x05A3, r24
      rc5.addr = _rc5_addr;
    3c46:	20 93 a4 05 	sts	0x05A4, r18
      signed char flip = 0;
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	95 ff       	sbrs	r25, 5
    3c4e:	80 e0       	ldi	r24, 0x00	; 0
      if (_code.b[1] & 0x20) /* 0b00100000 : #11 */ flip = 1;
      rc5.flip = flip;
    3c50:	80 93 a5 05 	sts	0x05A5, r24
    }
  }
  nint = 0;
    3c54:	10 92 5b 05 	sts	0x055B, r1
  nbits = 0;
    3c58:	10 92 5c 05 	sts	0x055C, r1
#if (RC5_INT == RC5_INT0)               
  MCUCR = (MCUCR | (1 << ISC01)) & ~ (1 << ISC00);
    3c5c:	85 b7       	in	r24, 0x35	; 53
    3c5e:	8c 7f       	andi	r24, 0xFC	; 252
    3c60:	82 60       	ori	r24, 0x02	; 2
    3c62:	85 bf       	out	0x35, r24	; 53
  GIFR = (1 << INTF0);
    3c64:	80 e4       	ldi	r24, 0x40	; 64
    3c66:	8a bf       	out	0x3a, r24	; 58
  GICR |= (1 << INT0);
    3c68:	8b b7       	in	r24, 0x3b	; 59
    3c6a:	80 64       	ori	r24, 0x40	; 64
    3c6c:	8b bf       	out	0x3b, r24	; 59
#elif (RC5_INT == RC5_INT1)             
  MCUCR = (MCUCR | (1 << ISC11)) & ~ (1 << ISC10);
  GIFR = (1 << INTF1);
  GICR |= (1 << INT1);
#endif
}
    3c6e:	9f 91       	pop	r25
    3c70:	8f 91       	pop	r24
    3c72:	4f 91       	pop	r20
    3c74:	3f 91       	pop	r19
    3c76:	2f 91       	pop	r18
    3c78:	0f 90       	pop	r0
    3c7a:	0f be       	out	0x3f, r0	; 63
    3c7c:	0f 90       	pop	r0
    3c7e:	1f 90       	pop	r1
    3c80:	18 95       	reti

00003c82 <__vector_1>:
#if (RC5_INT == RC5_INT0)               
ISR(INT0_vect)
#elif (RC5_INT == RC5_INT1)             
ISR(INT1_vect)
#endif /* RC5_INT */
{
    3c82:	1f 92       	push	r1
    3c84:	0f 92       	push	r0
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	0f 92       	push	r0
    3c8a:	11 24       	eor	r1, r1
    3c8c:	2f 93       	push	r18
    3c8e:	3f 93       	push	r19
    3c90:	4f 93       	push	r20
    3c92:	5f 93       	push	r21
    3c94:	6f 93       	push	r22
    3c96:	7f 93       	push	r23
    3c98:	8f 93       	push	r24
    3c9a:	9f 93       	push	r25
  if (rc5.flip == -1)
    3c9c:	80 91 a5 05 	lds	r24, 0x05A5
    3ca0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ca2:	09 f0       	breq	.+2      	; 0x3ca6 <__vector_1+0x24>
    3ca4:	3e c0       	rjmp	.+124    	; 0x3d22 <__vector_1+0xa0>
  {
  code_t _code = code;
    3ca6:	80 91 59 05 	lds	r24, 0x0559
    3caa:	90 91 5a 05 	lds	r25, 0x055A
  uint8_t _nint = nint;
    3cae:	30 91 5b 05 	lds	r19, 0x055B
  uint8_t tcnt0 = TCNT0;
    3cb2:	22 b7       	in	r18, 0x32	; 50
  TCNT0 = 0;
    3cb4:	12 be       	out	0x32, r1	; 50
        
  if (0 == _nint)
    3cb6:	33 23       	and	r19, r19
    3cb8:	61 f4       	brne	.+24     	; 0x3cd2 <__vector_1+0x50>
  {
  /* INTx on both edges */
#if (RC5_INT == RC5_INT0)               
   MCUCR = (MCUCR | (1 << ISC00)) & ~ (1 << ISC01);
    3cba:	85 b7       	in	r24, 0x35	; 53
    3cbc:	8c 7f       	andi	r24, 0xFC	; 252
    3cbe:	81 60       	ori	r24, 0x01	; 1
    3cc0:	85 bf       	out	0x35, r24	; 53
#elif (RC5_INT == RC5_INT1)             
   MCUCR = (MCUCR | (1 << ISC10)) & ~ (1 << ISC11);
#endif /* RC5_INT */
      
  TIFR = (1 << TOV0);
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	88 bf       	out	0x38, r24	; 56
  TIMSK |= (1 << TOIE0);
    3cc6:	89 b7       	in	r24, 0x39	; 57
    3cc8:	81 60       	ori	r24, 0x01	; 1
    3cca:	89 bf       	out	0x39, r24	; 57
  _code.w = 0;
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	21 c0       	rjmp	.+66     	; 0x3d14 <__vector_1+0x92>
  } else {
    /* Number of bits of the just elapsed period */
    uint8_t n = 1;
    /* Bits received so far */
    uint8_t _nbits = nbits;
    3cd2:	60 91 5c 05 	lds	r22, 0x055C
    /* is TCNT0 close to RC5_TICKS or RC5_TICKS/2 ? */
    if (tcnt0 > RC5_TICKS + RC5_DELTA)
    3cd6:	20 32       	cpi	r18, 0x20	; 32
    3cd8:	b8 f4       	brcc	.+46     	; 0x3d08 <__vector_1+0x86>
      goto invalid;
    else if (tcnt0 < RC5_TICKS/2 - RC5_DELTA)
    3cda:	29 30       	cpi	r18, 0x09	; 9
    3cdc:	a8 f0       	brcs	.+42     	; 0x3d08 <__vector_1+0x86>
      goto invalid;
    else if (tcnt0 > RC5_TICKS - RC5_DELTA)
    3cde:	28 31       	cpi	r18, 0x18	; 24
    3ce0:	20 f4       	brcc	.+8      	; 0x3cea <__vector_1+0x68>
      n = 2;
    else if (tcnt0 > RC5_TICKS/2 + RC5_DELTA)
    3ce2:	22 31       	cpi	r18, 0x12	; 18
    3ce4:	88 f4       	brcc	.+34     	; 0x3d08 <__vector_1+0x86>
  TIFR = (1 << TOV0);
  TIMSK |= (1 << TOIE0);
  _code.w = 0;
  } else {
    /* Number of bits of the just elapsed period */
    uint8_t n = 1;
    3ce6:	21 e0       	ldi	r18, 0x01	; 1
    3ce8:	01 c0       	rjmp	.+2      	; 0x3cec <__vector_1+0x6a>
    if (tcnt0 > RC5_TICKS + RC5_DELTA)
      goto invalid;
    else if (tcnt0 < RC5_TICKS/2 - RC5_DELTA)
      goto invalid;
    else if (tcnt0 > RC5_TICKS - RC5_DELTA)
      n = 2;
    3cea:	22 e0       	ldi	r18, 0x02	; 2
    3cec:	56 2f       	mov	r21, r22
    3cee:	42 2f       	mov	r20, r18
    /* store the just received 1 or 2 bits */
    do {
      _nbits++;
      if (_nbits & 1)
      {
        _code.w <<= 1; _code.b[0] |= _nint & 1;
    3cf0:	73 2f       	mov	r23, r19
    3cf2:	71 70       	andi	r23, 0x01	; 1
      n = 2;
    else if (tcnt0 > RC5_TICKS/2 + RC5_DELTA)
      goto invalid;
    /* store the just received 1 or 2 bits */
    do {
      _nbits++;
    3cf4:	5f 5f       	subi	r21, 0xFF	; 255
      if (_nbits & 1)
    3cf6:	50 ff       	sbrs	r21, 0
    3cf8:	03 c0       	rjmp	.+6      	; 0x3d00 <__vector_1+0x7e>
      {
        _code.w <<= 1; _code.b[0] |= _nint & 1;
    3cfa:	88 0f       	add	r24, r24
    3cfc:	99 1f       	adc	r25, r25
    3cfe:	87 2b       	or	r24, r23
      }
    } // end do
    while (--n);
    3d00:	41 50       	subi	r20, 0x01	; 1
    3d02:	c1 f7       	brne	.-16     	; 0x3cf4 <__vector_1+0x72>
    3d04:	26 0f       	add	r18, r22
    3d06:	04 c0       	rjmp	.+8      	; 0x3d10 <__vector_1+0x8e>
    if (0)
    {
      invalid:
      /* disable INTx, run into Overflow0 */
#if (RC5_INT == RC5_INT0)               
     GICR &= ~(1 << INT0);
    3d08:	2b b7       	in	r18, 0x3b	; 59
    3d0a:	2f 7b       	andi	r18, 0xBF	; 191
    3d0c:	2b bf       	out	0x3b, r18	; 59
#elif (RC5_INT == RC5_INT1)             
     GICR &= ~(1 << INT1);
#endif /* RC5_INT */
     _nbits = 0;
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
   }
   nbits = _nbits;
    3d10:	20 93 5c 05 	sts	0x055C, r18
  }
  code = _code; nint = 1 + _nint;
    3d14:	90 93 5a 05 	sts	0x055A, r25
    3d18:	80 93 59 05 	sts	0x0559, r24
    3d1c:	3f 5f       	subi	r19, 0xFF	; 255
    3d1e:	30 93 5b 05 	sts	0x055B, r19
  }
}
    3d22:	9f 91       	pop	r25
    3d24:	8f 91       	pop	r24
    3d26:	7f 91       	pop	r23
    3d28:	6f 91       	pop	r22
    3d2a:	5f 91       	pop	r21
    3d2c:	4f 91       	pop	r20
    3d2e:	3f 91       	pop	r19
    3d30:	2f 91       	pop	r18
    3d32:	0f 90       	pop	r0
    3d34:	0f be       	out	0x3f, r0	; 63
    3d36:	0f 90       	pop	r0
    3d38:	1f 90       	pop	r1
    3d3a:	18 95       	reti

00003d3c <tda7313GetInput>:
unsigned char tda7313_def_param[] = { TDA_VOLUME_DEF, TDA_ATTENS_ALL_DEF, TDA_BASS_DEF, TDA_TREBLE, TDA_ATTENS_FL_DEF, TDA_ATTENS_FR_DEF, TDA_ATTENS_RL_DEF, TDA_ATTENS_RR_DEF};
//=============================================================================
uint8_t tda7313GetInput(void)
{
  return _input;
}
    3d3c:	80 91 88 04 	lds	r24, 0x0488
    3d40:	08 95       	ret

00003d42 <tda7313GetLoudness>:
//=============================================================================
uint8_t tda7313GetLoudness(void)
{
  return _loudness;
}
    3d42:	80 91 87 04 	lds	r24, 0x0487
    3d46:	08 95       	ret

00003d48 <tda7313Get_Param>:
  tda7313Send_Param();
}
//=============================================================================
uint8_t tda7313Get_Param(uint8_t param)
{
  return tda7313_param[_input][param];
    3d48:	e0 91 88 04 	lds	r30, 0x0488
    3d4c:	f0 e0       	ldi	r31, 0x00	; 0
    3d4e:	93 e0       	ldi	r25, 0x03	; 3
    3d50:	ee 0f       	add	r30, r30
    3d52:	ff 1f       	adc	r31, r31
    3d54:	9a 95       	dec	r25
    3d56:	e1 f7       	brne	.-8      	; 0x3d50 <tda7313Get_Param+0x8>
    3d58:	e8 0f       	add	r30, r24
    3d5a:	f1 1d       	adc	r31, r1
    3d5c:	e5 5b       	subi	r30, 0xB5	; 181
    3d5e:	fb 4f       	sbci	r31, 0xFB	; 251
}
    3d60:	80 81       	ld	r24, Z
    3d62:	08 95       	ret

00003d64 <tda7313Set_Param_no_send>:
//=============================================================================
void tda7313Set_Param_no_send(uint8_t param, uint8_t val)
{
  tda7313_param[_input][param] = val;
    3d64:	e0 91 88 04 	lds	r30, 0x0488
    3d68:	f0 e0       	ldi	r31, 0x00	; 0
    3d6a:	23 e0       	ldi	r18, 0x03	; 3
    3d6c:	ee 0f       	add	r30, r30
    3d6e:	ff 1f       	adc	r31, r31
    3d70:	2a 95       	dec	r18
    3d72:	e1 f7       	brne	.-8      	; 0x3d6c <tda7313Set_Param_no_send+0x8>
    3d74:	e8 0f       	add	r30, r24
    3d76:	f1 1d       	adc	r31, r1
    3d78:	e5 5b       	subi	r30, 0xB5	; 181
    3d7a:	fb 4f       	sbci	r31, 0xFB	; 251
    3d7c:	60 83       	st	Z, r22
}
    3d7e:	08 95       	ret

00003d80 <tda7313Get_Max_Param>:
  tda7313Send_Param();
}
//=============================================================================
uint8_t tda7313Get_Max_Param(uint8_t param)
{
  return tda7313_max_param[param];
    3d80:	e7 e6       	ldi	r30, 0x67	; 103
    3d82:	f4 e0       	ldi	r31, 0x04	; 4
    3d84:	e8 0f       	add	r30, r24
    3d86:	f1 1d       	adc	r31, r1
}
    3d88:	80 81       	ld	r24, Z
    3d8a:	08 95       	ret

00003d8c <tda7313Send_Param>:
//=============================================================================
void tda7313Send_Param(void)
{
    3d8c:	1f 93       	push	r17
  unsigned char sw_reg = TDA7313_SW, val;
  // Volume
  I2C_start();
    3d8e:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3d92:	88 e8       	ldi	r24, 0x88	; 136
    3d94:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  val = tda7313_param[_input][TDA_VOLUME];
    3d98:	e0 91 88 04 	lds	r30, 0x0488
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	13 e0       	ldi	r17, 0x03	; 3
    3da0:	ee 0f       	add	r30, r30
    3da2:	ff 1f       	adc	r31, r31
    3da4:	1a 95       	dec	r17
    3da6:	e1 f7       	brne	.-8      	; 0x3da0 <tda7313Send_Param+0x14>
    3da8:	e5 5b       	subi	r30, 0xB5	; 181
    3daa:	fb 4f       	sbci	r31, 0xFB	; 251
    3dac:	90 81       	ld	r25, Z
uint8_t tda7313Get_Max_Param(uint8_t param)
{
  return tda7313_max_param[param];
}
//=============================================================================
void tda7313Send_Param(void)
    3dae:	89 2f       	mov	r24, r25
    3db0:	81 95       	neg	r24
  unsigned char sw_reg = TDA7313_SW, val;
  // Volume
  I2C_start();
  I2C_write(TDA7313_I2C_ADDR);
  val = tda7313_param[_input][TDA_VOLUME];
  I2C_write(TDA7313_VOLUME + 0x3F - (val + val));
    3db2:	89 1b       	sub	r24, r25
    3db4:	81 5c       	subi	r24, 0xC1	; 193
    3db6:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    3dba:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens
  val = tda7313_param[_input][TDA_ATTENS_ALL];
    3dbe:	e0 91 88 04 	lds	r30, 0x0488
  sw_reg += tda7313_attens[val] + _input;
    3dc2:	1e 2f       	mov	r17, r30
    3dc4:	10 5c       	subi	r17, 0xC0	; 192
  I2C_write(TDA7313_I2C_ADDR);
  val = tda7313_param[_input][TDA_VOLUME];
  I2C_write(TDA7313_VOLUME + 0x3F - (val + val));
  I2C_stop();
  // Attens
  val = tda7313_param[_input][TDA_ATTENS_ALL];
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	b3 e0       	ldi	r27, 0x03	; 3
    3dca:	ee 0f       	add	r30, r30
    3dcc:	ff 1f       	adc	r31, r31
    3dce:	ba 95       	dec	r27
    3dd0:	e1 f7       	brne	.-8      	; 0x3dca <tda7313Send_Param+0x3e>
    3dd2:	e5 5b       	subi	r30, 0xB5	; 181
    3dd4:	fb 4f       	sbci	r31, 0xFB	; 251
  sw_reg += tda7313_attens[val] + _input;
    3dd6:	e1 81       	ldd	r30, Z+1	; 0x01
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	ed 59       	subi	r30, 0x9D	; 157
    3ddc:	fb 4f       	sbci	r31, 0xFB	; 251
    3dde:	80 81       	ld	r24, Z
    3de0:	18 0f       	add	r17, r24
  if (_loudness) sw_reg &= ~(1 << TDA7313_LONDNESS_BIT); else sw_reg |= (1 << TDA7313_LONDNESS_BIT);
    3de2:	80 91 87 04 	lds	r24, 0x0487
    3de6:	88 23       	and	r24, r24
    3de8:	11 f0       	breq	.+4      	; 0x3dee <tda7313Send_Param+0x62>
    3dea:	1b 7f       	andi	r17, 0xFB	; 251
    3dec:	01 c0       	rjmp	.+2      	; 0x3df0 <tda7313Send_Param+0x64>
    3dee:	14 60       	ori	r17, 0x04	; 4
  I2C_start();
    3df0:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3df4:	88 e8       	ldi	r24, 0x88	; 136
    3df6:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(sw_reg);
    3dfa:	81 2f       	mov	r24, r17
    3dfc:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    3e00:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens Front Left
  val = tda7313_param[_input][TDA_ATTENS_FL];
    3e04:	e0 91 88 04 	lds	r30, 0x0488
    3e08:	f0 e0       	ldi	r31, 0x00	; 0
    3e0a:	a3 e0       	ldi	r26, 0x03	; 3
    3e0c:	ee 0f       	add	r30, r30
    3e0e:	ff 1f       	adc	r31, r31
    3e10:	aa 95       	dec	r26
    3e12:	e1 f7       	brne	.-8      	; 0x3e0c <tda7313Send_Param+0x80>
    3e14:	e5 5b       	subi	r30, 0xB5	; 181
    3e16:	fb 4f       	sbci	r31, 0xFB	; 251
    3e18:	14 81       	ldd	r17, Z+4	; 0x04
  I2C_start();
    3e1a:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3e1e:	88 e8       	ldi	r24, 0x88	; 136
    3e20:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_FRONT_LEFT + (TDA7313_MAX_ATTENS - val));
    3e24:	8f e9       	ldi	r24, 0x9F	; 159
    3e26:	81 1b       	sub	r24, r17
    3e28:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    3e2c:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens Front Right
  val = tda7313_param[_input][TDA_ATTENS_FR];
    3e30:	e0 91 88 04 	lds	r30, 0x0488
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	73 e0       	ldi	r23, 0x03	; 3
    3e38:	ee 0f       	add	r30, r30
    3e3a:	ff 1f       	adc	r31, r31
    3e3c:	7a 95       	dec	r23
    3e3e:	e1 f7       	brne	.-8      	; 0x3e38 <tda7313Send_Param+0xac>
    3e40:	e5 5b       	subi	r30, 0xB5	; 181
    3e42:	fb 4f       	sbci	r31, 0xFB	; 251
    3e44:	15 81       	ldd	r17, Z+5	; 0x05
  I2C_start();
    3e46:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3e4a:	88 e8       	ldi	r24, 0x88	; 136
    3e4c:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_FRONT_RIGHT + (TDA7313_MAX_ATTENS - val));
    3e50:	8f eb       	ldi	r24, 0xBF	; 191
    3e52:	81 1b       	sub	r24, r17
    3e54:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    3e58:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens Rear Left
  val = tda7313_param[_input][TDA_ATTENS_RL];
    3e5c:	e0 91 88 04 	lds	r30, 0x0488
    3e60:	f0 e0       	ldi	r31, 0x00	; 0
    3e62:	63 e0       	ldi	r22, 0x03	; 3
    3e64:	ee 0f       	add	r30, r30
    3e66:	ff 1f       	adc	r31, r31
    3e68:	6a 95       	dec	r22
    3e6a:	e1 f7       	brne	.-8      	; 0x3e64 <tda7313Send_Param+0xd8>
    3e6c:	e5 5b       	subi	r30, 0xB5	; 181
    3e6e:	fb 4f       	sbci	r31, 0xFB	; 251
    3e70:	16 81       	ldd	r17, Z+6	; 0x06
  I2C_start();
    3e72:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3e76:	88 e8       	ldi	r24, 0x88	; 136
    3e78:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_REAR_LEFT + (TDA7313_MAX_ATTENS - val));
    3e7c:	8f ed       	ldi	r24, 0xDF	; 223
    3e7e:	81 1b       	sub	r24, r17
    3e80:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    3e84:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens Rear Right
  val = tda7313_param[_input][TDA_ATTENS_RR];
    3e88:	e0 91 88 04 	lds	r30, 0x0488
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	53 e0       	ldi	r21, 0x03	; 3
    3e90:	ee 0f       	add	r30, r30
    3e92:	ff 1f       	adc	r31, r31
    3e94:	5a 95       	dec	r21
    3e96:	e1 f7       	brne	.-8      	; 0x3e90 <tda7313Send_Param+0x104>
    3e98:	e5 5b       	subi	r30, 0xB5	; 181
    3e9a:	fb 4f       	sbci	r31, 0xFB	; 251
    3e9c:	17 81       	ldd	r17, Z+7	; 0x07
  I2C_start();
    3e9e:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3ea2:	88 e8       	ldi	r24, 0x88	; 136
    3ea4:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_REAR_RIGHT + (TDA7313_MAX_ATTENS - val));
    3ea8:	81 2f       	mov	r24, r17
    3eaa:	80 95       	com	r24
    3eac:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    3eb0:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Bass
  val = tda7313_param[_input][TDA_BASS];
    3eb4:	e0 91 88 04 	lds	r30, 0x0488
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	43 e0       	ldi	r20, 0x03	; 3
    3ebc:	ee 0f       	add	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	4a 95       	dec	r20
    3ec2:	e1 f7       	brne	.-8      	; 0x3ebc <tda7313Send_Param+0x130>
    3ec4:	e5 5b       	subi	r30, 0xB5	; 181
    3ec6:	fb 4f       	sbci	r31, 0xFB	; 251
    3ec8:	12 81       	ldd	r17, Z+2	; 0x02
  I2C_start();
    3eca:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3ece:	88 e8       	ldi	r24, 0x88	; 136
    3ed0:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_BASS + tda7313_bass_treb[val]);
    3ed4:	e1 2f       	mov	r30, r17
    3ed6:	f0 e0       	ldi	r31, 0x00	; 0
    3ed8:	e1 59       	subi	r30, 0x91	; 145
    3eda:	fb 4f       	sbci	r31, 0xFB	; 251
    3edc:	80 81       	ld	r24, Z
    3ede:	80 5a       	subi	r24, 0xA0	; 160
    3ee0:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    3ee4:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Treble
  val = tda7313_param[_input][TDA_TREBLE];
    3ee8:	e0 91 88 04 	lds	r30, 0x0488
    3eec:	f0 e0       	ldi	r31, 0x00	; 0
    3eee:	33 e0       	ldi	r19, 0x03	; 3
    3ef0:	ee 0f       	add	r30, r30
    3ef2:	ff 1f       	adc	r31, r31
    3ef4:	3a 95       	dec	r19
    3ef6:	e1 f7       	brne	.-8      	; 0x3ef0 <tda7313Send_Param+0x164>
    3ef8:	e5 5b       	subi	r30, 0xB5	; 181
    3efa:	fb 4f       	sbci	r31, 0xFB	; 251
    3efc:	13 81       	ldd	r17, Z+3	; 0x03
  I2C_start();
    3efe:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    3f02:	88 e8       	ldi	r24, 0x88	; 136
    3f04:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_TREBLE + tda7313_bass_treb[val]);
    3f08:	e1 2f       	mov	r30, r17
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	e1 59       	subi	r30, 0x91	; 145
    3f0e:	fb 4f       	sbci	r31, 0xFB	; 251
    3f10:	80 81       	ld	r24, Z
    3f12:	80 59       	subi	r24, 0x90	; 144
    3f14:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    3f18:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
    3f1c:	1f 91       	pop	r17
    3f1e:	08 95       	ret

00003f20 <tda7313Set_Param_down>:
  tda7313Send_Param();
}
//=============================================================================
void tda7313Set_Param_down(uint8_t param)
{
  if (tda7313_param[_input][param] > 0) tda7313_param[_input][param] = tda7313_param[_input][param] - 1;
    3f20:	e0 91 88 04 	lds	r30, 0x0488
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	93 e0       	ldi	r25, 0x03	; 3
    3f28:	ee 0f       	add	r30, r30
    3f2a:	ff 1f       	adc	r31, r31
    3f2c:	9a 95       	dec	r25
    3f2e:	e1 f7       	brne	.-8      	; 0x3f28 <tda7313Set_Param_down+0x8>
    3f30:	e8 0f       	add	r30, r24
    3f32:	f1 1d       	adc	r31, r1
    3f34:	e5 5b       	subi	r30, 0xB5	; 181
    3f36:	fb 4f       	sbci	r31, 0xFB	; 251
    3f38:	80 81       	ld	r24, Z
    3f3a:	88 23       	and	r24, r24
    3f3c:	11 f0       	breq	.+4      	; 0x3f42 <tda7313Set_Param_down+0x22>
    3f3e:	81 50       	subi	r24, 0x01	; 1
    3f40:	80 83       	st	Z, r24
  tda7313Send_Param();
    3f42:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <tda7313Send_Param>
}
    3f46:	08 95       	ret

00003f48 <tda7313Set_Param_up>:
  tda7313Send_Param();
}
//=============================================================================
void tda7313Set_Param_up(uint8_t param)
{
  if (tda7313_param[_input][param] < tda7313_max_param[param]) tda7313_param[_input][param] = tda7313_param[_input][param] + 1;
    3f48:	e0 91 88 04 	lds	r30, 0x0488
    3f4c:	f0 e0       	ldi	r31, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	23 e0       	ldi	r18, 0x03	; 3
    3f52:	ee 0f       	add	r30, r30
    3f54:	ff 1f       	adc	r31, r31
    3f56:	2a 95       	dec	r18
    3f58:	e1 f7       	brne	.-8      	; 0x3f52 <tda7313Set_Param_up+0xa>
    3f5a:	e8 0f       	add	r30, r24
    3f5c:	f9 1f       	adc	r31, r25
    3f5e:	e5 5b       	subi	r30, 0xB5	; 181
    3f60:	fb 4f       	sbci	r31, 0xFB	; 251
    3f62:	20 81       	ld	r18, Z
    3f64:	89 59       	subi	r24, 0x99	; 153
    3f66:	9b 4f       	sbci	r25, 0xFB	; 251
    3f68:	dc 01       	movw	r26, r24
    3f6a:	8c 91       	ld	r24, X
    3f6c:	28 17       	cp	r18, r24
    3f6e:	10 f4       	brcc	.+4      	; 0x3f74 <tda7313Set_Param_up+0x2c>
    3f70:	2f 5f       	subi	r18, 0xFF	; 255
    3f72:	20 83       	st	Z, r18
  tda7313Send_Param();
    3f74:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <tda7313Send_Param>
}
    3f78:	08 95       	ret

00003f7a <tda7313Set_Param>:
  tda7313_param[_input][param] = val;
}
//=============================================================================
void tda7313Set_Param(uint8_t param, uint8_t val)
{
  tda7313_param[_input][param] = val;
    3f7a:	e0 91 88 04 	lds	r30, 0x0488
    3f7e:	f0 e0       	ldi	r31, 0x00	; 0
    3f80:	33 e0       	ldi	r19, 0x03	; 3
    3f82:	ee 0f       	add	r30, r30
    3f84:	ff 1f       	adc	r31, r31
    3f86:	3a 95       	dec	r19
    3f88:	e1 f7       	brne	.-8      	; 0x3f82 <tda7313Set_Param+0x8>
    3f8a:	e8 0f       	add	r30, r24
    3f8c:	f1 1d       	adc	r31, r1
    3f8e:	e5 5b       	subi	r30, 0xB5	; 181
    3f90:	fb 4f       	sbci	r31, 0xFB	; 251
    3f92:	60 83       	st	Z, r22
  tda7313Send_Param();
    3f94:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <tda7313Send_Param>
}
    3f98:	08 95       	ret

00003f9a <tda7313SetInput>:
  tda7313Send_Param();
}
//=============================================================================
void tda7313SetInput(uint8_t in)
{
  _input = in;
    3f9a:	80 93 88 04 	sts	0x0488, r24
  tda7313Send_Param();
    3f9e:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <tda7313Send_Param>
}
    3fa2:	08 95       	ret

00003fa4 <tda7313SetLoudness>:
  return _loudness;
}
//=============================================================================
void tda7313SetLoudness(uint8_t loudness)
{
  _loudness = loudness;
    3fa4:	80 93 87 04 	sts	0x0487, r24
  tda7313Send_Param();
    3fa8:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <tda7313Send_Param>
}
    3fac:	08 95       	ret

00003fae <tda7313SetMute>:
  I2C_stop();
}
//=============================================================================
void tda7313SetMute(uint8_t val)
{
  if (val) {
    3fae:	88 23       	and	r24, r24
    3fb0:	a1 f0       	breq	.+40     	; 0x3fda <tda7313SetMute+0x2c>
    I2C_start();
    3fb2:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
    I2C_write(TDA7313_I2C_ADDR);
    3fb6:	88 e8       	ldi	r24, 0x88	; 136
    3fb8:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_write(TDA7313_FRONT_LEFT | TDA7313_MUTE);
    3fbc:	8f e9       	ldi	r24, 0x9F	; 159
    3fbe:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_write(TDA7313_FRONT_RIGHT | TDA7313_MUTE);
    3fc2:	8f eb       	ldi	r24, 0xBF	; 191
    3fc4:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_write(TDA7313_REAR_LEFT | TDA7313_MUTE);
    3fc8:	8f ed       	ldi	r24, 0xDF	; 223
    3fca:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_write(TDA7313_REAR_RIGHT | TDA7313_MUTE);
    3fce:	8f ef       	ldi	r24, 0xFF	; 255
    3fd0:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_stop();
    3fd4:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
    3fd8:	08 95       	ret
  } else {
    tda7313Send_Param();
    3fda:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <tda7313Send_Param>
    3fde:	08 95       	ret

00003fe0 <tda7313_Save_Input>:
  tda7313_Load_Input();
  tda7313_Load_Loudness();
}
//=============================================================================
void tda7313_Save_Input(uint8_t in)
{
    3fe0:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)TDA_INPUT_ADDR, in);
    3fe2:	80 e8       	ldi	r24, 0x80	; 128
    3fe4:	90 e0       	ldi	r25, 0x00	; 0
    3fe6:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
}
    3fea:	08 95       	ret

00003fec <tda7313_Load_Input>:
//=============================================================================
uint8_t tda7313_Load_Input(void)
{
  _input = eeprom_read_byte((uint8_t*)TDA_INPUT_ADDR);
    3fec:	80 e8       	ldi	r24, 0x80	; 128
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
    3ff4:	80 93 88 04 	sts	0x0488, r24
  if (_input > TDA7313_IN_CNT - 1) _input = 0;
    3ff8:	83 30       	cpi	r24, 0x03	; 3
    3ffa:	10 f0       	brcs	.+4      	; 0x4000 <tda7313_Load_Input+0x14>
    3ffc:	10 92 88 04 	sts	0x0488, r1
  return _input;
}
    4000:	80 91 88 04 	lds	r24, 0x0488
    4004:	08 95       	ret

00004006 <tda7313_Save_Loudness>:
//=============================================================================
void tda7313_Save_Loudness(uint8_t loud)
{
    4006:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)TDA_LOUDNESS_ADDR, loud);
    4008:	81 e8       	ldi	r24, 0x81	; 129
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
}
    4010:	08 95       	ret

00004012 <tda7313_Load_Loudness>:
//=============================================================================
uint8_t tda7313_Load_Loudness(void)
{
  _loudness = eeprom_read_byte((uint8_t*)TDA_LOUDNESS_ADDR);
    4012:	81 e8       	ldi	r24, 0x81	; 129
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
    401a:	80 93 87 04 	sts	0x0487, r24
  if (_loudness > 2) _loudness = 1;
    401e:	83 30       	cpi	r24, 0x03	; 3
    4020:	18 f0       	brcs	.+6      	; 0x4028 <tda7313_Load_Loudness+0x16>
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	80 93 87 04 	sts	0x0487, r24
  return _loudness;
}
    4028:	80 91 87 04 	lds	r24, 0x0487
    402c:	08 95       	ret

0000402e <tda7313_Save_param>:
//=============================================================================
void tda7313_Save_param(uint8_t in, uint8_t param)
{
  switch (in)
    402e:	81 30       	cpi	r24, 0x01	; 1
    4030:	71 f0       	breq	.+28     	; 0x404e <tda7313_Save_param+0x20>
    4032:	81 30       	cpi	r24, 0x01	; 1
    4034:	18 f0       	brcs	.+6      	; 0x403c <tda7313_Save_param+0xe>
    4036:	82 30       	cpi	r24, 0x02	; 2
    4038:	f9 f4       	brne	.+62     	; 0x4078 <tda7313_Save_param+0x4a>
    403a:	14 c0       	rjmp	.+40     	; 0x4064 <tda7313_Save_param+0x36>
  {
    case 0:
      eeprom_write_byte((uint8_t*)(TDA_PARAM_ADDR_IN1 + param), tda7313_param[0][param]);
    403c:	86 2f       	mov	r24, r22
    403e:	90 e0       	ldi	r25, 0x00	; 0
    4040:	fc 01       	movw	r30, r24
    4042:	e5 5b       	subi	r30, 0xB5	; 181
    4044:	fb 4f       	sbci	r31, 0xFB	; 251
    4046:	80 5b       	subi	r24, 0xB0	; 176
    4048:	9f 4f       	sbci	r25, 0xFF	; 255
    404a:	60 81       	ld	r22, Z
    404c:	08 c0       	rjmp	.+16     	; 0x405e <tda7313_Save_param+0x30>
    break;
    case 1:
      eeprom_write_byte((uint8_t*)(TDA_PARAM_ADDR_IN2 + param), tda7313_param[1][param]);
    404e:	86 2f       	mov	r24, r22
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	fc 01       	movw	r30, r24
    4054:	e5 5b       	subi	r30, 0xB5	; 181
    4056:	fb 4f       	sbci	r31, 0xFB	; 251
    4058:	80 5a       	subi	r24, 0xA0	; 160
    405a:	9f 4f       	sbci	r25, 0xFF	; 255
    405c:	60 85       	ldd	r22, Z+8	; 0x08
    405e:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
    break;
    4062:	08 95       	ret
    case 2:
      eeprom_write_byte((uint8_t*)(TDA_PARAM_ADDR_IN3 + param), tda7313_param[2][param]);
    4064:	86 2f       	mov	r24, r22
    4066:	90 e0       	ldi	r25, 0x00	; 0
    4068:	fc 01       	movw	r30, r24
    406a:	e5 5b       	subi	r30, 0xB5	; 181
    406c:	fb 4f       	sbci	r31, 0xFB	; 251
    406e:	80 59       	subi	r24, 0x90	; 144
    4070:	9f 4f       	sbci	r25, 0xFF	; 255
    4072:	60 89       	ldd	r22, Z+16	; 0x10
    4074:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
    4078:	08 95       	ret

0000407a <tda7313_Save_all_param>:
    tda7313Send_Param();
  }
}
//=============================================================================
void tda7313_Save_all_param(void)
{
    407a:	1f 93       	push	r17
  unsigned char i;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    407c:	10 e0       	ldi	r17, 0x00	; 0
  {
    tda7313_Save_param(0, i);
    407e:	80 e0       	ldi	r24, 0x00	; 0
    4080:	61 2f       	mov	r22, r17
    4082:	0e 94 17 20 	call	0x402e	; 0x402e <tda7313_Save_param>
    tda7313_Save_param(1, i);
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	61 2f       	mov	r22, r17
    408a:	0e 94 17 20 	call	0x402e	; 0x402e <tda7313_Save_param>
    tda7313_Save_param(2, i);
    408e:	82 e0       	ldi	r24, 0x02	; 2
    4090:	61 2f       	mov	r22, r17
    4092:	0e 94 17 20 	call	0x402e	; 0x402e <tda7313_Save_param>
}
//=============================================================================
void tda7313_Save_all_param(void)
{
  unsigned char i;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    4096:	1f 5f       	subi	r17, 0xFF	; 255
    4098:	18 30       	cpi	r17, 0x08	; 8
    409a:	89 f7       	brne	.-30     	; 0x407e <tda7313_Save_all_param+0x4>
  {
    tda7313_Save_param(0, i);
    tda7313_Save_param(1, i);
    tda7313_Save_param(2, i);
  }
  tda7313_Save_Input(_input);
    409c:	80 91 88 04 	lds	r24, 0x0488
    40a0:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <tda7313_Save_Input>
  tda7313_Save_Loudness(_loudness);
    40a4:	80 91 87 04 	lds	r24, 0x0487
    40a8:	0e 94 03 20 	call	0x4006	; 0x4006 <tda7313_Save_Loudness>
}
    40ac:	1f 91       	pop	r17
    40ae:	08 95       	ret

000040b0 <tda7313_Load_param>:
}
//=============================================================================
uint8_t tda7313_Load_param(uint8_t in, uint8_t param)
{
  uint8_t ret = 0;
  switch (in)
    40b0:	81 30       	cpi	r24, 0x01	; 1
    40b2:	51 f0       	breq	.+20     	; 0x40c8 <tda7313_Load_param+0x18>
    40b4:	81 30       	cpi	r24, 0x01	; 1
    40b6:	18 f0       	brcs	.+6      	; 0x40be <tda7313_Load_param+0xe>
    40b8:	82 30       	cpi	r24, 0x02	; 2
    40ba:	91 f4       	brne	.+36     	; 0x40e0 <tda7313_Load_param+0x30>
    40bc:	0a c0       	rjmp	.+20     	; 0x40d2 <tda7313_Load_param+0x22>
  {
    case 0:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN1 + param));
    40be:	86 2f       	mov	r24, r22
    40c0:	90 e0       	ldi	r25, 0x00	; 0
    40c2:	80 5b       	subi	r24, 0xB0	; 176
    40c4:	9f 4f       	sbci	r25, 0xFF	; 255
    40c6:	09 c0       	rjmp	.+18     	; 0x40da <tda7313_Load_param+0x2a>
    break;
    case 1:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN2 + param));
    40c8:	86 2f       	mov	r24, r22
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	80 5a       	subi	r24, 0xA0	; 160
    40ce:	9f 4f       	sbci	r25, 0xFF	; 255
    40d0:	04 c0       	rjmp	.+8      	; 0x40da <tda7313_Load_param+0x2a>
    break;
    case 2:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN3 + param));
    40d2:	86 2f       	mov	r24, r22
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	80 59       	subi	r24, 0x90	; 144
    40d8:	9f 4f       	sbci	r25, 0xFF	; 255
    40da:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
    break;
    40de:	08 95       	ret
  }
}
//=============================================================================
uint8_t tda7313_Load_param(uint8_t in, uint8_t param)
{
  uint8_t ret = 0;
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    case 2:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN3 + param));
    break;
  }
  return ret;
}
    40e2:	08 95       	ret

000040e4 <tda7313_Load_all_param>:
  tda7313_Save_Input(_input);
  tda7313_Save_Loudness(_loudness);
}
//=============================================================================
void tda7313_Load_all_param(void)
{
    40e4:	cf 92       	push	r12
    40e6:	df 92       	push	r13
    40e8:	ef 92       	push	r14
    40ea:	ff 92       	push	r15
    40ec:	0f 93       	push	r16
    40ee:	1f 93       	push	r17
    40f0:	cf 93       	push	r28
    40f2:	df 93       	push	r29
  unsigned char i, param;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    40f4:	47 e6       	ldi	r20, 0x67	; 103
    40f6:	e4 2e       	mov	r14, r20
    40f8:	44 e0       	ldi	r20, 0x04	; 4
    40fa:	f4 2e       	mov	r15, r20
    40fc:	0f e7       	ldi	r16, 0x7F	; 127
    40fe:	14 e0       	ldi	r17, 0x04	; 4
    4100:	cb e4       	ldi	r28, 0x4B	; 75
    4102:	d4 e0       	ldi	r29, 0x04	; 4
    4104:	dd 24       	eor	r13, r13
  {
    param = tda7313_Load_param(0, i);
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	6d 2d       	mov	r22, r13
    410a:	0e 94 58 20 	call	0x40b0	; 0x40b0 <tda7313_Load_param>
	if (param > tda7313_max_param[i]) tda7313_param[0][i] = tda7313_def_param[i]; else tda7313_param[0][i] = param;
    410e:	f7 01       	movw	r30, r14
    4110:	c1 90       	ld	r12, Z+
    4112:	7f 01       	movw	r14, r30
    4114:	c8 16       	cp	r12, r24
    4116:	10 f4       	brcc	.+4      	; 0x411c <tda7313_Load_all_param+0x38>
    4118:	f8 01       	movw	r30, r16
    411a:	80 81       	ld	r24, Z
    411c:	88 83       	st	Y, r24
    param = tda7313_Load_param(1, i);
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	6d 2d       	mov	r22, r13
    4122:	0e 94 58 20 	call	0x40b0	; 0x40b0 <tda7313_Load_param>
	if (param > tda7313_max_param[i]) tda7313_param[1][i] = tda7313_def_param[i]; else tda7313_param[1][i] = param;
    4126:	c8 16       	cp	r12, r24
    4128:	10 f4       	brcc	.+4      	; 0x412e <tda7313_Load_all_param+0x4a>
    412a:	f8 01       	movw	r30, r16
    412c:	80 81       	ld	r24, Z
    412e:	88 87       	std	Y+8, r24	; 0x08
    param = tda7313_Load_param(2, i);
    4130:	82 e0       	ldi	r24, 0x02	; 2
    4132:	6d 2d       	mov	r22, r13
    4134:	0e 94 58 20 	call	0x40b0	; 0x40b0 <tda7313_Load_param>
	if (param > tda7313_max_param[i]) tda7313_param[2][i] = tda7313_def_param[i]; else tda7313_param[2][i] = param;
    4138:	c8 16       	cp	r12, r24
    413a:	10 f4       	brcc	.+4      	; 0x4140 <tda7313_Load_all_param+0x5c>
    413c:	f8 01       	movw	r30, r16
    413e:	80 81       	ld	r24, Z
    4140:	88 8b       	std	Y+16, r24	; 0x10
}
//=============================================================================
void tda7313_Load_all_param(void)
{
  unsigned char i, param;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    4142:	d3 94       	inc	r13
    4144:	0f 5f       	subi	r16, 0xFF	; 255
    4146:	1f 4f       	sbci	r17, 0xFF	; 255
    4148:	21 96       	adiw	r28, 0x01	; 1
    414a:	fd 2d       	mov	r31, r13
    414c:	f8 30       	cpi	r31, 0x08	; 8
    414e:	d9 f6       	brne	.-74     	; 0x4106 <tda7313_Load_all_param+0x22>
    param = tda7313_Load_param(1, i);
	if (param > tda7313_max_param[i]) tda7313_param[1][i] = tda7313_def_param[i]; else tda7313_param[1][i] = param;
    param = tda7313_Load_param(2, i);
	if (param > tda7313_max_param[i]) tda7313_param[2][i] = tda7313_def_param[i]; else tda7313_param[2][i] = param;
  }
  tda7313_Load_Input();
    4150:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <tda7313_Load_Input>
  tda7313_Load_Loudness();
    4154:	0e 94 09 20 	call	0x4012	; 0x4012 <tda7313_Load_Loudness>
}
    4158:	df 91       	pop	r29
    415a:	cf 91       	pop	r28
    415c:	1f 91       	pop	r17
    415e:	0f 91       	pop	r16
    4160:	ff 90       	pop	r15
    4162:	ef 90       	pop	r14
    4164:	df 90       	pop	r13
    4166:	cf 90       	pop	r12
    4168:	08 95       	ret

0000416a <tda7313_Save_vol_fm_edit>:
  }
  return ret;
}
//=============================================================================
void tda7313_Save_vol_fm_edit(uint8_t vol)
{
    416a:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)FM_VOLUME_EDIT_ADDR, vol);
    416c:	87 e1       	ldi	r24, 0x17	; 23
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
}
    4174:	08 95       	ret

00004176 <tda7313_Load_vol_fm_edit>:
//=============================================================================
uint8_t tda7313_Load_vol_fm_edit(void)
{
  uint8_t v;
  v = eeprom_read_byte((uint8_t*)FM_VOLUME_EDIT_ADDR);
    4176:	87 e1       	ldi	r24, 0x17	; 23
    4178:	90 e0       	ldi	r25, 0x00	; 0
    417a:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  if (v > tda7313_max_param[TDA_VOLUME]) {
    417e:	90 91 67 04 	lds	r25, 0x0467
    4182:	98 17       	cp	r25, r24
    4184:	20 f4       	brcc	.+8      	; 0x418e <tda7313_Load_vol_fm_edit+0x18>
    v = TDA_VOLUME_DEF;
    tda7313_Save_vol_fm_edit(v);
    4186:	88 e1       	ldi	r24, 0x18	; 24
    4188:	0e 94 b5 20 	call	0x416a	; 0x416a <tda7313_Save_vol_fm_edit>
uint8_t tda7313_Load_vol_fm_edit(void)
{
  uint8_t v;
  v = eeprom_read_byte((uint8_t*)FM_VOLUME_EDIT_ADDR);
  if (v > tda7313_max_param[TDA_VOLUME]) {
    v = TDA_VOLUME_DEF;
    418c:	88 e1       	ldi	r24, 0x18	; 24
    tda7313_Save_vol_fm_edit(v);
  }
  return v;
}
    418e:	08 95       	ret

00004190 <tea5767WriteI2C>:
static uint8_t wrBuf[5];
static uint8_t rdBuf[5];
static uint8_t ctrl = 0x79;
//=============================================================================
static void tea5767WriteI2C(void)
{
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
  uint8_t i;
  I2C_start();
    4194:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TEA5767_I2C_ADDR);
    4198:	80 ec       	ldi	r24, 0xC0	; 192
    419a:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    419e:	ce e5       	ldi	r28, 0x5E	; 94
    41a0:	d5 e0       	ldi	r29, 0x05	; 5
  for (i = 0; i < sizeof(wrBuf); i++)
	I2C_write(wrBuf[i]);
    41a2:	89 91       	ld	r24, Y+
    41a4:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
static void tea5767WriteI2C(void)
{
  uint8_t i;
  I2C_start();
  I2C_write(TEA5767_I2C_ADDR);
  for (i = 0; i < sizeof(wrBuf); i++)
    41a8:	85 e0       	ldi	r24, 0x05	; 5
    41aa:	c3 36       	cpi	r28, 0x63	; 99
    41ac:	d8 07       	cpc	r29, r24
    41ae:	c9 f7       	brne	.-14     	; 0x41a2 <tea5767WriteI2C+0x12>
	I2C_write(wrBuf[i]);
  I2C_stop();
    41b0:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  return;
}
    41b4:	df 91       	pop	r29
    41b6:	cf 91       	pop	r28
    41b8:	08 95       	ret

000041ba <tea5767Init>:
//=============================================================================
void tea5767Init(uint8_t tea5767Ctrl)
{
  ctrl = tea5767Ctrl;
    41ba:	80 93 89 04 	sts	0x0489, r24
  wrBuf[0] = TEA5767_MUTE;
    41be:	90 e8       	ldi	r25, 0x80	; 128
    41c0:	90 93 5e 05 	sts	0x055E, r25
  wrBuf[1] = 0;
    41c4:	10 92 5f 05 	sts	0x055F, r1
  wrBuf[2] = TEA5767_HLSI;
    41c8:	90 e1       	ldi	r25, 0x10	; 16
    41ca:	90 93 60 05 	sts	0x0560, r25
  wrBuf[3] = 0;
    41ce:	10 92 61 05 	sts	0x0561, r1
  if (ctrl & TEA5767_CTRL_HCC)
    41d2:	86 ff       	sbrs	r24, 6
    41d4:	03 c0       	rjmp	.+6      	; 0x41dc <tea5767Init+0x22>
	wrBuf[3] |= TEA5767_HCC;
    41d6:	94 e0       	ldi	r25, 0x04	; 4
    41d8:	90 93 61 05 	sts	0x0561, r25
  if (ctrl & TEA5767_CTRL_SNC)
    41dc:	85 ff       	sbrs	r24, 5
    41de:	05 c0       	rjmp	.+10     	; 0x41ea <tea5767Init+0x30>
	wrBuf[3] |= TEA5767_SNC;
    41e0:	90 91 61 05 	lds	r25, 0x0561
    41e4:	92 60       	ori	r25, 0x02	; 2
    41e6:	90 93 61 05 	sts	0x0561, r25
  if (ctrl & TEA5767_CTRL_SMUTE)
    41ea:	84 ff       	sbrs	r24, 4
    41ec:	05 c0       	rjmp	.+10     	; 0x41f8 <tea5767Init+0x3e>
	wrBuf[3] |= TEA5767_SMUTE;
    41ee:	90 91 61 05 	lds	r25, 0x0561
    41f2:	98 60       	ori	r25, 0x08	; 8
    41f4:	90 93 61 05 	sts	0x0561, r25
  if (ctrl & TEA5767_CTRL_BL)
    41f8:	82 ff       	sbrs	r24, 2
    41fa:	05 c0       	rjmp	.+10     	; 0x4206 <tea5767Init+0x4c>
	wrBuf[3] |= TEA5767_BL;
    41fc:	90 91 61 05 	lds	r25, 0x0561
    4200:	90 62       	ori	r25, 0x20	; 32
    4202:	90 93 61 05 	sts	0x0561, r25
  if (ctrl & TEA5767_CTRL_XTAL)
    4206:	80 ff       	sbrs	r24, 0
    4208:	05 c0       	rjmp	.+10     	; 0x4214 <tea5767Init+0x5a>
	wrBuf[3] |= TEA5767_XTAL;
    420a:	90 91 61 05 	lds	r25, 0x0561
    420e:	90 61       	ori	r25, 0x10	; 16
    4210:	90 93 61 05 	sts	0x0561, r25
  wrBuf[4] = 0;
    4214:	10 92 62 05 	sts	0x0562, r1
  if (ctrl & TEA5767_CTRL_DTC)
    4218:	83 ff       	sbrs	r24, 3
    421a:	03 c0       	rjmp	.+6      	; 0x4222 <tea5767Init+0x68>
	wrBuf[4] |= TEA5767_DTC;
    421c:	90 e4       	ldi	r25, 0x40	; 64
    421e:	90 93 62 05 	sts	0x0562, r25
  if (ctrl & TEA5767_CTRL_PLLREF)
    4222:	81 ff       	sbrs	r24, 1
    4224:	05 c0       	rjmp	.+10     	; 0x4230 <tea5767Init+0x76>
	wrBuf[4] |= TEA5767_PLLREF;
    4226:	80 91 62 05 	lds	r24, 0x0562
    422a:	80 68       	ori	r24, 0x80	; 128
    422c:	80 93 62 05 	sts	0x0562, r24
    4230:	08 95       	ret

00004232 <tea5767SetFreq>:
  return;
}
//=============================================================================
void tea5767SetFreq(uint16_t freq, uint8_t mono)
{
    4232:	1f 93       	push	r17
    4234:	16 2f       	mov	r17, r22
  uint16_t div;
  uint32_t fq = (uint32_t)freq * 10000 + 225000;
    4236:	bc 01       	movw	r22, r24
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	20 e1       	ldi	r18, 0x10	; 16
    423e:	37 e2       	ldi	r19, 0x27	; 39
    4240:	40 e0       	ldi	r20, 0x00	; 0
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsi3>
    4248:	68 51       	subi	r22, 0x18	; 24
    424a:	71 49       	sbci	r23, 0x91	; 145
    424c:	8c 4f       	sbci	r24, 0xFC	; 252
    424e:	9f 4f       	sbci	r25, 0xFF	; 255
  if (ctrl & TEA5767_CTRL_XTAL)
    4250:	20 91 89 04 	lds	r18, 0x0489
    4254:	20 ff       	sbrs	r18, 0
    4256:	09 c0       	rjmp	.+18     	; 0x426a <tea5767SetFreq+0x38>
	div = fq / 8192;
    4258:	2d e0       	ldi	r18, 0x0D	; 13
    425a:	96 95       	lsr	r25
    425c:	87 95       	ror	r24
    425e:	77 95       	ror	r23
    4260:	67 95       	ror	r22
    4262:	2a 95       	dec	r18
    4264:	d1 f7       	brne	.-12     	; 0x425a <tea5767SetFreq+0x28>
    4266:	9b 01       	movw	r18, r22
    4268:	06 c0       	rjmp	.+12     	; 0x4276 <tea5767SetFreq+0x44>
  else
	div = fq / 12500;
    426a:	24 ed       	ldi	r18, 0xD4	; 212
    426c:	30 e3       	ldi	r19, 0x30	; 48
    426e:	40 e0       	ldi	r20, 0x00	; 0
    4270:	50 e0       	ldi	r21, 0x00	; 0
    4272:	0e 94 93 22 	call	0x4526	; 0x4526 <__udivmodsi4>
  wrBuf[0] &= 0xC0;
  wrBuf[0] |= (div >> 8) & 0x3F;
    4276:	3f 73       	andi	r19, 0x3F	; 63
  uint32_t fq = (uint32_t)freq * 10000 + 225000;
  if (ctrl & TEA5767_CTRL_XTAL)
	div = fq / 8192;
  else
	div = fq / 12500;
  wrBuf[0] &= 0xC0;
    4278:	80 91 5e 05 	lds	r24, 0x055E
    427c:	80 7c       	andi	r24, 0xC0	; 192
  wrBuf[0] |= (div >> 8) & 0x3F;
    427e:	38 2b       	or	r19, r24
    4280:	30 93 5e 05 	sts	0x055E, r19
  wrBuf[1] = div & 0xFF;
    4284:	20 93 5f 05 	sts	0x055F, r18
    4288:	80 91 60 05 	lds	r24, 0x0560
  if (mono)
    428c:	11 23       	and	r17, r17
    428e:	11 f0       	breq	.+4      	; 0x4294 <tea5767SetFreq+0x62>
	wrBuf[2] |= TEA5767_MS;
    4290:	88 60       	ori	r24, 0x08	; 8
    4292:	01 c0       	rjmp	.+2      	; 0x4296 <tea5767SetFreq+0x64>
  else
	wrBuf[2] &= ~TEA5767_MS;
    4294:	87 7f       	andi	r24, 0xF7	; 247
    4296:	80 93 60 05 	sts	0x0560, r24
  tea5767WriteI2C();
    429a:	0e 94 c8 20 	call	0x4190	; 0x4190 <tea5767WriteI2C>
  return;
}
    429e:	1f 91       	pop	r17
    42a0:	08 95       	ret

000042a2 <tea5767ReadStatus>:
//=============================================================================
uint8_t *tea5767ReadStatus(void)
{
    42a2:	cf 93       	push	r28
    42a4:	df 93       	push	r29
  uint8_t i;
  I2C_start();
    42a6:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TEA5767_I2C_ADDR | I2C_READ);
    42aa:	81 ec       	ldi	r24, 0xC1	; 193
    42ac:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    42b0:	c3 e6       	ldi	r28, 0x63	; 99
    42b2:	d5 e0       	ldi	r29, 0x05	; 5
  for (i = 0; i < sizeof(rdBuf) - 1; i++)
	rdBuf[i] = I2C_read(I2C_ACK);
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
    42ba:	89 93       	st	Y+, r24
uint8_t *tea5767ReadStatus(void)
{
  uint8_t i;
  I2C_start();
  I2C_write(TEA5767_I2C_ADDR | I2C_READ);
  for (i = 0; i < sizeof(rdBuf) - 1; i++)
    42bc:	85 e0       	ldi	r24, 0x05	; 5
    42be:	c7 36       	cpi	r28, 0x67	; 103
    42c0:	d8 07       	cpc	r29, r24
    42c2:	c1 f7       	brne	.-16     	; 0x42b4 <tea5767ReadStatus+0x12>
	rdBuf[i] = I2C_read(I2C_ACK);
  rdBuf[sizeof(rdBuf) - 1] = I2C_read(I2C_NOACK);
    42c4:	80 e0       	ldi	r24, 0x00	; 0
    42c6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
    42ca:	80 93 67 05 	sts	0x0567, r24
  I2C_stop();
    42ce:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  return rdBuf;
}
    42d2:	ce 01       	movw	r24, r28
    42d4:	04 97       	sbiw	r24, 0x04	; 4
    42d6:	df 91       	pop	r29
    42d8:	cf 91       	pop	r28
    42da:	08 95       	ret

000042dc <tea5767SetMute>:
//=============================================================================
void tea5767SetMute(uint8_t mute)
{
    42dc:	90 91 5e 05 	lds	r25, 0x055E
  if (mute)
    42e0:	88 23       	and	r24, r24
    42e2:	11 f0       	breq	.+4      	; 0x42e8 <tea5767SetMute+0xc>
	wrBuf[0] |= TEA5767_MUTE;
    42e4:	90 68       	ori	r25, 0x80	; 128
    42e6:	01 c0       	rjmp	.+2      	; 0x42ea <tea5767SetMute+0xe>
  else
	wrBuf[0] &= ~TEA5767_MUTE;
    42e8:	9f 77       	andi	r25, 0x7F	; 127
    42ea:	90 93 5e 05 	sts	0x055E, r25
  tea5767WriteI2C();
    42ee:	0e 94 c8 20 	call	0x4190	; 0x4190 <tea5767WriteI2C>
  return;
}
    42f2:	08 95       	ret

000042f4 <tea5767PowerOn>:
//=============================================================================
void tea5767PowerOn(void)
{
  wrBuf[0] &= ~TEA5767_MUTE;
    42f4:	80 91 5e 05 	lds	r24, 0x055E
    42f8:	8f 77       	andi	r24, 0x7F	; 127
    42fa:	80 93 5e 05 	sts	0x055E, r24
  wrBuf[3] &= ~TEA5767_STBY;
    42fe:	80 91 61 05 	lds	r24, 0x0561
    4302:	8f 7b       	andi	r24, 0xBF	; 191
    4304:	80 93 61 05 	sts	0x0561, r24
  return;
}
    4308:	08 95       	ret

0000430a <tea5767PowerOff>:
//=============================================================================
void tea5767PowerOff(void)
{
  wrBuf[3] |= TEA5767_STBY;
    430a:	80 91 61 05 	lds	r24, 0x0561
    430e:	80 64       	ori	r24, 0x40	; 64
    4310:	80 93 61 05 	sts	0x0561, r24
  tea5767SetMute(1);
    4314:	81 e0       	ldi	r24, 0x01	; 1
    4316:	0e 94 6e 21 	call	0x42dc	; 0x42dc <tea5767SetMute>
  return;
}
    431a:	08 95       	ret

0000431c <tuner_Init_stations>:
//=============================================================================
#if (TUNER == TUX032)
#endif
//=============================================================================
void tuner_Init_stations(void)
{
    431c:	e6 ea       	ldi	r30, 0xA6	; 166
    431e:	f5 e0       	ldi	r31, 0x05	; 5
  uint8_t i;
  for (i = 0; i < FM_STATIONS; i++) fm_stations[i] = 0xFF;
    4320:	8f ef       	ldi	r24, 0xFF	; 255
    4322:	81 93       	st	Z+, r24
    4324:	95 e0       	ldi	r25, 0x05	; 5
    4326:	e4 3c       	cpi	r30, 0xC4	; 196
    4328:	f9 07       	cpc	r31, r25
    432a:	d9 f7       	brne	.-10     	; 0x4322 <tuner_Init_stations+0x6>
}
    432c:	08 95       	ret

0000432e <tuner_ChanToFreq>:
//=============================================================================
uint16_t tuner_ChanToFreq(uint8_t chan)
{
  return (FM_FREQ_MIN + (chan * 10));
    432e:	2a e0       	ldi	r18, 0x0A	; 10
    4330:	82 9f       	mul	r24, r18
    4332:	90 01       	movw	r18, r0
    4334:	11 24       	eor	r1, r1
    4336:	24 50       	subi	r18, 0x04	; 4
    4338:	3e 4d       	sbci	r19, 0xDE	; 222
}
    433a:	c9 01       	movw	r24, r18
    433c:	08 95       	ret

0000433e <tuner_FreqToChan>:
//=============================================================================
uint8_t tuner_FreqToChan(uint16_t freq)
{
  return ((freq - FM_FREQ_MIN) / 10);
    433e:	8c 5f       	subi	r24, 0xFC	; 252
    4340:	91 42       	sbci	r25, 0x21	; 33
    4342:	6a e0       	ldi	r22, 0x0A	; 10
    4344:	70 e0       	ldi	r23, 0x00	; 0
    4346:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__udivmodhi4>
}
    434a:	86 2f       	mov	r24, r22
    434c:	08 95       	ret

0000434e <tuner_GetChan>:
//=============================================================================
uint8_t tuner_GetChan(uint8_t channel)
{
  if (channel < FM_STATIONS) {
    434e:	8e 31       	cpi	r24, 0x1E	; 30
    4350:	30 f4       	brcc	.+12     	; 0x435e <tuner_GetChan+0x10>
    return fm_stations[channel];
    4352:	e8 2f       	mov	r30, r24
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	ea 55       	subi	r30, 0x5A	; 90
    4358:	fa 4f       	sbci	r31, 0xFA	; 250
    435a:	80 81       	ld	r24, Z
    435c:	08 95       	ret
  } else return 0;
    435e:	80 e0       	ldi	r24, 0x00	; 0
}
    4360:	08 95       	ret

00004362 <tuner_SetChan>:
//=============================================================================
void tuner_SetChan(uint8_t chan)
{
    4362:	1f 93       	push	r17
    4364:	18 2f       	mov	r17, r24
  if (chan <= FM_CHAN_MAX) {
    4366:	83 3d       	cpi	r24, 0xD3	; 211
    4368:	68 f4       	brcc	.+26     	; 0x4384 <tuner_SetChan+0x22>
    tuner_SetMute(0);
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	0e 94 6e 21 	call	0x42dc	; 0x42dc <tea5767SetMute>
  for (i = 0; i < FM_STATIONS; i++) fm_stations[i] = 0xFF;
}
//=============================================================================
uint16_t tuner_ChanToFreq(uint8_t chan)
{
  return (FM_FREQ_MIN + (chan * 10));
    4370:	8a e0       	ldi	r24, 0x0A	; 10
    4372:	18 9f       	mul	r17, r24
    4374:	c0 01       	movw	r24, r0
    4376:	11 24       	eor	r1, r1
//=============================================================================
void tuner_SetChan(uint8_t chan)
{
  if (chan <= FM_CHAN_MAX) {
    tuner_SetMute(0);
    tuner_SetFreq(tuner_ChanToFreq(chan), 0);
    4378:	84 50       	subi	r24, 0x04	; 4
    437a:	9e 4d       	sbci	r25, 0xDE	; 222
    437c:	60 e0       	ldi	r22, 0x00	; 0
    437e:	0e 94 19 21 	call	0x4232	; 0x4232 <tea5767SetFreq>
    4382:	03 c0       	rjmp	.+6      	; 0x438a <tuner_SetChan+0x28>
  } else {
    tuner_SetMute(1);
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	0e 94 6e 21 	call	0x42dc	; 0x42dc <tea5767SetMute>
  }
}
    438a:	1f 91       	pop	r17
    438c:	08 95       	ret

0000438e <tuner_SetChannel>:
//=============================================================================
void tuner_SetChannel(uint8_t channel, uint8_t chan)
{
  if ((channel < FM_STATIONS) && (chan <= FM_CHAN_MAX)) {
    438e:	8e 31       	cpi	r24, 0x1E	; 30
    4390:	40 f4       	brcc	.+16     	; 0x43a2 <tuner_SetChannel+0x14>
    4392:	63 3d       	cpi	r22, 0xD3	; 211
    4394:	30 f4       	brcc	.+12     	; 0x43a2 <tuner_SetChannel+0x14>
    fm_stations[channel] = chan;
    4396:	e8 2f       	mov	r30, r24
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	ea 55       	subi	r30, 0x5A	; 90
    439c:	fa 4f       	sbci	r31, 0xFA	; 250
    439e:	60 83       	st	Z, r22
    43a0:	08 95       	ret
  } else {
    fm_stations[channel] = 0xFF;
    43a2:	e8 2f       	mov	r30, r24
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	ea 55       	subi	r30, 0x5A	; 90
    43a8:	fa 4f       	sbci	r31, 0xFA	; 250
    43aa:	8f ef       	ldi	r24, 0xFF	; 255
    43ac:	80 83       	st	Z, r24
    43ae:	08 95       	ret

000043b0 <tuner_Save_stations>:
  }
}
//=============================================================================
void tuner_Save_stations(uint8_t channel, uint8_t chan)
{
  if ((channel < FM_STATIONS) && (chan <= FM_CHAN_MAX)) {
    43b0:	8e 31       	cpi	r24, 0x1E	; 30
    43b2:	50 f4       	brcc	.+20     	; 0x43c8 <tuner_Save_stations+0x18>
    43b4:	63 3d       	cpi	r22, 0xD3	; 211
    43b6:	40 f4       	brcc	.+16     	; 0x43c8 <tuner_Save_stations+0x18>
    fm_stations[channel] = chan;
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	fc 01       	movw	r30, r24
    43bc:	ea 55       	subi	r30, 0x5A	; 90
    43be:	fa 4f       	sbci	r31, 0xFA	; 250
    43c0:	60 83       	st	Z, r22
    eeprom_write_byte((uint8_t*)FM_CHANEL_ALL_ADDR + channel, fm_stations[channel]);
    43c2:	80 96       	adiw	r24, 0x20	; 32
    43c4:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
    43c8:	08 95       	ret

000043ca <tuner_Load_stations>:
  }
}
//=============================================================================
uint8_t tuner_Load_stations(uint8_t channel)
{
  return eeprom_read_byte((uint8_t*)FM_CHANEL_ALL_ADDR + channel);
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	80 96       	adiw	r24, 0x20	; 32
    43ce:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
}
    43d2:	08 95       	ret

000043d4 <tuner_Save_all_stations>:
//=============================================================================
void tuner_Save_all_stations(void)
{
    43d4:	0f 93       	push	r16
    43d6:	1f 93       	push	r17
    43d8:	cf 93       	push	r28
    43da:	df 93       	push	r29
    43dc:	06 ea       	ldi	r16, 0xA6	; 166
    43de:	15 e0       	ldi	r17, 0x05	; 5
    43e0:	c0 e2       	ldi	r28, 0x20	; 32
    43e2:	d0 e0       	ldi	r29, 0x00	; 0
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
  {
    eeprom_write_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i, fm_stations[i]);
    43e4:	f8 01       	movw	r30, r16
    43e6:	61 91       	ld	r22, Z+
    43e8:	8f 01       	movw	r16, r30
    43ea:	ce 01       	movw	r24, r28
    43ec:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
    43f0:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void tuner_Save_all_stations(void)
{
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
    43f2:	ce 33       	cpi	r28, 0x3E	; 62
    43f4:	d1 05       	cpc	r29, r1
    43f6:	b1 f7       	brne	.-20     	; 0x43e4 <tuner_Save_all_stations+0x10>
  {
    eeprom_write_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i, fm_stations[i]);
  }
}
    43f8:	df 91       	pop	r29
    43fa:	cf 91       	pop	r28
    43fc:	1f 91       	pop	r17
    43fe:	0f 91       	pop	r16
    4400:	08 95       	ret

00004402 <tuner_Load_all_stations>:
//=============================================================================
void tuner_Load_all_stations(void)
{
    4402:	0f 93       	push	r16
    4404:	1f 93       	push	r17
    4406:	cf 93       	push	r28
    4408:	df 93       	push	r29
    440a:	06 ea       	ldi	r16, 0xA6	; 166
    440c:	15 e0       	ldi	r17, 0x05	; 5
    440e:	c0 e2       	ldi	r28, 0x20	; 32
    4410:	d0 e0       	ldi	r29, 0x00	; 0
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
  {
    fm_stations[i] = eeprom_read_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i);
    4412:	ce 01       	movw	r24, r28
    4414:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
    4418:	f8 01       	movw	r30, r16
    441a:	81 93       	st	Z+, r24
    441c:	8f 01       	movw	r16, r30
    441e:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void tuner_Load_all_stations(void)
{
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
    4420:	ce 33       	cpi	r28, 0x3E	; 62
    4422:	d1 05       	cpc	r29, r1
    4424:	b1 f7       	brne	.-20     	; 0x4412 <tuner_Load_all_stations+0x10>
  {
    fm_stations[i] = eeprom_read_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i);
  }
}
    4426:	df 91       	pop	r29
    4428:	cf 91       	pop	r28
    442a:	1f 91       	pop	r17
    442c:	0f 91       	pop	r16
    442e:	08 95       	ret

00004430 <tuner_Save_channel>:
//=============================================================================
void tuner_Save_channel(uint8_t channel)
{
    4430:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)FM_STATION_ADDR, channel);
    4432:	80 e1       	ldi	r24, 0x10	; 16
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
}
    443a:	08 95       	ret

0000443c <tuner_Load_channel>:
//=============================================================================
uint8_t tuner_Load_channel(void)
{
  unsigned char i;
  i = eeprom_read_byte((uint8_t*)FM_STATION_ADDR);
    443c:	80 e1       	ldi	r24, 0x10	; 16
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
  if (i > FM_STATIONS) i = 0;
    4444:	8f 31       	cpi	r24, 0x1F	; 31
    4446:	08 f0       	brcs	.+2      	; 0x444a <tuner_Load_channel+0xe>
    4448:	80 e0       	ldi	r24, 0x00	; 0
  return i;
}
    444a:	08 95       	ret

0000444c <tuner_Save_volume>:
//=============================================================================
void tuner_Save_volume(uint8_t vol)
{
    444c:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)FM_VOLUME_ADDR, vol);
    444e:	81 e1       	ldi	r24, 0x11	; 17
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	0e 94 bd 22 	call	0x457a	; 0x457a <__eewr_byte_m32>
}
    4456:	08 95       	ret

00004458 <tuner_Load_volume>:
//=============================================================================
uint8_t tuner_Load_volume(void)
{
  return eeprom_read_byte((uint8_t*)FM_VOLUME_ADDR);
    4458:	81 e1       	ldi	r24, 0x11	; 17
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	0e 94 b5 22 	call	0x456a	; 0x456a <__eerd_byte_m32>
}
    4460:	08 95       	ret

00004462 <get_fm_def_chan>:
{
  uint8_t ret = FM_CHAN_DEF, chan_max = 0, i;
  for(i = 0; i < FM_STATIONS; i++)
  {
    if (fm_stations[i] <= FM_CHAN_MAX) {
	  if (fm_stations[i] >= chan_max) {
    4462:	e6 ea       	ldi	r30, 0xA6	; 166
    4464:	f5 e0       	ldi	r31, 0x05	; 5
  return eeprom_read_byte((uint8_t*)FM_VOLUME_ADDR);
}
//=============================================================================
uint8_t get_fm_def_chan(void)
{
  uint8_t ret = FM_CHAN_DEF, chan_max = 0, i;
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	80 e0       	ldi	r24, 0x00	; 0
  for(i = 0; i < FM_STATIONS; i++)
  {
    if (fm_stations[i] <= FM_CHAN_MAX) {
    446a:	21 91       	ld	r18, Z+
    446c:	23 3d       	cpi	r18, 0xD3	; 211
    446e:	20 f4       	brcc	.+8      	; 0x4478 <get_fm_def_chan+0x16>
	  if (fm_stations[i] >= chan_max) {
    4470:	29 17       	cp	r18, r25
    4472:	10 f0       	brcs	.+4      	; 0x4478 <get_fm_def_chan+0x16>
    4474:	92 2f       	mov	r25, r18
    4476:	82 2f       	mov	r24, r18
}
//=============================================================================
uint8_t get_fm_def_chan(void)
{
  uint8_t ret = FM_CHAN_DEF, chan_max = 0, i;
  for(i = 0; i < FM_STATIONS; i++)
    4478:	25 e0       	ldi	r18, 0x05	; 5
    447a:	e4 3c       	cpi	r30, 0xC4	; 196
    447c:	f2 07       	cpc	r31, r18
    447e:	a9 f7       	brne	.-22     	; 0x446a <get_fm_def_chan+0x8>
	    ret = fm_stations[i];
	  }
	}
  }
  return ret;
}
    4480:	08 95       	ret

00004482 <__mulsi3>:
    4482:	62 9f       	mul	r22, r18
    4484:	d0 01       	movw	r26, r0
    4486:	73 9f       	mul	r23, r19
    4488:	f0 01       	movw	r30, r0
    448a:	82 9f       	mul	r24, r18
    448c:	e0 0d       	add	r30, r0
    448e:	f1 1d       	adc	r31, r1
    4490:	64 9f       	mul	r22, r20
    4492:	e0 0d       	add	r30, r0
    4494:	f1 1d       	adc	r31, r1
    4496:	92 9f       	mul	r25, r18
    4498:	f0 0d       	add	r31, r0
    449a:	83 9f       	mul	r24, r19
    449c:	f0 0d       	add	r31, r0
    449e:	74 9f       	mul	r23, r20
    44a0:	f0 0d       	add	r31, r0
    44a2:	65 9f       	mul	r22, r21
    44a4:	f0 0d       	add	r31, r0
    44a6:	99 27       	eor	r25, r25
    44a8:	72 9f       	mul	r23, r18
    44aa:	b0 0d       	add	r27, r0
    44ac:	e1 1d       	adc	r30, r1
    44ae:	f9 1f       	adc	r31, r25
    44b0:	63 9f       	mul	r22, r19
    44b2:	b0 0d       	add	r27, r0
    44b4:	e1 1d       	adc	r30, r1
    44b6:	f9 1f       	adc	r31, r25
    44b8:	bd 01       	movw	r22, r26
    44ba:	cf 01       	movw	r24, r30
    44bc:	11 24       	eor	r1, r1
    44be:	08 95       	ret

000044c0 <__udivmodqi4>:
    44c0:	99 1b       	sub	r25, r25
    44c2:	79 e0       	ldi	r23, 0x09	; 9
    44c4:	04 c0       	rjmp	.+8      	; 0x44ce <__udivmodqi4_ep>

000044c6 <__udivmodqi4_loop>:
    44c6:	99 1f       	adc	r25, r25
    44c8:	96 17       	cp	r25, r22
    44ca:	08 f0       	brcs	.+2      	; 0x44ce <__udivmodqi4_ep>
    44cc:	96 1b       	sub	r25, r22

000044ce <__udivmodqi4_ep>:
    44ce:	88 1f       	adc	r24, r24
    44d0:	7a 95       	dec	r23
    44d2:	c9 f7       	brne	.-14     	; 0x44c6 <__udivmodqi4_loop>
    44d4:	80 95       	com	r24
    44d6:	08 95       	ret

000044d8 <__udivmodhi4>:
    44d8:	aa 1b       	sub	r26, r26
    44da:	bb 1b       	sub	r27, r27
    44dc:	51 e1       	ldi	r21, 0x11	; 17
    44de:	07 c0       	rjmp	.+14     	; 0x44ee <__udivmodhi4_ep>

000044e0 <__udivmodhi4_loop>:
    44e0:	aa 1f       	adc	r26, r26
    44e2:	bb 1f       	adc	r27, r27
    44e4:	a6 17       	cp	r26, r22
    44e6:	b7 07       	cpc	r27, r23
    44e8:	10 f0       	brcs	.+4      	; 0x44ee <__udivmodhi4_ep>
    44ea:	a6 1b       	sub	r26, r22
    44ec:	b7 0b       	sbc	r27, r23

000044ee <__udivmodhi4_ep>:
    44ee:	88 1f       	adc	r24, r24
    44f0:	99 1f       	adc	r25, r25
    44f2:	5a 95       	dec	r21
    44f4:	a9 f7       	brne	.-22     	; 0x44e0 <__udivmodhi4_loop>
    44f6:	80 95       	com	r24
    44f8:	90 95       	com	r25
    44fa:	bc 01       	movw	r22, r24
    44fc:	cd 01       	movw	r24, r26
    44fe:	08 95       	ret

00004500 <__divmodhi4>:
    4500:	97 fb       	bst	r25, 7
    4502:	09 2e       	mov	r0, r25
    4504:	07 26       	eor	r0, r23
    4506:	0a d0       	rcall	.+20     	; 0x451c <__divmodhi4_neg1>
    4508:	77 fd       	sbrc	r23, 7
    450a:	04 d0       	rcall	.+8      	; 0x4514 <__divmodhi4_neg2>
    450c:	e5 df       	rcall	.-54     	; 0x44d8 <__udivmodhi4>
    450e:	06 d0       	rcall	.+12     	; 0x451c <__divmodhi4_neg1>
    4510:	00 20       	and	r0, r0
    4512:	1a f4       	brpl	.+6      	; 0x451a <__divmodhi4_exit>

00004514 <__divmodhi4_neg2>:
    4514:	70 95       	com	r23
    4516:	61 95       	neg	r22
    4518:	7f 4f       	sbci	r23, 0xFF	; 255

0000451a <__divmodhi4_exit>:
    451a:	08 95       	ret

0000451c <__divmodhi4_neg1>:
    451c:	f6 f7       	brtc	.-4      	; 0x451a <__divmodhi4_exit>
    451e:	90 95       	com	r25
    4520:	81 95       	neg	r24
    4522:	9f 4f       	sbci	r25, 0xFF	; 255
    4524:	08 95       	ret

00004526 <__udivmodsi4>:
    4526:	a1 e2       	ldi	r26, 0x21	; 33
    4528:	1a 2e       	mov	r1, r26
    452a:	aa 1b       	sub	r26, r26
    452c:	bb 1b       	sub	r27, r27
    452e:	fd 01       	movw	r30, r26
    4530:	0d c0       	rjmp	.+26     	; 0x454c <__udivmodsi4_ep>

00004532 <__udivmodsi4_loop>:
    4532:	aa 1f       	adc	r26, r26
    4534:	bb 1f       	adc	r27, r27
    4536:	ee 1f       	adc	r30, r30
    4538:	ff 1f       	adc	r31, r31
    453a:	a2 17       	cp	r26, r18
    453c:	b3 07       	cpc	r27, r19
    453e:	e4 07       	cpc	r30, r20
    4540:	f5 07       	cpc	r31, r21
    4542:	20 f0       	brcs	.+8      	; 0x454c <__udivmodsi4_ep>
    4544:	a2 1b       	sub	r26, r18
    4546:	b3 0b       	sbc	r27, r19
    4548:	e4 0b       	sbc	r30, r20
    454a:	f5 0b       	sbc	r31, r21

0000454c <__udivmodsi4_ep>:
    454c:	66 1f       	adc	r22, r22
    454e:	77 1f       	adc	r23, r23
    4550:	88 1f       	adc	r24, r24
    4552:	99 1f       	adc	r25, r25
    4554:	1a 94       	dec	r1
    4556:	69 f7       	brne	.-38     	; 0x4532 <__udivmodsi4_loop>
    4558:	60 95       	com	r22
    455a:	70 95       	com	r23
    455c:	80 95       	com	r24
    455e:	90 95       	com	r25
    4560:	9b 01       	movw	r18, r22
    4562:	ac 01       	movw	r20, r24
    4564:	bd 01       	movw	r22, r26
    4566:	cf 01       	movw	r24, r30
    4568:	08 95       	ret

0000456a <__eerd_byte_m32>:
    456a:	e1 99       	sbic	0x1c, 1	; 28
    456c:	fe cf       	rjmp	.-4      	; 0x456a <__eerd_byte_m32>
    456e:	9f bb       	out	0x1f, r25	; 31
    4570:	8e bb       	out	0x1e, r24	; 30
    4572:	e0 9a       	sbi	0x1c, 0	; 28
    4574:	99 27       	eor	r25, r25
    4576:	8d b3       	in	r24, 0x1d	; 29
    4578:	08 95       	ret

0000457a <__eewr_byte_m32>:
    457a:	26 2f       	mov	r18, r22

0000457c <__eewr_r18_m32>:
    457c:	e1 99       	sbic	0x1c, 1	; 28
    457e:	fe cf       	rjmp	.-4      	; 0x457c <__eewr_r18_m32>
    4580:	9f bb       	out	0x1f, r25	; 31
    4582:	8e bb       	out	0x1e, r24	; 30
    4584:	2d bb       	out	0x1d, r18	; 29
    4586:	0f b6       	in	r0, 0x3f	; 63
    4588:	f8 94       	cli
    458a:	e2 9a       	sbi	0x1c, 2	; 28
    458c:	e1 9a       	sbi	0x1c, 1	; 28
    458e:	0f be       	out	0x3f, r0	; 63
    4590:	01 96       	adiw	r24, 0x01	; 1
    4592:	08 95       	ret

00004594 <_exit>:
    4594:	f8 94       	cli

00004596 <__stop_program>:
    4596:	ff cf       	rjmp	.-2      	; 0x4596 <__stop_program>
