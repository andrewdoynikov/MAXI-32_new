
maxi32new.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000430  00800060  000048b6  0000494a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015e  00800490  00800490  00004d7a  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00004d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000014b  00000000  00000000  000055b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000056fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f9f  00000000  00000000  0000587b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003c70  00000000  00000000  0000681a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000118b  00000000  00000000  0000a48a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005407  00000000  00000000  0000b615  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000af0  00000000  00000000  00010a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000f34  00000000  00000000  0001150c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000243f  00000000  00000000  00012440  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000290  00000000  00000000  0001487f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  00014b0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
       4:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <__vector_1>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_5>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 80 1f 	jmp	0x3f00	; 0x3f00 <__vector_11>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 00 00 15 00 00 00 00 10 10 10 15 10 10 10 00     ................
      64:	18 18 18 1d 18 18 18 00 1c 1c 1c 1d 1c 1c 1c 00     ................
      74:	1e 1e 1e 1f 1e 1e 1e 00 1f 1f 1f 1f 1f 1f 1f 00     ................
      84:	0e 15 15 17 11 11 0e 00 03 05 19 11 19 05 03 00     ................

00000094 <LcdBigNum>:
      94:	1f 1f 1f 00 00 00 00 00 00 00 00 00 00 1f 1f 1f     ................
      a4:	1f 1f 00 00 00 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f 1f     ................
      b4:	00 00 00 00 18 18 18 00 1f 1b 13 1b 1b 1b 1f 00     ................
      c4:	1f 11 1d 11 17 11 1f 00 1f 11 1d 11 1d 11 1f 00     ................

000000d4 <__ctors_end>:
      d4:	11 24       	eor	r1, r1
      d6:	1f be       	out	0x3f, r1	; 63
      d8:	cf e5       	ldi	r28, 0x5F	; 95
      da:	d8 e0       	ldi	r29, 0x08	; 8
      dc:	de bf       	out	0x3e, r29	; 62
      de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
      e0:	14 e0       	ldi	r17, 0x04	; 4
      e2:	a0 e6       	ldi	r26, 0x60	; 96
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	e6 eb       	ldi	r30, 0xB6	; 182
      e8:	f8 e4       	ldi	r31, 0x48	; 72
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
      ec:	05 90       	lpm	r0, Z+
      ee:	0d 92       	st	X+, r0
      f0:	a0 39       	cpi	r26, 0x90	; 144
      f2:	b1 07       	cpc	r27, r17
      f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
      f6:	15 e0       	ldi	r17, 0x05	; 5
      f8:	a0 e9       	ldi	r26, 0x90	; 144
      fa:	b4 e0       	ldi	r27, 0x04	; 4
      fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
      fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
     100:	ae 3e       	cpi	r26, 0xEE	; 238
     102:	b1 07       	cpc	r27, r17
     104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
     106:	0e 94 89 00 	call	0x112	; 0x112 <main>
     10a:	0c 94 59 24 	jmp	0x48b2	; 0x48b2 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <main>:
#include "tuner.h"
#include "interface.h"
//=============================================================================
int main(void)
{
  LED_STB_OUT_init();
     112:	ba 9a       	sbi	0x17, 2	; 23
  if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
     114:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	11 f4       	brne	.+4      	; 0x120 <main+0xe>
     11c:	c2 9a       	sbi	0x18, 2	; 24
     11e:	01 c0       	rjmp	.+2      	; 0x122 <main+0x10>
     120:	c2 98       	cbi	0x18, 2	; 24
  LED_AC_WAIT_init();
     122:	bb 9a       	sbi	0x17, 3	; 23
     124:	c3 98       	cbi	0x18, 3	; 24
  LED_VENTIL_init();
     126:	89 9a       	sbi	0x11, 1	; 17
     128:	91 98       	cbi	0x12, 1	; 18
  LED_STANDBY_init();
     12a:	b8 9a       	sbi	0x17, 0	; 23
     12c:	c0 98       	cbi	0x18, 0	; 24
  LED_STANDBY_on();
     12e:	c0 98       	cbi	0x18, 0	; 24
  LCD_init();
     130:	0e 94 0f 02 	call	0x41e	; 0x41e <LCD_init>
  LCD_load_defchar();
     134:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
  LIGHT_init();
     138:	a4 9a       	sbi	0x14, 4	; 20
  LIGHT_on();
     13a:	ac 9a       	sbi	0x15, 4	; 21
  I2C_init();
     13c:	0e 94 9d 02 	call	0x53a	; 0x53a <I2C_init>
  RC5_init(RC5_ALL);
     140:	8f ef       	ldi	r24, 0xFF	; 255
     142:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <RC5_init>
  RTC_init();
     146:	0e 94 6e 03 	call	0x6dc	; 0x6dc <RTC_init>
  KBD_init();
     14a:	0e 94 5f 05 	call	0xabe	; 0xabe <KBD_init>
  BEEP_init();
     14e:	8f 9a       	sbi	0x11, 7	; 17
     150:	97 9a       	sbi	0x12, 7	; 18
  ENC_init();
     152:	0e 94 be 06 	call	0xd7c	; 0xd7c <ENC_init>
  LED_RC5_CMD_init();
     156:	b9 9a       	sbi	0x17, 1	; 23
     158:	c1 9a       	sbi	0x18, 1	; 24
  tda7313SetMute(1);
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
  tuner_Init();
     160:	89 e7       	ldi	r24, 0x79	; 121
     162:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <tea5767Init>
     166:	0e 94 1d 23 	call	0x463a	; 0x463a <tuner_Init_stations>
  tuner_PowerOn();
     16a:	0e 94 09 23 	call	0x4612	; 0x4612 <tea5767PowerOn>
  RTOS_init();
     16e:	0e 94 0b 07 	call	0xe16	; 0xe16 <RTOS_init>
  BEEP();
     172:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     174:	8f e3       	ldi	r24, 0x3F	; 63
     176:	9c e9       	ldi	r25, 0x9C	; 156
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x66>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x6c>
     17e:	00 00       	nop
     180:	97 9a       	sbi	0x12, 7	; 18
//-----------------------------------------------------------------------------
  ds18x20SearchDevices();
     182:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <ds18x20SearchDevices>
  ds18x20Process();
     186:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <ds18x20Process>
//-----------------------------------------------------------------------------
  sei(); 				        			 		// Разрешили прерывания
     18a:	78 94       	sei
  RTOS_setTask(EVENT_START, 0, 0);
     18c:	81 ea       	ldi	r24, 0xA1	; 161
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	40 e0       	ldi	r20, 0x00	; 0
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
  RTOS_setTaskFunc(scan_fault, 0, TIME_FAULT);      // моргание
     19a:	89 ec       	ldi	r24, 0xC9	; 201
     19c:	9d e0       	ldi	r25, 0x0D	; 13
     19e:	60 e0       	ldi	r22, 0x00	; 0
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	42 e0       	ldi	r20, 0x02	; 2
     1a4:	50 e0       	ldi	r21, 0x00	; 0
     1a6:	0e 94 81 07 	call	0xf02	; 0xf02 <RTOS_setTaskFunc>
//-----------------------------------------------------------------------------
  while(1) {
    RTOS_dispatchTask();    			     // Вызываем диспетчер в цикле.    
     1aa:	0e 94 63 08 	call	0x10c6	; 0x10c6 <RTOS_dispatchTask>
     1ae:	fd cf       	rjmp	.-6      	; 0x1aa <main+0x98>

000001b0 <lcd>:
  0x1F, 0x11, 0x1D, 0x11, 0x1D, 0x11, 0x1F, 0x00
};
//=============================================================================
void lcd(unsigned char p)
{ 
  PORT(LCD_PORT_CTRL) |= (1 << LCD_EN_PIN);
     1b0:	dc 9a       	sbi	0x1b, 4	; 27
  if (p & 0x80) { PORT(LCD_PORT_DATA) |= (1 << LCD_D7_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D7_PIN)); }
     1b2:	87 ff       	sbrs	r24, 7
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <lcd+0xa>
     1b6:	db 9a       	sbi	0x1b, 3	; 27
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <lcd+0xc>
     1ba:	db 98       	cbi	0x1b, 3	; 27
  if (p & 0x40) { PORT(LCD_PORT_DATA) |= (1 << LCD_D6_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D6_PIN)); }
     1bc:	86 ff       	sbrs	r24, 6
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <lcd+0x14>
     1c0:	da 9a       	sbi	0x1b, 2	; 27
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <lcd+0x16>
     1c4:	da 98       	cbi	0x1b, 2	; 27
  if (p & 0x20) { PORT(LCD_PORT_DATA) |= (1 << LCD_D5_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D5_PIN)); }
     1c6:	85 ff       	sbrs	r24, 5
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <lcd+0x1e>
     1ca:	d9 9a       	sbi	0x1b, 1	; 27
     1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <lcd+0x20>
     1ce:	d9 98       	cbi	0x1b, 1	; 27
  if (p & 0x10) { PORT(LCD_PORT_DATA) |= (1 << LCD_D4_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D4_PIN)); }
     1d0:	84 ff       	sbrs	r24, 4
     1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <lcd+0x28>
     1d4:	d8 9a       	sbi	0x1b, 0	; 27
     1d6:	01 c0       	rjmp	.+2      	; 0x1da <lcd+0x2a>
     1d8:	d8 98       	cbi	0x1b, 0	; 27
  PORT(LCD_PORT_CTRL) &= ~_BV(LCD_EN_PIN);
     1da:	dc 98       	cbi	0x1b, 4	; 27
     1dc:	ef e9       	ldi	r30, 0x9F	; 159
     1de:	ff e0       	ldi	r31, 0x0F	; 15
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd+0x30>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd+0x36>
     1e6:	00 00       	nop
  _delay_ms(1);
  PORT(LCD_PORT_CTRL) |= (1 << LCD_EN_PIN);
     1e8:	dc 9a       	sbi	0x1b, 4	; 27
  if (p & 0x08) { PORT(LCD_PORT_DATA) |= (1 << LCD_D7_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D7_PIN)); }
     1ea:	83 ff       	sbrs	r24, 3
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <lcd+0x42>
     1ee:	db 9a       	sbi	0x1b, 3	; 27
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <lcd+0x44>
     1f2:	db 98       	cbi	0x1b, 3	; 27
  if (p & 0x04) { PORT(LCD_PORT_DATA) |= (1 << LCD_D6_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D6_PIN)); }
     1f4:	82 ff       	sbrs	r24, 2
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <lcd+0x4c>
     1f8:	da 9a       	sbi	0x1b, 2	; 27
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <lcd+0x4e>
     1fc:	da 98       	cbi	0x1b, 2	; 27
  if (p & 0x02) { PORT(LCD_PORT_DATA) |= (1 << LCD_D5_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D5_PIN)); }
     1fe:	81 ff       	sbrs	r24, 1
     200:	02 c0       	rjmp	.+4      	; 0x206 <lcd+0x56>
     202:	d9 9a       	sbi	0x1b, 1	; 27
     204:	01 c0       	rjmp	.+2      	; 0x208 <lcd+0x58>
     206:	d9 98       	cbi	0x1b, 1	; 27
  if (p & 0x01) { PORT(LCD_PORT_DATA) |= (1 << LCD_D4_PIN); } else { PORT(LCD_PORT_DATA) &= (~(1 << LCD_D4_PIN)); }
     208:	80 ff       	sbrs	r24, 0
     20a:	02 c0       	rjmp	.+4      	; 0x210 <lcd+0x60>
     20c:	d8 9a       	sbi	0x1b, 0	; 27
     20e:	01 c0       	rjmp	.+2      	; 0x212 <lcd+0x62>
     210:	d8 98       	cbi	0x1b, 0	; 27
  PORT(LCD_PORT_CTRL) &= (~(1 << LCD_EN_PIN));
     212:	dc 98       	cbi	0x1b, 4	; 27
     214:	8f e9       	ldi	r24, 0x9F	; 159
     216:	9f e0       	ldi	r25, 0x0F	; 15
     218:	01 97       	sbiw	r24, 0x01	; 1
     21a:	f1 f7       	brne	.-4      	; 0x218 <lcd+0x68>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd+0x6e>
     21e:	00 00       	nop
  _delay_ms(1);
  PORT(LCD_PORT_CTRL) |= (1 << LCD_EN_PIN);
     220:	dc 9a       	sbi	0x1b, 4	; 27
}                
     222:	08 95       	ret

00000224 <LCD_com>:
//=============================================================================
void LCD_com(unsigned char p)
{
  PORT(LCD_PORT_CTRL) &= ~_BV(LCD_RS_PIN);
     224:	dd 98       	cbi	0x1b, 5	; 27
  PORT(LCD_PORT_CTRL) |= _BV(LCD_EN_PIN);
     226:	dc 9a       	sbi	0x1b, 4	; 27
  lcd(p);
     228:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd>
}
     22c:	08 95       	ret

0000022e <LCD_dat>:
//=============================================================================
void LCD_dat(unsigned char p)
{
  PORT(LCD_PORT_CTRL) |= (1 << LCD_RS_PIN) | (1 << LCD_EN_PIN);
     22e:	9b b3       	in	r25, 0x1b	; 27
     230:	90 63       	ori	r25, 0x30	; 48
     232:	9b bb       	out	0x1b, r25	; 27
  if ((p > 0x80) && (p != 0xED)) {
     234:	81 38       	cpi	r24, 0x81	; 129
     236:	48 f0       	brcs	.+18     	; 0x24a <LCD_dat+0x1c>
     238:	8d 3e       	cpi	r24, 0xED	; 237
     23a:	39 f0       	breq	.+14     	; 0x24a <LCD_dat+0x1c>
    p = TransTable[(p & 0x7F) - 0x40];
     23c:	e8 2f       	mov	r30, r24
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	ef 77       	andi	r30, 0x7F	; 127
     242:	f0 70       	andi	r31, 0x00	; 0
     244:	e0 5e       	subi	r30, 0xE0	; 224
     246:	ff 4f       	sbci	r31, 0xFF	; 255
     248:	80 81       	ld	r24, Z
  }
  lcd(p);
     24a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd>
}
     24e:	08 95       	ret

00000250 <LCD_puts>:
  LCD_com(0x0C);
  LCD_load_bignum();
}
//=============================================================================
void LCD_puts(char *data)
{
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	e8 2e       	mov	r14, r24
     25a:	e7 01       	movw	r28, r14
     25c:	7e 01       	movw	r14, r28
     25e:	f9 2e       	mov	r15, r25
     260:	e7 01       	movw	r28, r14
  while(*data) LCD_dat(*(data++));
     262:	02 c0       	rjmp	.+4      	; 0x268 <LCD_puts+0x18>
     264:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     268:	89 91       	ld	r24, Y+
     26a:	88 23       	and	r24, r24
     26c:	d9 f7       	brne	.-10     	; 0x264 <LCD_puts+0x14>
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	ff 90       	pop	r15
     274:	ef 90       	pop	r14
     276:	08 95       	ret

00000278 <LCD_SetXY>:
//=============================================================================
void LCD_SetXY(unsigned char x, unsigned char y)
{
     278:	64 30       	cpi	r22, 0x04	; 4
     27a:	30 f4       	brcc	.+12     	; 0x288 <LCD_SetXY+0x10>
     27c:	e6 2f       	mov	r30, r22
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	e0 56       	subi	r30, 0x60	; 96
     282:	ff 4f       	sbci	r31, 0xFF	; 255
     284:	90 81       	ld	r25, Z
     286:	01 c0       	rjmp	.+2      	; 0x28a <LCD_SetXY+0x12>
     288:	90 e8       	ldi	r25, 0x80	; 128
    case 0: i = 0x80; break;
    case 1: i = 0xC0; break;
    case 2: i = 0x94; break;
    case 3: i = 0xD4; break;
  }
  LCD_com(i + x);
     28a:	89 0f       	add	r24, r25
     28c:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
}
     290:	08 95       	ret

00000292 <LCD_clear>:
//=============================================================================
void LCD_clear(void)
{
  LCD_com(1 << LCD_CLR);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     298:	8f ef       	ldi	r24, 0xFF	; 255
     29a:	93 ec       	ldi	r25, 0xC3	; 195
     29c:	a9 e0       	ldi	r26, 0x09	; 9
     29e:	81 50       	subi	r24, 0x01	; 1
     2a0:	90 40       	sbci	r25, 0x00	; 0
     2a2:	a0 40       	sbci	r26, 0x00	; 0
     2a4:	e1 f7       	brne	.-8      	; 0x29e <LCD_clear+0xc>
     2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_clear+0x16>
     2a8:	00 00       	nop
  _delay_ms(200);
}
     2aa:	08 95       	ret

000002ac <LCD_definechar>:
//=============================================================================
void LCD_definechar(const unsigned char *pc,uint8_t char_code)
{
     2ac:	cf 92       	push	r12
     2ae:	df 92       	push	r13
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	0f 92       	push	r0
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	6c 01       	movw	r12, r24
  uint8_t a, pcc;
  uint16_t i;
  a = (char_code << 3) | 0x40;
     2c2:	66 0f       	add	r22, r22
     2c4:	66 0f       	add	r22, r22
     2c6:	66 0f       	add	r22, r22
     2c8:	60 64       	ori	r22, 0x40	; 64
  for (i = 0; i < 8; i++) {
     2ca:	00 e0       	ldi	r16, 0x00	; 0
     2cc:	10 e0       	ldi	r17, 0x00	; 0
    pcc = pgm_read_byte(&pc[i]);
     2ce:	f6 01       	movw	r30, r12
     2d0:	e0 0f       	add	r30, r16
     2d2:	f1 1f       	adc	r31, r17
     2d4:	f4 90       	lpm	r15, Z+
	LCD_com(a++); LCD_dat(pcc);
     2d6:	86 2f       	mov	r24, r22
     2d8:	80 0f       	add	r24, r16
     2da:	69 83       	std	Y+1, r22	; 0x01
     2dc:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     2e0:	8f 2d       	mov	r24, r15
     2e2:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
void LCD_definechar(const unsigned char *pc,uint8_t char_code)
{
  uint8_t a, pcc;
  uint16_t i;
  a = (char_code << 3) | 0x40;
  for (i = 0; i < 8; i++) {
     2e6:	0f 5f       	subi	r16, 0xFF	; 255
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ea:	69 81       	ldd	r22, Y+1	; 0x01
     2ec:	08 30       	cpi	r16, 0x08	; 8
     2ee:	11 05       	cpc	r17, r1
     2f0:	71 f7       	brne	.-36     	; 0x2ce <LCD_definechar+0x22>
    pcc = pgm_read_byte(&pc[i]);
	LCD_com(a++); LCD_dat(pcc);
  }
}
     2f2:	0f 90       	pop	r0
     2f4:	cf 91       	pop	r28
     2f6:	df 91       	pop	r29
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ff 90       	pop	r15
     2fe:	df 90       	pop	r13
     300:	cf 90       	pop	r12
     302:	08 95       	ret

00000304 <LCD_progress_bar>:
//=============================================================================
void LCD_progress_bar(unsigned char progress, unsigned char maxprogress, unsigned char length)
{
     304:	cf 92       	push	r12
     306:	df 92       	push	r13
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	df 93       	push	r29
     312:	cf 93       	push	r28
     314:	0f 92       	push	r0
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
uint8_t i;
uint16_t pixelprogress;
uint8_t c;
pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
     31a:	e6 e0       	ldi	r30, 0x06	; 6
     31c:	8e 9f       	mul	r24, r30
     31e:	f0 01       	movw	r30, r0
     320:	11 24       	eor	r1, r1
     322:	24 2f       	mov	r18, r20
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	e2 9f       	mul	r30, r18
     328:	c0 01       	movw	r24, r0
     32a:	e3 9f       	mul	r30, r19
     32c:	90 0d       	add	r25, r0
     32e:	f2 9f       	mul	r31, r18
     330:	90 0d       	add	r25, r0
     332:	11 24       	eor	r1, r1
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
     33a:	6b 01       	movw	r12, r22
  {
    if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    {
      c = 0;
    } else {
      c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     33c:	cb 01       	movw	r24, r22
     33e:	66 e0       	ldi	r22, 0x06	; 6
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__udivmodhi4>
     346:	e8 2e       	mov	r14, r24
{
uint8_t i;
uint16_t pixelprogress;
uint8_t c;
pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
for(i=0; i<length; i++)
     348:	00 e0       	ldi	r16, 0x00	; 0
     34a:	10 e0       	ldi	r17, 0x00	; 0
     34c:	ff 24       	eor	r15, r15
     34e:	15 c0       	rjmp	.+42     	; 0x37a <LCD_progress_bar+0x76>
{
  if( ((i * (uint16_t)PROGRESSPIXELS_PER_CHAR) + 5) > pixelprogress )
     350:	98 01       	movw	r18, r16
     352:	2b 5f       	subi	r18, 0xFB	; 251
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	c2 16       	cp	r12, r18
     358:	d3 06       	cpc	r13, r19
     35a:	28 f4       	brcc	.+10     	; 0x366 <LCD_progress_bar+0x62>
  {
    if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     35c:	c0 16       	cp	r12, r16
     35e:	d1 06       	cpc	r13, r17
     360:	20 f4       	brcc	.+8      	; 0x36a <LCD_progress_bar+0x66>
    {
      c = 0;
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	03 c0       	rjmp	.+6      	; 0x36c <LCD_progress_bar+0x68>
    } else {
      c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
    }
  } else {
    c = 5;
     366:	85 e0       	ldi	r24, 0x05	; 5
     368:	01 c0       	rjmp	.+2      	; 0x36c <LCD_progress_bar+0x68>
  {
    if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
    {
      c = 0;
    } else {
      c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     36a:	8e 2d       	mov	r24, r14
    }
  } else {
    c = 5;
  }
  LCD_dat(c);
     36c:	49 83       	std	Y+1, r20	; 0x01
     36e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
{
uint8_t i;
uint16_t pixelprogress;
uint8_t c;
pixelprogress = ((progress * (length * PROGRESSPIXELS_PER_CHAR)) / maxprogress);
for(i=0; i<length; i++)
     372:	f3 94       	inc	r15
     374:	0a 5f       	subi	r16, 0xFA	; 250
     376:	1f 4f       	sbci	r17, 0xFF	; 255
     378:	49 81       	ldd	r20, Y+1	; 0x01
     37a:	f4 16       	cp	r15, r20
     37c:	48 f3       	brcs	.-46     	; 0x350 <LCD_progress_bar+0x4c>
    c = 5;
  }
  LCD_dat(c);
}

}
     37e:	0f 90       	pop	r0
     380:	cf 91       	pop	r28
     382:	df 91       	pop	r29
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	08 95       	ret

00000392 <LCD_space>:
//=============================================================================
void LCD_space(unsigned char n_sp)
{
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	08 2f       	mov	r16, r24
unsigned char i;
for (i = 1; i <= n_sp; i++) {
     398:	11 e0       	ldi	r17, 0x01	; 1
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <LCD_space+0x12>
  LCD_dat(' ');
     39c:	80 e2       	ldi	r24, 0x20	; 32
     39e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
}
//=============================================================================
void LCD_space(unsigned char n_sp)
{
unsigned char i;
for (i = 1; i <= n_sp; i++) {
     3a2:	1f 5f       	subi	r17, 0xFF	; 255
     3a4:	01 17       	cp	r16, r17
     3a6:	d0 f7       	brcc	.-12     	; 0x39c <LCD_space+0xa>
  LCD_dat(' ');
}
}
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	08 95       	ret

000003ae <LCD_load_defchar>:
//=============================================================================
void LCD_load_defchar(void)
{
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	c0 e0       	ldi	r28, 0x00	; 0
     3b4:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char ch = 0, chn = 0;
while(ch < 64)
{
  LCD_definechar((LcdCustomChar + ch),chn++);
     3b6:	ce 01       	movw	r24, r28
     3b8:	23 e0       	ldi	r18, 0x03	; 3
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	2a 95       	dec	r18
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <LCD_load_defchar+0xc>
     3c2:	8c 5a       	subi	r24, 0xAC	; 172
     3c4:	9f 4f       	sbci	r25, 0xFF	; 255
     3c6:	6c 2f       	mov	r22, r28
     3c8:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_definechar>
     3cc:	8f e9       	ldi	r24, 0x9F	; 159
     3ce:	9f e0       	ldi	r25, 0x0F	; 15
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_load_defchar+0x22>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_load_defchar+0x28>
     3d6:	00 00       	nop
     3d8:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void LCD_load_defchar(void)
{
unsigned char ch = 0, chn = 0;
while(ch < 64)
     3da:	c8 30       	cpi	r28, 0x08	; 8
     3dc:	d1 05       	cpc	r29, r1
     3de:	59 f7       	brne	.-42     	; 0x3b6 <LCD_load_defchar+0x8>
{
  LCD_definechar((LcdCustomChar + ch),chn++);
  _delay_ms(1);
  ch = ch + 8;
}
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <LCD_load_bignum>:
//=============================================================================
void LCD_load_bignum(void)
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	c0 e0       	ldi	r28, 0x00	; 0
     3ec:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char ch = 0, chn = 0;
while(ch < 64)
{
  LCD_definechar((LcdBigNum + ch),chn++);
     3ee:	ce 01       	movw	r24, r28
     3f0:	33 e0       	ldi	r19, 0x03	; 3
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	3a 95       	dec	r19
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <LCD_load_bignum+0xc>
     3fa:	8c 56       	subi	r24, 0x6C	; 108
     3fc:	9f 4f       	sbci	r25, 0xFF	; 255
     3fe:	6c 2f       	mov	r22, r28
     400:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_definechar>
     404:	8f e9       	ldi	r24, 0x9F	; 159
     406:	9f e0       	ldi	r25, 0x0F	; 15
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <LCD_load_bignum+0x22>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <LCD_load_bignum+0x28>
     40e:	00 00       	nop
     410:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void LCD_load_bignum(void)
{
unsigned char ch = 0, chn = 0;
while(ch < 64)
     412:	c8 30       	cpi	r28, 0x08	; 8
     414:	d1 05       	cpc	r29, r1
     416:	59 f7       	brne	.-42     	; 0x3ee <LCD_load_bignum+0x8>
{
  LCD_definechar((LcdBigNum + ch),chn++);
  _delay_ms(1);
  ch = ch + 8;
}
}
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	08 95       	ret

0000041e <LCD_init>:
}
//=============================================================================
void LCD_init(void)
{
  // настройка портов
  LIGHT_init();
     41e:	a4 9a       	sbi	0x14, 4	; 20
  LIGHT_on(); 
     420:	ac 9a       	sbi	0x15, 4	; 21
  DDR(LCD_PORT_DATA) |= ((1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN));
     422:	8a b3       	in	r24, 0x1a	; 26
     424:	8f 60       	ori	r24, 0x0F	; 15
     426:	8a bb       	out	0x1a, r24	; 26
  PORT(LCD_PORT_DATA) &= (~(1 << LCD_D4_PIN) | (1 << LCD_D5_PIN) | (1 << LCD_D6_PIN) | (1 << LCD_D7_PIN));
     428:	d8 98       	cbi	0x1b, 0	; 27
  DDR(LCD_PORT_CTRL) |= ((1 << LCD_RS_PIN) | (1 << LCD_EN_PIN) | (1 << LCD_RW_PIN)); 
     42a:	8a b3       	in	r24, 0x1a	; 26
     42c:	80 6b       	ori	r24, 0xB0	; 176
     42e:	8a bb       	out	0x1a, r24	; 26
  PORT(LCD_PORT_CTRL) &= (~(1 << LCD_RS_PIN) | (1 << LCD_EN_PIN) | (1 << LCD_RW_PIN));
     430:	dd 98       	cbi	0x1b, 5	; 27
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	93 ec       	ldi	r25, 0xC3	; 195
     436:	a9 e0       	ldi	r26, 0x09	; 9
     438:	81 50       	subi	r24, 0x01	; 1
     43a:	90 40       	sbci	r25, 0x00	; 0
     43c:	a0 40       	sbci	r26, 0x00	; 0
     43e:	e1 f7       	brne	.-8      	; 0x438 <LCD_init+0x1a>
     440:	00 c0       	rjmp	.+0      	; 0x442 <LCD_init+0x24>
     442:	00 00       	nop
  _delay_ms(200);
  LCD_com(0x33);
     444:	83 e3       	ldi	r24, 0x33	; 51
     446:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	99 ef       	ldi	r25, 0xF9	; 249
     44e:	a0 e0       	ldi	r26, 0x00	; 0
     450:	81 50       	subi	r24, 0x01	; 1
     452:	90 40       	sbci	r25, 0x00	; 0
     454:	a0 40       	sbci	r26, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <LCD_init+0x32>
     458:	00 c0       	rjmp	.+0      	; 0x45a <LCD_init+0x3c>
     45a:	00 00       	nop
  _delay_ms(20);
  LCD_com(0x32);
     45c:	82 e3       	ldi	r24, 0x32	; 50
     45e:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     462:	af e9       	ldi	r26, 0x9F	; 159
     464:	bf e0       	ldi	r27, 0x0F	; 15
     466:	11 97       	sbiw	r26, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <LCD_init+0x48>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <LCD_init+0x4e>
     46c:	00 00       	nop
  _delay_ms(1);
  LCD_com(0x28);
     46e:	88 e2       	ldi	r24, 0x28	; 40
     470:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     474:	8f e9       	ldi	r24, 0x9F	; 159
     476:	9f e0       	ldi	r25, 0x0F	; 15
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	f1 f7       	brne	.-4      	; 0x478 <LCD_init+0x5a>
     47c:	00 c0       	rjmp	.+0      	; 0x47e <LCD_init+0x60>
     47e:	00 00       	nop
  _delay_ms(1);
  LCD_com(0x08);
     480:	88 e0       	ldi	r24, 0x08	; 8
     482:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     486:	af e9       	ldi	r26, 0x9F	; 159
     488:	bf e0       	ldi	r27, 0x0F	; 15
     48a:	11 97       	sbiw	r26, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <LCD_init+0x6c>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <LCD_init+0x72>
     490:	00 00       	nop
  _delay_ms(1);
  LCD_com(0x01);
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
     498:	8f ef       	ldi	r24, 0xFF	; 255
     49a:	90 e7       	ldi	r25, 0x70	; 112
     49c:	a2 e0       	ldi	r26, 0x02	; 2
     49e:	81 50       	subi	r24, 0x01	; 1
     4a0:	90 40       	sbci	r25, 0x00	; 0
     4a2:	a0 40       	sbci	r26, 0x00	; 0
     4a4:	e1 f7       	brne	.-8      	; 0x49e <LCD_init+0x80>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <LCD_init+0x8a>
     4a8:	00 00       	nop
  _delay_ms(50);
  LCD_com(0x06);
     4aa:	86 e0       	ldi	r24, 0x06	; 6
     4ac:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
  LCD_com(0x0C);
     4b0:	8c e0       	ldi	r24, 0x0C	; 12
     4b2:	0e 94 12 01 	call	0x224	; 0x224 <LCD_com>
  LCD_load_bignum();
     4b6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
}
     4ba:	08 95       	ret

000004bc <delay>:
#include <avr/io.h>
#include "i2c.h"
// ============================================================================
void delay(unsigned long us)
{
  us = us * 2;
     4bc:	66 0f       	add	r22, r22
     4be:	77 1f       	adc	r23, r23
     4c0:	88 1f       	adc	r24, r24
     4c2:	99 1f       	adc	r25, r25
  while (us)
     4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <delay+0x16>
  {
	asm volatile("nop\n\t"::);
     4c6:	00 00       	nop
	asm volatile("nop\n\t"::);
     4c8:	00 00       	nop
	us--;
     4ca:	61 50       	subi	r22, 0x01	; 1
     4cc:	70 40       	sbci	r23, 0x00	; 0
     4ce:	80 40       	sbci	r24, 0x00	; 0
     4d0:	90 40       	sbci	r25, 0x00	; 0
#include "i2c.h"
// ============================================================================
void delay(unsigned long us)
{
  us = us * 2;
  while (us)
     4d2:	61 15       	cp	r22, r1
     4d4:	71 05       	cpc	r23, r1
     4d6:	81 05       	cpc	r24, r1
     4d8:	91 05       	cpc	r25, r1
     4da:	a9 f7       	brne	.-22     	; 0x4c6 <delay+0xa>
  {
	asm volatile("nop\n\t"::);
	asm volatile("nop\n\t"::);
	us--;
  }
}
     4dc:	08 95       	ret

000004de <I2C_start>:
  return;
}
// ============================================================================
void I2C_start(void)
{
  RELEASE_I2C_BUS();
     4de:	a0 98       	cbi	0x14, 0	; 20
     4e0:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_DELAY);
     4e2:	6d e0       	ldi	r22, 0x0D	; 13
     4e4:	70 e0       	ldi	r23, 0x00	; 0
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SDA_0();
     4ee:	a1 9a       	sbi	0x14, 1	; 20
  delay(I2C_DELAY);
     4f0:	6d e0       	ldi	r22, 0x0D	; 13
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SCL_0();
     4fc:	a0 9a       	sbi	0x14, 0	; 20
  delay(I2C_DELAY);
     4fe:	6d e0       	ldi	r22, 0x0D	; 13
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  return;
}
     50a:	08 95       	ret

0000050c <I2C_stop>:
// ============================================================================
void I2C_stop(void)
{
  SDA_0();
     50c:	a1 9a       	sbi	0x14, 1	; 20
  SCL_1();
     50e:	a0 98       	cbi	0x14, 0	; 20
  delay(I2C_DELAY);
     510:	6d e0       	ldi	r22, 0x0D	; 13
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SDA_1();
     51c:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_DELAY);
     51e:	6d e0       	ldi	r22, 0x0D	; 13
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SCL_0();
     52a:	a0 9a       	sbi	0x14, 0	; 20
  delay(I2C_DELAY);
     52c:	6d e0       	ldi	r22, 0x0D	; 13
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  return;
}
     538:	08 95       	ret

0000053a <I2C_init>:
  }
}
// ============================================================================
void I2C_init(void)
{
  I2C_SDA_OUT_REG &= ~(_BV(SDA_PIN));
     53a:	a9 98       	cbi	0x15, 1	; 21
  I2C_SCL_OUT_REG &= ~(_BV(SCL_PIN));
     53c:	a8 98       	cbi	0x15, 0	; 21
  RELEASE_I2C_BUS();
     53e:	a0 98       	cbi	0x14, 0	; 20
     540:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_TIMEOUT);
     542:	64 e6       	ldi	r22, 0x64	; 100
     544:	7a e0       	ldi	r23, 0x0A	; 10
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  I2C_start();
     54e:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  delay(I2C_TIMEOUT);
     552:	64 e6       	ldi	r22, 0x64	; 100
     554:	7a e0       	ldi	r23, 0x0A	; 10
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  I2C_stop();
     55e:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  delay(I2C_TIMEOUT);
     562:	64 e6       	ldi	r22, 0x64	; 100
     564:	7a e0       	ldi	r23, 0x0A	; 10
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  return;
}
     56e:	08 95       	ret

00000570 <I2C_write>:
  delay(I2C_DELAY);
  return;
}
// ============================================================================
unsigned char I2C_write(unsigned char data)
{
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	08 2f       	mov	r16, r24
     576:	18 e0       	ldi	r17, 0x08	; 8
register unsigned char bit = 0;
for(bit = 0; bit <= 7; bit++)
{
  if( data & 0x80 ) { SDA_1(); } else { SDA_0(); }
     578:	07 ff       	sbrs	r16, 7
     57a:	02 c0       	rjmp	.+4      	; 0x580 <I2C_write+0x10>
     57c:	a1 98       	cbi	0x14, 1	; 20
     57e:	01 c0       	rjmp	.+2      	; 0x582 <I2C_write+0x12>
     580:	a1 9a       	sbi	0x14, 1	; 20
    SCL_1();
     582:	a0 98       	cbi	0x14, 0	; 20
    delay(I2C_DELAY);
     584:	6d e0       	ldi	r22, 0x0D	; 13
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
    SCL_0();
     590:	a0 9a       	sbi	0x14, 0	; 20
    delay(I2C_DELAY);
     592:	6d e0       	ldi	r22, 0x0D	; 13
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
     59e:	11 50       	subi	r17, 0x01	; 1
}
// ============================================================================
unsigned char I2C_write(unsigned char data)
{
register unsigned char bit = 0;
for(bit = 0; bit <= 7; bit++)
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <I2C_write+0x36>
  if( data & 0x80 ) { SDA_1(); } else { SDA_0(); }
    SCL_1();
    delay(I2C_DELAY);
    SCL_0();
    delay(I2C_DELAY);
    data = (data<<1);
     5a2:	00 0f       	add	r16, r16
     5a4:	e9 cf       	rjmp	.-46     	; 0x578 <I2C_write+0x8>
  }
  RELEASE_I2C_BUS();
     5a6:	a0 98       	cbi	0x14, 0	; 20
     5a8:	a1 98       	cbi	0x14, 1	; 20
  delay(I2C_DELAY);
     5aa:	6d e0       	ldi	r22, 0x0D	; 13
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) )
     5b6:	99 9b       	sbis	0x13, 1	; 19
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <I2C_write+0x5a>
  {
    SCL_0();
    delay(I2C_DELAY);
  }	else {
    delay(I2C_TIMEOUT);
     5ba:	64 e6       	ldi	r22, 0x64	; 100
     5bc:	7a e0       	ldi	r23, 0x0A	; 10
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
	if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) )
     5c6:	99 99       	sbic	0x13, 1	; 19
     5c8:	13 c0       	rjmp	.+38     	; 0x5f0 <I2C_write+0x80>
	{
	  SCL_0();
     5ca:	a0 9a       	sbi	0x14, 0	; 20
	  delay(I2C_DELAY);
     5cc:	6d e0       	ldi	r22, 0x0D	; 13
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
	} else { return(I2C_ERROR_DEVICE_NOT_RESPONDING); }
  }
  if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) ) 
     5d8:	99 99       	sbic	0x13, 1	; 19
     5da:	0c c0       	rjmp	.+24     	; 0x5f4 <I2C_write+0x84>
  { 
    delay(I2C_TIMEOUT);
     5dc:	64 e6       	ldi	r22, 0x64	; 100
     5de:	7a e0       	ldi	r23, 0x0A	; 10
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SCL_0();
  delay(I2C_DELAY);
  return;
}
// ============================================================================
unsigned char I2C_write(unsigned char data)
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	99 9b       	sbis	0x13, 1	; 19
     5ec:	04 c0       	rjmp	.+8      	; 0x5f6 <I2C_write+0x86>
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <I2C_write+0x84>
    delay(I2C_TIMEOUT);
	if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) )
	{
	  SCL_0();
	  delay(I2C_DELAY);
	} else { return(I2C_ERROR_DEVICE_NOT_RESPONDING); }
     5f0:	82 e0       	ldi	r24, 0x02	; 2
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <I2C_write+0x86>
  if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) ) 
  { 
    delay(I2C_TIMEOUT);
    if( bit_is_clear(I2C_SDA_PIN_REG, SDA_PIN) ) { return(I2C_ERROR_DEVICE_BUSY); }
  }   
return(I2C_NO_ERROR);	  
     5f4:	80 e0       	ldi	r24, 0x00	; 0
}
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	08 95       	ret

000005fc <I2C_read>:
// ============================================================================
unsigned char I2C_read(unsigned char ack)
{
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	f8 2e       	mov	r15, r24
register unsigned char bit = 0, data = 0;
SDA_1();
     604:	a1 98       	cbi	0x14, 1	; 20
     606:	08 e0       	ldi	r16, 0x08	; 8
return(I2C_NO_ERROR);	  
}
// ============================================================================
unsigned char I2C_read(unsigned char ack)
{
register unsigned char bit = 0, data = 0;
     608:	10 e0       	ldi	r17, 0x00	; 0
SDA_1();
for(bit = 0; bit <= 7; bit++)
{
  SCL_1();
     60a:	a0 98       	cbi	0x14, 0	; 20
  delay(I2C_DELAY);
     60c:	6d e0       	ldi	r22, 0x0D	; 13
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  data = (data << 1);
     618:	11 0f       	add	r17, r17
  if( bit_is_set(I2C_SDA_PIN_REG, SDA_PIN) ) { data++; }
     61a:	99 99       	sbic	0x13, 1	; 19
     61c:	1f 5f       	subi	r17, 0xFF	; 255
    SCL_0();
     61e:	a0 9a       	sbi	0x14, 0	; 20
    delay(I2C_DELAY);
     620:	6d e0       	ldi	r22, 0x0D	; 13
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
     62c:	01 50       	subi	r16, 0x01	; 1
// ============================================================================
unsigned char I2C_read(unsigned char ack)
{
register unsigned char bit = 0, data = 0;
SDA_1();
for(bit = 0; bit <= 7; bit++)
     62e:	69 f7       	brne	.-38     	; 0x60a <I2C_read+0xe>
  data = (data << 1);
  if( bit_is_set(I2C_SDA_PIN_REG, SDA_PIN) ) { data++; }
    SCL_0();
    delay(I2C_DELAY);
  }
  if(ack == 1) { SDA_0(); }  else { SDA_1(); }
     630:	8f 2d       	mov	r24, r15
     632:	81 30       	cpi	r24, 0x01	; 1
     634:	11 f4       	brne	.+4      	; 0x63a <I2C_read+0x3e>
     636:	a1 9a       	sbi	0x14, 1	; 20
     638:	01 c0       	rjmp	.+2      	; 0x63c <I2C_read+0x40>
     63a:	a1 98       	cbi	0x14, 1	; 20
  SCL_1();
     63c:	a0 98       	cbi	0x14, 0	; 20
  delay(I2C_DELAY);
     63e:	6d e0       	ldi	r22, 0x0D	; 13
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  SCL_0();
     64a:	a0 9a       	sbi	0x14, 0	; 20
  delay(I2C_DELAY);
     64c:	6d e0       	ldi	r22, 0x0D	; 13
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 5e 02 	call	0x4bc	; 0x4bc <delay>
  return data;
}
     658:	81 2f       	mov	r24, r17
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	08 95       	ret

00000662 <RTC_write_reg>:
#include "i2c.h"
#include "lcd_lib.h"
#include "ds1307.h"
//=============================================================================
void RTC_write_reg(unsigned char addr,unsigned char data)
{
     662:	1f 93       	push	r17
     664:	df 93       	push	r29
     666:	cf 93       	push	r28
     668:	0f 92       	push	r0
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	18 2f       	mov	r17, r24
  I2C_start();
     670:	69 83       	std	Y+1, r22	; 0x01
     672:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     676:	80 ed       	ldi	r24, 0xD0	; 208
     678:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(addr);
     67c:	81 2f       	mov	r24, r17
     67e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(data);
     682:	69 81       	ldd	r22, Y+1	; 0x01
     684:	86 2f       	mov	r24, r22
     686:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     68a:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     68e:	0f 90       	pop	r0
     690:	cf 91       	pop	r28
     692:	df 91       	pop	r29
     694:	1f 91       	pop	r17
     696:	08 95       	ret

00000698 <RTC_read_reg>:
//=============================================================================
unsigned char RTC_read_reg(unsigned char addr)
{
     698:	1f 93       	push	r17
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	0f 92       	push	r0
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	18 2f       	mov	r17, r24
  unsigned char temp = 0; 
  I2C_start();
     6a6:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     6aa:	80 ed       	ldi	r24, 0xD0	; 208
     6ac:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(addr);
     6b0:	81 2f       	mov	r24, r17
     6b2:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     6b6:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  I2C_start();
     6ba:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_READ);
     6be:	81 ed       	ldi	r24, 0xD1	; 209
     6c0:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  temp = I2C_read(I2C_NOACK);
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
  I2C_stop();
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  return temp;
}
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	0f 90       	pop	r0
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	1f 91       	pop	r17
     6da:	08 95       	ret

000006dc <RTC_init>:
//=============================================================================
void RTC_init(void)
{
  unsigned temp = 0; 
  temp = RTC_read_reg(0x00);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 4c 03 	call	0x698	; 0x698 <RTC_read_reg>
  if ((temp & 0x80) != 0) {
     6e2:	87 ff       	sbrs	r24, 7
     6e4:	05 c0       	rjmp	.+10     	; 0x6f0 <RTC_init+0x14>
    RTC_write_reg(0x00, temp & ~0x80);
     6e6:	68 2f       	mov	r22, r24
     6e8:	6f 77       	andi	r22, 0x7F	; 127
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 31 03 	call	0x662	; 0x662 <RTC_write_reg>
  }
  RTC_write_reg(DS1307_CONTROL, 0x90);
     6f0:	87 e0       	ldi	r24, 0x07	; 7
     6f2:	60 e9       	ldi	r22, 0x90	; 144
     6f4:	0e 94 31 03 	call	0x662	; 0x662 <RTC_write_reg>
}
     6f8:	08 95       	ret

000006fa <bcd2bin>:
  I2C_stop();
}
//=============================================================================
unsigned char bcd2bin(unsigned char bcd)
{
  unsigned char temp = bcd & 0x0F; 
     6fa:	28 2f       	mov	r18, r24
     6fc:	2f 70       	andi	r18, 0x0F	; 15
  *month = bcd2bin(I2C_read(I2C_ACK));
  *year = bcd2bin(I2C_read(I2C_NOACK));
  I2C_stop();
}
//=============================================================================
unsigned char bcd2bin(unsigned char bcd)
     6fe:	98 2f       	mov	r25, r24
     700:	92 95       	swap	r25
     702:	9f 70       	andi	r25, 0x0F	; 15
     704:	99 0f       	add	r25, r25
     706:	89 2f       	mov	r24, r25
     708:	88 0f       	add	r24, r24
     70a:	88 0f       	add	r24, r24
     70c:	89 0f       	add	r24, r25
  { 
    temp += 10; 
    bcd -= 0x10; 
  } 
  return temp; 
}
     70e:	82 0f       	add	r24, r18
     710:	08 95       	ret

00000712 <RTC_get_date>:
  I2C_write(bin2bcd(year));
  I2C_stop();
}
//=============================================================================
void RTC_get_date(unsigned char *date,unsigned char *month, unsigned char *year)
{
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	0f 93       	push	r16
     718:	1f 93       	push	r17
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	ec 01       	movw	r28, r24
     720:	8b 01       	movw	r16, r22
     722:	7a 01       	movw	r14, r20
  I2C_start();
     724:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     728:	80 ed       	ldi	r24, 0xD0	; 208
     72a:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(DS1307_DATE);
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     734:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  I2C_start();
     738:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_READ);
     73c:	81 ed       	ldi	r24, 0xD1	; 209
     73e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  *date = bcd2bin(I2C_read(I2C_ACK));
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     748:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     74c:	88 83       	st	Y, r24
  *month = bcd2bin(I2C_read(I2C_ACK));
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     754:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     758:	f8 01       	movw	r30, r16
     75a:	80 83       	st	Z, r24
  *year = bcd2bin(I2C_read(I2C_NOACK));
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     762:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     766:	f7 01       	movw	r30, r14
     768:	80 83       	st	Z, r24
  I2C_stop();
     76a:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	08 95       	ret

0000077c <RTC_get_time>:
  I2C_write(bin2bcd(hour));
  I2C_stop();
}
//=============================================================================
void RTC_get_time(unsigned char *hour,unsigned char *min,unsigned char *sec)
{
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	ec 01       	movw	r28, r24
     78a:	8b 01       	movw	r16, r22
     78c:	7a 01       	movw	r14, r20
  I2C_start();
     78e:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     792:	80 ed       	ldi	r24, 0xD0	; 208
     794:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(0);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     79e:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  I2C_start();
     7a2:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_READ);
     7a6:	81 ed       	ldi	r24, 0xD1	; 209
     7a8:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  *sec = bcd2bin(I2C_read(I2C_ACK));
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     7b2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     7b6:	f7 01       	movw	r30, r14
     7b8:	80 83       	st	Z, r24
  *min = bcd2bin(I2C_read(I2C_ACK));
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     7c0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     7c4:	f8 01       	movw	r30, r16
     7c6:	80 83       	st	Z, r24
  *hour = bcd2bin(I2C_read(I2C_NOACK));
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
     7ce:	0e 94 7d 03 	call	0x6fa	; 0x6fa <bcd2bin>
     7d2:	88 83       	st	Y, r24
  I2C_stop();
     7d4:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	08 95       	ret

000007e6 <bin2bcd>:
  return temp; 
}
//=============================================================================
unsigned char bin2bcd(unsigned char bin)
{
  unsigned temp = 0; 
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
  while(bin > 9) 
     7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <bin2bcd+0xc>
  { 
    temp += 0x10; 
     7ec:	20 5f       	subi	r18, 0xF0	; 240
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
    bin -= 10; 
     7f0:	8a 50       	subi	r24, 0x0A	; 10
}
//=============================================================================
unsigned char bin2bcd(unsigned char bin)
{
  unsigned temp = 0; 
  while(bin > 9) 
     7f2:	8a 30       	cpi	r24, 0x0A	; 10
     7f4:	d8 f7       	brcc	.-10     	; 0x7ec <bin2bcd+0x6>
  { 
    temp += 0x10; 
    bin -= 10; 
  } 
  return temp + bin; 
}
     7f6:	82 0f       	add	r24, r18
     7f8:	08 95       	ret

000007fa <RTC_set_date>:
  *hour = bcd2bin(I2C_read(I2C_NOACK));
  I2C_stop();
}
//=============================================================================
void RTC_set_date(unsigned char date,unsigned char month,unsigned char year)
{
     7fa:	1f 93       	push	r17
     7fc:	df 93       	push	r29
     7fe:	cf 93       	push	r28
     800:	00 d0       	rcall	.+0      	; 0x802 <RTC_set_date+0x8>
     802:	cd b7       	in	r28, 0x3d	; 61
     804:	de b7       	in	r29, 0x3e	; 62
     806:	18 2f       	mov	r17, r24
  I2C_start();
     808:	4a 83       	std	Y+2, r20	; 0x02
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     810:	80 ed       	ldi	r24, 0xD0	; 208
     812:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(DS1307_DATE);
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(date));
     81c:	81 2f       	mov	r24, r17
     81e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     822:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(month));
     826:	69 81       	ldd	r22, Y+1	; 0x01
     828:	86 2f       	mov	r24, r22
     82a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     82e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(year));
     832:	4a 81       	ldd	r20, Y+2	; 0x02
     834:	84 2f       	mov	r24, r20
     836:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     83a:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     83e:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	1f 91       	pop	r17
     84c:	08 95       	ret

0000084e <RTC_set_time>:
  }
  RTC_write_reg(DS1307_CONTROL, 0x90);
}
//=============================================================================
void RTC_set_time(unsigned char hour, unsigned char min, unsigned char sec)
{
     84e:	1f 93       	push	r17
     850:	df 93       	push	r29
     852:	cf 93       	push	r28
     854:	00 d0       	rcall	.+0      	; 0x856 <RTC_set_time+0x8>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	18 2f       	mov	r17, r24
  I2C_start();
     85c:	49 83       	std	Y+1, r20	; 0x01
     85e:	6a 83       	std	Y+2, r22	; 0x02
     860:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(DS1307_ADDR_WRITE);
     864:	80 ed       	ldi	r24, 0xD0	; 208
     866:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(0);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(sec));
     870:	49 81       	ldd	r20, Y+1	; 0x01
     872:	84 2f       	mov	r24, r20
     874:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     878:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(min));
     87c:	6a 81       	ldd	r22, Y+2	; 0x02
     87e:	86 2f       	mov	r24, r22
     880:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     884:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(bin2bcd(hour));
     888:	81 2f       	mov	r24, r17
     88a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <bin2bcd>
     88e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
     892:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	cf 91       	pop	r28
     89c:	df 91       	pop	r29
     89e:	1f 91       	pop	r17
     8a0:	08 95       	ret

000008a2 <RTC_dayofweek>:
  RTC_get_date(&d,&m,&y);
  print_dec(d,2,'0'); LCD_dat('/'); print_dec(m,2,'0'); LCD_dat('/'); print_dec(20,2,'0'); print_dec(y,2,'0');
}
//=============================================================================
uint8_t RTC_dayofweek(void)
{
     8a2:	df 93       	push	r29
     8a4:	cf 93       	push	r28
     8a6:	00 d0       	rcall	.+0      	; 0x8a8 <RTC_dayofweek+0x6>
     8a8:	0f 92       	push	r0
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
  uint8_t d, m, y;
  RTC_get_date(&d,&m,&y);
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6e 5f       	subi	r22, 0xFE	; 254
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	ae 01       	movw	r20, r28
     8ba:	4d 5f       	subi	r20, 0xFD	; 253
     8bc:	5f 4f       	sbci	r21, 0xFF	; 255
     8be:	0e 94 89 03 	call	0x712	; 0x712 <RTC_get_date>
  if (m < 3) {
     8c2:	8a 81       	ldd	r24, Y+2	; 0x02
     8c4:	83 30       	cpi	r24, 0x03	; 3
     8c6:	28 f4       	brcc	.+10     	; 0x8d2 <RTC_dayofweek+0x30>
    m += 12;
     8c8:	84 5f       	subi	r24, 0xF4	; 244
     8ca:	8a 83       	std	Y+2, r24	; 0x02
    y--;
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	81 50       	subi	r24, 0x01	; 1
     8d0:	8b 83       	std	Y+3, r24	; 0x03
  }
  return ( (13 * m + 3) / 5 + d + y + y / 4 - y / 100 + y / 400) % 7;
     8d2:	8b 81       	ldd	r24, Y+3	; 0x03
     8d4:	29 81       	ldd	r18, Y+1	; 0x01
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	28 0f       	add	r18, r24
     8da:	31 1d       	adc	r19, r1
     8dc:	98 2f       	mov	r25, r24
     8de:	96 95       	lsr	r25
     8e0:	96 95       	lsr	r25
     8e2:	29 0f       	add	r18, r25
     8e4:	31 1d       	adc	r19, r1
     8e6:	64 e6       	ldi	r22, 0x64	; 100
     8e8:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodqi4>
     8ec:	28 1b       	sub	r18, r24
     8ee:	31 09       	sbc	r19, r1
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	8d e0       	ldi	r24, 0x0D	; 13
     8f4:	98 9f       	mul	r25, r24
     8f6:	c0 01       	movw	r24, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	03 96       	adiw	r24, 0x03	; 3
     8fc:	65 e0       	ldi	r22, 0x05	; 5
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
     904:	26 0f       	add	r18, r22
     906:	37 1f       	adc	r19, r23
     908:	c9 01       	movw	r24, r18
     90a:	67 e0       	ldi	r22, 0x07	; 7
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
}
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	cf 91       	pop	r28
     91a:	df 91       	pop	r29
     91c:	08 95       	ret

0000091e <print_dec>:
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
{
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
     924:	df 93       	push	r29
     926:	cf 93       	push	r28
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	2b 97       	sbiw	r28, 0x0b	; 11
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	f6 2e       	mov	r15, r22
    y--;
  }
  return ( (13 * m + 3) / 5 + d + y + y / 4 - y / 100 + y / 400) % 7;
}
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
     93a:	e6 2f       	mov	r30, r22
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	9e 01       	movw	r18, r28
     940:	2f 5f       	subi	r18, 0xFF	; 255
     942:	3f 4f       	sbci	r19, 0xFF	; 255
     944:	e2 0f       	add	r30, r18
     946:	f3 1f       	adc	r31, r19
{
  unsigned char i;
  unsigned char s[10];
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
     948:	0a e0       	ldi	r16, 0x0A	; 10
     94a:	10 e0       	ldi	r17, 0x00	; 0
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
{
  unsigned char i;
  unsigned char s[10];
  for (i = 0; i < n; i++) {
     94c:	07 c0       	rjmp	.+14     	; 0x95c <print_dec+0x3e>
     94e:	31 97       	sbiw	r30, 0x01	; 1
    s[n - i - 1] = '0' + (x % 10);
     950:	b8 01       	movw	r22, r16
     952:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__udivmodhi4>
     956:	80 5d       	subi	r24, 0xD0	; 208
     958:	80 83       	st	Z, r24
    x /= 10;
     95a:	cb 01       	movw	r24, r22
//=============================================================================
void print_dec(unsigned int x, unsigned char n, unsigned char fillch)
{
  unsigned char i;
  unsigned char s[10];
  for (i = 0; i < n; i++) {
     95c:	e2 17       	cp	r30, r18
     95e:	f3 07       	cpc	r31, r19
     960:	b1 f7       	brne	.-20     	; 0x94e <print_dec+0x30>
     962:	50 e0       	ldi	r21, 0x00	; 0
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i=0; i<(n - 1); i++) {
     964:	8f 2d       	mov	r24, r15
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	01 97       	sbiw	r24, 0x01	; 1
    if (s[i] == '0') s[i] = fillch; else break;
     96a:	be 01       	movw	r22, r28
     96c:	6f 5f       	subi	r22, 0xFF	; 255
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	08 c0       	rjmp	.+16     	; 0x982 <print_dec+0x64>
     972:	fb 01       	movw	r30, r22
     974:	e2 0f       	add	r30, r18
     976:	f3 1f       	adc	r31, r19
     978:	20 81       	ld	r18, Z
     97a:	20 33       	cpi	r18, 0x30	; 48
     97c:	91 f4       	brne	.+36     	; 0x9a2 <print_dec+0x84>
     97e:	40 83       	st	Z, r20
  unsigned char s[10];
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i=0; i<(n - 1); i++) {
     980:	5f 5f       	subi	r21, 0xFF	; 255
     982:	25 2f       	mov	r18, r21
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	28 17       	cp	r18, r24
     988:	39 07       	cpc	r19, r25
     98a:	9c f3       	brlt	.-26     	; 0x972 <print_dec+0x54>
     98c:	0a c0       	rjmp	.+20     	; 0x9a2 <print_dec+0x84>
    if (s[i] == '0') s[i] = fillch; else break;
  }
  for (i=0; i<n; i++) LCD_dat(s[i]);
     98e:	f8 01       	movw	r30, r16
     990:	e9 0f       	add	r30, r25
     992:	f1 1d       	adc	r31, r1
     994:	80 81       	ld	r24, Z
     996:	9b 87       	std	Y+11, r25	; 0x0b
     998:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     99c:	9b 85       	ldd	r25, Y+11	; 0x0b
     99e:	9f 5f       	subi	r25, 0xFF	; 255
     9a0:	04 c0       	rjmp	.+8      	; 0x9aa <print_dec+0x8c>
  for (i = 0; i < n; i++) {
    s[n - i - 1] = '0' + (x % 10);
    x /= 10;
  }
  for (i=0; i<(n - 1); i++) {
    if (s[i] == '0') s[i] = fillch; else break;
     9a2:	90 e0       	ldi	r25, 0x00	; 0
  }
  for (i=0; i<n; i++) LCD_dat(s[i]);
     9a4:	8e 01       	movw	r16, r28
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	9f 15       	cp	r25, r15
     9ac:	80 f3       	brcs	.-32     	; 0x98e <print_dec+0x70>
}
     9ae:	2b 96       	adiw	r28, 0x0b	; 11
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	08 95       	ret

000009c6 <RTC_print_date>:
  RTC_get_time(&h,&m,&s);
  print_dec(h,2,'0'); LCD_dat(':'); print_dec(m,2,'0'); LCD_dat(':'); print_dec(s,2,'0');
}
//=============================================================================
void RTC_print_date(void)
{
     9c6:	df 93       	push	r29
     9c8:	cf 93       	push	r28
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <RTC_print_date+0x6>
     9cc:	0f 92       	push	r0
     9ce:	cd b7       	in	r28, 0x3d	; 61
     9d0:	de b7       	in	r29, 0x3e	; 62
  unsigned char d,m,y;
  RTC_get_date(&d,&m,&y);
     9d2:	ce 01       	movw	r24, r28
     9d4:	01 96       	adiw	r24, 0x01	; 1
     9d6:	be 01       	movw	r22, r28
     9d8:	6e 5f       	subi	r22, 0xFE	; 254
     9da:	7f 4f       	sbci	r23, 0xFF	; 255
     9dc:	ae 01       	movw	r20, r28
     9de:	4d 5f       	subi	r20, 0xFD	; 253
     9e0:	5f 4f       	sbci	r21, 0xFF	; 255
     9e2:	0e 94 89 03 	call	0x712	; 0x712 <RTC_get_date>
  print_dec(d,2,'0'); LCD_dat('/'); print_dec(m,2,'0'); LCD_dat('/'); print_dec(20,2,'0'); print_dec(y,2,'0');
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	62 e0       	ldi	r22, 0x02	; 2
     9ec:	40 e3       	ldi	r20, 0x30	; 48
     9ee:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     9f2:	8f e2       	ldi	r24, 0x2F	; 47
     9f4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	62 e0       	ldi	r22, 0x02	; 2
     9fe:	40 e3       	ldi	r20, 0x30	; 48
     a00:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     a04:	8f e2       	ldi	r24, 0x2F	; 47
     a06:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     a0a:	84 e1       	ldi	r24, 0x14	; 20
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	62 e0       	ldi	r22, 0x02	; 2
     a10:	40 e3       	ldi	r20, 0x30	; 48
     a12:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	62 e0       	ldi	r22, 0x02	; 2
     a1c:	40 e3       	ldi	r20, 0x30	; 48
     a1e:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
}
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	cf 91       	pop	r28
     a2a:	df 91       	pop	r29
     a2c:	08 95       	ret

00000a2e <RTC_print_time>:
  } 
  return temp + bin; 
}
//=============================================================================
void RTC_print_time(void)
{
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	00 d0       	rcall	.+0      	; 0xa34 <RTC_print_time+0x6>
     a34:	0f 92       	push	r0
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
  unsigned char h,m,s;
  RTC_get_time(&h,&m,&s);
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	be 01       	movw	r22, r28
     a40:	6e 5f       	subi	r22, 0xFE	; 254
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	ae 01       	movw	r20, r28
     a46:	4d 5f       	subi	r20, 0xFD	; 253
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	0e 94 be 03 	call	0x77c	; 0x77c <RTC_get_time>
  print_dec(h,2,'0'); LCD_dat(':'); print_dec(m,2,'0'); LCD_dat(':'); print_dec(s,2,'0');
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	40 e3       	ldi	r20, 0x30	; 48
     a56:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     a5a:	8a e3       	ldi	r24, 0x3A	; 58
     a5c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     a60:	8a 81       	ldd	r24, Y+2	; 0x02
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	62 e0       	ldi	r22, 0x02	; 2
     a66:	40 e3       	ldi	r20, 0x30	; 48
     a68:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
     a6c:	8a e3       	ldi	r24, 0x3A	; 58
     a6e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	40 e3       	ldi	r20, 0x30	; 48
     a7a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
}
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	08 95       	ret

00000a8a <print_hex>:
  }
  for (i=0; i<n; i++) LCD_dat(s[i]);
}
//=============================================================================
void print_hex(unsigned char x)
{
     a8a:	1f 93       	push	r17
  unsigned char hi, lo;
  hi = x & 0xF0;
  hi = hi >> 4;
     a8c:	28 2f       	mov	r18, r24
     a8e:	22 95       	swap	r18
     a90:	2f 70       	andi	r18, 0x0F	; 15
  hi = hi + '0';
     a92:	92 2f       	mov	r25, r18
     a94:	90 5d       	subi	r25, 0xD0	; 208
  if (hi >'9') hi = hi + 7;
     a96:	9a 33       	cpi	r25, 0x3A	; 58
     a98:	08 f0       	brcs	.+2      	; 0xa9c <print_hex+0x12>
     a9a:	99 5f       	subi	r25, 0xF9	; 249
  lo = (x & 0x0F) + '0';
     a9c:	8f 70       	andi	r24, 0x0F	; 15
     a9e:	18 2f       	mov	r17, r24
     aa0:	10 5d       	subi	r17, 0xD0	; 208
  if (lo > '9') lo = lo + 7;
     aa2:	1a 33       	cpi	r17, 0x3A	; 58
     aa4:	08 f0       	brcs	.+2      	; 0xaa8 <print_hex+0x1e>
     aa6:	19 5f       	subi	r17, 0xF9	; 249
  LCD_dat(hi); LCD_dat(lo);
     aa8:	89 2f       	mov	r24, r25
     aaa:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
     aae:	81 2f       	mov	r24, r17
     ab0:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
}
     ab4:	1f 91       	pop	r17
     ab6:	08 95       	ret

00000ab8 <KBD_set_type>:
//=============================================================================
unsigned char kbd_type = 1;
//=============================================================================
void KBD_set_type(uint8_t val)
{
  kbd_type = val;
     ab8:	80 93 a4 00 	sts	0x00A4, r24
}
     abc:	08 95       	ret

00000abe <KBD_init>:
  }
}
//=============================================================================
void KBD_init(void)
{
  DDR(BUT_STANDBY) &= ~BUT_STANDBY_LINE;
     abe:	bd 98       	cbi	0x17, 5	; 23
  PORT(BUT_STANDBY) |= BUT_STANDBY_LINE;
     ac0:	c5 9a       	sbi	0x18, 5	; 24
  DDR(BUT_SET) &= ~BUT_SET_LINE;
     ac2:	be 98       	cbi	0x17, 6	; 23
  PORT(BUT_SET) |= BUT_SET_LINE;
     ac4:	c6 9a       	sbi	0x18, 6	; 24
  DDR(BUT_MENU) &= ~BUT_MENU_LINE;
     ac6:	bf 98       	cbi	0x17, 7	; 23
  PORT(BUT_MENU) |= BUT_MENU_LINE;
     ac8:	c7 9a       	sbi	0x18, 7	; 24
  DDR(BUT_SELECT) &= ~BUT_SELECT_LINE;
     aca:	a3 98       	cbi	0x14, 3	; 20
  PORT(BUT_SELECT) |= BUT_SELECT_LINE;
     acc:	ab 9a       	sbi	0x15, 3	; 21
  DDR(BUT_UP) &= ~BUT_UP_LINE;
     ace:	8c 98       	cbi	0x11, 4	; 17
  PORT(BUT_UP) |= BUT_UP_LINE;
     ad0:	94 9a       	sbi	0x12, 4	; 18
  DDR(BUT_DOWN) &= ~BUT_DOWN_LINE;
     ad2:	8d 98       	cbi	0x11, 5	; 17
  PORT(BUT_DOWN) |= BUT_DOWN_LINE;
     ad4:	95 9a       	sbi	0x12, 5	; 18
  DDR(BUT_LEFT) &= ~BUT_LEFT_LINE;
     ad6:	a2 98       	cbi	0x14, 2	; 20
  PORT(BUT_LEFT) |= BUT_LEFT_LINE;
     ad8:	aa 9a       	sbi	0x15, 2	; 21
  DDR(BUT_RIGHT) &= ~BUT_RIGHT_LINE;
     ada:	8e 98       	cbi	0x11, 6	; 17
  PORT(BUT_RIGHT) |= BUT_RIGHT_LINE;
     adc:	96 9a       	sbi	0x12, 6	; 18
  DDR(BEEPER) |= BEEPER_LINE;
     ade:	8f 9a       	sbi	0x11, 7	; 17
  PORT(BEEPER) |= BEEPER_LINE;
     ae0:	97 9a       	sbi	0x12, 7	; 18
//-----------------------------------------------------------------------------
  DDR(LED_FAULT_IN) &= ~LED_FAULT_IN_LINE;
     ae2:	a7 98       	cbi	0x14, 7	; 20
  PORT(LED_FAULT_IN) |= LED_FAULT_IN_LINE;
     ae4:	af 9a       	sbi	0x15, 7	; 21
  DDR(LED_FAULT_IMPULS0) |= LED_FAULT_IMPULS0_LINE;
     ae6:	a6 9a       	sbi	0x14, 6	; 20
  LED_FAULT_IMPULS0_off();
     ae8:	ae 98       	cbi	0x15, 6	; 21
  DDR(LED_FAULT_IMPULS1) |= LED_FAULT_IMPULS1_LINE;
     aea:	a5 9a       	sbi	0x14, 5	; 20
  LED_FAULT_IMPULS1_off();
     aec:	ad 9a       	sbi	0x15, 5	; 21
  DDR(LED_MUTE_DUBLE) |= LED_MUTE_DUBLE_LINE;
     aee:	d7 9a       	sbi	0x1a, 7	; 26
  LED_MUTE_DUBLE_1;
     af0:	df 9a       	sbi	0x1b, 7	; 27
  DDR(LED_STB_IMPULS) |= LED_STB_IMPULS_LINE;
     af2:	d6 9a       	sbi	0x1a, 6	; 26
  LED_STB_IMPULS_0;
     af4:	de 98       	cbi	0x1b, 6	; 27
//-----------------------------------------------------------------------------
}
     af6:	08 95       	ret

00000af8 <debounce_sw_standby>:
//=============================================================================
unsigned char debounce_sw_standby(void)
{
static uint16_t state1 = 0; //holds present state
state1 = (state1 << 1) | (! bit_is_clear(PIN(BUT_STANDBY), BUT_STANDBY_PIN)) | 0xE000;
     af8:	80 91 9e 04 	lds	r24, 0x049E
     afc:	90 91 9f 04 	lds	r25, 0x049F
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	90 6e       	ori	r25, 0xE0	; 224
     b06:	21 e0       	ldi	r18, 0x01	; 1
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	b5 99       	sbic	0x16, 5	; 22
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <debounce_sw_standby+0x1a>
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	28 2b       	or	r18, r24
     b14:	39 2b       	or	r19, r25
     b16:	30 93 9f 04 	sts	0x049F, r19
     b1a:	20 93 9e 04 	sts	0x049E, r18
if (state1 == 0xF000) return 1;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 ef       	ldi	r25, 0xF0	; 240
     b22:	20 30       	cpi	r18, 0x00	; 0
     b24:	39 07       	cpc	r19, r25
     b26:	09 f0       	breq	.+2      	; 0xb2a <debounce_sw_standby+0x32>
     b28:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     b2a:	08 95       	ret

00000b2c <debounce_sw_left>:
//=============================================================================
unsigned char debounce_sw_left(void)
{
static uint16_t state2 = 0; //holds present state
state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_LEFT), BUT_LEFT_PIN)) | 0xE000;
     b2c:	80 91 9c 04 	lds	r24, 0x049C
     b30:	90 91 9d 04 	lds	r25, 0x049D
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	90 6e       	ori	r25, 0xE0	; 224
     b3a:	21 e0       	ldi	r18, 0x01	; 1
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	9a 99       	sbic	0x13, 2	; 19
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <debounce_sw_left+0x1a>
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	82 2b       	or	r24, r18
     b48:	93 2b       	or	r25, r19
     b4a:	90 93 9d 04 	sts	0x049D, r25
     b4e:	80 93 9c 04 	sts	0x049C, r24
if (state2 == 0xF000) return 1;
     b52:	20 ef       	ldi	r18, 0xF0	; 240
     b54:	80 30       	cpi	r24, 0x00	; 0
     b56:	92 07       	cpc	r25, r18
     b58:	31 f0       	breq	.+12     	; 0xb66 <debounce_sw_left+0x3a>
if (state2 == 0xE000) return 2;
     b5a:	20 ee       	ldi	r18, 0xE0	; 224
     b5c:	80 30       	cpi	r24, 0x00	; 0
     b5e:	92 07       	cpc	r25, r18
     b60:	21 f4       	brne	.+8      	; 0xb6a <debounce_sw_left+0x3e>
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_left(void)
{
static uint16_t state2 = 0; //holds present state
state2 = (state2 << 1) | (! bit_is_clear(PIN(BUT_LEFT), BUT_LEFT_PIN)) | 0xE000;
if (state2 == 0xF000) return 1;
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	08 95       	ret
if (state2 == 0xE000) return 2;
return 0;
     b6a:	80 e0       	ldi	r24, 0x00	; 0
}
     b6c:	08 95       	ret

00000b6e <debounce_sw_right>:
//=============================================================================
unsigned char debounce_sw_right(void)
{
static uint16_t state3 = 0; //holds present state
state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_RIGHT), BUT_RIGHT_PIN)) | 0xE000;
     b6e:	80 91 9a 04 	lds	r24, 0x049A
     b72:	90 91 9b 04 	lds	r25, 0x049B
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	90 6e       	ori	r25, 0xE0	; 224
     b7c:	21 e0       	ldi	r18, 0x01	; 1
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	86 99       	sbic	0x10, 6	; 16
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <debounce_sw_right+0x1a>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	82 2b       	or	r24, r18
     b8a:	93 2b       	or	r25, r19
     b8c:	90 93 9b 04 	sts	0x049B, r25
     b90:	80 93 9a 04 	sts	0x049A, r24
if (state3 == 0xF000) return 1;
     b94:	20 ef       	ldi	r18, 0xF0	; 240
     b96:	80 30       	cpi	r24, 0x00	; 0
     b98:	92 07       	cpc	r25, r18
     b9a:	31 f0       	breq	.+12     	; 0xba8 <debounce_sw_right+0x3a>
if (state3 == 0xE000) return 2;
     b9c:	20 ee       	ldi	r18, 0xE0	; 224
     b9e:	80 30       	cpi	r24, 0x00	; 0
     ba0:	92 07       	cpc	r25, r18
     ba2:	21 f4       	brne	.+8      	; 0xbac <debounce_sw_right+0x3e>
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_right(void)
{
static uint16_t state3 = 0; //holds present state
state3 = (state3 << 1) | (! bit_is_clear(PIN(BUT_RIGHT), BUT_RIGHT_PIN)) | 0xE000;
if (state3 == 0xF000) return 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	08 95       	ret
if (state3 == 0xE000) return 2;
return 0;
     bac:	80 e0       	ldi	r24, 0x00	; 0
}
     bae:	08 95       	ret

00000bb0 <debounce_sw_set>:
//=============================================================================
unsigned char debounce_sw_set(void)
{
static uint16_t state4 = 0; //holds present state
state4 = (state4 << 1) | (! bit_is_clear(PIN(BUT_SET), BUT_SET_PIN)) | 0xE000;
     bb0:	80 91 98 04 	lds	r24, 0x0498
     bb4:	90 91 99 04 	lds	r25, 0x0499
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	90 6e       	ori	r25, 0xE0	; 224
     bbe:	21 e0       	ldi	r18, 0x01	; 1
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	b6 99       	sbic	0x16, 6	; 22
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <debounce_sw_set+0x1a>
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	28 2b       	or	r18, r24
     bcc:	39 2b       	or	r19, r25
     bce:	30 93 99 04 	sts	0x0499, r19
     bd2:	20 93 98 04 	sts	0x0498, r18
if (state4 == 0xF000) return 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 ef       	ldi	r25, 0xF0	; 240
     bda:	20 30       	cpi	r18, 0x00	; 0
     bdc:	39 07       	cpc	r19, r25
     bde:	09 f0       	breq	.+2      	; 0xbe2 <debounce_sw_set+0x32>
     be0:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     be2:	08 95       	ret

00000be4 <debounce_sw_menu>:
//=============================================================================
unsigned char debounce_sw_menu(void)
{
static uint16_t state5 = 0; //holds present state
state5 = (state5 << 1) | (! bit_is_clear(PIN(BUT_MENU), BUT_MENU_PIN)) | 0xE000;
     be4:	86 b3       	in	r24, 0x16	; 22
     be6:	20 91 96 04 	lds	r18, 0x0496
     bea:	30 91 97 04 	lds	r19, 0x0497
     bee:	22 0f       	add	r18, r18
     bf0:	33 1f       	adc	r19, r19
     bf2:	30 6e       	ori	r19, 0xE0	; 224
     bf4:	99 27       	eor	r25, r25
     bf6:	87 fd       	sbrc	r24, 7
     bf8:	90 95       	com	r25
     bfa:	88 27       	eor	r24, r24
     bfc:	99 0f       	add	r25, r25
     bfe:	88 1f       	adc	r24, r24
     c00:	99 27       	eor	r25, r25
     c02:	28 2b       	or	r18, r24
     c04:	39 2b       	or	r19, r25
     c06:	30 93 97 04 	sts	0x0497, r19
     c0a:	20 93 96 04 	sts	0x0496, r18
if (state5 == 0xF000) return 1;
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 ef       	ldi	r25, 0xF0	; 240
     c12:	20 30       	cpi	r18, 0x00	; 0
     c14:	39 07       	cpc	r19, r25
     c16:	09 f0       	breq	.+2      	; 0xc1a <debounce_sw_menu+0x36>
     c18:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     c1a:	08 95       	ret

00000c1c <debounce_sw_select>:
//=============================================================================
unsigned char debounce_sw_select(void)
{
static uint16_t state6 = 0; //holds present state
state6 = (state6 << 1) | (! bit_is_clear(PIN(BUT_SELECT), BUT_SELECT_PIN)) | 0xE000;
     c1c:	80 91 94 04 	lds	r24, 0x0494
     c20:	90 91 95 04 	lds	r25, 0x0495
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	90 6e       	ori	r25, 0xE0	; 224
     c2a:	21 e0       	ldi	r18, 0x01	; 1
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	9b 99       	sbic	0x13, 3	; 19
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <debounce_sw_select+0x1a>
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	28 2b       	or	r18, r24
     c38:	39 2b       	or	r19, r25
     c3a:	30 93 95 04 	sts	0x0495, r19
     c3e:	20 93 94 04 	sts	0x0494, r18
if (state6 == 0xF000) return 1;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	90 ef       	ldi	r25, 0xF0	; 240
     c46:	20 30       	cpi	r18, 0x00	; 0
     c48:	39 07       	cpc	r19, r25
     c4a:	09 f0       	breq	.+2      	; 0xc4e <debounce_sw_select+0x32>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
return 0;
}
     c4e:	08 95       	ret

00000c50 <debounce_sw_up>:
//=============================================================================
unsigned char debounce_sw_up(void)
{
static uint16_t state7 = 0; //holds present state
state7 = (state7 << 1) | (! bit_is_clear(PIN(BUT_UP), BUT_UP_PIN)) | 0xE000;
     c50:	80 91 92 04 	lds	r24, 0x0492
     c54:	90 91 93 04 	lds	r25, 0x0493
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	90 6e       	ori	r25, 0xE0	; 224
     c5e:	21 e0       	ldi	r18, 0x01	; 1
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	84 99       	sbic	0x10, 4	; 16
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <debounce_sw_up+0x1a>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	82 2b       	or	r24, r18
     c6c:	93 2b       	or	r25, r19
     c6e:	90 93 93 04 	sts	0x0493, r25
     c72:	80 93 92 04 	sts	0x0492, r24
if (state7 == 0xF000) return 1;
     c76:	20 ef       	ldi	r18, 0xF0	; 240
     c78:	80 30       	cpi	r24, 0x00	; 0
     c7a:	92 07       	cpc	r25, r18
     c7c:	31 f0       	breq	.+12     	; 0xc8a <debounce_sw_up+0x3a>
if (state7 == 0xE000) return 2;
     c7e:	20 ee       	ldi	r18, 0xE0	; 224
     c80:	80 30       	cpi	r24, 0x00	; 0
     c82:	92 07       	cpc	r25, r18
     c84:	21 f4       	brne	.+8      	; 0xc8e <debounce_sw_up+0x3e>
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_up(void)
{
static uint16_t state7 = 0; //holds present state
state7 = (state7 << 1) | (! bit_is_clear(PIN(BUT_UP), BUT_UP_PIN)) | 0xE000;
if (state7 == 0xF000) return 1;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	08 95       	ret
if (state7 == 0xE000) return 2;
return 0;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
}
     c90:	08 95       	ret

00000c92 <debounce_sw_down>:
//=============================================================================
unsigned char debounce_sw_down(void)
{
static uint16_t state8 = 0; //holds present state
state8 = (state8 << 1) | (! bit_is_clear(PIN(BUT_DOWN), BUT_DOWN_PIN)) | 0xE000;
     c92:	80 91 90 04 	lds	r24, 0x0490
     c96:	90 91 91 04 	lds	r25, 0x0491
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	90 6e       	ori	r25, 0xE0	; 224
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	85 99       	sbic	0x10, 5	; 16
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <debounce_sw_down+0x1a>
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	82 2b       	or	r24, r18
     cae:	93 2b       	or	r25, r19
     cb0:	90 93 91 04 	sts	0x0491, r25
     cb4:	80 93 90 04 	sts	0x0490, r24
if (state8 == 0xF000) return 1;
     cb8:	20 ef       	ldi	r18, 0xF0	; 240
     cba:	80 30       	cpi	r24, 0x00	; 0
     cbc:	92 07       	cpc	r25, r18
     cbe:	31 f0       	breq	.+12     	; 0xccc <debounce_sw_down+0x3a>
if (state8 == 0xE000) return 2;
     cc0:	20 ee       	ldi	r18, 0xE0	; 224
     cc2:	80 30       	cpi	r24, 0x00	; 0
     cc4:	92 07       	cpc	r25, r18
     cc6:	21 f4       	brne	.+8      	; 0xcd0 <debounce_sw_down+0x3e>
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	08 95       	ret
//=============================================================================
unsigned char debounce_sw_down(void)
{
static uint16_t state8 = 0; //holds present state
state8 = (state8 << 1) | (! bit_is_clear(PIN(BUT_DOWN), BUT_DOWN_PIN)) | 0xE000;
if (state8 == 0xF000) return 1;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	08 95       	ret
if (state8 == 0xE000) return 2;
return 0;
     cd0:	80 e0       	ldi	r24, 0x00	; 0
}
     cd2:	08 95       	ret

00000cd4 <KBD_scan>:
{
  kbd_type = val;
}
//=============================================================================
void KBD_scan(void)
{
     cd4:	1f 93       	push	r17
  unsigned char key = KBD_NOKEY;
  if (debounce_sw_standby() == 1) { key = EVENT_KEY_STANDBY; }
     cd6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <debounce_sw_standby>
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	11 f0       	breq	.+4      	; 0xce2 <KBD_scan+0xe>
  kbd_type = val;
}
//=============================================================================
void KBD_scan(void)
{
  unsigned char key = KBD_NOKEY;
     cde:	1f ef       	ldi	r17, 0xFF	; 255
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <KBD_scan+0x10>
  if (debounce_sw_standby() == 1) { key = EVENT_KEY_STANDBY; }
     ce2:	14 e6       	ldi	r17, 0x64	; 100
  if (debounce_sw_menu() == 1) { key = EVENT_KEY_MENU; }
     ce4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <debounce_sw_menu>
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	09 f4       	brne	.+2      	; 0xcee <KBD_scan+0x1a>
     cec:	1c e6       	ldi	r17, 0x6C	; 108
  if (debounce_sw_set() == 1) { key = EVENT_KEY_SET; }
     cee:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <debounce_sw_set>
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <KBD_scan+0x24>
     cf6:	17 e6       	ldi	r17, 0x67	; 103
  if (debounce_sw_select() == 1) { key = EVENT_KEY_SELECT; }
     cf8:	0e 94 0e 06 	call	0xc1c	; 0xc1c <debounce_sw_select>
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	09 f4       	brne	.+2      	; 0xd02 <KBD_scan+0x2e>
     d00:	16 e6       	ldi	r17, 0x66	; 102
  if (debounce_sw_up() == 1) { key = EVENT_KEY_UP; }
     d02:	0e 94 28 06 	call	0xc50	; 0xc50 <debounce_sw_up>
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	09 f4       	brne	.+2      	; 0xd0c <KBD_scan+0x38>
     d0a:	18 e6       	ldi	r17, 0x68	; 104
  if (debounce_sw_down() == 1) { key = EVENT_KEY_DOWN; }
     d0c:	0e 94 49 06 	call	0xc92	; 0xc92 <debounce_sw_down>
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	09 f4       	brne	.+2      	; 0xd16 <KBD_scan+0x42>
     d14:	19 e6       	ldi	r17, 0x69	; 105
  if (kbd_type == 1) {
     d16:	80 91 a4 00 	lds	r24, 0x00A4
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	49 f4       	brne	.+18     	; 0xd30 <KBD_scan+0x5c>
    if (debounce_sw_left() >= 1) { key = EVENT_KEY_LEFT; }
     d1e:	0e 94 96 05 	call	0xb2c	; 0xb2c <debounce_sw_left>
     d22:	81 11       	cpse	r24, r1
     d24:	1a e6       	ldi	r17, 0x6A	; 106
    if (debounce_sw_right() >= 1) { key = EVENT_KEY_RIGHT; }
     d26:	0e 94 b7 05 	call	0xb6e	; 0xb6e <debounce_sw_right>
     d2a:	88 23       	and	r24, r24
     d2c:	19 f5       	brne	.+70     	; 0xd74 <KBD_scan+0xa0>
     d2e:	09 c0       	rjmp	.+18     	; 0xd42 <KBD_scan+0x6e>
  } else {
    if (debounce_sw_left() == 1) { key = EVENT_KEY_LEFT; }
     d30:	0e 94 96 05 	call	0xb2c	; 0xb2c <debounce_sw_left>
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	09 f4       	brne	.+2      	; 0xd3a <KBD_scan+0x66>
     d38:	1a e6       	ldi	r17, 0x6A	; 106
    if (debounce_sw_right() == 1) { key = EVENT_KEY_RIGHT; }
     d3a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <debounce_sw_right>
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	c9 f0       	breq	.+50     	; 0xd74 <KBD_scan+0xa0>
  }
  if (key != KBD_NOKEY) {
     d42:	1f 3f       	cpi	r17, 0xFF	; 255
     d44:	c9 f0       	breq	.+50     	; 0xd78 <KBD_scan+0xa4>
    BEEP();
     d46:	97 98       	cbi	0x12, 7	; 18
     d48:	8f e3       	ldi	r24, 0x3F	; 63
     d4a:	9c e9       	ldi	r25, 0x9C	; 156
     d4c:	01 97       	sbiw	r24, 0x01	; 1
     d4e:	f1 f7       	brne	.-4      	; 0xd4c <KBD_scan+0x78>
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <KBD_scan+0x7e>
     d52:	00 00       	nop
     d54:	97 9a       	sbi	0x12, 7	; 18
    RTOS_setTask(EVENT_KEY_PRESS, 0, 0); 
     d56:	80 ea       	ldi	r24, 0xA0	; 160
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    RTOS_setTask(key, 0, 0); 
     d64:	81 2f       	mov	r24, r17
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	40 e0       	ldi	r20, 0x00	; 0
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <KBD_scan+0xa4>
  if (debounce_sw_down() == 1) { key = EVENT_KEY_DOWN; }
  if (kbd_type == 1) {
    if (debounce_sw_left() >= 1) { key = EVENT_KEY_LEFT; }
    if (debounce_sw_right() >= 1) { key = EVENT_KEY_RIGHT; }
  } else {
    if (debounce_sw_left() == 1) { key = EVENT_KEY_LEFT; }
     d74:	1b e6       	ldi	r17, 0x6B	; 107
     d76:	e7 cf       	rjmp	.-50     	; 0xd46 <KBD_scan+0x72>
  if (key != KBD_NOKEY) {
    BEEP();
    RTOS_setTask(EVENT_KEY_PRESS, 0, 0); 
    RTOS_setTask(key, 0, 0); 
  }
}
     d78:	1f 91       	pop	r17
     d7a:	08 95       	ret

00000d7c <ENC_init>:
#include "rtos.h"
#include "events.h"
//=============================================================================
void ENC_init(void)
{
  DDR(ENCODER) &= ~(1 << ENCODER_PIN_A);
     d7c:	88 98       	cbi	0x11, 0	; 17
  DDR(ENCODER) &= ~(1 << ENCODER_PIN_B);
     d7e:	8b 98       	cbi	0x11, 3	; 17
  PORT(ENCODER) |= ENCODER_LINE_A;
     d80:	90 9a       	sbi	0x12, 0	; 18
  PORT(ENCODER) |= ENCODER_LINE_B;
     d82:	93 9a       	sbi	0x12, 3	; 18
}
     d84:	08 95       	ret

00000d86 <ENC_scan>:
{
  static unsigned char stateEnc; 	//хранит последовательность состояний энкодера
  unsigned char tmp, key;  
  unsigned char currentState = 0;
  //проверяем состояние выводов микроконтроллера
  if ((PIN(ENCODER) & (ENCODER_LINE_A)) != 0) { currentState |= (1 << 0); }
     d86:	60 b3       	in	r22, 0x10	; 16
//=============================================================================
void ENC_scan(void)
{
  static unsigned char stateEnc; 	//хранит последовательность состояний энкодера
  unsigned char tmp, key;  
  unsigned char currentState = 0;
     d88:	61 70       	andi	r22, 0x01	; 1
  //проверяем состояние выводов микроконтроллера
  if ((PIN(ENCODER) & (ENCODER_LINE_A)) != 0) { currentState |= (1 << 0); }
  if ((PIN(ENCODER) & (ENCODER_LINE_B)) != 0) { currentState |= (1 << 1); }
     d8a:	83 99       	sbic	0x10, 3	; 16
     d8c:	62 60       	ori	r22, 0x02	; 2
  //если равно предыдущему, то выходим
  tmp = stateEnc;
  if (currentState == (tmp & ENC_MASK)) 
     d8e:	80 91 a0 04 	lds	r24, 0x04A0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	46 2f       	mov	r20, r22
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	9c 01       	movw	r18, r24
     d9a:	23 70       	andi	r18, 0x03	; 3
     d9c:	30 70       	andi	r19, 0x00	; 0
     d9e:	42 17       	cp	r20, r18
     da0:	53 07       	cpc	r21, r19
     da2:	c1 f1       	breq	.+112    	; 0xe14 <ENC_scan+0x8e>
  {
    return;
  }
  //если не равно, то сдвигаем и сохраняем в озу
  tmp = (tmp << 2) | currentState;
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	86 2b       	or	r24, r22
  stateEnc = tmp;
     dae:	80 93 a0 04 	sts	0x04A0, r24
  //сравниваем получившуюся последовательность
  if (tmp == ENC_LEFT_MASK) { key = ENC_LEFT; BEEP(); RTOS_setTask(EVENT_KEY_PRESS, 0, 0); RTOS_setTask(key, 0, 0); }
     db2:	81 3e       	cpi	r24, 0xE1	; 225
     db4:	b9 f4       	brne	.+46     	; 0xde4 <ENC_scan+0x5e>
     db6:	97 98       	cbi	0x12, 7	; 18
     db8:	8f e3       	ldi	r24, 0x3F	; 63
     dba:	9c e9       	ldi	r25, 0x9C	; 156
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <ENC_scan+0x36>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <ENC_scan+0x3c>
     dc2:	00 00       	nop
     dc4:	97 9a       	sbi	0x12, 7	; 18
     dc6:	80 ea       	ldi	r24, 0xA0	; 160
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
     dd4:	8a e6       	ldi	r24, 0x6A	; 106
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
     de2:	08 95       	ret
  if (tmp == ENC_RIGHT_MASK) { key = ENC_RIGHT;  BEEP(); RTOS_setTask(EVENT_KEY_PRESS, 0, 0); RTOS_setTask(key, 0, 0); }	 
     de4:	82 3d       	cpi	r24, 0xD2	; 210
     de6:	b1 f4       	brne	.+44     	; 0xe14 <ENC_scan+0x8e>
     de8:	97 98       	cbi	0x12, 7	; 18
     dea:	8f e3       	ldi	r24, 0x3F	; 63
     dec:	9c e9       	ldi	r25, 0x9C	; 156
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <ENC_scan+0x68>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <ENC_scan+0x6e>
     df4:	00 00       	nop
     df6:	97 9a       	sbi	0x12, 7	; 18
     df8:	80 ea       	ldi	r24, 0xA0	; 160
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
     e06:	8b e6       	ldi	r24, 0x6B	; 107
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
     e14:	08 95       	ret

00000e16 <RTOS_init>:
#define DISABLE_INTERRUPT do { saveRegister = SREG; cli(); } while(0)
#define RESTORE_INTERRUPT do { SREG = saveRegister; } while(0) // использовать RESTORE только после DISABLE
//=============================================================================
void RTOS_init()
{
  TCCR2 |= (1 << CS22);        // прескалер - 64
     e16:	85 b5       	in	r24, 0x25	; 37
     e18:	84 60       	ori	r24, 0x04	; 4
     e1a:	85 bd       	out	0x25, r24	; 37
  TIFR = (1 << TOV2);          // очищаем флаг прерывания таймера Т2
     e1c:	80 e4       	ldi	r24, 0x40	; 64
     e1e:	88 bf       	out	0x38, r24	; 56
  TIMSK |= (1 << TOIE2);       // разрешаем прерывание по переполнению
     e20:	89 b7       	in	r24, 0x39	; 57
     e22:	80 64       	ori	r24, 0x40	; 64
     e24:	89 bf       	out	0x39, r24	; 57
  TIMER_COUNTER = TIMER_START; // загружаем начальное зн. в счетный регистр
     e26:	86 e0       	ldi	r24, 0x06	; 6
     e28:	84 bd       	out	0x24, r24	; 36
  arrayTail = 0;               // "хвост" в 0
     e2a:	10 92 22 05 	sts	0x0522, r1
}
     e2e:	08 95       	ret

00000e30 <RTOS_setTask>:
//=============================================================================
// Установка задачи
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
     e30:	88 23       	and	r24, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <RTOS_setTask+0x6>
     e34:	65 c0       	rjmp	.+202    	; 0xf00 <RTOS_setTask+0xd0>
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	1b c0       	rjmp	.+54     	; 0xe70 <RTOS_setTask+0x40>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if (TaskArray[i].event == event)          // если нашли, то обновляем переменные
     e3a:	e9 2f       	mov	r30, r25
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	a3 e0       	ldi	r26, 0x03	; 3
     e40:	ee 0f       	add	r30, r30
     e42:	ff 1f       	adc	r31, r31
     e44:	aa 95       	dec	r26
     e46:	e1 f7       	brne	.-8      	; 0xe40 <RTOS_setTask+0x10>
     e48:	ee 55       	subi	r30, 0x5E	; 94
     e4a:	fb 4f       	sbci	r31, 0xFB	; 251
     e4c:	22 81       	ldd	r18, Z+2	; 0x02
     e4e:	28 17       	cp	r18, r24
     e50:	71 f4       	brne	.+28     	; 0xe6e <RTOS_setTask+0x3e>
    {
      TaskArray[i].pFunc  = 0;
     e52:	11 82       	std	Z+1, r1	; 0x01
     e54:	10 82       	st	Z, r1
      TaskArray[i].delay  = taskDelay;
     e56:	74 83       	std	Z+4, r23	; 0x04
     e58:	63 83       	std	Z+3, r22	; 0x03
      TaskArray[i].period = taskPeriod;
     e5a:	56 83       	std	Z+6, r21	; 0x06
     e5c:	45 83       	std	Z+5, r20	; 0x05
      if (!taskDelay) {                       // если задержка запуска == 0
     e5e:	61 15       	cp	r22, r1
     e60:	71 05       	cpc	r23, r1
     e62:	19 f4       	brne	.+6      	; 0xe6a <RTOS_setTask+0x3a>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	87 83       	std	Z+7, r24	; 0x07
     e68:	08 95       	ret
      } else TaskArray[i].run = 0;   
     e6a:	17 82       	std	Z+7, r1	; 0x07
     e6c:	08 95       	ret
// Установка задачи
void RTOS_setTask (unsigned char event, unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if (!event) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
     e6e:	9f 5f       	subi	r25, 0xFF	; 255
     e70:	20 91 22 05 	lds	r18, 0x0522
     e74:	92 17       	cp	r25, r18
     e76:	08 f3       	brcs	.-62     	; 0xe3a <RTOS_setTask+0xa>
        TaskArray[i].run = 1;                 // то сразу устанавливаем флаг запуска
      } else TaskArray[i].run = 0;   
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
     e78:	20 91 22 05 	lds	r18, 0x0522
     e7c:	20 31       	cpi	r18, 0x10	; 16
     e7e:	08 f0       	brcs	.+2      	; 0xe82 <RTOS_setTask+0x52>
     e80:	3f c0       	rjmp	.+126    	; 0xf00 <RTOS_setTask+0xd0>
  {                                           // и есть место,то добавляем
    TaskArray[i].pFunc  = 0;
     e82:	e9 2f       	mov	r30, r25
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	33 e0       	ldi	r19, 0x03	; 3
     e88:	ee 0f       	add	r30, r30
     e8a:	ff 1f       	adc	r31, r31
     e8c:	3a 95       	dec	r19
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <RTOS_setTask+0x58>
     e90:	ee 55       	subi	r30, 0x5E	; 94
     e92:	fb 4f       	sbci	r31, 0xFB	; 251
     e94:	11 82       	std	Z+1, r1	; 0x01
     e96:	10 82       	st	Z, r1
    TaskArray[arrayTail].event  = event;
     e98:	a0 91 22 05 	lds	r26, 0x0522
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	23 e0       	ldi	r18, 0x03	; 3
     ea0:	aa 0f       	add	r26, r26
     ea2:	bb 1f       	adc	r27, r27
     ea4:	2a 95       	dec	r18
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <RTOS_setTask+0x70>
     ea8:	ae 55       	subi	r26, 0x5E	; 94
     eaa:	bb 4f       	sbci	r27, 0xFB	; 251
     eac:	12 96       	adiw	r26, 0x02	; 2
     eae:	8c 93       	st	X, r24
    TaskArray[arrayTail].delay  = taskDelay;
     eb0:	a0 91 22 05 	lds	r26, 0x0522
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	aa 0f       	add	r26, r26
     eba:	bb 1f       	adc	r27, r27
     ebc:	9a 95       	dec	r25
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <RTOS_setTask+0x88>
     ec0:	ae 55       	subi	r26, 0x5E	; 94
     ec2:	bb 4f       	sbci	r27, 0xFB	; 251
     ec4:	14 96       	adiw	r26, 0x04	; 4
     ec6:	7c 93       	st	X, r23
     ec8:	6e 93       	st	-X, r22
     eca:	13 97       	sbiw	r26, 0x03	; 3
    TaskArray[arrayTail].period = taskPeriod;
     ecc:	a0 91 22 05 	lds	r26, 0x0522
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	83 e0       	ldi	r24, 0x03	; 3
     ed4:	aa 0f       	add	r26, r26
     ed6:	bb 1f       	adc	r27, r27
     ed8:	8a 95       	dec	r24
     eda:	e1 f7       	brne	.-8      	; 0xed4 <RTOS_setTask+0xa4>
     edc:	ae 55       	subi	r26, 0x5E	; 94
     ede:	bb 4f       	sbci	r27, 0xFB	; 251
     ee0:	16 96       	adiw	r26, 0x06	; 6
     ee2:	5c 93       	st	X, r21
     ee4:	4e 93       	st	-X, r20
     ee6:	15 97       	sbiw	r26, 0x05	; 5
    if (!taskDelay) {                         // если задержка запуска == 0
     ee8:	61 15       	cp	r22, r1
     eea:	71 05       	cpc	r23, r1
     eec:	19 f4       	brne	.+6      	; 0xef4 <RTOS_setTask+0xc4>
      TaskArray[i].run = 1;                   // то сразу устанавливаем флаг запуска
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	87 83       	std	Z+7, r24	; 0x07
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <RTOS_setTask+0xc6>
    } else TaskArray[i].run = 0;   
     ef4:	17 82       	std	Z+7, r1	; 0x07
    arrayTail++;                              // увеличиваем "хвост"
     ef6:	80 91 22 05 	lds	r24, 0x0522
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	80 93 22 05 	sts	0x0522, r24
     f00:	08 95       	ret

00000f02 <RTOS_setTaskFunc>:
//=============================================================================
 // Установка задачи
void RTOS_setTaskFunc (void (*taskFunc)(void), unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if(!taskFunc) return;
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	09 f4       	brne	.+2      	; 0xf08 <RTOS_setTaskFunc+0x6>
     f06:	70 c0       	rjmp	.+224    	; 0xfe8 <RTOS_setTaskFunc+0xe6>
     f08:	a0 e0       	ldi	r26, 0x00	; 0
     f0a:	1e c0       	rjmp	.+60     	; 0xf48 <RTOS_setTaskFunc+0x46>
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
  {
    if(TaskArray[i].pFunc == taskFunc)        // если нашли, то обновляем переменные
     f0c:	ea 2f       	mov	r30, r26
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	b3 e0       	ldi	r27, 0x03	; 3
     f12:	ee 0f       	add	r30, r30
     f14:	ff 1f       	adc	r31, r31
     f16:	ba 95       	dec	r27
     f18:	e1 f7       	brne	.-8      	; 0xf12 <RTOS_setTaskFunc+0x10>
     f1a:	ee 55       	subi	r30, 0x5E	; 94
     f1c:	fb 4f       	sbci	r31, 0xFB	; 251
     f1e:	20 81       	ld	r18, Z
     f20:	31 81       	ldd	r19, Z+1	; 0x01
     f22:	28 17       	cp	r18, r24
     f24:	39 07       	cpc	r19, r25
     f26:	79 f4       	brne	.+30     	; 0xf46 <RTOS_setTaskFunc+0x44>
    {
      DISABLE_INTERRUPT;
     f28:	8f b7       	in	r24, 0x3f	; 63
     f2a:	80 93 23 05 	sts	0x0523, r24
     f2e:	f8 94       	cli
      TaskArray[i].event  = EVENT_NULL;
     f30:	8e ef       	ldi	r24, 0xFE	; 254
     f32:	82 83       	std	Z+2, r24	; 0x02
      TaskArray[i].delay  = taskDelay;
     f34:	74 83       	std	Z+4, r23	; 0x04
     f36:	63 83       	std	Z+3, r22	; 0x03
      TaskArray[i].period = taskPeriod;
     f38:	56 83       	std	Z+6, r21	; 0x06
     f3a:	45 83       	std	Z+5, r20	; 0x05
      TaskArray[i].run    = 0;   
     f3c:	17 82       	std	Z+7, r1	; 0x07
      RESTORE_INTERRUPT;
     f3e:	80 91 23 05 	lds	r24, 0x0523
     f42:	8f bf       	out	0x3f, r24	; 63
      return;                                 // обновив, выходим
     f44:	08 95       	ret
 // Установка задачи
void RTOS_setTaskFunc (void (*taskFunc)(void), unsigned int taskDelay, unsigned int taskPeriod)
{
  unsigned char i;
  if(!taskFunc) return;
  for(i = 0; i < arrayTail; i++)              // поиск задачи в текущем списке
     f46:	af 5f       	subi	r26, 0xFF	; 255
     f48:	20 91 22 05 	lds	r18, 0x0522
     f4c:	a2 17       	cp	r26, r18
     f4e:	f0 f2       	brcs	.-68     	; 0xf0c <RTOS_setTaskFunc+0xa>
      TaskArray[i].run    = 0;   
      RESTORE_INTERRUPT;
      return;                                 // обновив, выходим
    }
  }
  if (arrayTail < MAX_TASKS)                  // если такой задачи в списке нет 
     f50:	20 91 22 05 	lds	r18, 0x0522
     f54:	20 31       	cpi	r18, 0x10	; 16
     f56:	08 f0       	brcs	.+2      	; 0xf5a <RTOS_setTaskFunc+0x58>
     f58:	47 c0       	rjmp	.+142    	; 0xfe8 <RTOS_setTaskFunc+0xe6>
  {                                           // и есть место,то добавляем
    DISABLE_INTERRUPT;
     f5a:	2f b7       	in	r18, 0x3f	; 63
     f5c:	20 93 23 05 	sts	0x0523, r18
     f60:	f8 94       	cli
    TaskArray[arrayTail].pFunc  = taskFunc;
     f62:	e0 91 22 05 	lds	r30, 0x0522
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	33 e0       	ldi	r19, 0x03	; 3
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	3a 95       	dec	r19
     f70:	e1 f7       	brne	.-8      	; 0xf6a <RTOS_setTaskFunc+0x68>
     f72:	ee 55       	subi	r30, 0x5E	; 94
     f74:	fb 4f       	sbci	r31, 0xFB	; 251
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
    TaskArray[arrayTail].event  = EVENT_NULL;
     f7a:	e0 91 22 05 	lds	r30, 0x0522
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	23 e0       	ldi	r18, 0x03	; 3
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	2a 95       	dec	r18
     f88:	e1 f7       	brne	.-8      	; 0xf82 <RTOS_setTaskFunc+0x80>
     f8a:	ee 55       	subi	r30, 0x5E	; 94
     f8c:	fb 4f       	sbci	r31, 0xFB	; 251
     f8e:	8e ef       	ldi	r24, 0xFE	; 254
     f90:	82 83       	std	Z+2, r24	; 0x02
    TaskArray[arrayTail].delay  = taskDelay;
     f92:	e0 91 22 05 	lds	r30, 0x0522
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	93 e0       	ldi	r25, 0x03	; 3
     f9a:	ee 0f       	add	r30, r30
     f9c:	ff 1f       	adc	r31, r31
     f9e:	9a 95       	dec	r25
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <RTOS_setTaskFunc+0x98>
     fa2:	ee 55       	subi	r30, 0x5E	; 94
     fa4:	fb 4f       	sbci	r31, 0xFB	; 251
     fa6:	74 83       	std	Z+4, r23	; 0x04
     fa8:	63 83       	std	Z+3, r22	; 0x03
    TaskArray[arrayTail].period = taskPeriod;
     faa:	e0 91 22 05 	lds	r30, 0x0522
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	8a 95       	dec	r24
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <RTOS_setTaskFunc+0xb0>
     fba:	ee 55       	subi	r30, 0x5E	; 94
     fbc:	fb 4f       	sbci	r31, 0xFB	; 251
     fbe:	56 83       	std	Z+6, r21	; 0x06
     fc0:	45 83       	std	Z+5, r20	; 0x05
    TaskArray[arrayTail].run    = 0;   
     fc2:	e0 91 22 05 	lds	r30, 0x0522
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	b3 e0       	ldi	r27, 0x03	; 3
     fca:	ee 0f       	add	r30, r30
     fcc:	ff 1f       	adc	r31, r31
     fce:	ba 95       	dec	r27
     fd0:	e1 f7       	brne	.-8      	; 0xfca <RTOS_setTaskFunc+0xc8>
     fd2:	ee 55       	subi	r30, 0x5E	; 94
     fd4:	fb 4f       	sbci	r31, 0xFB	; 251
     fd6:	17 82       	std	Z+7, r1	; 0x07
    arrayTail++;                              // увеличиваем "хвост"
     fd8:	80 91 22 05 	lds	r24, 0x0522
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	80 93 22 05 	sts	0x0522, r24
    RESTORE_INTERRUPT;
     fe2:	80 91 23 05 	lds	r24, 0x0523
     fe6:	8f bf       	out	0x3f, r24	; 63
     fe8:	08 95       	ret

00000fea <RTOS_deleteTask>:
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	2c c0       	rjmp	.+88     	; 0x1046 <RTOS_deleteTask+0x5c>
  {
    if (TaskArray[i].event == event)          // если задача в списке найдена
     fee:	29 2f       	mov	r18, r25
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	d9 01       	movw	r26, r18
     ff4:	43 e0       	ldi	r20, 0x03	; 3
     ff6:	aa 0f       	add	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	4a 95       	dec	r20
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <RTOS_deleteTask+0xc>
     ffe:	ae 55       	subi	r26, 0x5E	; 94
    1000:	bb 4f       	sbci	r27, 0xFB	; 251
    1002:	12 96       	adiw	r26, 0x02	; 2
    1004:	4c 91       	ld	r20, X
    1006:	12 97       	sbiw	r26, 0x02	; 2
    1008:	48 17       	cp	r20, r24
    100a:	e1 f4       	brne	.+56     	; 0x1044 <RTOS_deleteTask+0x5a>
    {
      if (i != (arrayTail - 1))               // переносим последнюю задачу
    100c:	80 91 22 05 	lds	r24, 0x0522
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	79 f0       	breq	.+30     	; 0x1038 <RTOS_deleteTask+0x4e>
      {                                       // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    101a:	e0 91 22 05 	lds	r30, 0x0522
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	ee 0f       	add	r30, r30
    1024:	ff 1f       	adc	r31, r31
    1026:	8a 95       	dec	r24
    1028:	e1 f7       	brne	.-8      	; 0x1022 <RTOS_deleteTask+0x38>
    102a:	e6 56       	subi	r30, 0x66	; 102
    102c:	fb 4f       	sbci	r31, 0xFB	; 251
    102e:	88 e0       	ldi	r24, 0x08	; 8
    1030:	01 90       	ld	r0, Z+
    1032:	0d 92       	st	X+, r0
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	e1 f7       	brne	.-8      	; 0x1030 <RTOS_deleteTask+0x46>
      }
      arrayTail--;                            // уменьшаем указатель "хвоста"
    1038:	80 91 22 05 	lds	r24, 0x0522
    103c:	81 50       	subi	r24, 0x01	; 1
    103e:	80 93 22 05 	sts	0x0522, r24
      return;
    1042:	08 95       	ret
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTask (unsigned char event)
{
  unsigned char i;
  for (i = 0; i < arrayTail; i++)             // проходим по списку задач
    1044:	9f 5f       	subi	r25, 0xFF	; 255
    1046:	20 91 22 05 	lds	r18, 0x0522
    104a:	92 17       	cp	r25, r18
    104c:	80 f2       	brcs	.-96     	; 0xfee <RTOS_deleteTask+0x4>
    104e:	08 95       	ret

00001050 <RTOS_deleteTaskFunc>:
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTaskFunc (void (*taskFunc)(void)) 
{
  unsigned char i;
  for (i=0; i<arrayTail; i++)                      // проходим по списку задач
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	34 c0       	rjmp	.+104    	; 0x10bc <RTOS_deleteTaskFunc+0x6c>
  {
    if(TaskArray[i].pFunc == taskFunc)             // если задача в списке найдена
    1054:	26 2f       	mov	r18, r22
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	d9 01       	movw	r26, r18
    105a:	73 e0       	ldi	r23, 0x03	; 3
    105c:	aa 0f       	add	r26, r26
    105e:	bb 1f       	adc	r27, r27
    1060:	7a 95       	dec	r23
    1062:	e1 f7       	brne	.-8      	; 0x105c <RTOS_deleteTaskFunc+0xc>
    1064:	ae 55       	subi	r26, 0x5E	; 94
    1066:	bb 4f       	sbci	r27, 0xFB	; 251
    1068:	4d 91       	ld	r20, X+
    106a:	5c 91       	ld	r21, X
    106c:	11 97       	sbiw	r26, 0x01	; 1
    106e:	48 17       	cp	r20, r24
    1070:	59 07       	cpc	r21, r25
    1072:	19 f5       	brne	.+70     	; 0x10ba <RTOS_deleteTaskFunc+0x6a>
    {
      DISABLE_INTERRUPT;
    1074:	8f b7       	in	r24, 0x3f	; 63
    1076:	80 93 23 05 	sts	0x0523, r24
    107a:	f8 94       	cli
      if(i != (arrayTail - 1))                     // переносим последнюю задачу
    107c:	80 91 22 05 	lds	r24, 0x0522
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	28 17       	cp	r18, r24
    1086:	39 07       	cpc	r19, r25
    1088:	79 f0       	breq	.+30     	; 0x10a8 <RTOS_deleteTaskFunc+0x58>
      {                                            // на место удаляемой
        TaskArray[i] = TaskArray[arrayTail - 1];
    108a:	e0 91 22 05 	lds	r30, 0x0522
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	53 e0       	ldi	r21, 0x03	; 3
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	5a 95       	dec	r21
    1098:	e1 f7       	brne	.-8      	; 0x1092 <RTOS_deleteTaskFunc+0x42>
    109a:	e6 56       	subi	r30, 0x66	; 102
    109c:	fb 4f       	sbci	r31, 0xFB	; 251
    109e:	88 e0       	ldi	r24, 0x08	; 8
    10a0:	01 90       	ld	r0, Z+
    10a2:	0d 92       	st	X+, r0
    10a4:	81 50       	subi	r24, 0x01	; 1
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <RTOS_deleteTaskFunc+0x50>
      }
      arrayTail--;                                 // уменьшаем указатель "хвоста"
    10a8:	80 91 22 05 	lds	r24, 0x0522
    10ac:	81 50       	subi	r24, 0x01	; 1
    10ae:	80 93 22 05 	sts	0x0522, r24
      RESTORE_INTERRUPT;
    10b2:	80 91 23 05 	lds	r24, 0x0523
    10b6:	8f bf       	out	0x3f, r24	; 63
      return;
    10b8:	08 95       	ret
//=============================================================================
// Удаление задачи из очереди
void RTOS_deleteTaskFunc (void (*taskFunc)(void)) 
{
  unsigned char i;
  for (i=0; i<arrayTail; i++)                      // проходим по списку задач
    10ba:	6f 5f       	subi	r22, 0xFF	; 255
    10bc:	20 91 22 05 	lds	r18, 0x0522
    10c0:	62 17       	cp	r22, r18
    10c2:	40 f2       	brcs	.-112    	; 0x1054 <RTOS_deleteTaskFunc+0x4>
    10c4:	08 95       	ret

000010c6 <RTOS_dispatchTask>:
    }
  }
}
//=============================================================================
void RTOS_dispatchTask()
{
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
    10ce:	80 91 a1 04 	lds	r24, 0x04A1
    10d2:	88 23       	and	r24, r24
    10d4:	11 f4       	brne	.+4      	; 0x10da <RTOS_dispatchTask+0x14>
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	5a c0       	rjmp	.+180    	; 0x118e <RTOS_dispatchTask+0xc8>
{
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    10da:	10 92 a1 04 	sts	0x04A1, r1
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10de:	20 e0       	ldi	r18, 0x00	; 0
    { 
	  if (TaskArray[i].delay == 0) {         // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
    10e0:	31 e0       	ldi	r19, 0x01	; 1
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    10e2:	15 c0       	rjmp	.+42     	; 0x110e <RTOS_dispatchTask+0x48>
    { 
	  if (TaskArray[i].delay == 0) {         // если время до выполнения истекло
    10e4:	e2 2f       	mov	r30, r18
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	b3 e0       	ldi	r27, 0x03	; 3
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ba 95       	dec	r27
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <RTOS_dispatchTask+0x24>
    10f2:	ee 55       	subi	r30, 0x5E	; 94
    10f4:	fb 4f       	sbci	r31, 0xFB	; 251
    10f6:	83 81       	ldd	r24, Z+3	; 0x03
    10f8:	94 81       	ldd	r25, Z+4	; 0x04
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	11 f4       	brne	.+4      	; 0x1102 <RTOS_dispatchTask+0x3c>
        TaskArray[i].run = 1;                // взводим флаг запуска,
    10fe:	37 83       	std	Z+7, r19	; 0x07
    1100:	05 c0       	rjmp	.+10     	; 0x110c <RTOS_dispatchTask+0x46>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    1102:	83 81       	ldd	r24, Z+3	; 0x03
    1104:	94 81       	ldd	r25, Z+4	; 0x04
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	94 83       	std	Z+4, r25	; 0x04
    110a:	83 83       	std	Z+3, r24	; 0x03
  unsigned char i, temp;
  void (*function) (void);
  if (timerInterrupt)
  {  
    timerInterrupt = 0;                      // сбрасываем флаг прерывания
    for (i = 0; i < arrayTail; i++)          // проходим по списку задач
    110c:	2f 5f       	subi	r18, 0xFF	; 255
    110e:	80 91 22 05 	lds	r24, 0x0522
    1112:	28 17       	cp	r18, r24
    1114:	38 f3       	brcs	.-50     	; 0x10e4 <RTOS_dispatchTask+0x1e>
    1116:	df cf       	rjmp	.-66     	; 0x10d6 <RTOS_dispatchTask+0x10>
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
  {
    if (TaskArray[i].run == 1)               // если флаг на выполнение взведен,
    1118:	e1 2f       	mov	r30, r17
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	a3 e0       	ldi	r26, 0x03	; 3
    111e:	ee 0f       	add	r30, r30
    1120:	ff 1f       	adc	r31, r31
    1122:	aa 95       	dec	r26
    1124:	e1 f7       	brne	.-8      	; 0x111e <RTOS_dispatchTask+0x58>
    1126:	ee 55       	subi	r30, 0x5E	; 94
    1128:	fb 4f       	sbci	r31, 0xFB	; 251
    112a:	87 81       	ldd	r24, Z+7	; 0x07
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	71 f5       	brne	.+92     	; 0x118c <RTOS_dispatchTask+0xc6>
    {                                        // запоминаем задачу, т.к. во
      temp = TaskArray[i].event;             // время выполнения может 
    1130:	02 81       	ldd	r16, Z+2	; 0x02
      function = TaskArray[i].pFunc;   
    1132:	c0 81       	ld	r28, Z
    1134:	d1 81       	ldd	r29, Z+1	; 0x01
      if(TaskArray[i].period == 0)                 
    1136:	25 81       	ldd	r18, Z+5	; 0x05
    1138:	36 81       	ldd	r19, Z+6	; 0x06
    113a:	21 15       	cp	r18, r1
    113c:	31 05       	cpc	r19, r1
    113e:	69 f4       	brne	.+26     	; 0x115a <RTOS_dispatchTask+0x94>
      {  
        cli();
    1140:	f8 94       	cli
	    if (temp == EVENT_NULL) {
    1142:	0e 3f       	cpi	r16, 0xFE	; 254
    1144:	29 f4       	brne	.+10     	; 0x1150 <RTOS_dispatchTask+0x8a>
          RTOS_deleteTaskFunc(TaskArray[i].pFunc); // удаляем задачу из списка,
    1146:	80 81       	ld	r24, Z
    1148:	91 81       	ldd	r25, Z+1	; 0x01
    114a:	0e 94 28 08 	call	0x1050	; 0x1050 <RTOS_deleteTaskFunc>
    114e:	03 c0       	rjmp	.+6      	; 0x1156 <RTOS_dispatchTask+0x90>
	    } else {
          RTOS_deleteTask(TaskArray[i].event); // удаляем задачу из списка,
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	0e 94 f5 07 	call	0xfea	; 0xfea <RTOS_deleteTask>
		}
        sei();
    1156:	78 94       	sei
    1158:	0c c0       	rjmp	.+24     	; 0x1172 <RTOS_dispatchTask+0xac>
      } else {
        TaskArray[i].run = 0;                  // иначе снимаем флаг запуска
    115a:	17 82       	std	Z+7, r1	; 0x07
        if (!TaskArray[i].delay)               // если задача не изменила задержку
    115c:	23 81       	ldd	r18, Z+3	; 0x03
    115e:	34 81       	ldd	r19, Z+4	; 0x04
    1160:	21 15       	cp	r18, r1
    1162:	31 05       	cpc	r19, r1
    1164:	31 f4       	brne	.+12     	; 0x1172 <RTOS_dispatchTask+0xac>
        {                                      // задаем ее
          TaskArray[i].delay = TaskArray[i].period - 1; 
    1166:	25 81       	ldd	r18, Z+5	; 0x05
    1168:	36 81       	ldd	r19, Z+6	; 0x06
    116a:	21 50       	subi	r18, 0x01	; 1
    116c:	30 40       	sbci	r19, 0x00	; 0
    116e:	34 83       	std	Z+4, r19	; 0x04
    1170:	23 83       	std	Z+3, r18	; 0x03
        }                                      // задача для себя может сделать паузу  
      }
	  if (temp == EVENT_NULL) {
    1172:	0e 3f       	cpi	r16, 0xFE	; 254
    1174:	29 f4       	brne	.+10     	; 0x1180 <RTOS_dispatchTask+0xba>
        if(!function) return;
    1176:	20 97       	sbiw	r28, 0x00	; 0
    1178:	79 f0       	breq	.+30     	; 0x1198 <RTOS_dispatchTask+0xd2>
        (*function)();                         // выполняем задачу
    117a:	fe 01       	movw	r30, r28
    117c:	09 95       	icall
    117e:	06 c0       	rjmp	.+12     	; 0x118c <RTOS_dispatchTask+0xc6>
	  } else {
        pState(temp);                          // выполняем задачу
    1180:	e0 91 a5 00 	lds	r30, 0x00A5
    1184:	f0 91 a6 00 	lds	r31, 0x00A6
    1188:	80 2f       	mov	r24, r16
    118a:	09 95       	icall
	  if (TaskArray[i].delay == 0) {         // если время до выполнения истекло
        TaskArray[i].run = 1;                // взводим флаг запуска,
      } else TaskArray[i].delay--;           // иначе уменьшаем время
    }
  }
  for (i = 0; i < arrayTail; i++)            // проходим по списку задач
    118c:	1f 5f       	subi	r17, 0xFF	; 255
    118e:	80 91 22 05 	lds	r24, 0x0522
    1192:	18 17       	cp	r17, r24
    1194:	08 f4       	brcc	.+2      	; 0x1198 <RTOS_dispatchTask+0xd2>
    1196:	c0 cf       	rjmp	.-128    	; 0x1118 <RTOS_dispatchTask+0x52>
	  } else {
        pState(temp);                          // выполняем задачу
	  }
    }
  }
}
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	08 95       	ret

000011a2 <__vector_5>:
//=============================================================================
ISR(TIMER_ISR)
{
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	8f 93       	push	r24
  TIMER_COUNTER = TIMER_START;               // задаем начальное значение таймера
    11ae:	86 e0       	ldi	r24, 0x06	; 6
    11b0:	84 bd       	out	0x24, r24	; 36
  timerInterrupt = 1;                        // устанавливаем флаг прерывания 
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 a1 04 	sts	0x04A1, r24
}
    11b8:	8f 91       	pop	r24
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <DS18x20_scan>:
	sei();
  }
}
//=============================================================================
void DS18x20_scan(void)
{
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
  static unsigned char ds_state = 0;
  switch(ds_state) {
    11cc:	80 91 33 05 	lds	r24, 0x0533
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	09 f4       	brne	.+2      	; 0x11d6 <DS18x20_scan+0x12>
    11d4:	41 c0       	rjmp	.+130    	; 0x1258 <DS18x20_scan+0x94>
    11d6:	84 30       	cpi	r24, 0x04	; 4
    11d8:	28 f4       	brcc	.+10     	; 0x11e4 <DS18x20_scan+0x20>
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	d9 f0       	breq	.+54     	; 0x1214 <DS18x20_scan+0x50>
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	38 f5       	brcc	.+78     	; 0x1230 <DS18x20_scan+0x6c>
    11e2:	0a c0       	rjmp	.+20     	; 0x11f8 <DS18x20_scan+0x34>
    11e4:	85 30       	cpi	r24, 0x05	; 5
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DS18x20_scan+0x26>
    11e8:	67 c0       	rjmp	.+206    	; 0x12b8 <DS18x20_scan+0xf4>
    11ea:	85 30       	cpi	r24, 0x05	; 5
    11ec:	08 f4       	brcc	.+2      	; 0x11f0 <DS18x20_scan+0x2c>
    11ee:	48 c0       	rjmp	.+144    	; 0x1280 <DS18x20_scan+0xbc>
    11f0:	86 30       	cpi	r24, 0x06	; 6
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <DS18x20_scan+0x32>
    11f4:	10 c1       	rjmp	.+544    	; 0x1416 <DS18x20_scan+0x252>
    11f6:	6f c0       	rjmp	.+222    	; 0x12d6 <DS18x20_scan+0x112>
    case 0:
	  ds18x20SearchDevices();
    11f8:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <ds18x20SearchDevices>
	  if (ds18x20GetDevCount() > 0) {
    11fc:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1200:	88 23       	and	r24, r24
    1202:	11 f0       	breq	.+4      	; 0x1208 <DS18x20_scan+0x44>
	    ds_state = 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	51 c0       	rjmp	.+162    	; 0x12aa <DS18x20_scan+0xe6>
        RTOS_setTaskFunc(DS18x20_scan, 0, 0);
	  } else {
	    LED_VENTIL_off();
    1208:	91 98       	cbi	0x12, 1	; 18
        RTOS_setTaskFunc(DS18x20_scan, 3000, 0);
    120a:	82 ee       	ldi	r24, 0xE2	; 226
    120c:	98 e0       	ldi	r25, 0x08	; 8
    120e:	68 eb       	ldi	r22, 0xB8	; 184
    1210:	7b e0       	ldi	r23, 0x0B	; 11
    1212:	fd c0       	rjmp	.+506    	; 0x140e <DS18x20_scan+0x24a>
	  }
    break;
    case 1:
	  ds18x20Process();
    1214:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <ds18x20Process>
      if (ds18x20GetDevCount() > 0) {
    1218:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    121c:	88 23       	and	r24, r24
    121e:	19 f0       	breq	.+6      	; 0x1226 <DS18x20_scan+0x62>
        ds_state = 2;
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	80 93 33 05 	sts	0x0533, r24
	  }
      RTOS_setTaskFunc(DS18x20_scan, 1000, 0);
    1226:	82 ee       	ldi	r24, 0xE2	; 226
    1228:	98 e0       	ldi	r25, 0x08	; 8
    122a:	68 ee       	ldi	r22, 0xE8	; 232
    122c:	73 e0       	ldi	r23, 0x03	; 3
    122e:	ef c0       	rjmp	.+478    	; 0x140e <DS18x20_scan+0x24a>
    break;
    case 2:
	  if ((ds18x20GetTemp(0) / 10) >= max_temp) { 
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    1236:	6a e0       	ldi	r22, 0x0A	; 10
    1238:	70 e0       	ldi	r23, 0x00	; 0
    123a:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    123e:	80 91 ca 05 	lds	r24, 0x05CA
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	68 17       	cp	r22, r24
    1246:	79 07       	cpc	r23, r25
    1248:	0c f0       	brlt	.+2      	; 0x124c <DS18x20_scan+0x88>
	    LED_VENTIL_on();
    124a:	91 9a       	sbi	0x12, 1	; 18
      }
      if (ds18x20GetDevCount() > 1) {
    124c:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	50 f1       	brcs	.+84     	; 0x12a8 <DS18x20_scan+0xe4>
        ds_state = 3;
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	29 c0       	rjmp	.+82     	; 0x12aa <DS18x20_scan+0xe6>
        ds_state = 6;
	  }
      RTOS_setTaskFunc(DS18x20_scan, 0, 0);
    break;
    case 3:
	  if ((ds18x20GetTemp(1) / 10) >= max_temp) { 
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    125e:	6a e0       	ldi	r22, 0x0A	; 10
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    1266:	80 91 ca 05 	lds	r24, 0x05CA
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	68 17       	cp	r22, r24
    126e:	79 07       	cpc	r23, r25
    1270:	0c f0       	brlt	.+2      	; 0x1274 <DS18x20_scan+0xb0>
	    LED_VENTIL_on();
    1272:	91 9a       	sbi	0x12, 1	; 18
      }
      if (ds18x20GetDevCount() > 2) {
    1274:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	b0 f0       	brcs	.+44     	; 0x12a8 <DS18x20_scan+0xe4>
        ds_state = 4;
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	15 c0       	rjmp	.+42     	; 0x12aa <DS18x20_scan+0xe6>
        ds_state = 6;
	  }
      RTOS_setTaskFunc(DS18x20_scan, 0, 0);
    break;
    case 4:
	  if ((ds18x20GetTemp(2) / 10) >= max_temp) { 
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    1286:	6a e0       	ldi	r22, 0x0A	; 10
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    128e:	80 91 ca 05 	lds	r24, 0x05CA
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	68 17       	cp	r22, r24
    1296:	79 07       	cpc	r23, r25
    1298:	0c f0       	brlt	.+2      	; 0x129c <DS18x20_scan+0xd8>
	    LED_VENTIL_on();
    129a:	91 9a       	sbi	0x12, 1	; 18
      }
      if (ds18x20GetDevCount() > 3) {
    129c:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    12a0:	84 30       	cpi	r24, 0x04	; 4
    12a2:	10 f0       	brcs	.+4      	; 0x12a8 <DS18x20_scan+0xe4>
        ds_state = 5;
    12a4:	85 e0       	ldi	r24, 0x05	; 5
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <DS18x20_scan+0xe6>
      } else {
        ds_state = 6;
    12a8:	86 e0       	ldi	r24, 0x06	; 6
    12aa:	80 93 33 05 	sts	0x0533, r24
	  }
      RTOS_setTaskFunc(DS18x20_scan, 0, 0);
    12ae:	82 ee       	ldi	r24, 0xE2	; 226
    12b0:	98 e0       	ldi	r25, 0x08	; 8
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	ab c0       	rjmp	.+342    	; 0x140e <DS18x20_scan+0x24a>
    break;
    case 5:
	  if ((ds18x20GetTemp(3) / 10) >= max_temp) { 
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    12be:	6a e0       	ldi	r22, 0x0A	; 10
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    12c6:	80 91 ca 05 	lds	r24, 0x05CA
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	68 17       	cp	r22, r24
    12ce:	79 07       	cpc	r23, r25
    12d0:	5c f3       	brlt	.-42     	; 0x12a8 <DS18x20_scan+0xe4>
	    LED_VENTIL_on();
    12d2:	91 9a       	sbi	0x12, 1	; 18
    12d4:	e9 cf       	rjmp	.-46     	; 0x12a8 <DS18x20_scan+0xe4>
      }
      ds_state = 6;
      RTOS_setTaskFunc(DS18x20_scan, 0, 0);
    break;
    case 6:
      if (ds18x20GetDevCount() == 1) {
    12d6:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	39 f4       	brne	.+14     	; 0x12ec <DS18x20_scan+0x128>
		if ( (ds18x20GetTemp(0) / 10) <= (max_temp - ONE_WIRE_GISTER) ) LED_VENTIL_off();
    12de:	80 91 ca 05 	lds	r24, 0x05CA
    12e2:	c8 2f       	mov	r28, r24
    12e4:	d0 e0       	ldi	r29, 0x00	; 0
    12e6:	21 97       	sbiw	r28, 0x01	; 1
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	46 c0       	rjmp	.+140    	; 0x1378 <DS18x20_scan+0x1b4>
	  } else if (ds18x20GetDevCount() == 2) {
    12ec:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    12f0:	82 30       	cpi	r24, 0x02	; 2
    12f2:	c1 f4       	brne	.+48     	; 0x1324 <DS18x20_scan+0x160>
		if ( (ds18x20GetTemp(0) / 10) <= (max_temp - ONE_WIRE_GISTER) && (ds18x20GetTemp(1) / 10) <= (max_temp - ONE_WIRE_GISTER) ) LED_VENTIL_off();
    12f4:	80 91 ca 05 	lds	r24, 0x05CA
    12f8:	c8 2f       	mov	r28, r24
    12fa:	d0 e0       	ldi	r29, 0x00	; 0
    12fc:	21 97       	sbiw	r28, 0x01	; 1
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    1304:	0a e0       	ldi	r16, 0x0A	; 10
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	b8 01       	movw	r22, r16
    130a:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    130e:	6c 17       	cp	r22, r28
    1310:	7d 07       	cpc	r23, r29
    1312:	0c f0       	brlt	.+2      	; 0x1316 <DS18x20_scan+0x152>
    1314:	76 c0       	rjmp	.+236    	; 0x1402 <DS18x20_scan+0x23e>
    1316:	80 91 ca 05 	lds	r24, 0x05CA
    131a:	c8 2f       	mov	r28, r24
    131c:	d0 e0       	ldi	r29, 0x00	; 0
    131e:	21 97       	sbiw	r28, 0x01	; 1
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	66 c0       	rjmp	.+204    	; 0x13f0 <DS18x20_scan+0x22c>
	  } else if (ds18x20GetDevCount() == 3) {
    1324:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1328:	83 30       	cpi	r24, 0x03	; 3
    132a:	59 f5       	brne	.+86     	; 0x1382 <DS18x20_scan+0x1be>
		if ( (ds18x20GetTemp(0) / 10) <= (max_temp - ONE_WIRE_GISTER) && (ds18x20GetTemp(1) / 10) <= (max_temp - ONE_WIRE_GISTER) && (ds18x20GetTemp(2) / 10) <= (max_temp - ONE_WIRE_GISTER) ) LED_VENTIL_off();
    132c:	80 91 ca 05 	lds	r24, 0x05CA
    1330:	c8 2f       	mov	r28, r24
    1332:	d0 e0       	ldi	r29, 0x00	; 0
    1334:	21 97       	sbiw	r28, 0x01	; 1
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    133c:	0a e0       	ldi	r16, 0x0A	; 10
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	b8 01       	movw	r22, r16
    1342:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    1346:	6c 17       	cp	r22, r28
    1348:	7d 07       	cpc	r23, r29
    134a:	0c f0       	brlt	.+2      	; 0x134e <DS18x20_scan+0x18a>
    134c:	5a c0       	rjmp	.+180    	; 0x1402 <DS18x20_scan+0x23e>
    134e:	80 91 ca 05 	lds	r24, 0x05CA
    1352:	c8 2f       	mov	r28, r24
    1354:	d0 e0       	ldi	r29, 0x00	; 0
    1356:	21 97       	sbiw	r28, 0x01	; 1
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    135e:	b8 01       	movw	r22, r16
    1360:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    1364:	6c 17       	cp	r22, r28
    1366:	7d 07       	cpc	r23, r29
    1368:	0c f0       	brlt	.+2      	; 0x136c <DS18x20_scan+0x1a8>
    136a:	4b c0       	rjmp	.+150    	; 0x1402 <DS18x20_scan+0x23e>
    136c:	80 91 ca 05 	lds	r24, 0x05CA
    1370:	c8 2f       	mov	r28, r24
    1372:	d0 e0       	ldi	r29, 0x00	; 0
    1374:	21 97       	sbiw	r28, 0x01	; 1
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    137c:	6a e0       	ldi	r22, 0x0A	; 10
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	3a c0       	rjmp	.+116    	; 0x13f6 <DS18x20_scan+0x232>
      } else if (ds18x20GetDevCount() == 4) {
    1382:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1386:	84 30       	cpi	r24, 0x04	; 4
    1388:	e1 f5       	brne	.+120    	; 0x1402 <DS18x20_scan+0x23e>
		if ( (ds18x20GetTemp(0) / 10) <= (max_temp - ONE_WIRE_GISTER) && (ds18x20GetTemp(1) / 10) <= (max_temp - ONE_WIRE_GISTER) && (ds18x20GetTemp(2) / 10) <= (max_temp - ONE_WIRE_GISTER)  && (ds18x20GetTemp(3) / 10) <= (max_temp - ONE_WIRE_GISTER) ) LED_VENTIL_off();
    138a:	80 91 ca 05 	lds	r24, 0x05CA
    138e:	c8 2f       	mov	r28, r24
    1390:	d0 e0       	ldi	r29, 0x00	; 0
    1392:	21 97       	sbiw	r28, 0x01	; 1
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    139a:	6a e0       	ldi	r22, 0x0A	; 10
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    13a2:	6c 17       	cp	r22, r28
    13a4:	7d 07       	cpc	r23, r29
    13a6:	6c f5       	brge	.+90     	; 0x1402 <DS18x20_scan+0x23e>
    13a8:	80 91 ca 05 	lds	r24, 0x05CA
    13ac:	c8 2f       	mov	r28, r24
    13ae:	d0 e0       	ldi	r29, 0x00	; 0
    13b0:	21 97       	sbiw	r28, 0x01	; 1
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    13b8:	0a e0       	ldi	r16, 0x0A	; 10
    13ba:	10 e0       	ldi	r17, 0x00	; 0
    13bc:	b8 01       	movw	r22, r16
    13be:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    13c2:	6c 17       	cp	r22, r28
    13c4:	7d 07       	cpc	r23, r29
    13c6:	ec f4       	brge	.+58     	; 0x1402 <DS18x20_scan+0x23e>
    13c8:	80 91 ca 05 	lds	r24, 0x05CA
    13cc:	c8 2f       	mov	r28, r24
    13ce:	d0 e0       	ldi	r29, 0x00	; 0
    13d0:	21 97       	sbiw	r28, 0x01	; 1
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    13d8:	b8 01       	movw	r22, r16
    13da:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    13de:	6c 17       	cp	r22, r28
    13e0:	7d 07       	cpc	r23, r29
    13e2:	7c f4       	brge	.+30     	; 0x1402 <DS18x20_scan+0x23e>
    13e4:	80 91 ca 05 	lds	r24, 0x05CA
    13e8:	c8 2f       	mov	r28, r24
    13ea:	d0 e0       	ldi	r29, 0x00	; 0
    13ec:	21 97       	sbiw	r28, 0x01	; 1
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    13f4:	b8 01       	movw	r22, r16
    13f6:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    13fa:	6c 17       	cp	r22, r28
    13fc:	7d 07       	cpc	r23, r29
    13fe:	0c f4       	brge	.+2      	; 0x1402 <DS18x20_scan+0x23e>
    1400:	91 98       	cbi	0x12, 1	; 18
	  }
      ds_state = 0;
    1402:	10 92 33 05 	sts	0x0533, r1
      RTOS_setTaskFunc(DS18x20_scan, ONE_WIRE_TIME, 0);
    1406:	82 ee       	ldi	r24, 0xE2	; 226
    1408:	98 e0       	ldi	r25, 0x08	; 8
    140a:	64 e1       	ldi	r22, 0x14	; 20
    140c:	75 e0       	ldi	r23, 0x05	; 5
    140e:	40 e0       	ldi	r20, 0x00	; 0
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	0e 94 81 07 	call	0xf02	; 0xf02 <RTOS_setTaskFunc>
    break;
  }
}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <alarm_beep>:
  0x01,0x01,0x03, 0x03,0x01,0x03, 0x20,0x20,0x03, 0x03,0x01,0x03, 0x01,0x01,0x03
};
//=============================================================================
void alarm_beep(void)
{
  BEEP_off()
    1420:	97 9a       	sbi	0x12, 7	; 18
  if (time_alarm > 0) {
    1422:	80 91 2d 05 	lds	r24, 0x052D
    1426:	88 23       	and	r24, r24
    1428:	61 f0       	breq	.+24     	; 0x1442 <alarm_beep+0x22>
    if (blinks == 1) { BEEP_on(); } else { BEEP_off(); }
    142a:	80 91 24 05 	lds	r24, 0x0524
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	11 f4       	brne	.+4      	; 0x1436 <alarm_beep+0x16>
    1432:	97 98       	cbi	0x12, 7	; 18
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <alarm_beep+0x18>
    1436:	97 9a       	sbi	0x12, 7	; 18
	time_alarm--;
    1438:	80 91 2d 05 	lds	r24, 0x052D
    143c:	81 50       	subi	r24, 0x01	; 1
    143e:	80 93 2d 05 	sts	0x052D, r24
    1442:	08 95       	ret

00001444 <rc5_buffer_init>:
  }
}
//=============================================================================
void rc5_buffer_init(void)
{
    1444:	e0 ea       	ldi	r30, 0xA0	; 160
    1446:	f5 e0       	ldi	r31, 0x05	; 5
    1448:	84 e6       	ldi	r24, 0x64	; 100
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    rc5_code[RC5_CMD][i] = 0xFF;
    144a:	9f ef       	ldi	r25, 0xFF	; 255
    144c:	91 93       	st	Z+, r25
    rc5_code[RC5_KEY][i] = 100 + i;
    144e:	82 8b       	std	Z+18, r24	; 0x12
    1450:	8f 5f       	subi	r24, 0xFF	; 255
}
//=============================================================================
void rc5_buffer_init(void)
{
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    1452:	87 37       	cpi	r24, 0x77	; 119
    1454:	d9 f7       	brne	.-10     	; 0x144c <rc5_buffer_init+0x8>
    rc5_code[RC5_CMD][i] = 0xFF;
    rc5_code[RC5_KEY][i] = 100 + i;
  }
}
    1456:	08 95       	ret

00001458 <get_rc5_key>:
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
  uint8_t i, ret = 0xFF;
    1458:	e0 ea       	ldi	r30, 0xA0	; 160
    145a:	f5 e0       	ldi	r31, 0x05	; 5
    rc5_code[RC5_KEY][i] = 100 + i;
  }
}
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t i, ret = 0xFF;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    if ( rc5_code[RC5_CMD][i] == code) {
    1460:	91 91       	ld	r25, Z+
    1462:	98 17       	cp	r25, r24
    1464:	29 f4       	brne	.+10     	; 0x1470 <get_rc5_key+0x18>
	  ret = rc5_code[RC5_KEY][i];
    1466:	20 56       	subi	r18, 0x60	; 96
    1468:	3a 4f       	sbci	r19, 0xFA	; 250
    146a:	f9 01       	movw	r30, r18
    146c:	83 89       	ldd	r24, Z+19	; 0x13
	  break;
    146e:	08 95       	ret
    1470:	2f 5f       	subi	r18, 0xFF	; 255
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
}
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
  uint8_t i, ret = 0xFF;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    1474:	23 31       	cpi	r18, 0x13	; 19
    1476:	31 05       	cpc	r19, r1
    1478:	99 f7       	brne	.-26     	; 0x1460 <get_rc5_key+0x8>
  }
}
//=============================================================================
uint8_t get_rc5_key(uint8_t code)
{
  uint8_t i, ret = 0xFF;
    147a:	8f ef       	ldi	r24, 0xFF	; 255
	  ret = rc5_code[RC5_KEY][i];
	  break;
	}
  }
  return ret;
}
    147c:	08 95       	ret

0000147e <RC5_scan>:
//=============================================================================
void RC5_scan(void)
{
  static signed char old_flip = -1;
  unsigned char c;
  if (rc5.flip != -1) {
    147e:	80 91 ce 05 	lds	r24, 0x05CE
    1482:	8f 3f       	cpi	r24, 0xFF	; 255
    1484:	09 f4       	brne	.+2      	; 0x1488 <RC5_scan+0xa>
    1486:	40 c0       	rjmp	.+128    	; 0x1508 <RC5_scan+0x8a>
    if ((rc5.flip != old_flip) || (rc5.code == EVENT_RC5_LEFT) || (rc5.code == EVENT_RC5_RIGHT)) {
    1488:	90 91 ce 05 	lds	r25, 0x05CE
    148c:	80 91 4f 04 	lds	r24, 0x044F
    1490:	98 17       	cp	r25, r24
    1492:	31 f4       	brne	.+12     	; 0x14a0 <RC5_scan+0x22>
    1494:	80 91 cc 05 	lds	r24, 0x05CC
    1498:	82 31       	cpi	r24, 0x12	; 18
    149a:	11 f0       	breq	.+4      	; 0x14a0 <RC5_scan+0x22>
    149c:	81 31       	cpi	r24, 0x11	; 17
    149e:	89 f5       	brne	.+98     	; 0x1502 <RC5_scan+0x84>
      LED_RC5_CMD_flip();
    14a0:	c1 98       	cbi	0x18, 1	; 24
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	96 e7       	ldi	r25, 0x76	; 118
    14a6:	a1 e0       	ldi	r26, 0x01	; 1
    14a8:	81 50       	subi	r24, 0x01	; 1
    14aa:	90 40       	sbci	r25, 0x00	; 0
    14ac:	a0 40       	sbci	r26, 0x00	; 0
    14ae:	e1 f7       	brne	.-8      	; 0x14a8 <RC5_scan+0x2a>
    14b0:	00 c0       	rjmp	.+0      	; 0x14b2 <RC5_scan+0x34>
    14b2:	00 00       	nop
    14b4:	c1 9a       	sbi	0x18, 1	; 24
	  BEEP();
    14b6:	97 98       	cbi	0x12, 7	; 18
    14b8:	af e3       	ldi	r26, 0x3F	; 63
    14ba:	bc e9       	ldi	r27, 0x9C	; 156
    14bc:	11 97       	sbiw	r26, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <RC5_scan+0x3e>
    14c0:	00 c0       	rjmp	.+0      	; 0x14c2 <RC5_scan+0x44>
    14c2:	00 00       	nop
    14c4:	97 9a       	sbi	0x12, 7	; 18
	  old_flip = rc5.flip;
    14c6:	80 91 ce 05 	lds	r24, 0x05CE
    14ca:	80 93 4f 04 	sts	0x044F, r24
      RTOS_setTask(EVENT_KEY_PRESS, 0, 0); 
    14ce:	80 ea       	ldi	r24, 0xA0	; 160
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
	  if (edit_rc5 == 1) {
    14dc:	80 91 2c 05 	lds	r24, 0x052C
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	19 f4       	brne	.+6      	; 0x14ea <RC5_scan+0x6c>
        RTOS_setTask(rc5.code, 0, 0); 
    14e4:	80 91 cc 05 	lds	r24, 0x05CC
    14e8:	06 c0       	rjmp	.+12     	; 0x14f6 <RC5_scan+0x78>
      } else {
	    c = get_rc5_key(rc5.code);
    14ea:	80 91 cc 05 	lds	r24, 0x05CC
    14ee:	0e 94 2c 0a 	call	0x1458	; 0x1458 <get_rc5_key>
	    if ( c != 0xFF) RTOS_setTask(c, 0, 0); 
    14f2:	8f 3f       	cpi	r24, 0xFF	; 255
    14f4:	31 f0       	breq	.+12     	; 0x1502 <RC5_scan+0x84>
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
	  }
    }
	rc5.flip = -1;
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	80 93 ce 05 	sts	0x05CE, r24
    1508:	08 95       	ret

0000150a <save_rc5code_key>:
    load_rc5code_key(i);
  }
}
//=============================================================================
void save_rc5code_key(uint8_t nkey, uint8_t key)
{
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	16 2f       	mov	r17, r22
  eeprom_write_byte((uint8_t*)RC5_CODE_ADDR + nkey, key);
    1512:	c8 2f       	mov	r28, r24
    1514:	d0 e0       	ldi	r29, 0x00	; 0
    1516:	ce 01       	movw	r24, r28
    1518:	80 57       	subi	r24, 0x70	; 112
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
  rc5_code[RC5_CMD][nkey] = key;
    1520:	c0 56       	subi	r28, 0x60	; 96
    1522:	da 4f       	sbci	r29, 0xFA	; 250
    1524:	18 83       	st	Y, r17
}
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	08 95       	ret

0000152e <save_rc5code>:
  }
  return ret;
}
//=============================================================================
void save_rc5code(void)
{
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    1534:	c0 ea       	ldi	r28, 0xA0	; 160
    1536:	d5 e0       	ldi	r29, 0x05	; 5
    1538:	10 e0       	ldi	r17, 0x00	; 0
    save_rc5code_key(i, rc5_code[RC5_CMD][i]);
    153a:	69 91       	ld	r22, Y+
    153c:	81 2f       	mov	r24, r17
    153e:	0e 94 85 0a 	call	0x150a	; 0x150a <save_rc5code_key>
}
//=============================================================================
void save_rc5code(void)
{
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    1542:	1f 5f       	subi	r17, 0xFF	; 255
    1544:	13 31       	cpi	r17, 0x13	; 19
    1546:	c9 f7       	brne	.-14     	; 0x153a <save_rc5code+0xc>
    save_rc5code_key(i, rc5_code[RC5_CMD][i]);
  }
}
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	08 95       	ret

00001550 <load_rc5code_key>:
  eeprom_write_byte((uint8_t*)RC5_CODE_ADDR + nkey, key);
  rc5_code[RC5_CMD][nkey] = key;
}
//=============================================================================
uint8_t load_rc5code_key(uint8_t nkey)
{
    1550:	1f 93       	push	r17
    1552:	18 2f       	mov	r17, r24
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)RC5_CODE_ADDR + nkey);
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	c9 01       	movw	r24, r18
    155a:	80 57       	subi	r24, 0x70	; 112
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  if (t > EVENT_RC5_CODE_MAX) t = 0xFF;
    1562:	84 36       	cpi	r24, 0x64	; 100
    1564:	08 f0       	brcs	.+2      	; 0x1568 <load_rc5code_key+0x18>
    1566:	8f ef       	ldi	r24, 0xFF	; 255
  rc5_code[RC5_CMD][nkey] = t;
    1568:	e1 2f       	mov	r30, r17
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	e0 56       	subi	r30, 0x60	; 96
    156e:	fa 4f       	sbci	r31, 0xFA	; 250
    1570:	80 83       	st	Z, r24
  return t;
}
    1572:	1f 91       	pop	r17
    1574:	08 95       	ret

00001576 <load_rc5code>:
    save_rc5code_key(i, rc5_code[RC5_CMD][i]);
  }
}
//=============================================================================
void load_rc5code(void)
{
    1576:	1f 93       	push	r17
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    1578:	10 e0       	ldi	r17, 0x00	; 0
    load_rc5code_key(i);
    157a:	81 2f       	mov	r24, r17
    157c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <load_rc5code_key>
}
//=============================================================================
void load_rc5code(void)
{
  uint8_t i;
  for (i = 0; i < RC5_MENU_MAX + 1; i++) {
    1580:	1f 5f       	subi	r17, 0xFF	; 255
    1582:	13 31       	cpi	r17, 0x13	; 19
    1584:	d1 f7       	brne	.-12     	; 0x157a <load_rc5code+0x4>
    load_rc5code_key(i);
  }
}
    1586:	1f 91       	pop	r17
    1588:	08 95       	ret

0000158a <save_alarm_param>:
}
//=============================================================================
void save_alarm_param(void)
{
#if (ALARM_DEBUG == 0) 
  eeprom_write_byte((uint8_t*)ALARM_ONOFF_ADDR, a_onoff);
    158a:	82 e1       	ldi	r24, 0x12	; 18
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	60 91 94 05 	lds	r22, 0x0594
    1592:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_HOUR_ADDR, a_hh);
    1596:	83 e1       	ldi	r24, 0x13	; 19
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	60 91 cb 05 	lds	r22, 0x05CB
    159e:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_MIN_ADDR, a_mm);
    15a2:	84 e1       	ldi	r24, 0x14	; 20
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	60 91 9c 05 	lds	r22, 0x059C
    15aa:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_SEC_ADDR, a_ss);
    15ae:	85 e1       	ldi	r24, 0x15	; 21
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	60 91 9e 05 	lds	r22, 0x059E
    15b6:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
  eeprom_write_byte((uint8_t*)ALARM_WDAY_ADDR, (a_wday & 0x7F));
    15ba:	60 91 9a 05 	lds	r22, 0x059A
    15be:	6f 77       	andi	r22, 0x7F	; 127
    15c0:	86 e1       	ldi	r24, 0x16	; 22
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
#endif
}
    15c8:	08 95       	ret

000015ca <load_alarm_param>:
//=============================================================================
void load_alarm_param(void)
{
#if (ALARM_DEBUG == 0) 
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)ALARM_ONOFF_ADDR);
    15ca:	82 e1       	ldi	r24, 0x12	; 18
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  if (t > 1) a_onoff = 0; else a_onoff = t;
    15d2:	82 30       	cpi	r24, 0x02	; 2
    15d4:	18 f0       	brcs	.+6      	; 0x15dc <load_alarm_param+0x12>
    15d6:	10 92 94 05 	sts	0x0594, r1
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <load_alarm_param+0x16>
    15dc:	80 93 94 05 	sts	0x0594, r24
  t = eeprom_read_byte((uint8_t*)ALARM_HOUR_ADDR);
    15e0:	83 e1       	ldi	r24, 0x13	; 19
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  if (t > 23) { a_hh = 0; a_onoff = 0; } else a_hh = t;
    15e8:	88 31       	cpi	r24, 0x18	; 24
    15ea:	28 f0       	brcs	.+10     	; 0x15f6 <load_alarm_param+0x2c>
    15ec:	10 92 cb 05 	sts	0x05CB, r1
    15f0:	10 92 94 05 	sts	0x0594, r1
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <load_alarm_param+0x30>
    15f6:	80 93 cb 05 	sts	0x05CB, r24
  t = eeprom_read_byte((uint8_t*)ALARM_MIN_ADDR);
    15fa:	84 e1       	ldi	r24, 0x14	; 20
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  if (t > 59) { a_mm = 0;  a_onoff = 0; } else a_mm = t;
    1602:	8c 33       	cpi	r24, 0x3C	; 60
    1604:	28 f0       	brcs	.+10     	; 0x1610 <load_alarm_param+0x46>
    1606:	10 92 9c 05 	sts	0x059C, r1
    160a:	10 92 94 05 	sts	0x0594, r1
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <load_alarm_param+0x4a>
    1610:	80 93 9c 05 	sts	0x059C, r24
  t = eeprom_read_byte((uint8_t*)ALARM_SEC_ADDR);
    1614:	85 e1       	ldi	r24, 0x15	; 21
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  if (t > 59) { a_ss = 0;  a_onoff = 0; } else a_ss = t;
    161c:	8c 33       	cpi	r24, 0x3C	; 60
    161e:	28 f0       	brcs	.+10     	; 0x162a <load_alarm_param+0x60>
    1620:	10 92 9e 05 	sts	0x059E, r1
    1624:	10 92 94 05 	sts	0x0594, r1
    1628:	02 c0       	rjmp	.+4      	; 0x162e <load_alarm_param+0x64>
    162a:	80 93 9e 05 	sts	0x059E, r24
  t = eeprom_read_byte((uint8_t*)ALARM_WDAY_ADDR);
    162e:	86 e1       	ldi	r24, 0x16	; 22
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  a_wday = t & 0x7F;
    1636:	8f 77       	andi	r24, 0x7F	; 127
    1638:	80 93 9a 05 	sts	0x059A, r24
#else
  RTC_set_time(13, 58, 57);
  a_onoff = 1; a_hh = 14; a_mm = 00; a_ss = 0; a_wday = 0x7F;
#endif
}
    163c:	08 95       	ret

0000163e <save_as_wait>:
//=============================================================================
void save_as_wait(uint8_t temp)
{
    163e:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)AS_WAIT_ADDR, temp);
    1640:	84 e8       	ldi	r24, 0x84	; 132
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
}
    1648:	08 95       	ret

0000164a <load_as_wait>:
//=============================================================================
uint8_t load_as_wait(void)
{
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)AS_WAIT_ADDR);
    164a:	84 e8       	ldi	r24, 0x84	; 132
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  if (t > MAX_AS_WAIT) t = DEF_AS_WAIT;
    1652:	8b 30       	cpi	r24, 0x0B	; 11
    1654:	08 f0       	brcs	.+2      	; 0x1658 <load_as_wait+0xe>
    1656:	83 e0       	ldi	r24, 0x03	; 3
  as_wait = t;
    1658:	80 93 9f 05 	sts	0x059F, r24
  return t;
}
    165c:	08 95       	ret

0000165e <save_max_temperature>:
//=============================================================================
void save_max_temperature(uint8_t temp)
{
    165e:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)MAX_TEMPERATURE_ADDR, temp);
    1660:	82 e8       	ldi	r24, 0x82	; 130
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
}
    1668:	08 95       	ret

0000166a <load_max_temperature>:
//=============================================================================
uint8_t load_max_temperature(void)
{
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)MAX_TEMPERATURE_ADDR);
    166a:	82 e8       	ldi	r24, 0x82	; 130
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  if ((t > MAX_TEMP) || (t < MIN_TEMP)) t = DEF_TEMP;
    1672:	98 2f       	mov	r25, r24
    1674:	9e 51       	subi	r25, 0x1E	; 30
    1676:	98 33       	cpi	r25, 0x38	; 56
    1678:	08 f0       	brcs	.+2      	; 0x167c <load_max_temperature+0x12>
    167a:	8d e2       	ldi	r24, 0x2D	; 45
  max_temp = t;
    167c:	80 93 ca 05 	sts	0x05CA, r24
  return t;
}
    1680:	08 95       	ret

00001682 <save_stb_out>:
//=============================================================================
void save_stb_out(uint8_t temp)
{
    1682:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)STANDBY_OUT_ADDR, temp);
    1684:	83 e8       	ldi	r24, 0x83	; 131
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
}
    168c:	08 95       	ret

0000168e <load_stb_out>:
//=============================================================================
uint8_t load_stb_out(void)
{
  uint8_t t;
  t = eeprom_read_byte((uint8_t*)STANDBY_OUT_ADDR);
    168e:	83 e8       	ldi	r24, 0x83	; 131
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
    1696:	81 11       	cpse	r24, r1
    1698:	81 e0       	ldi	r24, 0x01	; 1
  if (t > 1) t = STANDBY_OUT_DEF;
  stb_out = t;
    169a:	80 93 9d 05 	sts	0x059D, r24
  return t;
}
    169e:	08 95       	ret

000016a0 <stb_impuls>:
//=============================================================================
void stb_impuls(void)
{
  if (fault_on == 0) {
    16a0:	80 91 2e 05 	lds	r24, 0x052E
    16a4:	88 23       	and	r24, r24
    16a6:	69 f4       	brne	.+26     	; 0x16c2 <stb_impuls+0x22>
    cli();
    16a8:	f8 94       	cli
    LED_STB_IMPULS_1;
    16aa:	de 9a       	sbi	0x1b, 6	; 27
    16ac:	8f ef       	ldi	r24, 0xFF	; 255
    16ae:	93 ed       	ldi	r25, 0xD3	; 211
    16b0:	a0 e3       	ldi	r26, 0x30	; 48
    16b2:	81 50       	subi	r24, 0x01	; 1
    16b4:	90 40       	sbci	r25, 0x00	; 0
    16b6:	a0 40       	sbci	r26, 0x00	; 0
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <stb_impuls+0x12>
    16ba:	00 c0       	rjmp	.+0      	; 0x16bc <stb_impuls+0x1c>
    16bc:	00 00       	nop
	_delay_ms(1000);
	LED_STB_IMPULS_0;
    16be:	de 98       	cbi	0x1b, 6	; 27
	sei();
    16c0:	78 94       	sei
    16c2:	08 95       	ret

000016c4 <check_fault>:
}
//=============================================================================
uint8_t check_fault(void)
{
  uint8_t r = 0;
  if (BitIsClear(PIN(LED_FAULT_IN), LED_FAULT_IN_PIN)) {
    16c4:	9f 99       	sbic	0x13, 7	; 19
    16c6:	0f c0       	rjmp	.+30     	; 0x16e6 <check_fault+0x22>
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	99 ef       	ldi	r25, 0xF9	; 249
    16cc:	a0 e0       	ldi	r26, 0x00	; 0
    16ce:	81 50       	subi	r24, 0x01	; 1
    16d0:	90 40       	sbci	r25, 0x00	; 0
    16d2:	a0 40       	sbci	r26, 0x00	; 0
    16d4:	e1 f7       	brne	.-8      	; 0x16ce <check_fault+0xa>
    16d6:	00 c0       	rjmp	.+0      	; 0x16d8 <check_fault+0x14>
    16d8:	00 00       	nop
    _delay_ms(20);
    if (BitIsClear(PIN(LED_FAULT_IN), LED_FAULT_IN_PIN)) {
    16da:	9f 99       	sbic	0x13, 7	; 19
    16dc:	06 c0       	rjmp	.+12     	; 0x16ea <check_fault+0x26>
      fault_on = 1;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	80 93 2e 05 	sts	0x052E, r24
    16e4:	08 95       	ret
  }
}
//=============================================================================
uint8_t check_fault(void)
{
  uint8_t r = 0;
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	08 95       	ret
    16ea:	80 e0       	ldi	r24, 0x00	; 0
      fault_on = 1;
	  r = 1;
    }
  }
  return r;
}
    16ec:	08 95       	ret

000016ee <lcd_bigchar>:
//=============================================================================
void lcd_bigchar(unsigned char col, unsigned char x)
{
    16ee:	bf 92       	push	r11
    16f0:	cf 92       	push	r12
    16f2:	df 92       	push	r13
    16f4:	ef 92       	push	r14
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	b8 2e       	mov	r11, r24
    1702:	06 2f       	mov	r16, r22
  unsigned char i;
  i = x * 3;
  LCD_SetXY(col, 0);
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
}
//=============================================================================
void lcd_bigchar(unsigned char col, unsigned char x)
{
  unsigned char i;
  i = x * 3;
    170a:	80 2f       	mov	r24, r16
    170c:	88 0f       	add	r24, r24
    170e:	80 0f       	add	r24, r16
  LCD_SetXY(col, 0);
  LCD_dat(bignumchars1[i]); LCD_dat(bignumchars1[i + 1]); LCD_dat(bignumchars1[i + 2]); LCD_dat(' ');
    1710:	c8 2f       	mov	r28, r24
    1712:	d0 e0       	ldi	r29, 0x00	; 0
    1714:	23 e1       	ldi	r18, 0x13	; 19
    1716:	e2 2e       	mov	r14, r18
    1718:	24 e0       	ldi	r18, 0x04	; 4
    171a:	f2 2e       	mov	r15, r18
    171c:	f7 01       	movw	r30, r14
    171e:	ec 0f       	add	r30, r28
    1720:	fd 1f       	adc	r31, r29
    1722:	80 81       	ld	r24, Z
    1724:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1728:	8e 01       	movw	r16, r28
    172a:	0f 5f       	subi	r16, 0xFF	; 255
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	f7 01       	movw	r30, r14
    1730:	e0 0f       	add	r30, r16
    1732:	f1 1f       	adc	r31, r17
    1734:	80 81       	ld	r24, Z
    1736:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    173a:	92 e0       	ldi	r25, 0x02	; 2
    173c:	c9 2e       	mov	r12, r25
    173e:	d1 2c       	mov	r13, r1
    1740:	cc 0e       	add	r12, r28
    1742:	dd 1e       	adc	r13, r29
    1744:	f7 01       	movw	r30, r14
    1746:	ec 0d       	add	r30, r12
    1748:	fd 1d       	adc	r31, r13
    174a:	80 81       	ld	r24, Z
    174c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_SetXY(col, 1);
    1756:	8b 2d       	mov	r24, r11
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  LCD_dat(bignumchars2[i]); LCD_dat(bignumchars2[i + 1]); LCD_dat(bignumchars2[i + 2]); LCD_dat(' ');
    175e:	81 e3       	ldi	r24, 0x31	; 49
    1760:	e8 2e       	mov	r14, r24
    1762:	84 e0       	ldi	r24, 0x04	; 4
    1764:	f8 2e       	mov	r15, r24
    1766:	ce 0d       	add	r28, r14
    1768:	df 1d       	adc	r29, r15
    176a:	88 81       	ld	r24, Y
    176c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1770:	f7 01       	movw	r30, r14
    1772:	e0 0f       	add	r30, r16
    1774:	f1 1f       	adc	r31, r17
    1776:	80 81       	ld	r24, Z
    1778:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    177c:	ec 0c       	add	r14, r12
    177e:	fd 1c       	adc	r15, r13
    1780:	f7 01       	movw	r30, r14
    1782:	80 81       	ld	r24, Z
    1784:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	df 90       	pop	r13
    179c:	cf 90       	pop	r12
    179e:	bf 90       	pop	r11
    17a0:	08 95       	ret

000017a2 <show_bigtime>:
//=============================================================================
void show_bigtime(void)
{
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <show_bigtime+0xa>
    17ac:	0f 92       	push	r0
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
  unsigned char h, m, s, w;
  RTC_get_time(&h, &m, &s);
    17b2:	ce 01       	movw	r24, r28
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	be 01       	movw	r22, r28
    17b8:	6e 5f       	subi	r22, 0xFE	; 254
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	ae 01       	movw	r20, r28
    17be:	4d 5f       	subi	r20, 0xFD	; 253
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	0e 94 be 03 	call	0x77c	; 0x77c <RTC_get_time>
  w = RTC_dayofweek();
    17c6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <RTC_dayofweek>
    17ca:	08 2f       	mov	r16, r24
  if (blinks)
    17cc:	80 91 24 05 	lds	r24, 0x0524
    17d0:	88 23       	and	r24, r24
    17d2:	69 f0       	breq	.+26     	; 0x17ee <show_bigtime+0x4c>
  { 
    LCD_SetXY(10, 0); LCD_dat(0x04);
    17d4:	8a e0       	ldi	r24, 0x0A	; 10
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    17dc:	84 e0       	ldi	r24, 0x04	; 4
    17de:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_SetXY(10, 1); LCD_dat(0x04);
    17e2:	8a e0       	ldi	r24, 0x0A	; 10
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    17ea:	84 e0       	ldi	r24, 0x04	; 4
    17ec:	0c c0       	rjmp	.+24     	; 0x1806 <show_bigtime+0x64>
  } else {
    LCD_SetXY(10, 0); LCD_dat(0x20);
    17ee:	8a e0       	ldi	r24, 0x0A	; 10
    17f0:	60 e0       	ldi	r22, 0x00	; 0
    17f2:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    17f6:	80 e2       	ldi	r24, 0x20	; 32
    17f8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_SetXY(10, 1); LCD_dat(0x20);
    17fc:	8a e0       	ldi	r24, 0x0A	; 10
    17fe:	61 e0       	ldi	r22, 0x01	; 1
    1800:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1804:	80 e2       	ldi	r24, 0x20	; 32
    1806:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  }
  lcd_bigchar(2, h / 10); lcd_bigchar(6, h % 10); lcd_bigchar(11, m / 10); lcd_bigchar(15, m % 10);
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	1a e0       	ldi	r17, 0x0A	; 10
    180e:	61 2f       	mov	r22, r17
    1810:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodqi4>
    1814:	68 2f       	mov	r22, r24
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	0e 94 77 0b 	call	0x16ee	; 0x16ee <lcd_bigchar>
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	61 2f       	mov	r22, r17
    1820:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodqi4>
    1824:	86 e0       	ldi	r24, 0x06	; 6
    1826:	69 2f       	mov	r22, r25
    1828:	0e 94 77 0b 	call	0x16ee	; 0x16ee <lcd_bigchar>
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	61 2f       	mov	r22, r17
    1830:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodqi4>
    1834:	68 2f       	mov	r22, r24
    1836:	8b e0       	ldi	r24, 0x0B	; 11
    1838:	0e 94 77 0b 	call	0x16ee	; 0x16ee <lcd_bigchar>
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	61 2f       	mov	r22, r17
    1840:	0e 94 ef 23 	call	0x47de	; 0x47de <__udivmodqi4>
    1844:	8f e0       	ldi	r24, 0x0F	; 15
    1846:	69 2f       	mov	r22, r25
    1848:	0e 94 77 0b 	call	0x16ee	; 0x16ee <lcd_bigchar>
  if (fault_on == 0) {
    184c:	80 91 2e 05 	lds	r24, 0x052E
    1850:	88 23       	and	r24, r24
    1852:	79 f5       	brne	.+94     	; 0x18b2 <show_bigtime+0x110>
    if (!mute) {
    1854:	80 91 2a 05 	lds	r24, 0x052A
    1858:	88 23       	and	r24, r24
    185a:	a9 f4       	brne	.+42     	; 0x1886 <show_bigtime+0xe4>
      LCD_SetXY(5, 2); RTC_print_date();
    185c:	85 e0       	ldi	r24, 0x05	; 5
    185e:	62 e0       	ldi	r22, 0x02	; 2
    1860:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1864:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <RTC_print_date>
      LCD_SetXY(5, 3); LCD_puts(den_dw_full[w]);
    1868:	85 e0       	ldi	r24, 0x05	; 5
    186a:	63 e0       	ldi	r22, 0x03	; 3
    186c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1870:	e0 2f       	mov	r30, r16
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	ee 0f       	add	r30, r30
    1876:	ff 1f       	adc	r31, r31
    1878:	ef 54       	subi	r30, 0x4F	; 79
    187a:	fe 4f       	sbci	r31, 0xFE	; 254
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    1884:	33 c0       	rjmp	.+102    	; 0x18ec <show_bigtime+0x14a>
    } else {
      LCD_SetXY(5, 3); if (!blinks) LCD_puts(MSG_MUTE); else LCD_space(10);
    1886:	85 e0       	ldi	r24, 0x05	; 5
    1888:	63 e0       	ldi	r22, 0x03	; 3
    188a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    188e:	80 91 24 05 	lds	r24, 0x0524
    1892:	88 23       	and	r24, r24
    1894:	29 f4       	brne	.+10     	; 0x18a0 <show_bigtime+0xfe>
    1896:	87 ea       	ldi	r24, 0xA7	; 167
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    189e:	03 c0       	rjmp	.+6      	; 0x18a6 <show_bigtime+0x104>
    18a0:	8a e0       	ldi	r24, 0x0A	; 10
    18a2:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
      LCD_SetXY(5, 2); LCD_space(10);
    18a6:	85 e0       	ldi	r24, 0x05	; 5
    18a8:	62 e0       	ldi	r22, 0x02	; 2
    18aa:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    18ae:	8a e0       	ldi	r24, 0x0A	; 10
    18b0:	1b c0       	rjmp	.+54     	; 0x18e8 <show_bigtime+0x146>
    }
  } else {
    LCD_SetXY(0, 2); LCD_space(20);
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	62 e0       	ldi	r22, 0x02	; 2
    18b6:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    18ba:	84 e1       	ldi	r24, 0x14	; 20
    18bc:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    LCD_SetXY(0, 3); LCD_space(5);
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	63 e0       	ldi	r22, 0x03	; 3
    18c4:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    18c8:	85 e0       	ldi	r24, 0x05	; 5
    18ca:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
	if (blinks) LCD_puts(MSG_FAULT); else LCD_space(9);
    18ce:	80 91 24 05 	lds	r24, 0x0524
    18d2:	88 23       	and	r24, r24
    18d4:	29 f0       	breq	.+10     	; 0x18e0 <show_bigtime+0x13e>
    18d6:	82 eb       	ldi	r24, 0xB2	; 178
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <show_bigtime+0x144>
    18e0:	89 e0       	ldi	r24, 0x09	; 9
    18e2:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    LCD_space(6);
    18e6:	86 e0       	ldi	r24, 0x06	; 6
    18e8:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
  }
}
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	08 95       	ret

000018fc <show_temperature>:
//=============================================================================
void show_temperature(void)
{
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
  int16_t t = 0;
  if (ds_cnt_show <= TIME_SHOW_DS_1)
    1900:	80 91 32 05 	lds	r24, 0x0532
    1904:	89 30       	cpi	r24, 0x09	; 9
    1906:	08 f0       	brcs	.+2      	; 0x190a <show_temperature+0xe>
    1908:	6e c0       	rjmp	.+220    	; 0x19e6 <show_temperature+0xea>
  {
// 1   ------------------------------------------------------------------------
  LCD_SetXY(0, 3);
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	63 e0       	ldi	r22, 0x03	; 3
    190e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (ds18x20GetDevCount() > 0) {
    1912:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1916:	88 23       	and	r24, r24
    1918:	81 f1       	breq	.+96     	; 0x197a <show_temperature+0x7e>
    t = ds18x20GetTemp(0) / 10;
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    1920:	6a e0       	ldi	r22, 0x0A	; 10
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    1928:	eb 01       	movw	r28, r22
#if (TEMP_BLINK_MAX == 1) 
    if (t >= max_temp)  {
    192a:	80 91 ca 05 	lds	r24, 0x05CA
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	68 17       	cp	r22, r24
    1932:	79 07       	cpc	r23, r25
    1934:	44 f0       	brlt	.+16     	; 0x1946 <show_temperature+0x4a>
	  if (blinks == 0) {
    1936:	80 91 24 05 	lds	r24, 0x0524
    193a:	88 23       	and	r24, r24
    193c:	41 f0       	breq	.+16     	; 0x194e <show_temperature+0x52>
	    if (t < 0) LCD_dat('-'); else LCD_dat('+');
	    print_dec(t, 2,' '); LCD_dat('C');
	  } else {
	    LCD_space(4);
    193e:	84 e0       	ldi	r24, 0x04	; 4
    1940:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    1944:	0f c0       	rjmp	.+30     	; 0x1964 <show_temperature+0x68>
	  }
    } else {
	  if (t < 0) LCD_dat('-'); else LCD_dat('+');
    1946:	77 ff       	sbrs	r23, 7
    1948:	02 c0       	rjmp	.+4      	; 0x194e <show_temperature+0x52>
    194a:	8d e2       	ldi	r24, 0x2D	; 45
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <show_temperature+0x54>
    194e:	8b e2       	ldi	r24, 0x2B	; 43
    1950:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  print_dec(t, 2,' '); LCD_dat('C');
    1954:	ce 01       	movw	r24, r28
    1956:	62 e0       	ldi	r22, 0x02	; 2
    1958:	40 e2       	ldi	r20, 0x20	; 32
    195a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    195e:	83 e4       	ldi	r24, 0x43	; 67
    1960:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	}
    if (ds18x20GetDevCount() == 1) {
    1964:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	59 f4       	brne	.+22     	; 0x1982 <show_temperature+0x86>
      LCD_SetXY(15, 3);
    196c:	8f e0       	ldi	r24, 0x0F	; 15
    196e:	63 e0       	ldi	r22, 0x03	; 3
    1970:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
	  LCD_puts("     ");
    1974:	8c eb       	ldi	r24, 0xBC	; 188
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 c0       	rjmp	.+4      	; 0x197e <show_temperature+0x82>
#else
   if (t < 0) LCD_dat('-'); else LCD_dat('+');
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  } else {
    LCD_puts(MSG_NO_DS);
    197a:	82 ec       	ldi	r24, 0xC2	; 194
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  }
// 2   ------------------------------------------------------------------------
  LCD_SetXY(16, 3);
    1982:	80 e1       	ldi	r24, 0x10	; 16
    1984:	63 e0       	ldi	r22, 0x03	; 3
    1986:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (ds18x20GetDevCount() > 1) 
    198a:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    198e:	82 30       	cpi	r24, 0x02	; 2
    1990:	30 f1       	brcs	.+76     	; 0x19de <show_temperature+0xe2>
  {
    t = ds18x20GetTemp(1) / 10;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    1998:	6a e0       	ldi	r22, 0x0A	; 10
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    19a0:	eb 01       	movw	r28, r22
#if (TEMP_BLINK_MAX == 1) 
    if (t >= max_temp)  {
    19a2:	80 91 ca 05 	lds	r24, 0x05CA
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	68 17       	cp	r22, r24
    19aa:	79 07       	cpc	r23, r25
    19ac:	44 f0       	brlt	.+16     	; 0x19be <show_temperature+0xc2>
	  if (blinks == 0) {
    19ae:	80 91 24 05 	lds	r24, 0x0524
    19b2:	88 23       	and	r24, r24
    19b4:	41 f0       	breq	.+16     	; 0x19c6 <show_temperature+0xca>
	    if (t < 0) LCD_dat('-'); else LCD_dat('+');
	    print_dec(t, 2,' '); LCD_dat('C');
	  } else {
	    LCD_space(4);
    19b6:	84 e0       	ldi	r24, 0x04	; 4
    19b8:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    19bc:	14 c0       	rjmp	.+40     	; 0x19e6 <show_temperature+0xea>
	  }
    } else {
	  if (t < 0) LCD_dat('-'); else LCD_dat('+');
    19be:	77 ff       	sbrs	r23, 7
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <show_temperature+0xca>
    19c2:	8d e2       	ldi	r24, 0x2D	; 45
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <show_temperature+0xcc>
    19c6:	8b e2       	ldi	r24, 0x2B	; 43
    19c8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  print_dec(t, 2,' '); LCD_dat('C');
    19cc:	ce 01       	movw	r24, r28
    19ce:	62 e0       	ldi	r22, 0x02	; 2
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    19d6:	83 e4       	ldi	r24, 0x43	; 67
    19d8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    19dc:	04 c0       	rjmp	.+8      	; 0x19e6 <show_temperature+0xea>
#else
   if (t < 0) LCD_dat('-'); else LCD_dat('+');
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  } else {
    LCD_puts(MSG_NO_DS);
    19de:	82 ec       	ldi	r24, 0xC2	; 194
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  }
  }

  if ((ds_cnt_show > TIME_SHOW_DS_1) && (ds18x20GetDevCount() > 2))
    19e6:	80 91 32 05 	lds	r24, 0x0532
    19ea:	89 30       	cpi	r24, 0x09	; 9
    19ec:	08 f4       	brcc	.+2      	; 0x19f0 <show_temperature+0xf4>
    19ee:	74 c0       	rjmp	.+232    	; 0x1ad8 <show_temperature+0x1dc>
    19f0:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    19f4:	83 30       	cpi	r24, 0x03	; 3
    19f6:	08 f4       	brcc	.+2      	; 0x19fa <show_temperature+0xfe>
    19f8:	6f c0       	rjmp	.+222    	; 0x1ad8 <show_temperature+0x1dc>
//  if (ds_cnt_show > TIME_SHOW_DS_1)
  {
// 3   ------------------------------------------------------------------------
  LCD_SetXY(0, 3);
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	63 e0       	ldi	r22, 0x03	; 3
    19fe:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (ds18x20GetDevCount() > 2)
    1a02:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1a06:	83 30       	cpi	r24, 0x03	; 3
    1a08:	80 f1       	brcs	.+96     	; 0x1a6a <show_temperature+0x16e>
  {
    t = ds18x20GetTemp(2) / 10;
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    1a10:	6a e0       	ldi	r22, 0x0A	; 10
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    1a18:	eb 01       	movw	r28, r22
#if (TEMP_BLINK_MAX == 1) 
    if (t >= max_temp)  {
    1a1a:	80 91 ca 05 	lds	r24, 0x05CA
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	68 17       	cp	r22, r24
    1a22:	79 07       	cpc	r23, r25
    1a24:	44 f0       	brlt	.+16     	; 0x1a36 <show_temperature+0x13a>
	  if (blinks == 0) {
    1a26:	80 91 24 05 	lds	r24, 0x0524
    1a2a:	88 23       	and	r24, r24
    1a2c:	41 f0       	breq	.+16     	; 0x1a3e <show_temperature+0x142>
	    if (t < 0) LCD_dat('-'); else LCD_dat('+');
	    print_dec(t, 2,' '); LCD_dat('C');
	  } else {
	    LCD_space(4);
    1a2e:	84 e0       	ldi	r24, 0x04	; 4
    1a30:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <show_temperature+0x158>
	  }
    } else {
	  if (t < 0) LCD_dat('-'); else LCD_dat('+');
    1a36:	77 ff       	sbrs	r23, 7
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <show_temperature+0x142>
    1a3a:	8d e2       	ldi	r24, 0x2D	; 45
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <show_temperature+0x144>
    1a3e:	8b e2       	ldi	r24, 0x2B	; 43
    1a40:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  print_dec(t, 2,' '); LCD_dat('C');
    1a44:	ce 01       	movw	r24, r28
    1a46:	62 e0       	ldi	r22, 0x02	; 2
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    1a4e:	83 e4       	ldi	r24, 0x43	; 67
    1a50:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	}
    if (ds18x20GetDevCount() == 1) {
    1a54:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	59 f4       	brne	.+22     	; 0x1a72 <show_temperature+0x176>
      LCD_SetXY(15, 3);
    1a5c:	8f e0       	ldi	r24, 0x0F	; 15
    1a5e:	63 e0       	ldi	r22, 0x03	; 3
    1a60:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
	  LCD_puts("     ");
    1a64:	8c eb       	ldi	r24, 0xBC	; 188
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <show_temperature+0x172>
#else
   if (t < 0) LCD_dat('-'); else LCD_dat('+');
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  } else {
    LCD_puts(MSG_NO_DS);
    1a6a:	82 ec       	ldi	r24, 0xC2	; 194
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  }
// 4   ------------------------------------------------------------------------
  LCD_SetXY(16, 3);
    1a72:	80 e1       	ldi	r24, 0x10	; 16
    1a74:	63 e0       	ldi	r22, 0x03	; 3
    1a76:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (ds18x20GetDevCount() > 3)
    1a7a:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    1a7e:	84 30       	cpi	r24, 0x04	; 4
    1a80:	30 f1       	brcs	.+76     	; 0x1ace <show_temperature+0x1d2>
  {
    t = ds18x20GetTemp(3) / 10;
    1a82:	83 e0       	ldi	r24, 0x03	; 3
    1a84:	0e 94 41 1f 	call	0x3e82	; 0x3e82 <ds18x20GetTemp>
    1a88:	6a e0       	ldi	r22, 0x0A	; 10
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    1a90:	eb 01       	movw	r28, r22
#if (TEMP_BLINK_MAX == 1) 
    if (t >= max_temp)  {
    1a92:	80 91 ca 05 	lds	r24, 0x05CA
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	68 17       	cp	r22, r24
    1a9a:	79 07       	cpc	r23, r25
    1a9c:	44 f0       	brlt	.+16     	; 0x1aae <show_temperature+0x1b2>
	  if (blinks == 0) {
    1a9e:	80 91 24 05 	lds	r24, 0x0524
    1aa2:	88 23       	and	r24, r24
    1aa4:	41 f0       	breq	.+16     	; 0x1ab6 <show_temperature+0x1ba>
	    if (t < 0) LCD_dat('-'); else LCD_dat('+');
	    print_dec(t, 2,' '); LCD_dat('C');
	  } else {
	    LCD_space(4);
    1aa6:	84 e0       	ldi	r24, 0x04	; 4
    1aa8:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    1aac:	17 c0       	rjmp	.+46     	; 0x1adc <show_temperature+0x1e0>
	  }
    } else {
	  if (t < 0) LCD_dat('-'); else LCD_dat('+');
    1aae:	77 ff       	sbrs	r23, 7
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <show_temperature+0x1ba>
    1ab2:	8d e2       	ldi	r24, 0x2D	; 45
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <show_temperature+0x1bc>
    1ab6:	8b e2       	ldi	r24, 0x2B	; 43
    1ab8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  print_dec(t, 2,' '); LCD_dat('C');
    1abc:	ce 01       	movw	r24, r28
    1abe:	62 e0       	ldi	r22, 0x02	; 2
    1ac0:	40 e2       	ldi	r20, 0x20	; 32
    1ac2:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    1ac6:	83 e4       	ldi	r24, 0x43	; 67
    1ac8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <show_temperature+0x1e0>
#else
   if (t < 0) LCD_dat('-'); else LCD_dat('+');
   print_dec(t, 2,' '); LCD_dat('C');
#endif
  } else {
    LCD_puts(MSG_NO_DS);
    1ace:	82 ec       	ldi	r24, 0xC2	; 194
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <show_temperature+0x1e0>
  }
  } else {
    ds_cnt_show = 0;
    1ad8:	10 92 32 05 	sts	0x0532, r1
  }
}
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <show_freq>:
//=============================================================================
void show_freq(void)
{
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	27 97       	sbiw	r28, 0x07	; 7
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
  unsigned char i;
  unsigned char s[6];
  uint16_t freq = tuner_ChanToFreq(tuner_GetChan(channel));
    1afc:	80 91 30 05 	lds	r24, 0x0530
    1b00:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    1b04:	0e 94 26 23 	call	0x464c	; 0x464c <tuner_ChanToFreq>
    1b08:	f8 2e       	mov	r15, r24
  if (tuner_GetChan(channel) > FM_CHAN_MAX) {
    1b0a:	80 91 30 05 	lds	r24, 0x0530
    1b0e:	9f 83       	std	Y+7, r25	; 0x07
    1b10:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    1b14:	9f 81       	ldd	r25, Y+7	; 0x07
    1b16:	83 3d       	cpi	r24, 0xD3	; 211
    1b18:	28 f0       	brcs	.+10     	; 0x1b24 <show_freq+0x42>
    LCD_puts(MSG_ERROR_CHANNEL);
    1b1a:	87 ec       	ldi	r24, 0xC7	; 199
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    1b22:	2b c0       	rjmp	.+86     	; 0x1b7a <show_freq+0x98>
    1b24:	fe 01       	movw	r30, r28
    1b26:	36 96       	adiw	r30, 0x06	; 6
  } else {
    ds_cnt_show = 0;
  }
}
//=============================================================================
void show_freq(void)
    1b28:	8e 01       	movw	r16, r28
    1b2a:	0f 5f       	subi	r16, 0xFF	; 255
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
  uint16_t freq = tuner_ChanToFreq(tuner_GetChan(channel));
  if (tuner_GetChan(channel) > FM_CHAN_MAX) {
    LCD_puts(MSG_ERROR_CHANNEL);
  } else {
    for (i = 0; i < 5; i++) {
      s[5 - i - 1] = '0' + (freq % 10);
    1b2e:	2a e0       	ldi	r18, 0x0A	; 10
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8f 2d       	mov	r24, r15
    1b34:	b9 01       	movw	r22, r18
    1b36:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__udivmodhi4>
    1b3a:	80 5d       	subi	r24, 0xD0	; 208
    1b3c:	82 93       	st	-Z, r24
      freq /= 10;
    1b3e:	f6 2e       	mov	r15, r22
    1b40:	97 2f       	mov	r25, r23
  unsigned char s[6];
  uint16_t freq = tuner_ChanToFreq(tuner_GetChan(channel));
  if (tuner_GetChan(channel) > FM_CHAN_MAX) {
    LCD_puts(MSG_ERROR_CHANNEL);
  } else {
    for (i = 0; i < 5; i++) {
    1b42:	e0 17       	cp	r30, r16
    1b44:	f1 07       	cpc	r31, r17
    1b46:	a9 f7       	brne	.-22     	; 0x1b32 <show_freq+0x50>
      s[5 - i - 1] = '0' + (freq % 10);
      freq /= 10;
    }
    if (s[0] == '0') { s[0] = ' '; }
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	80 33       	cpi	r24, 0x30	; 48
    1b4c:	11 f4       	brne	.+4      	; 0x1b52 <show_freq+0x70>
    1b4e:	80 e2       	ldi	r24, 0x20	; 32
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	8e 01       	movw	r16, r28
    1b54:	0f 5f       	subi	r16, 0xFF	; 255
    1b56:	1f 4f       	sbci	r17, 0xFF	; 255
    ds_cnt_show = 0;
  }
}
//=============================================================================
void show_freq(void)
{
    1b58:	ff 24       	eor	r15, r15
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <show_freq+0x86>
      s[5 - i - 1] = '0' + (freq % 10);
      freq /= 10;
    }
    if (s[0] == '0') { s[0] = ' '; }
    for (i = 0; i < 5; i++) {
      if (i == 3) { LCD_dat('.'); }
    1b5c:	8f 2d       	mov	r24, r15
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	19 f4       	brne	.+6      	; 0x1b68 <show_freq+0x86>
    1b62:	8e e2       	ldi	r24, 0x2E	; 46
    1b64:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
      LCD_dat(s[i]);
    1b68:	f8 01       	movw	r30, r16
    1b6a:	81 91       	ld	r24, Z+
    1b6c:	8f 01       	movw	r16, r30
    1b6e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    for (i = 0; i < 5; i++) {
      s[5 - i - 1] = '0' + (freq % 10);
      freq /= 10;
    }
    if (s[0] == '0') { s[0] = ' '; }
    for (i = 0; i < 5; i++) {
    1b72:	f3 94       	inc	r15
    1b74:	ff 2d       	mov	r31, r15
    1b76:	f5 30       	cpi	r31, 0x05	; 5
    1b78:	89 f7       	brne	.-30     	; 0x1b5c <show_freq+0x7a>
      if (i == 3) { LCD_dat('.'); }
      LCD_dat(s[i]);
    }
  }
}
    1b7a:	27 96       	adiw	r28, 0x07	; 7
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	08 95       	ret

00001b92 <scan_fault>:
  sei();
}
//=============================================================================
void scan_fault(void)
{
  if (fault_on == 0) {
    1b92:	80 91 2e 05 	lds	r24, 0x052E
    1b96:	88 23       	and	r24, r24
    1b98:	c9 f4       	brne	.+50     	; 0x1bcc <scan_fault+0x3a>
    if (check_fault() == 1) {
    1b9a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <check_fault>
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	a9 f4       	brne	.+42     	; 0x1bcc <scan_fault+0x3a>
	  fault_on = 1;
    1ba2:	80 93 2e 05 	sts	0x052E, r24
  	  BEEP(); 
    1ba6:	97 98       	cbi	0x12, 7	; 18
    1ba8:	8f e3       	ldi	r24, 0x3F	; 63
    1baa:	9c e9       	ldi	r25, 0x9C	; 156
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <scan_fault+0x1a>
    1bb0:	00 c0       	rjmp	.+0      	; 0x1bb2 <scan_fault+0x20>
    1bb2:	00 00       	nop
    1bb4:	97 9a       	sbi	0x12, 7	; 18
	  if (main_mode != MODE_STANDBY) {
    1bb6:	80 91 31 05 	lds	r24, 0x0531
    1bba:	88 23       	and	r24, r24
    1bbc:	39 f0       	breq	.+14     	; 0x1bcc <scan_fault+0x3a>
        RTOS_setTask(EVENT_KEY_STANDBY, 0, 0);
    1bbe:	84 e6       	ldi	r24, 0x64	; 100
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    1bcc:	08 95       	ret

00001bce <show_lcd_main>:

  }
}
//=============================================================================
void show_lcd_main(void)
{
    1bce:	1f 93       	push	r17
  LCD_SetXY(0, 0); LCD_puts(input[tda7313GetInput()]);
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	60 e0       	ldi	r22, 0x00	; 0
    1bd4:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1bd8:	0e 94 2d 20 	call	0x405a	; 0x405a <tda7313GetInput>
    1bdc:	e8 2f       	mov	r30, r24
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	ee 0f       	add	r30, r30
    1be2:	ff 1f       	adc	r31, r31
    1be4:	e5 5b       	subi	r30, 0xB5	; 181
    1be6:	fd 4f       	sbci	r31, 0xFD	; 253
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(17, 0);
    1bf0:	81 e1       	ldi	r24, 0x11	; 17
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (a_onoff == 1) LCD_dat(ALARM_CHAR); else LCD_dat(' ');
    1bf8:	80 91 94 05 	lds	r24, 0x0594
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	11 f4       	brne	.+4      	; 0x1c04 <show_lcd_main+0x36>
    1c00:	8a e2       	ldi	r24, 0x2A	; 42
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <show_lcd_main+0x38>
    1c04:	80 e2       	ldi	r24, 0x20	; 32
    1c06:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_SetXY(19, 0);
    1c0a:	83 e1       	ldi	r24, 0x13	; 19
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (tda7313GetLoudness()) LCD_dat(LOUDNESS_CHAR); else LCD_dat(' ');
    1c12:	0e 94 30 20 	call	0x4060	; 0x4060 <tda7313GetLoudness>
    1c16:	88 23       	and	r24, r24
    1c18:	11 f0       	breq	.+4      	; 0x1c1e <show_lcd_main+0x50>
    1c1a:	8c e4       	ldi	r24, 0x4C	; 76
    1c1c:	01 c0       	rjmp	.+2      	; 0x1c20 <show_lcd_main+0x52>
    1c1e:	80 e2       	ldi	r24, 0x20	; 32
    1c20:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_SetXY(6, 0); RTC_print_time();
    1c24:	86 e0       	ldi	r24, 0x06	; 6
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1c2c:	0e 94 17 05 	call	0xa2e	; 0xa2e <RTC_print_time>
  LCD_SetXY(0, 1);
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	61 e0       	ldi	r22, 0x01	; 1
    1c34:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (tda7313GetInput() == FM_INPUT) {
    1c38:	0e 94 2d 20 	call	0x405a	; 0x405a <tda7313GetInput>
    1c3c:	82 30       	cpi	r24, 0x02	; 2
    1c3e:	09 f5       	brne	.+66     	; 0x1c82 <show_lcd_main+0xb4>
    if (fm_mode == VOLUME_MODE) {
    1c40:	80 91 2f 05 	lds	r24, 0x052F
    1c44:	88 23       	and	r24, r24
    1c46:	21 f0       	breq	.+8      	; 0x1c50 <show_lcd_main+0x82>
	  LCD_puts(MSG_CHANNEL);
    } else {
	  if (blinks) LCD_puts(MSG_CHANNEL); else LCD_puts("   ");
    1c48:	80 91 24 05 	lds	r24, 0x0524
    1c4c:	88 23       	and	r24, r24
    1c4e:	19 f0       	breq	.+6      	; 0x1c56 <show_lcd_main+0x88>
    1c50:	8e ec       	ldi	r24, 0xCE	; 206
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <show_lcd_main+0x8c>
    1c56:	82 ed       	ldi	r24, 0xD2	; 210
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
	}
	print_dec(channel + 1, 2, '0'); LCD_dat(' '); show_freq(); LCD_puts(MSG_MHZ);
    1c5e:	80 91 30 05 	lds	r24, 0x0530
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	01 96       	adiw	r24, 0x01	; 1
    1c66:	62 e0       	ldi	r22, 0x02	; 2
    1c68:	40 e3       	ldi	r20, 0x30	; 48
    1c6a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    1c6e:	80 e2       	ldi	r24, 0x20	; 32
    1c70:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    1c74:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <show_freq>
    1c78:	86 ed       	ldi	r24, 0xD6	; 214
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <show_lcd_main+0xba>
  } else {
    LCD_space(19);
    1c82:	83 e1       	ldi	r24, 0x13	; 19
    1c84:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
  }
  LCD_SetXY(0, 2); LCD_puts(mainmenu[mmenu]);
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	62 e0       	ldi	r22, 0x02	; 2
    1c8c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1c90:	e0 91 26 05 	lds	r30, 0x0526
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	e1 5d       	subi	r30, 0xD1	; 209
    1c9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    1ca6:	82 e1       	ldi	r24, 0x12	; 18
    1ca8:	62 e0       	ldi	r22, 0x02	; 2
    1caa:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1cae:	80 91 26 05 	lds	r24, 0x0526
    1cb2:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	62 e0       	ldi	r22, 0x02	; 2
    1cba:	40 e3       	ldi	r20, 0x30	; 48
    1cbc:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
  LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	63 e0       	ldi	r22, 0x03	; 3
    1cc4:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    1cc8:	80 91 26 05 	lds	r24, 0x0526
    1ccc:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    1cd0:	18 2f       	mov	r17, r24
    1cd2:	80 91 26 05 	lds	r24, 0x0526
    1cd6:	0e 94 4f 20 	call	0x409e	; 0x409e <tda7313Get_Max_Param>
    1cda:	68 2f       	mov	r22, r24
    1cdc:	81 2f       	mov	r24, r17
    1cde:	44 e1       	ldi	r20, 0x14	; 20
    1ce0:	0e 94 82 01 	call	0x304	; 0x304 <LCD_progress_bar>
}
    1ce4:	1f 91       	pop	r17
    1ce6:	08 95       	ret

00001ce8 <run_main>:
    break;
  }
}
//=============================================================================
void run_main(unsigned char event)
{
    1ce8:	0f 93       	push	r16
    1cea:	1f 93       	push	r17
    1cec:	18 2f       	mov	r17, r24
  uint8_t in;
  if ((event >= EVENT_KEY_1) && (event <= EVENT_KEY_9)) {
    1cee:	08 2f       	mov	r16, r24
    1cf0:	0e 56       	subi	r16, 0x6E	; 110
    1cf2:	09 30       	cpi	r16, 0x09	; 9
    1cf4:	c0 f4       	brcc	.+48     	; 0x1d26 <run_main+0x3e>
    tda7313SetInput(FM_INPUT);
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <tda7313SetInput>
	tda7313Send_Param();
    1cfc:	0e 94 55 20 	call	0x40aa	; 0x40aa <tda7313Send_Param>
    tda7313SetMute(0);
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
    channel = event - 110;
    1d06:	00 93 30 05 	sts	0x0530, r16
    tuner_SetChan(tuner_GetChan(channel));
    1d0a:	80 2f       	mov	r24, r16
    1d0c:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    1d10:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
    show_lcd_main();
    1d14:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
    RTOS_setTask(EVENT_SAVE_CHANNEL, TIME_SAVE_PARAM, 0);
    1d18:	88 ea       	ldi	r24, 0xA8	; 168
    1d1a:	60 ed       	ldi	r22, 0xD0	; 208
    1d1c:	77 e0       	ldi	r23, 0x07	; 7
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
  }
  switch(event) {
    1d26:	1d 36       	cpi	r17, 0x6D	; 109
    1d28:	09 f4       	brne	.+2      	; 0x1d2c <run_main+0x44>
    1d2a:	e4 c0       	rjmp	.+456    	; 0x1ef4 <run_main+0x20c>
    1d2c:	1e 36       	cpi	r17, 0x6E	; 110
    1d2e:	10 f5       	brcc	.+68     	; 0x1d74 <run_main+0x8c>
    1d30:	18 36       	cpi	r17, 0x68	; 104
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <run_main+0x4e>
    1d34:	95 c0       	rjmp	.+298    	; 0x1e60 <run_main+0x178>
    1d36:	19 36       	cpi	r17, 0x69	; 105
    1d38:	80 f4       	brcc	.+32     	; 0x1d5a <run_main+0x72>
    1d3a:	15 36       	cpi	r17, 0x65	; 101
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <run_main+0x58>
    1d3e:	69 c0       	rjmp	.+210    	; 0x1e12 <run_main+0x12a>
    1d40:	16 36       	cpi	r17, 0x66	; 102
    1d42:	20 f4       	brcc	.+8      	; 0x1d4c <run_main+0x64>
    1d44:	14 36       	cpi	r17, 0x64	; 100
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <run_main+0x62>
    1d48:	11 c1       	rjmp	.+546    	; 0x1f6c <run_main+0x284>
    1d4a:	4e c0       	rjmp	.+156    	; 0x1de8 <run_main+0x100>
    1d4c:	16 36       	cpi	r17, 0x66	; 102
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <run_main+0x6a>
    1d50:	74 c0       	rjmp	.+232    	; 0x1e3a <run_main+0x152>
    1d52:	17 36       	cpi	r17, 0x67	; 103
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <run_main+0x70>
    1d56:	0a c1       	rjmp	.+532    	; 0x1f6c <run_main+0x284>
    1d58:	de c0       	rjmp	.+444    	; 0x1f16 <run_main+0x22e>
    1d5a:	1a 36       	cpi	r17, 0x6A	; 106
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <run_main+0x78>
    1d5e:	bf c0       	rjmp	.+382    	; 0x1ede <run_main+0x1f6>
    1d60:	1a 36       	cpi	r17, 0x6A	; 106
    1d62:	08 f4       	brcc	.+2      	; 0x1d66 <run_main+0x7e>
    1d64:	a6 c0       	rjmp	.+332    	; 0x1eb2 <run_main+0x1ca>
    1d66:	1b 36       	cpi	r17, 0x6B	; 107
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <run_main+0x84>
    1d6a:	be c0       	rjmp	.+380    	; 0x1ee8 <run_main+0x200>
    1d6c:	1c 36       	cpi	r17, 0x6C	; 108
    1d6e:	09 f0       	breq	.+2      	; 0x1d72 <run_main+0x8a>
    1d70:	fd c0       	rjmp	.+506    	; 0x1f6c <run_main+0x284>
    1d72:	4f c0       	rjmp	.+158    	; 0x1e12 <run_main+0x12a>
    1d74:	15 3a       	cpi	r17, 0xA5	; 165
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <run_main+0x92>
    1d78:	df c0       	rjmp	.+446    	; 0x1f38 <run_main+0x250>
    1d7a:	16 3a       	cpi	r17, 0xA6	; 166
    1d7c:	78 f4       	brcc	.+30     	; 0x1d9c <run_main+0xb4>
    1d7e:	10 3a       	cpi	r17, 0xA0	; 160
    1d80:	d1 f0       	breq	.+52     	; 0x1db6 <run_main+0xce>
    1d82:	11 3a       	cpi	r17, 0xA1	; 161
    1d84:	20 f4       	brcc	.+8      	; 0x1d8e <run_main+0xa6>
    1d86:	1c 39       	cpi	r17, 0x9C	; 156
    1d88:	09 f0       	breq	.+2      	; 0x1d8c <run_main+0xa4>
    1d8a:	f0 c0       	rjmp	.+480    	; 0x1f6c <run_main+0x284>
    1d8c:	1b c0       	rjmp	.+54     	; 0x1dc4 <run_main+0xdc>
    1d8e:	13 3a       	cpi	r17, 0xA3	; 163
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <run_main+0xac>
    1d92:	63 c0       	rjmp	.+198    	; 0x1e5a <run_main+0x172>
    1d94:	14 3a       	cpi	r17, 0xA4	; 164
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <run_main+0xb2>
    1d98:	e9 c0       	rjmp	.+466    	; 0x1f6c <run_main+0x284>
    1d9a:	e4 c0       	rjmp	.+456    	; 0x1f64 <run_main+0x27c>
    1d9c:	17 3a       	cpi	r17, 0xA7	; 167
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <run_main+0xba>
    1da0:	d7 c0       	rjmp	.+430    	; 0x1f50 <run_main+0x268>
    1da2:	17 3a       	cpi	r17, 0xA7	; 167
    1da4:	08 f4       	brcc	.+2      	; 0x1da8 <run_main+0xc0>
    1da6:	d9 c0       	rjmp	.+434    	; 0x1f5a <run_main+0x272>
    1da8:	18 3a       	cpi	r17, 0xA8	; 168
    1daa:	09 f4       	brne	.+2      	; 0x1dae <run_main+0xc6>
    1dac:	cc c0       	rjmp	.+408    	; 0x1f46 <run_main+0x25e>
    1dae:	1d 3f       	cpi	r17, 0xFD	; 253
    1db0:	09 f0       	breq	.+2      	; 0x1db4 <run_main+0xcc>
    1db2:	dc c0       	rjmp	.+440    	; 0x1f6c <run_main+0x284>
    1db4:	29 c0       	rjmp	.+82     	; 0x1e08 <run_main+0x120>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    1db6:	10 92 25 05 	sts	0x0525, r1
	  LIGHT_on();
    1dba:	ac 9a       	sbi	0x15, 4	; 21
	  BEEP_off();
    1dbc:	97 9a       	sbi	0x12, 7	; 18
      time_alarm = 0;
    1dbe:	10 92 2d 05 	sts	0x052D, r1
    break;
    1dc2:	d4 c0       	rjmp	.+424    	; 0x1f6c <run_main+0x284>
    case EVENT_NOKEY:
      main_mode = MODE_NOKEY;
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	80 93 31 05 	sts	0x0531, r24
	  nokey = 0;
    1dca:	10 92 25 05 	sts	0x0525, r1
	  LCD_clear();
    1dce:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    1dd2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
	  old_pState = run_main;
    1dd6:	84 e7       	ldi	r24, 0x74	; 116
    1dd8:	9e e0       	ldi	r25, 0x0E	; 14
    1dda:	90 93 96 05 	sts	0x0596, r25
    1dde:	80 93 95 05 	sts	0x0595, r24
      SET_STATE(run_nokey);
    1de2:	89 eb       	ldi	r24, 0xB9	; 185
    1de4:	9f e0       	ldi	r25, 0x0F	; 15
    1de6:	23 c0       	rjmp	.+70     	; 0x1e2e <run_main+0x146>
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    break;
    case EVENT_KEY_STANDBY:
      stb_impuls();
    1de8:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
      SET_STATE(run_stop);
    1dec:	8e e7       	ldi	r24, 0x7E	; 126
    1dee:	90 e1       	ldi	r25, 0x10	; 16
    1df0:	90 93 a6 00 	sts	0x00A6, r25
    1df4:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_SAVE_PARAM, 0, 0);
    1df8:	85 ea       	ldi	r24, 0xA5	; 165
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	70 e0       	ldi	r23, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    1e06:	b2 c0       	rjmp	.+356    	; 0x1f6c <run_main+0x284>
    case EVENT_TIMER_SECOND:
      show_lcd_main();
    1e08:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
	  alarm_beep();
    1e0c:	0e 94 10 0a 	call	0x1420	; 0x1420 <alarm_beep>
    break;
    1e10:	ad c0       	rjmp	.+346    	; 0x1f6c <run_main+0x284>
    case EVENT_KEY_MUTE:
    case EVENT_KEY_MENU:
      main_mode = MODE_MUTE;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	80 93 31 05 	sts	0x0531, r24
      LED_MUTE_DUBLE_0;
    1e18:	df 98       	cbi	0x1b, 7	; 27
	  mute = 1;
    1e1a:	80 93 2a 05 	sts	0x052A, r24
      tda7313SetMute(1);
    1e1e:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
	  LCD_clear();
    1e22:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    1e26:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_mute);
    1e2a:	86 e0       	ldi	r24, 0x06	; 6
    1e2c:	90 e1       	ldi	r25, 0x10	; 16
    1e2e:	90 93 a6 00 	sts	0x00A6, r25
    1e32:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    1e36:	8d ef       	ldi	r24, 0xFD	; 253
    1e38:	e0 cf       	rjmp	.-64     	; 0x1dfa <run_main+0x112>
    break;
    case EVENT_KEY_SELECT:
	  in = tda7313GetInput();
    1e3a:	0e 94 2d 20 	call	0x405a	; 0x405a <tda7313GetInput>
	  if ( in < INPUT_MAX) tda7313SetInput(in + 1); else tda7313SetInput(0);
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	10 f4       	brcc	.+4      	; 0x1e46 <run_main+0x15e>
    1e42:	8f 5f       	subi	r24, 0xFF	; 255
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <run_main+0x160>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <tda7313SetInput>
      RTOS_setTask(EVENT_SAVE_INPUT, TIME_SAVE_PARAM, 0);
    1e4c:	86 ea       	ldi	r24, 0xA6	; 166
    1e4e:	60 ed       	ldi	r22, 0xD0	; 208
    1e50:	77 e0       	ldi	r23, 0x07	; 7
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	50 e0       	ldi	r21, 0x00	; 0
    1e56:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
	  mmenu = MM_VOLUME;
    1e5a:	10 92 26 05 	sts	0x0526, r1
    1e5e:	84 c0       	rjmp	.+264    	; 0x1f68 <run_main+0x280>
      show_lcd_main();
    break;
    case EVENT_KEY_UP:
      if (fm_mode == VOLUME_MODE) {
    1e60:	80 91 2f 05 	lds	r24, 0x052F
    1e64:	88 23       	and	r24, r24
    1e66:	69 f4       	brne	.+26     	; 0x1e82 <run_main+0x19a>
	    if (mmenu > 0) mmenu--; else mmenu = MMENU_MAX;
    1e68:	80 91 26 05 	lds	r24, 0x0526
    1e6c:	88 23       	and	r24, r24
    1e6e:	11 f0       	breq	.+4      	; 0x1e74 <run_main+0x18c>
    1e70:	81 50       	subi	r24, 0x01	; 1
    1e72:	01 c0       	rjmp	.+2      	; 0x1e76 <run_main+0x18e>
    1e74:	87 e0       	ldi	r24, 0x07	; 7
    1e76:	80 93 26 05 	sts	0x0526, r24
        RTOS_setTask(EVENT_RETURN_VOLUME, TIME_RETURN_VOLUME, 0);
    1e7a:	83 ea       	ldi	r24, 0xA3	; 163
    1e7c:	60 e1       	ldi	r22, 0x10	; 16
    1e7e:	77 e2       	ldi	r23, 0x27	; 39
    1e80:	45 c0       	rjmp	.+138    	; 0x1f0c <run_main+0x224>
	  } else {
	    if (channel > 0) channel--; else channel = FM_STATIONS - 1;
    1e82:	80 91 30 05 	lds	r24, 0x0530
    1e86:	88 23       	and	r24, r24
    1e88:	11 f0       	breq	.+4      	; 0x1e8e <run_main+0x1a6>
    1e8a:	81 50       	subi	r24, 0x01	; 1
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <run_main+0x1a8>
    1e8e:	8d e1       	ldi	r24, 0x1D	; 29
    1e90:	80 93 30 05 	sts	0x0530, r24
	    tuner_SetChan(tuner_GetChan(channel));
    1e94:	80 91 30 05 	lds	r24, 0x0530
    1e98:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    1e9c:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
        RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    1ea0:	84 ea       	ldi	r24, 0xA4	; 164
    1ea2:	60 e1       	ldi	r22, 0x10	; 16
    1ea4:	77 e2       	ldi	r23, 0x27	; 39
    1ea6:	40 e0       	ldi	r20, 0x00	; 0
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
        RTOS_setTask(EVENT_SAVE_CHANNEL, TIME_SAVE_PARAM, 0);
    1eae:	88 ea       	ldi	r24, 0xA8	; 168
    1eb0:	2b c0       	rjmp	.+86     	; 0x1f08 <run_main+0x220>
	  }
      show_lcd_main();
    break;
    case EVENT_KEY_DOWN:
      if (fm_mode == VOLUME_MODE) {
    1eb2:	80 91 2f 05 	lds	r24, 0x052F
    1eb6:	88 23       	and	r24, r24
    1eb8:	49 f4       	brne	.+18     	; 0x1ecc <run_main+0x1e4>
	    if (mmenu < MMENU_MAX) mmenu++; else mmenu = 0;
    1eba:	80 91 26 05 	lds	r24, 0x0526
    1ebe:	87 30       	cpi	r24, 0x07	; 7
    1ec0:	10 f4       	brcc	.+4      	; 0x1ec6 <run_main+0x1de>
    1ec2:	8f 5f       	subi	r24, 0xFF	; 255
    1ec4:	d8 cf       	rjmp	.-80     	; 0x1e76 <run_main+0x18e>
    1ec6:	10 92 26 05 	sts	0x0526, r1
    1eca:	d7 cf       	rjmp	.-82     	; 0x1e7a <run_main+0x192>
        RTOS_setTask(EVENT_RETURN_VOLUME, TIME_RETURN_VOLUME, 0);
	  } else {
	    if (channel < FM_STATIONS - 1) channel++; else channel = 0;
    1ecc:	80 91 30 05 	lds	r24, 0x0530
    1ed0:	8d 31       	cpi	r24, 0x1D	; 29
    1ed2:	10 f4       	brcc	.+4      	; 0x1ed8 <run_main+0x1f0>
    1ed4:	8f 5f       	subi	r24, 0xFF	; 255
    1ed6:	dc cf       	rjmp	.-72     	; 0x1e90 <run_main+0x1a8>
    1ed8:	10 92 30 05 	sts	0x0530, r1
    1edc:	db cf       	rjmp	.-74     	; 0x1e94 <run_main+0x1ac>
    case EVENT_RETURN_VOLUME:
	  mmenu = MM_VOLUME;
      show_lcd_main();
    break;
    case EVENT_KEY_LEFT:
	  tda7313Set_Param_down(mmenu);
    1ede:	80 91 26 05 	lds	r24, 0x0526
    1ee2:	0e 94 1f 21 	call	0x423e	; 0x423e <tda7313Set_Param_down>
    1ee6:	04 c0       	rjmp	.+8      	; 0x1ef0 <run_main+0x208>
      RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
      show_lcd_main();
    break;
    case EVENT_KEY_RIGHT:
      tda7313Set_Param_up(mmenu);
    1ee8:	80 91 26 05 	lds	r24, 0x0526
    1eec:	0e 94 33 21 	call	0x4266	; 0x4266 <tda7313Set_Param_up>
      RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
    1ef0:	85 ea       	ldi	r24, 0xA5	; 165
    1ef2:	0a c0       	rjmp	.+20     	; 0x1f08 <run_main+0x220>
      show_lcd_main();
    break;
    case EVENT_KEY_LOUDNESS:
	  if (tda7313GetLoudness() == 0) tda7313SetLoudness(1); else tda7313SetLoudness(0);
    1ef4:	0e 94 30 20 	call	0x4060	; 0x4060 <tda7313GetLoudness>
    1ef8:	88 23       	and	r24, r24
    1efa:	11 f4       	brne	.+4      	; 0x1f00 <run_main+0x218>
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	01 c0       	rjmp	.+2      	; 0x1f02 <run_main+0x21a>
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	0e 94 61 21 	call	0x42c2	; 0x42c2 <tda7313SetLoudness>
      RTOS_setTask(EVENT_SAVE_LOUDNESS, TIME_SAVE_PARAM, 0);
    1f06:	87 ea       	ldi	r24, 0xA7	; 167
    1f08:	60 ed       	ldi	r22, 0xD0	; 208
    1f0a:	77 e0       	ldi	r23, 0x07	; 7
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	50 e0       	ldi	r21, 0x00	; 0
    1f10:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    1f14:	29 c0       	rjmp	.+82     	; 0x1f68 <run_main+0x280>
      show_lcd_main();
    break;
    case EVENT_KEY_SET:
	  if (tda7313GetInput() == IN_3) fm_mode = !fm_mode; 
    1f16:	0e 94 2d 20 	call	0x405a	; 0x405a <tda7313GetInput>
    1f1a:	82 30       	cpi	r24, 0x02	; 2
    1f1c:	39 f4       	brne	.+14     	; 0x1f2c <run_main+0x244>
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 91 2f 05 	lds	r25, 0x052F
    1f24:	91 11       	cpse	r25, r1
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	80 93 2f 05 	sts	0x052F, r24
      show_lcd_main();
    1f2c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
      RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    1f30:	84 ea       	ldi	r24, 0xA4	; 164
    1f32:	60 e1       	ldi	r22, 0x10	; 16
    1f34:	77 e2       	ldi	r23, 0x27	; 39
    1f36:	63 cf       	rjmp	.-314    	; 0x1dfe <run_main+0x116>
    break;
    case EVENT_SAVE_PARAM:
      tda7313_Save_param(tda7313GetInput(), mmenu);
    1f38:	0e 94 2d 20 	call	0x405a	; 0x405a <tda7313GetInput>
    1f3c:	60 91 26 05 	lds	r22, 0x0526
    1f40:	0e 94 a6 21 	call	0x434c	; 0x434c <tda7313_Save_param>
    break;
    1f44:	13 c0       	rjmp	.+38     	; 0x1f6c <run_main+0x284>
    case EVENT_SAVE_CHANNEL:
      tuner_Save_channel(channel);
    1f46:	80 91 30 05 	lds	r24, 0x0530
    1f4a:	0e 94 a7 23 	call	0x474e	; 0x474e <tuner_Save_channel>
    break;
    1f4e:	0e c0       	rjmp	.+28     	; 0x1f6c <run_main+0x284>
    case EVENT_SAVE_LOUDNESS:
      tda7313_Save_Loudness(tda7313GetLoudness());	  
    1f50:	0e 94 30 20 	call	0x4060	; 0x4060 <tda7313GetLoudness>
    1f54:	0e 94 92 21 	call	0x4324	; 0x4324 <tda7313_Save_Loudness>
    break;
    1f58:	09 c0       	rjmp	.+18     	; 0x1f6c <run_main+0x284>
    case EVENT_SAVE_INPUT:
      tda7313_Save_Input(tda7313GetInput());	  
    1f5a:	0e 94 2d 20 	call	0x405a	; 0x405a <tda7313GetInput>
    1f5e:	0e 94 7f 21 	call	0x42fe	; 0x42fe <tda7313_Save_Input>
    break;
    1f62:	04 c0       	rjmp	.+8      	; 0x1f6c <run_main+0x284>
    case EVENT_RETURN_MODE:
	  fm_mode = VOLUME_MODE;
    1f64:	10 92 2f 05 	sts	0x052F, r1
      show_lcd_main();
    1f68:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
    break;

  }
}
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	08 95       	ret

00001f72 <run_nokey>:
  }
}
//=============================================================================
void run_nokey(unsigned char event)
{
  switch(event) {
    1f72:	8c 39       	cpi	r24, 0x9C	; 156
    1f74:	61 f0       	breq	.+24     	; 0x1f8e <run_nokey+0x1c>
    1f76:	8d 39       	cpi	r24, 0x9D	; 157
    1f78:	20 f4       	brcc	.+8      	; 0x1f82 <run_nokey+0x10>
    1f7a:	84 36       	cpi	r24, 0x64	; 100
    1f7c:	09 f0       	breq	.+2      	; 0x1f80 <run_nokey+0xe>
    1f7e:	45 c0       	rjmp	.+138    	; 0x200a <run_nokey+0x98>
    1f80:	2a c0       	rjmp	.+84     	; 0x1fd6 <run_nokey+0x64>
    1f82:	80 3a       	cpi	r24, 0xA0	; 160
    1f84:	31 f0       	breq	.+12     	; 0x1f92 <run_nokey+0x20>
    1f86:	8d 3f       	cpi	r24, 0xFD	; 253
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <run_nokey+0x1a>
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <run_nokey+0x98>
    1f8c:	38 c0       	rjmp	.+112    	; 0x1ffe <run_nokey+0x8c>
    case EVENT_NOKEY:
	  LIGHT_off();
    1f8e:	ac 98       	cbi	0x15, 4	; 21
    break;
    1f90:	08 95       	ret
    case EVENT_KEY_PRESS:
      time_alarm = 0;
    1f92:	10 92 2d 05 	sts	0x052D, r1
	  nokey = 0;
    1f96:	10 92 25 05 	sts	0x0525, r1
      main_mode = MODE_MAIN;
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	80 93 31 05 	sts	0x0531, r24
	  LIGHT_on();
    1fa0:	ac 9a       	sbi	0x15, 4	; 21
	  LCD_clear();
    1fa2:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    1fa6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
      SET_STATE(old_pState);
    1faa:	80 91 95 05 	lds	r24, 0x0595
    1fae:	90 91 96 05 	lds	r25, 0x0596
    1fb2:	90 93 a6 00 	sts	0x00A6, r25
    1fb6:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_main();
    1fba:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
	  BEEP_off();
    1fbe:	97 9a       	sbi	0x12, 7	; 18
	  if (ds_cnt_show < TIME_SHOW_DS_1) ds_cnt_show = TIME_SHOW_DS_1; else ds_cnt_show = 0;
    1fc0:	80 91 32 05 	lds	r24, 0x0532
    1fc4:	88 30       	cpi	r24, 0x08	; 8
    1fc6:	20 f4       	brcc	.+8      	; 0x1fd0 <run_nokey+0x5e>
    1fc8:	88 e0       	ldi	r24, 0x08	; 8
    1fca:	80 93 32 05 	sts	0x0532, r24
    1fce:	08 95       	ret
    1fd0:	10 92 32 05 	sts	0x0532, r1
    1fd4:	08 95       	ret
    break;
    case EVENT_KEY_STANDBY:
      stb_impuls();
    1fd6:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  LCD_clear();
    1fda:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    1fde:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_stop);
    1fe2:	8e e7       	ldi	r24, 0x7E	; 126
    1fe4:	90 e1       	ldi	r25, 0x10	; 16
    1fe6:	90 93 a6 00 	sts	0x00A6, r25
    1fea:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_SAVE_PARAM, 0, 0);
    1fee:	85 ea       	ldi	r24, 0xA5	; 165
    1ff0:	60 e0       	ldi	r22, 0x00	; 0
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	40 e0       	ldi	r20, 0x00	; 0
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    1ffc:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_bigtime();
    1ffe:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <show_bigtime>
	  show_temperature();
    2002:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <show_temperature>
	  alarm_beep();
    2006:	0e 94 10 0a 	call	0x1420	; 0x1420 <alarm_beep>
    200a:	08 95       	ret

0000200c <run_mute>:
  }
}
//=============================================================================
void run_mute(unsigned char event)
{
  switch(event) {
    200c:	8c 39       	cpi	r24, 0x9C	; 156
    200e:	e9 f0       	breq	.+58     	; 0x204a <run_mute+0x3e>
    2010:	8d 39       	cpi	r24, 0x9D	; 157
    2012:	28 f4       	brcc	.+10     	; 0x201e <run_mute+0x12>
    2014:	85 36       	cpi	r24, 0x65	; 101
    2016:	d9 f0       	breq	.+54     	; 0x204e <run_mute+0x42>
    2018:	8c 36       	cpi	r24, 0x6C	; 108
    201a:	a9 f5       	brne	.+106    	; 0x2086 <run_mute+0x7a>
    201c:	18 c0       	rjmp	.+48     	; 0x204e <run_mute+0x42>
    201e:	80 3a       	cpi	r24, 0xA0	; 160
    2020:	19 f0       	breq	.+6      	; 0x2028 <run_mute+0x1c>
    2022:	8d 3f       	cpi	r24, 0xFD	; 253
    2024:	81 f5       	brne	.+96     	; 0x2086 <run_mute+0x7a>
    2026:	29 c0       	rjmp	.+82     	; 0x207a <run_mute+0x6e>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2028:	10 92 25 05 	sts	0x0525, r1
	  LIGHT_on();
    202c:	ac 9a       	sbi	0x15, 4	; 21
	  BEEP_off();
    202e:	97 9a       	sbi	0x12, 7	; 18
      time_alarm = 0;
    2030:	10 92 2d 05 	sts	0x052D, r1
	  if (ds_cnt_show < TIME_SHOW_DS_1) ds_cnt_show = TIME_SHOW_DS_1; else ds_cnt_show = 0;
    2034:	80 91 32 05 	lds	r24, 0x0532
    2038:	88 30       	cpi	r24, 0x08	; 8
    203a:	20 f4       	brcc	.+8      	; 0x2044 <run_mute+0x38>
    203c:	88 e0       	ldi	r24, 0x08	; 8
    203e:	80 93 32 05 	sts	0x0532, r24
    2042:	08 95       	ret
    2044:	10 92 32 05 	sts	0x0532, r1
    2048:	08 95       	ret
    break;
    case EVENT_NOKEY:
	  LIGHT_off();
    204a:	ac 98       	cbi	0x15, 4	; 21
    break;
    204c:	08 95       	ret
    case EVENT_KEY_MUTE:
    case EVENT_KEY_MENU:
	  LIGHT_on();
    204e:	ac 9a       	sbi	0x15, 4	; 21
	  nokey = 0;
    2050:	10 92 25 05 	sts	0x0525, r1
	  LCD_clear();
    2054:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    2058:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
      LED_MUTE_DUBLE_1;
    205c:	df 9a       	sbi	0x1b, 7	; 27
	  mute = 0;
    205e:	10 92 2a 05 	sts	0x052A, r1
      tda7313SetMute(0);
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
      SET_STATE(run_main);
    2068:	84 e7       	ldi	r24, 0x74	; 116
    206a:	9e e0       	ldi	r25, 0x0E	; 14
    206c:	90 93 a6 00 	sts	0x00A6, r25
    2070:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_main();
    2074:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
    break;
    2078:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_bigtime();
    207a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <show_bigtime>
	  show_temperature();
    207e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <show_temperature>
	  alarm_beep();
    2082:	0e 94 10 0a 	call	0x1420	; 0x1420 <alarm_beep>
    2086:	08 95       	ret

00002088 <volume_step_down>:
  }
  sei();
}
//=============================================================================
void volume_step_down(void)
{
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
  uint8_t vol_down, i;
  vol_down = tda7313Get_Param(TDA_VOLUME);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    2094:	08 2f       	mov	r16, r24
  show_lcd_main();
    2096:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
  cli();
    209a:	f8 94       	cli
  for(i = vol_down; i > 0; i--)
    209c:	10 2f       	mov	r17, r16
    209e:	23 c0       	rjmp	.+70     	; 0x20e6 <volume_step_down+0x5e>
  {
    tda7313Set_Param_down(TDA_VOLUME);
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	0e 94 1f 21 	call	0x423e	; 0x423e <tda7313Set_Param_down>
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    20a6:	82 e1       	ldi	r24, 0x12	; 18
    20a8:	62 e0       	ldi	r22, 0x02	; 2
    20aa:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    20ae:	80 91 26 05 	lds	r24, 0x0526
    20b2:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	62 e0       	ldi	r22, 0x02	; 2
    20ba:	40 e3       	ldi	r20, 0x30	; 48
    20bc:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	63 e0       	ldi	r22, 0x03	; 3
    20c4:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    20c8:	80 91 26 05 	lds	r24, 0x0526
    20cc:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    20d0:	f8 2e       	mov	r15, r24
    20d2:	80 91 26 05 	lds	r24, 0x0526
    20d6:	0e 94 4f 20 	call	0x409e	; 0x409e <tda7313Get_Max_Param>
    20da:	68 2f       	mov	r22, r24
    20dc:	8f 2d       	mov	r24, r15
    20de:	44 e1       	ldi	r20, 0x14	; 20
    20e0:	0e 94 82 01 	call	0x304	; 0x304 <LCD_progress_bar>
{
  uint8_t vol_down, i;
  vol_down = tda7313Get_Param(TDA_VOLUME);
  show_lcd_main();
  cli();
  for(i = vol_down; i > 0; i--)
    20e4:	11 50       	subi	r17, 0x01	; 1
    20e6:	11 23       	and	r17, r17
    20e8:	d9 f6       	brne	.-74     	; 0x20a0 <volume_step_down+0x18>
  {
    tda7313Set_Param_down(TDA_VOLUME);
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
  }
  tda7313Set_Param_no_send(TDA_VOLUME, vol_down);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	60 2f       	mov	r22, r16
    20ee:	0e 94 41 20 	call	0x4082	; 0x4082 <tda7313Set_Param_no_send>
  sei();
    20f2:	78 94       	sei
}
    20f4:	1f 91       	pop	r17
    20f6:	0f 91       	pop	r16
    20f8:	ff 90       	pop	r15
    20fa:	08 95       	ret

000020fc <run_stop>:
  }
}
//=============================================================================
void run_stop(unsigned char event)
{
  switch(event) {
    20fc:	85 3a       	cpi	r24, 0xA5	; 165
    20fe:	51 f0       	breq	.+20     	; 0x2114 <run_stop+0x18>
    2100:	86 3a       	cpi	r24, 0xA6	; 166
    2102:	18 f4       	brcc	.+6      	; 0x210a <run_stop+0xe>
    2104:	89 39       	cpi	r24, 0x99	; 153
    2106:	f1 f5       	brne	.+124    	; 0x2184 <run_stop+0x88>
    2108:	0c c0       	rjmp	.+24     	; 0x2122 <run_stop+0x26>
    210a:	8a 3a       	cpi	r24, 0xAA	; 170
    210c:	01 f1       	breq	.+64     	; 0x214e <run_stop+0x52>
    210e:	8c 3a       	cpi	r24, 0xAC	; 172
    2110:	c9 f5       	brne	.+114    	; 0x2184 <run_stop+0x88>
    2112:	11 c0       	rjmp	.+34     	; 0x2136 <run_stop+0x3a>
    case EVENT_SAVE_PARAM:
      main_mode = MODE_STANDBY;
    2114:	10 92 31 05 	sts	0x0531, r1
	  LED_STANDBY_on();
    2118:	c0 98       	cbi	0x18, 0	; 24
      RTOS_setTask(EVENT_SHOW_VOL_DOWN, 0, 0);
    211a:	89 e9       	ldi	r24, 0x99	; 153
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	11 c0       	rjmp	.+34     	; 0x2144 <run_stop+0x48>
    break;
    case EVENT_SHOW_VOL_DOWN:
	  if (mute == 0) {
    2122:	80 91 2a 05 	lds	r24, 0x052A
    2126:	88 23       	and	r24, r24
    2128:	11 f4       	brne	.+4      	; 0x212e <run_stop+0x32>
	    volume_step_down();
    212a:	0e 94 44 10 	call	0x2088	; 0x2088 <volume_step_down>
      }
      RTOS_setTask(EVENT_SET_AS_WAIT_OFF, 100, 0);
    212e:	8c ea       	ldi	r24, 0xAC	; 172
    2130:	64 e6       	ldi	r22, 0x64	; 100
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	07 c0       	rjmp	.+14     	; 0x2144 <run_stop+0x48>
    break;
    case EVENT_SET_AS_WAIT_OFF:
      tda7313SetMute(1);
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
	  LED_AC_WAIT_off();
    213c:	c3 98       	cbi	0x18, 3	; 24
      RTOS_setTask(EVENT_SET_STB_OUT_OFF, 400, 0);
    213e:	8a ea       	ldi	r24, 0xAA	; 170
    2140:	60 e9       	ldi	r22, 0x90	; 144
    2142:	71 e0       	ldi	r23, 0x01	; 1
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    214c:	08 95       	ret
    case EVENT_SET_STB_OUT_OFF:
      LED_STANDBY_on();
    214e:	c0 98       	cbi	0x18, 0	; 24
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    2150:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	11 f4       	brne	.+4      	; 0x215c <run_stop+0x60>
    2158:	c2 9a       	sbi	0x18, 2	; 24
    215a:	01 c0       	rjmp	.+2      	; 0x215e <run_stop+0x62>
    215c:	c2 98       	cbi	0x18, 2	; 24
	  LCD_clear();
    215e:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    2162:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
	  mmenu = MM_VOLUME;
    2166:	10 92 26 05 	sts	0x0526, r1
      SET_STATE(run_standby);
    216a:	80 e6       	ldi	r24, 0x60	; 96
    216c:	92 e1       	ldi	r25, 0x12	; 18
    216e:	90 93 a6 00 	sts	0x00A6, r25
    2172:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    2176:	8d ef       	ldi	r24, 0xFD	; 253
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	70 e0       	ldi	r23, 0x00	; 0
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    2184:	08 95       	ret

00002186 <volume_step_up>:
    }
  }
}
//=============================================================================
void volume_step_up(void)
{
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
  unsigned char i;
  vol_up = tda7313Get_Param(TDA_VOLUME);
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    2190:	80 93 93 05 	sts	0x0593, r24
  tda7313Set_Param(TDA_VOLUME, 0);
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	60 e0       	ldi	r22, 0x00	; 0
    2198:	0e 94 4c 21 	call	0x4298	; 0x4298 <tda7313Set_Param>
  show_lcd_main();
    219c:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
  cli();
    21a0:	f8 94       	cli
  for(i = 0; i < vol_up; i++)
    21a2:	10 e0       	ldi	r17, 0x00	; 0
    21a4:	23 c0       	rjmp	.+70     	; 0x21ec <volume_step_up+0x66>
  {
    tda7313Set_Param_up(TDA_VOLUME);
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	0e 94 33 21 	call	0x4266	; 0x4266 <tda7313Set_Param_up>
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    21ac:	82 e1       	ldi	r24, 0x12	; 18
    21ae:	62 e0       	ldi	r22, 0x02	; 2
    21b0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    21b4:	80 91 26 05 	lds	r24, 0x0526
    21b8:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	62 e0       	ldi	r22, 0x02	; 2
    21c0:	40 e3       	ldi	r20, 0x30	; 48
    21c2:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	63 e0       	ldi	r22, 0x03	; 3
    21ca:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    21ce:	80 91 26 05 	lds	r24, 0x0526
    21d2:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    21d6:	08 2f       	mov	r16, r24
    21d8:	80 91 26 05 	lds	r24, 0x0526
    21dc:	0e 94 4f 20 	call	0x409e	; 0x409e <tda7313Get_Max_Param>
    21e0:	68 2f       	mov	r22, r24
    21e2:	80 2f       	mov	r24, r16
    21e4:	44 e1       	ldi	r20, 0x14	; 20
    21e6:	0e 94 82 01 	call	0x304	; 0x304 <LCD_progress_bar>
  unsigned char i;
  vol_up = tda7313Get_Param(TDA_VOLUME);
  tda7313Set_Param(TDA_VOLUME, 0);
  show_lcd_main();
  cli();
  for(i = 0; i < vol_up; i++)
    21ea:	1f 5f       	subi	r17, 0xFF	; 255
    21ec:	80 91 93 05 	lds	r24, 0x0593
    21f0:	18 17       	cp	r17, r24
    21f2:	c8 f2       	brcs	.-78     	; 0x21a6 <volume_step_up+0x20>
  {
    tda7313Set_Param_up(TDA_VOLUME);
    LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
  }
  sei();
    21f4:	78 94       	sei
}
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	08 95       	ret

000021fc <run_start>:
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
}
//=============================================================================
void run_start(unsigned char event)
{
  switch(event) {
    21fc:	89 3a       	cpi	r24, 0xA9	; 169
    21fe:	09 f4       	brne	.+2      	; 0x2202 <run_start+0x6>
    2200:	42 c0       	rjmp	.+132    	; 0x2286 <run_start+0x8a>
    2202:	8a 3a       	cpi	r24, 0xAA	; 170
    2204:	20 f4       	brcc	.+8      	; 0x220e <run_start+0x12>
    2206:	8a 39       	cpi	r24, 0x9A	; 154
    2208:	09 f0       	breq	.+2      	; 0x220c <run_start+0x10>
    220a:	74 c0       	rjmp	.+232    	; 0x22f4 <run_start+0xf8>
    220c:	5a c0       	rjmp	.+180    	; 0x22c2 <run_start+0xc6>
    220e:	8b 3a       	cpi	r24, 0xAB	; 171
    2210:	09 f4       	brne	.+2      	; 0x2214 <run_start+0x18>
    2212:	4e c0       	rjmp	.+156    	; 0x22b0 <run_start+0xb4>
    2214:	8d 3a       	cpi	r24, 0xAD	; 173
    2216:	09 f0       	breq	.+2      	; 0x221a <run_start+0x1e>
    2218:	6d c0       	rjmp	.+218    	; 0x22f4 <run_start+0xf8>
    case EVENT_LOAD_PARAM:
	  LCD_SetXY(0, 2); LCD_space(20);
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	62 e0       	ldi	r22, 0x02	; 2
    221e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2222:	84 e1       	ldi	r24, 0x14	; 20
    2224:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
	  LCD_SetXY(0, 3); LCD_space(20);
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	63 e0       	ldi	r22, 0x03	; 3
    222c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2230:	84 e1       	ldi	r24, 0x14	; 20
    2232:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
      LCD_SetXY(3, 3); LCD_puts(MSG_LOAD_PARAM);
    2236:	83 e0       	ldi	r24, 0x03	; 3
    2238:	63 e0       	ldi	r22, 0x03	; 3
    223a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    223e:	8a ed       	ldi	r24, 0xDA	; 218
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
      tuner_SetChan(tuner_GetChan(channel));
    2246:	80 91 30 05 	lds	r24, 0x0530
    224a:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    224e:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
	  fault_on = 0; 
    2252:	10 92 2e 05 	sts	0x052E, r1
      rc5_buffer_init();
    2256:	0e 94 22 0a 	call	0x1444	; 0x1444 <rc5_buffer_init>
	  load_rc5code();
    225a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <load_rc5code>
	  load_alarm_param();
    225e:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <load_alarm_param>
      load_max_temperature();
    2262:	0e 94 35 0b 	call	0x166a	; 0x166a <load_max_temperature>
      load_stb_out();
    2266:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
      load_as_wait();
    226a:	0e 94 25 0b 	call	0x164a	; 0x164a <load_as_wait>
	  tuner_Load_all_stations();
    226e:	0e 94 90 23 	call	0x4720	; 0x4720 <tuner_Load_all_stations>
      channel = tuner_Load_channel();
    2272:	0e 94 ad 23 	call	0x475a	; 0x475a <tuner_Load_channel>
    2276:	80 93 30 05 	sts	0x0530, r24
      tda7313_Load_all_param();
    227a:	0e 94 01 22 	call	0x4402	; 0x4402 <tda7313_Load_all_param>
      RTOS_setTask(EVENT_SET_STB_OUT_ON, 0, 0);
    227e:	89 ea       	ldi	r24, 0xA9	; 169
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	19 c0       	rjmp	.+50     	; 0x22b8 <run_start+0xbc>
    break;
    case EVENT_SET_STB_OUT_ON:
      if (load_stb_out() == 1) { LED_STB_OUT_0; } else { LED_STB_OUT_1; }
    2286:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	11 f4       	brne	.+4      	; 0x2292 <run_start+0x96>
    228e:	c2 98       	cbi	0x18, 2	; 24
    2290:	01 c0       	rjmp	.+2      	; 0x2294 <run_start+0x98>
    2292:	c2 9a       	sbi	0x18, 2	; 24
      RTOS_setTask(EVENT_SET_AS_WAIT_ON, (as_wait * 1000), 0);
    2294:	20 91 9f 05 	lds	r18, 0x059F
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	88 ee       	ldi	r24, 0xE8	; 232
    229c:	93 e0       	ldi	r25, 0x03	; 3
    229e:	28 9f       	mul	r18, r24
    22a0:	b0 01       	movw	r22, r0
    22a2:	29 9f       	mul	r18, r25
    22a4:	70 0d       	add	r23, r0
    22a6:	38 9f       	mul	r19, r24
    22a8:	70 0d       	add	r23, r0
    22aa:	11 24       	eor	r1, r1
    22ac:	8b ea       	ldi	r24, 0xAB	; 171
    22ae:	04 c0       	rjmp	.+8      	; 0x22b8 <run_start+0xbc>
    break;
    case EVENT_SET_AS_WAIT_ON:
	  LED_AC_WAIT_on();
    22b0:	c3 9a       	sbi	0x18, 3	; 24
      RTOS_setTask(EVENT_SHOW_VOL_UP, 300, 0);
    22b2:	8a e9       	ldi	r24, 0x9A	; 154
    22b4:	6c e2       	ldi	r22, 0x2C	; 44
    22b6:	71 e0       	ldi	r23, 0x01	; 1
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	50 e0       	ldi	r21, 0x00	; 0
    22bc:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    22c0:	08 95       	ret
    case EVENT_SHOW_VOL_UP:
      LED_STANDBY_off();
    22c2:	c0 9a       	sbi	0x18, 0	; 24
	  LCD_clear();
    22c4:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    22c8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
	  mute = 0;
    22cc:	10 92 2a 05 	sts	0x052A, r1
      tda7313SetMute(0);
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
      volume_step_up();
    22d6:	0e 94 c3 10 	call	0x2186	; 0x2186 <volume_step_up>
      main_mode = MODE_MAIN;
    22da:	83 e0       	ldi	r24, 0x03	; 3
    22dc:	80 93 31 05 	sts	0x0531, r24
      show_lcd_main();
    22e0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
	  nokey = 0;
    22e4:	10 92 25 05 	sts	0x0525, r1
      SET_STATE(run_main);
    22e8:	84 e7       	ldi	r24, 0x74	; 116
    22ea:	9e e0       	ldi	r25, 0x0E	; 14
    22ec:	90 93 a6 00 	sts	0x00A6, r25
    22f0:	80 93 a5 00 	sts	0x00A5, r24
    22f4:	08 95       	ret

000022f6 <show_lcd_option>:
    break;
  }
}
//=============================================================================
void show_lcd_option(void)
{
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
  uint8_t i;
  LCD_SetXY(0, 0); LCD_puts(MSG_MENU_OPTIONS);
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2306:	8a ee       	ldi	r24, 0xEA	; 234
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(0, 2); LCD_puts(optionmenu[omenu]);
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	62 e0       	ldi	r22, 0x02	; 2
    2312:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2316:	e0 91 27 05 	lds	r30, 0x0527
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	ea 53       	subi	r30, 0x3A	; 58
    2322:	fd 4f       	sbci	r31, 0xFD	; 253
    2324:	80 81       	ld	r24, Z
    2326:	91 81       	ldd	r25, Z+1	; 0x01
    2328:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  switch(omenu) {
    232c:	80 91 27 05 	lds	r24, 0x0527
    2330:	83 30       	cpi	r24, 0x03	; 3
    2332:	09 f4       	brne	.+2      	; 0x2336 <show_lcd_option+0x40>
    2334:	7c c0       	rjmp	.+248    	; 0x242e <show_lcd_option+0x138>
    2336:	84 30       	cpi	r24, 0x04	; 4
    2338:	28 f4       	brcc	.+10     	; 0x2344 <show_lcd_option+0x4e>
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	b9 f0       	breq	.+46     	; 0x236c <show_lcd_option+0x76>
    233e:	82 30       	cpi	r24, 0x02	; 2
    2340:	f8 f4       	brcc	.+62     	; 0x2380 <show_lcd_option+0x8a>
    2342:	0d c0       	rjmp	.+26     	; 0x235e <show_lcd_option+0x68>
    2344:	85 30       	cpi	r24, 0x05	; 5
    2346:	09 f4       	brne	.+2      	; 0x234a <show_lcd_option+0x54>
    2348:	8f c0       	rjmp	.+286    	; 0x2468 <show_lcd_option+0x172>
    234a:	85 30       	cpi	r24, 0x05	; 5
    234c:	08 f4       	brcc	.+2      	; 0x2350 <show_lcd_option+0x5a>
    234e:	7c c0       	rjmp	.+248    	; 0x2448 <show_lcd_option+0x152>
    2350:	86 30       	cpi	r24, 0x06	; 6
    2352:	09 f4       	brne	.+2      	; 0x2356 <show_lcd_option+0x60>
    2354:	99 c0       	rjmp	.+306    	; 0x2488 <show_lcd_option+0x192>
    2356:	87 30       	cpi	r24, 0x07	; 7
    2358:	09 f0       	breq	.+2      	; 0x235c <show_lcd_option+0x66>
    235a:	9b c0       	rjmp	.+310    	; 0x2492 <show_lcd_option+0x19c>
    235c:	97 c0       	rjmp	.+302    	; 0x248c <show_lcd_option+0x196>
    case OM_SET_TIME:
	  LCD_SetXY(10, 2); RTC_print_time(); LCD_space(3);
    235e:	8a e0       	ldi	r24, 0x0A	; 10
    2360:	62 e0       	ldi	r22, 0x02	; 2
    2362:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2366:	0e 94 17 05 	call	0xa2e	; 0xa2e <RTC_print_time>
    236a:	7c c0       	rjmp	.+248    	; 0x2464 <show_lcd_option+0x16e>
    break;
    case OM_SET_DATE:
	  LCD_SetXY(10, 2); RTC_print_date(); LCD_dat(' ');
    236c:	8a e0       	ldi	r24, 0x0A	; 10
    236e:	62 e0       	ldi	r22, 0x02	; 2
    2370:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2374:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <RTC_print_date>
    2378:	80 e2       	ldi	r24, 0x20	; 32
    237a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    break;
    237e:	89 c0       	rjmp	.+274    	; 0x2492 <show_lcd_option+0x19c>
    case OM_SET_ALARM:
	  LCD_SetXY(17, 1); LCD_puts(alarm_onoff[a_onoff]);
    2380:	81 e1       	ldi	r24, 0x11	; 17
    2382:	61 e0       	ldi	r22, 0x01	; 1
    2384:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2388:	e0 91 94 05 	lds	r30, 0x0594
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	e2 52       	subi	r30, 0x22	; 34
    2394:	fd 4f       	sbci	r31, 0xFD	; 253
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
	  LCD_SetXY(12, 2);
    239e:	8c e0       	ldi	r24, 0x0C	; 12
    23a0:	62 e0       	ldi	r22, 0x02	; 2
    23a2:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    23a6:	80 91 cb 05 	lds	r24, 0x05CB
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	62 e0       	ldi	r22, 0x02	; 2
    23ae:	40 e3       	ldi	r20, 0x30	; 48
    23b0:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    23b4:	8a e3       	ldi	r24, 0x3A	; 58
    23b6:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    23ba:	80 91 9c 05 	lds	r24, 0x059C
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	62 e0       	ldi	r22, 0x02	; 2
    23c2:	40 e3       	ldi	r20, 0x30	; 48
    23c4:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    23c8:	8a e3       	ldi	r24, 0x3A	; 58
    23ca:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	62 e0       	ldi	r22, 0x02	; 2
    23d4:	40 e3       	ldi	r20, 0x30	; 48
    23d6:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    23da:	80 e2       	ldi	r24, 0x20	; 32
    23dc:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  LCD_SetXY(0, 3);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	63 e0       	ldi	r22, 0x03	; 3
    23e4:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    23e8:	05 e5       	ldi	r16, 0x55	; 85
    23ea:	11 e0       	ldi	r17, 0x01	; 1
    23ec:	c0 e0       	ldi	r28, 0x00	; 0
    23ee:	d0 e0       	ldi	r29, 0x00	; 0
      for(i = 0; i < 7; i++) {
	    if (BitIsSet(a_wday, i)) {
    23f0:	80 91 9a 05 	lds	r24, 0x059A
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0c 2e       	mov	r0, r28
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <show_lcd_option+0x108>
    23fa:	95 95       	asr	r25
    23fc:	87 95       	ror	r24
    23fe:	0a 94       	dec	r0
    2400:	e2 f7       	brpl	.-8      	; 0x23fa <show_lcd_option+0x104>
    2402:	80 ff       	sbrs	r24, 0
    2404:	04 c0       	rjmp	.+8      	; 0x240e <show_lcd_option+0x118>
		  LCD_puts(den_dw[i]); 
    2406:	f8 01       	movw	r30, r16
    2408:	80 81       	ld	r24, Z
    240a:	91 81       	ldd	r25, Z+1	; 0x01
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <show_lcd_option+0x11c>
	    } else {
		  LCD_puts("  ");
    240e:	8b ef       	ldi	r24, 0xFB	; 251
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
		}
		if (i < 6) LCD_dat(':');
    2416:	c6 30       	cpi	r28, 0x06	; 6
    2418:	19 f0       	breq	.+6      	; 0x2420 <show_lcd_option+0x12a>
    241a:	8a e3       	ldi	r24, 0x3A	; 58
    241c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2420:	21 96       	adiw	r28, 0x01	; 1
    2422:	0e 5f       	subi	r16, 0xFE	; 254
    2424:	1f 4f       	sbci	r17, 0xFF	; 255
    case OM_SET_ALARM:
	  LCD_SetXY(17, 1); LCD_puts(alarm_onoff[a_onoff]);
	  LCD_SetXY(12, 2);
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
	  LCD_SetXY(0, 3);
      for(i = 0; i < 7; i++) {
    2426:	c7 30       	cpi	r28, 0x07	; 7
    2428:	d1 05       	cpc	r29, r1
    242a:	11 f7       	brne	.-60     	; 0x23f0 <show_lcd_option+0xfa>
    242c:	32 c0       	rjmp	.+100    	; 0x2492 <show_lcd_option+0x19c>
		}
		if (i < 6) LCD_dat(':');
	  }
    break;
    case OM_SET_STANBY_OUT:
	  LCD_SetXY(16, 2); print_dec(stb_out, 1, ' '); LCD_space(4);
    242e:	80 e1       	ldi	r24, 0x10	; 16
    2430:	62 e0       	ldi	r22, 0x02	; 2
    2432:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2436:	80 91 9d 05 	lds	r24, 0x059D
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	61 e0       	ldi	r22, 0x01	; 1
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2444:	84 e0       	ldi	r24, 0x04	; 4
    2446:	23 c0       	rjmp	.+70     	; 0x248e <show_lcd_option+0x198>
    break;
    case OM_SET_TEMP_MAX:
	  LCD_SetXY(14, 2); print_dec(max_temp, 2, ' '); LCD_dat('C'); LCD_space(3);
    2448:	8e e0       	ldi	r24, 0x0E	; 14
    244a:	62 e0       	ldi	r22, 0x02	; 2
    244c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2450:	80 91 ca 05 	lds	r24, 0x05CA
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	62 e0       	ldi	r22, 0x02	; 2
    2458:	40 e2       	ldi	r20, 0x20	; 32
    245a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    245e:	83 e4       	ldi	r24, 0x43	; 67
    2460:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2464:	83 e0       	ldi	r24, 0x03	; 3
    2466:	13 c0       	rjmp	.+38     	; 0x248e <show_lcd_option+0x198>
    break;
    case OM_SET_AS_TIME_ON:
	  LCD_SetXY(15, 2); print_dec(as_wait, 2, ' '); LCD_puts(MSG_SEC); 
    2468:	8f e0       	ldi	r24, 0x0F	; 15
    246a:	62 e0       	ldi	r22, 0x02	; 2
    246c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2470:	80 91 9f 05 	lds	r24, 0x059F
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	62 e0       	ldi	r22, 0x02	; 2
    2478:	40 e2       	ldi	r20, 0x20	; 32
    247a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    247e:	8e ef       	ldi	r24, 0xFE	; 254
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    break;
    2486:	05 c0       	rjmp	.+10     	; 0x2492 <show_lcd_option+0x19c>
    case OM_SET_FM_STATIONS:
	  LCD_space(5);
    2488:	85 e0       	ldi	r24, 0x05	; 5
    248a:	01 c0       	rjmp	.+2      	; 0x248e <show_lcd_option+0x198>
    break;
    case OM_SET_RC5_CODE:
	  LCD_space(7);
    248c:	87 e0       	ldi	r24, 0x07	; 7
    248e:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    break;
  }
  if (omenu != OM_SET_ALARM) { 
    2492:	80 91 27 05 	lds	r24, 0x0527
    2496:	82 30       	cpi	r24, 0x02	; 2
    2498:	71 f0       	breq	.+28     	; 0x24b6 <show_lcd_option+0x1c0>
    LCD_SetXY(0, 3); LCD_space(20);
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	63 e0       	ldi	r22, 0x03	; 3
    249e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    24a2:	84 e1       	ldi	r24, 0x14	; 20
    24a4:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    LCD_SetXY(16, 1); LCD_space(4);
    24a8:	80 e1       	ldi	r24, 0x10	; 16
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    24b0:	84 e0       	ldi	r24, 0x04	; 4
    24b2:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
  }
}
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	08 95       	ret

000024c0 <run_standby>:
  }
}
//=============================================================================
void run_standby(unsigned char event)
{
  switch(event) {
    24c0:	81 3a       	cpi	r24, 0xA1	; 161
    24c2:	41 f1       	breq	.+80     	; 0x2514 <run_standby+0x54>
    24c4:	82 3a       	cpi	r24, 0xA2	; 162
    24c6:	98 f4       	brcc	.+38     	; 0x24ee <run_standby+0x2e>
    24c8:	87 39       	cpi	r24, 0x97	; 151
    24ca:	09 f4       	brne	.+2      	; 0x24ce <run_standby+0xe>
    24cc:	4e c0       	rjmp	.+156    	; 0x256a <run_standby+0xaa>
    24ce:	88 39       	cpi	r24, 0x98	; 152
    24d0:	38 f4       	brcc	.+14     	; 0x24e0 <run_standby+0x20>
    24d2:	84 36       	cpi	r24, 0x64	; 100
    24d4:	09 f4       	brne	.+2      	; 0x24d8 <run_standby+0x18>
    24d6:	a4 c0       	rjmp	.+328    	; 0x2620 <run_standby+0x160>
    24d8:	8c 36       	cpi	r24, 0x6C	; 108
    24da:	09 f0       	breq	.+2      	; 0x24de <run_standby+0x1e>
    24dc:	df c0       	rjmp	.+446    	; 0x269c <run_standby+0x1dc>
    24de:	ca c0       	rjmp	.+404    	; 0x2674 <run_standby+0x1b4>
    24e0:	8c 39       	cpi	r24, 0x9C	; 156
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <run_standby+0x26>
    24e4:	80 c0       	rjmp	.+256    	; 0x25e6 <run_standby+0x126>
    24e6:	80 3a       	cpi	r24, 0xA0	; 160
    24e8:	09 f0       	breq	.+2      	; 0x24ec <run_standby+0x2c>
    24ea:	d8 c0       	rjmp	.+432    	; 0x269c <run_standby+0x1dc>
    24ec:	7e c0       	rjmp	.+252    	; 0x25ea <run_standby+0x12a>
    24ee:	82 3b       	cpi	r24, 0xB2	; 178
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <run_standby+0x34>
    24f2:	ac c0       	rjmp	.+344    	; 0x264c <run_standby+0x18c>
    24f4:	83 3b       	cpi	r24, 0xB3	; 179
    24f6:	38 f4       	brcc	.+14     	; 0x2506 <run_standby+0x46>
    24f8:	8e 3a       	cpi	r24, 0xAE	; 174
    24fa:	09 f4       	brne	.+2      	; 0x24fe <run_standby+0x3e>
    24fc:	47 c0       	rjmp	.+142    	; 0x258c <run_standby+0xcc>
    24fe:	81 3b       	cpi	r24, 0xB1	; 177
    2500:	09 f0       	breq	.+2      	; 0x2504 <run_standby+0x44>
    2502:	cc c0       	rjmp	.+408    	; 0x269c <run_standby+0x1dc>
    2504:	9d c0       	rjmp	.+314    	; 0x2640 <run_standby+0x180>
    2506:	83 3b       	cpi	r24, 0xB3	; 179
    2508:	09 f4       	brne	.+2      	; 0x250c <run_standby+0x4c>
    250a:	a6 c0       	rjmp	.+332    	; 0x2658 <run_standby+0x198>
    250c:	8d 3f       	cpi	r24, 0xFD	; 253
    250e:	09 f0       	breq	.+2      	; 0x2512 <run_standby+0x52>
    2510:	c5 c0       	rjmp	.+394    	; 0x269c <run_standby+0x1dc>
    2512:	7a c0       	rjmp	.+244    	; 0x2608 <run_standby+0x148>
    case EVENT_START:
	  fault_on = 0; 
    2514:	10 92 2e 05 	sts	0x052E, r1
      LCD_SetXY(2, 0); LCD_puts(MSG_LOGO1);
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	91 e0       	ldi	r25, 0x01	; 1
    2524:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
      LCD_SetXY(4, 1); LCD_puts(MSG_LOGO2);
    2528:	84 e0       	ldi	r24, 0x04	; 4
    252a:	61 e0       	ldi	r22, 0x01	; 1
    252c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2530:	82 e1       	ldi	r24, 0x12	; 18
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
      tda7313SetMute(1);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
      rc5_buffer_init();
    253e:	0e 94 22 0a 	call	0x1444	; 0x1444 <rc5_buffer_init>
	  load_rc5code();
    2542:	0e 94 bb 0a 	call	0x1576	; 0x1576 <load_rc5code>
	  load_alarm_param();
    2546:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <load_alarm_param>
      load_max_temperature();
    254a:	0e 94 35 0b 	call	0x166a	; 0x166a <load_max_temperature>
      load_stb_out();
    254e:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
      load_as_wait();
    2552:	0e 94 25 0b 	call	0x164a	; 0x164a <load_as_wait>
	  tuner_Load_all_stations();
    2556:	0e 94 90 23 	call	0x4720	; 0x4720 <tuner_Load_all_stations>
      channel = tuner_Load_channel();
    255a:	0e 94 ad 23 	call	0x475a	; 0x475a <tuner_Load_channel>
    255e:	80 93 30 05 	sts	0x0530, r24
      tda7313_Load_all_param();
    2562:	0e 94 01 22 	call	0x4402	; 0x4402 <tda7313_Load_all_param>
      RTOS_setTask(EVENT_SHOW_DS_CNT, 500, 0);
    2566:	87 e9       	ldi	r24, 0x97	; 151
    2568:	74 c0       	rjmp	.+232    	; 0x2652 <run_standby+0x192>
    break;
    case EVENT_SHOW_DS_CNT:
      LCD_SetXY(1, 3); LCD_puts(MSG_DS_FOUND); print_dec(ds18x20GetDevCount(), 2,'0');
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	63 e0       	ldi	r22, 0x03	; 3
    256e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2572:	8e e1       	ldi	r24, 0x1E	; 30
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    257a:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <ds18x20GetDevCount>
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	62 e0       	ldi	r22, 0x02	; 2
    2582:	40 e3       	ldi	r20, 0x30	; 48
    2584:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
      RTOS_setTask(EVENT_START_TASK, 500, 0);
    2588:	8e ea       	ldi	r24, 0xAE	; 174
    258a:	63 c0       	rjmp	.+198    	; 0x2652 <run_standby+0x192>
    break;
    case EVENT_START_TASK:
      RTOS_setTaskFunc(set_blink, 0, BLINK_TIME);       // моргание
    258c:	84 e3       	ldi	r24, 0x34	; 52
    258e:	9b e1       	ldi	r25, 0x1B	; 27
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	44 ef       	ldi	r20, 0xF4	; 244
    2596:	51 e0       	ldi	r21, 0x01	; 1
    2598:	0e 94 81 07 	call	0xf02	; 0xf02 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(KBD_scan, 0, KBD_SCAN_TIME);		// запускаем опрос кнопок
    259c:	8a e6       	ldi	r24, 0x6A	; 106
    259e:	96 e0       	ldi	r25, 0x06	; 6
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	45 e0       	ldi	r20, 0x05	; 5
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	0e 94 81 07 	call	0xf02	; 0xf02 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(ENC_scan, 0, ENC_SCAN_TIME);		// запускаем опрос енкодера
    25ac:	83 ec       	ldi	r24, 0xC3	; 195
    25ae:	96 e0       	ldi	r25, 0x06	; 6
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	0e 94 81 07 	call	0xf02	; 0xf02 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(RC5_scan, 0, RC5_SCAN_TIME);		// запускаем опрос RC5
    25bc:	8f e3       	ldi	r24, 0x3F	; 63
    25be:	9a e0       	ldi	r25, 0x0A	; 10
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	45 e0       	ldi	r20, 0x05	; 5
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	0e 94 81 07 	call	0xf02	; 0xf02 <RTOS_setTaskFunc>
      RTOS_setTaskFunc(DS18x20_scan, 0, 0);      		// запускаем опрос датчиков температуры
    25cc:	82 ee       	ldi	r24, 0xE2	; 226
    25ce:	98 e0       	ldi	r25, 0x08	; 8
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	0e 94 81 07 	call	0xf02	; 0xf02 <RTOS_setTaskFunc>
	  LCD_clear();
    25dc:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    25e0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
    break;
    25e4:	08 95       	ret
    case EVENT_NOKEY:
	  LIGHT_off();
    25e6:	ac 98       	cbi	0x15, 4	; 21
    break;
    25e8:	08 95       	ret
    case EVENT_KEY_PRESS:
	  nokey = 0;
    25ea:	10 92 25 05 	sts	0x0525, r1
	  LIGHT_on();
    25ee:	ac 9a       	sbi	0x15, 4	; 21
	  BEEP_off();
    25f0:	97 9a       	sbi	0x12, 7	; 18
	  if (ds_cnt_show < TIME_SHOW_DS_1) ds_cnt_show = TIME_SHOW_DS_1; else ds_cnt_show = 0;
    25f2:	80 91 32 05 	lds	r24, 0x0532
    25f6:	88 30       	cpi	r24, 0x08	; 8
    25f8:	20 f4       	brcc	.+8      	; 0x2602 <run_standby+0x142>
    25fa:	88 e0       	ldi	r24, 0x08	; 8
    25fc:	80 93 32 05 	sts	0x0532, r24
    2600:	08 95       	ret
    2602:	10 92 32 05 	sts	0x0532, r1
    2606:	08 95       	ret
    break;
    case EVENT_TIMER_SECOND:
      show_bigtime();
    2608:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <show_bigtime>
      if (fault_on == 0) {
    260c:	80 91 2e 05 	lds	r24, 0x052E
    2610:	88 23       	and	r24, r24
    2612:	09 f0       	breq	.+2      	; 0x2616 <run_standby+0x156>
    2614:	43 c0       	rjmp	.+134    	; 0x269c <run_standby+0x1dc>
	    show_temperature();
    2616:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <show_temperature>
	    alarm_beep();
    261a:	0e 94 10 0a 	call	0x1420	; 0x1420 <alarm_beep>
    261e:	08 95       	ret
	  }
    break;
    case EVENT_KEY_STANDBY:
      stb_impuls();
    2620:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  if (fault_on == 0) {
    2624:	80 91 2e 05 	lds	r24, 0x052E
    2628:	88 23       	and	r24, r24
    262a:	41 f4       	brne	.+16     	; 0x263c <run_standby+0x17c>
        SET_STATE(run_start);
    262c:	8e ef       	ldi	r24, 0xFE	; 254
    262e:	90 e1       	ldi	r25, 0x10	; 16
    2630:	90 93 a6 00 	sts	0x00A6, r25
    2634:	80 93 a5 00 	sts	0x00A5, r24
        RTOS_setTask(EVENT_LOAD_PARAM, 0, 0);
    2638:	8d ea       	ldi	r24, 0xAD	; 173
    263a:	15 c0       	rjmp	.+42     	; 0x2666 <run_standby+0x1a6>
	  } else {
	    RTOS_setTask(EVENT_START_IMPULS, 0, 0);
    263c:	81 eb       	ldi	r24, 0xB1	; 177
    263e:	13 c0       	rjmp	.+38     	; 0x2666 <run_standby+0x1a6>
	  }
    break;
    case EVENT_START_IMPULS:
      LED_FAULT_IMPULS0_on();
    2640:	ae 9a       	sbi	0x15, 6	; 21
      LED_FAULT_IMPULS1_on();
    2642:	ad 98       	cbi	0x15, 5	; 21
      RTOS_setTask(EVENT_STOP_IMPULS, 1000, 0);
    2644:	82 eb       	ldi	r24, 0xB2	; 178
    2646:	68 ee       	ldi	r22, 0xE8	; 232
    2648:	73 e0       	ldi	r23, 0x03	; 3
    264a:	0f c0       	rjmp	.+30     	; 0x266a <run_standby+0x1aa>
    break;
    case EVENT_STOP_IMPULS:
      LED_FAULT_IMPULS0_off();
    264c:	ae 98       	cbi	0x15, 6	; 21
      LED_FAULT_IMPULS1_off();
    264e:	ad 9a       	sbi	0x15, 5	; 21
      RTOS_setTask(EVENT_CHECK_FAULT, 500, 0);
    2650:	83 eb       	ldi	r24, 0xB3	; 179
    2652:	64 ef       	ldi	r22, 0xF4	; 244
    2654:	71 e0       	ldi	r23, 0x01	; 1
    2656:	09 c0       	rjmp	.+18     	; 0x266a <run_standby+0x1aa>
    break;
    case EVENT_CHECK_FAULT:
      if (check_fault() == 0) {
    2658:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <check_fault>
    265c:	88 23       	and	r24, r24
    265e:	f1 f4       	brne	.+60     	; 0x269c <run_standby+0x1dc>
        fault_on = 0;
    2660:	10 92 2e 05 	sts	0x052E, r1
        RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    2664:	8d ef       	ldi	r24, 0xFD	; 253
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	70 e0       	ldi	r23, 0x00	; 0
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    2672:	08 95       	ret
      }
    break;
    case EVENT_KEY_MENU:
	  LCD_clear();
    2674:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    2678:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
      tda7313SetMute(1);
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
	  omenu = OM_SET_TIME;
    2682:	10 92 27 05 	sts	0x0527, r1
	  main_mode = MODE_OPTIONS;
    2686:	84 e0       	ldi	r24, 0x04	; 4
    2688:	80 93 31 05 	sts	0x0531, r24
      SET_STATE(run_option);
    268c:	86 e7       	ldi	r24, 0x76	; 118
    268e:	9c e1       	ldi	r25, 0x1C	; 28
    2690:	90 93 a6 00 	sts	0x00A6, r25
    2694:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2698:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
    269c:	08 95       	ret

0000269e <show_lcd_edit_time>:
  }
}
//=============================================================================
void show_lcd_edit_time(void)
{
  LCD_SetXY(10, 2);
    269e:	8a e0       	ldi	r24, 0x0A	; 10
    26a0:	62 e0       	ldi	r22, 0x02	; 2
    26a2:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (nedit == 0)
    26a6:	80 91 29 05 	lds	r24, 0x0529
    26aa:	88 23       	and	r24, r24
    26ac:	31 f5       	brne	.+76     	; 0x26fa <show_lcd_edit_time+0x5c>
  {
	if (blinks == 1) print_dec(hh, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    26ae:	80 91 24 05 	lds	r24, 0x0524
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	41 f4       	brne	.+16     	; 0x26c6 <show_lcd_edit_time+0x28>
    26b6:	80 91 c9 05 	lds	r24, 0x05C9
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	62 e0       	ldi	r22, 0x02	; 2
    26be:	40 e3       	ldi	r20, 0x30	; 48
    26c0:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    26c4:	06 c0       	rjmp	.+12     	; 0x26d2 <show_lcd_edit_time+0x34>
    26c6:	80 e2       	ldi	r24, 0x20	; 32
    26c8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    26cc:	80 e2       	ldi	r24, 0x20	; 32
    26ce:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_dat(':'); print_dec(mm, 2, '0'); LCD_dat(':'); print_dec(0, 2, '0');
    26d2:	8a e3       	ldi	r24, 0x3A	; 58
    26d4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    26d8:	80 91 92 05 	lds	r24, 0x0592
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	62 e0       	ldi	r22, 0x02	; 2
    26e0:	40 e3       	ldi	r20, 0x30	; 48
    26e2:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    26e6:	8a e3       	ldi	r24, 0x3A	; 58
    26e8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	40 e3       	ldi	r20, 0x30	; 48
    26f4:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    26f8:	08 95       	ret
  } else if (nedit == 1) {
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	29 f5       	brne	.+74     	; 0x2748 <show_lcd_edit_time+0xaa>
    print_dec(hh, 2, '0'); LCD_dat(':');
    26fe:	80 91 c9 05 	lds	r24, 0x05C9
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	62 e0       	ldi	r22, 0x02	; 2
    2706:	40 e3       	ldi	r20, 0x30	; 48
    2708:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    270c:	8a e3       	ldi	r24, 0x3A	; 58
    270e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	if (blinks == 1) print_dec(mm, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    2712:	80 91 24 05 	lds	r24, 0x0524
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	41 f4       	brne	.+16     	; 0x272a <show_lcd_edit_time+0x8c>
    271a:	80 91 92 05 	lds	r24, 0x0592
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	62 e0       	ldi	r22, 0x02	; 2
    2722:	40 e3       	ldi	r20, 0x30	; 48
    2724:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2728:	06 c0       	rjmp	.+12     	; 0x2736 <show_lcd_edit_time+0x98>
    272a:	80 e2       	ldi	r24, 0x20	; 32
    272c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2730:	80 e2       	ldi	r24, 0x20	; 32
    2732:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_dat(':'); print_dec(0, 2, '0');
    2736:	8a e3       	ldi	r24, 0x3A	; 58
    2738:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	62 e0       	ldi	r22, 0x02	; 2
    2742:	40 e3       	ldi	r20, 0x30	; 48
    2744:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2748:	08 95       	ret

0000274a <run_edit_time>:
  }
}
//=============================================================================
void run_edit_time(unsigned char event)
{
  switch(event) {
    274a:	8b 36       	cpi	r24, 0x6B	; 107
    274c:	09 f4       	brne	.+2      	; 0x2750 <run_edit_time+0x6>
    274e:	53 c0       	rjmp	.+166    	; 0x27f6 <run_edit_time+0xac>
    2750:	8c 36       	cpi	r24, 0x6C	; 108
    2752:	48 f4       	brcc	.+18     	; 0x2766 <run_edit_time+0x1c>
    2754:	87 36       	cpi	r24, 0x67	; 103
    2756:	09 f4       	brne	.+2      	; 0x275a <run_edit_time+0x10>
    2758:	6e c0       	rjmp	.+220    	; 0x2836 <run_edit_time+0xec>
    275a:	8a 36       	cpi	r24, 0x6A	; 106
    275c:	69 f1       	breq	.+90     	; 0x27b8 <run_edit_time+0x6e>
    275e:	84 36       	cpi	r24, 0x64	; 100
    2760:	09 f0       	breq	.+2      	; 0x2764 <run_edit_time+0x1a>
    2762:	8f c0       	rjmp	.+286    	; 0x2882 <run_edit_time+0x138>
    2764:	15 c0       	rjmp	.+42     	; 0x2790 <run_edit_time+0x46>
    2766:	8c 39       	cpi	r24, 0x9C	; 156
    2768:	61 f0       	breq	.+24     	; 0x2782 <run_edit_time+0x38>
    276a:	8d 39       	cpi	r24, 0x9D	; 157
    276c:	20 f4       	brcc	.+8      	; 0x2776 <run_edit_time+0x2c>
    276e:	8c 36       	cpi	r24, 0x6C	; 108
    2770:	09 f0       	breq	.+2      	; 0x2774 <run_edit_time+0x2a>
    2772:	87 c0       	rjmp	.+270    	; 0x2882 <run_edit_time+0x138>
    2774:	7b c0       	rjmp	.+246    	; 0x286c <run_edit_time+0x122>
    2776:	80 3a       	cpi	r24, 0xA0	; 160
    2778:	41 f0       	breq	.+16     	; 0x278a <run_edit_time+0x40>
    277a:	8d 3f       	cpi	r24, 0xFD	; 253
    277c:	09 f0       	breq	.+2      	; 0x2780 <run_edit_time+0x36>
    277e:	81 c0       	rjmp	.+258    	; 0x2882 <run_edit_time+0x138>
    2780:	72 c0       	rjmp	.+228    	; 0x2866 <run_edit_time+0x11c>
    case EVENT_NOKEY:
	  nokey = 0;
    2782:	10 92 25 05 	sts	0x0525, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2786:	8c e6       	ldi	r24, 0x6C	; 108
    2788:	10 c0       	rjmp	.+32     	; 0x27aa <run_edit_time+0x60>
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    278a:	10 92 25 05 	sts	0x0525, r1
    break;
    278e:	08 95       	ret
    case EVENT_KEY_STANDBY:
      stb_impuls();
    2790:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  LCD_clear();
    2794:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    2798:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    279c:	80 e6       	ldi	r24, 0x60	; 96
    279e:	92 e1       	ldi	r25, 0x12	; 18
    27a0:	90 93 a6 00 	sts	0x00A6, r25
    27a4:	80 93 a5 00 	sts	0x00A5, r24
      RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    27a8:	8d ef       	ldi	r24, 0xFD	; 253
    27aa:	60 e0       	ldi	r22, 0x00	; 0
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    27b6:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_time();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_time();
    27be:	0e 94 4f 13 	call	0x269e	; 0x269e <show_lcd_edit_time>
	  if (nedit == 0) { if (hh > 0) hh--;  else hh = 23; } 
    27c2:	80 91 29 05 	lds	r24, 0x0529
    27c6:	88 23       	and	r24, r24
    27c8:	51 f4       	brne	.+20     	; 0x27de <run_edit_time+0x94>
    27ca:	80 91 c9 05 	lds	r24, 0x05C9
    27ce:	88 23       	and	r24, r24
    27d0:	11 f0       	breq	.+4      	; 0x27d6 <run_edit_time+0x8c>
    27d2:	81 50       	subi	r24, 0x01	; 1
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <run_edit_time+0x8e>
    27d6:	87 e1       	ldi	r24, 0x17	; 23
    27d8:	80 93 c9 05 	sts	0x05C9, r24
    27dc:	28 c0       	rjmp	.+80     	; 0x282e <run_edit_time+0xe4>
	  if (nedit == 1) { if (mm > 0) mm--; else mm = 59; }
    27de:	81 30       	cpi	r24, 0x01	; 1
    27e0:	31 f5       	brne	.+76     	; 0x282e <run_edit_time+0xe4>
    27e2:	80 91 92 05 	lds	r24, 0x0592
    27e6:	88 23       	and	r24, r24
    27e8:	11 f0       	breq	.+4      	; 0x27ee <run_edit_time+0xa4>
    27ea:	81 50       	subi	r24, 0x01	; 1
    27ec:	01 c0       	rjmp	.+2      	; 0x27f0 <run_edit_time+0xa6>
    27ee:	8b e3       	ldi	r24, 0x3B	; 59
    27f0:	80 93 92 05 	sts	0x0592, r24
    27f4:	1c c0       	rjmp	.+56     	; 0x282e <run_edit_time+0xe4>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_time();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_time();
    27fc:	0e 94 4f 13 	call	0x269e	; 0x269e <show_lcd_edit_time>
	  if (nedit == 0) { if (hh < 23) hh++;  else hh = 0; } 
    2800:	80 91 29 05 	lds	r24, 0x0529
    2804:	88 23       	and	r24, r24
    2806:	49 f4       	brne	.+18     	; 0x281a <run_edit_time+0xd0>
    2808:	80 91 c9 05 	lds	r24, 0x05C9
    280c:	87 31       	cpi	r24, 0x17	; 23
    280e:	10 f4       	brcc	.+4      	; 0x2814 <run_edit_time+0xca>
    2810:	8f 5f       	subi	r24, 0xFF	; 255
    2812:	e2 cf       	rjmp	.-60     	; 0x27d8 <run_edit_time+0x8e>
    2814:	10 92 c9 05 	sts	0x05C9, r1
    2818:	0a c0       	rjmp	.+20     	; 0x282e <run_edit_time+0xe4>
	  if (nedit == 1) { if (mm < 59) mm++; else mm = 0; }
    281a:	81 30       	cpi	r24, 0x01	; 1
    281c:	41 f4       	brne	.+16     	; 0x282e <run_edit_time+0xe4>
    281e:	80 91 92 05 	lds	r24, 0x0592
    2822:	8b 33       	cpi	r24, 0x3B	; 59
    2824:	10 f4       	brcc	.+4      	; 0x282a <run_edit_time+0xe0>
    2826:	8f 5f       	subi	r24, 0xFF	; 255
    2828:	e3 cf       	rjmp	.-58     	; 0x27f0 <run_edit_time+0xa6>
    282a:	10 92 92 05 	sts	0x0592, r1
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    282e:	8d ef       	ldi	r24, 0xFD	; 253
    2830:	0e 94 f5 07 	call	0xfea	; 0xfea <RTOS_deleteTask>
    2834:	18 c0       	rjmp	.+48     	; 0x2866 <run_edit_time+0x11c>
      show_lcd_edit_time();
    break;
    case EVENT_KEY_SET:
	  if (nedit < 1) {
    2836:	80 91 29 05 	lds	r24, 0x0529
    283a:	88 23       	and	r24, r24
    283c:	21 f4       	brne	.+8      	; 0x2846 <run_edit_time+0xfc>
	    nedit++;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	80 93 29 05 	sts	0x0529, r24
    2844:	10 c0       	rjmp	.+32     	; 0x2866 <run_edit_time+0x11c>
	  } else {
	    nedit = 0;
    2846:	10 92 29 05 	sts	0x0529, r1
        RTC_set_time(hh, mm, 0);
    284a:	80 91 c9 05 	lds	r24, 0x05C9
    284e:	60 91 92 05 	lds	r22, 0x0592
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	0e 94 27 04 	call	0x84e	; 0x84e <RTC_set_time>
        RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2858:	8c e6       	ldi	r24, 0x6C	; 108
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
	  }
      show_lcd_edit_time();
    2866:	0e 94 4f 13 	call	0x269e	; 0x269e <show_lcd_edit_time>
    break;
    286a:	08 95       	ret
    case EVENT_KEY_MENU:
	  edit_rc5 = 1;
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	80 93 2c 05 	sts	0x052C, r24
      SET_STATE(run_option);
    2872:	86 e7       	ldi	r24, 0x76	; 118
    2874:	9c e1       	ldi	r25, 0x1C	; 28
    2876:	90 93 a6 00 	sts	0x00A6, r25
    287a:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    287e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
    2882:	08 95       	ret

00002884 <show_lcd_edit_date>:
  }
}
//=============================================================================
void show_lcd_edit_date(void)
{
  LCD_SetXY(10, 2);
    2884:	8a e0       	ldi	r24, 0x0A	; 10
    2886:	62 e0       	ldi	r22, 0x02	; 2
    2888:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (nedit == 0)
    288c:	80 91 29 05 	lds	r24, 0x0529
    2890:	88 23       	and	r24, r24
    2892:	b1 f4       	brne	.+44     	; 0x28c0 <show_lcd_edit_date+0x3c>
  {
	if (blinks == 1) print_dec(dd, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    2894:	80 91 24 05 	lds	r24, 0x0524
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	41 f4       	brne	.+16     	; 0x28ac <show_lcd_edit_date+0x28>
    289c:	80 91 9b 05 	lds	r24, 0x059B
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	62 e0       	ldi	r22, 0x02	; 2
    28a4:	40 e3       	ldi	r20, 0x30	; 48
    28a6:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    28aa:	06 c0       	rjmp	.+12     	; 0x28b8 <show_lcd_edit_date+0x34>
    28ac:	80 e2       	ldi	r24, 0x20	; 32
    28ae:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    28b2:	80 e2       	ldi	r24, 0x20	; 32
    28b4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_dat('/'); print_dec(ms, 2, '0'); LCD_dat('/'); print_dec(2000 + yy, 4, '0');
    28b8:	8f e2       	ldi	r24, 0x2F	; 47
    28ba:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    28be:	10 c0       	rjmp	.+32     	; 0x28e0 <show_lcd_edit_date+0x5c>
  } else if (nedit == 1) {
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	01 f5       	brne	.+64     	; 0x2904 <show_lcd_edit_date+0x80>
    print_dec(dd, 2, '0'); LCD_dat('/');
    28c4:	80 91 9b 05 	lds	r24, 0x059B
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	62 e0       	ldi	r22, 0x02	; 2
    28cc:	40 e3       	ldi	r20, 0x30	; 48
    28ce:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    28d2:	8f e2       	ldi	r24, 0x2F	; 47
    28d4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	if (blinks == 1) print_dec(ms, 2, '0'); else { LCD_dat(' '); LCD_dat(' '); }
    28d8:	80 91 24 05 	lds	r24, 0x0524
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	41 f4       	brne	.+16     	; 0x28f0 <show_lcd_edit_date+0x6c>
    28e0:	80 91 99 05 	lds	r24, 0x0599
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	62 e0       	ldi	r22, 0x02	; 2
    28e8:	40 e3       	ldi	r20, 0x30	; 48
    28ea:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    28ee:	06 c0       	rjmp	.+12     	; 0x28fc <show_lcd_edit_date+0x78>
    28f0:	80 e2       	ldi	r24, 0x20	; 32
    28f2:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    28f6:	80 e2       	ldi	r24, 0x20	; 32
    28f8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    LCD_dat('/'); print_dec(2000 + yy, 4, '0');
    28fc:	8f e2       	ldi	r24, 0x2F	; 47
    28fe:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2902:	1a c0       	rjmp	.+52     	; 0x2938 <show_lcd_edit_date+0xb4>
  } else if (nedit == 2) {
    2904:	82 30       	cpi	r24, 0x02	; 2
    2906:	29 f5       	brne	.+74     	; 0x2952 <show_lcd_edit_date+0xce>
    print_dec(dd, 2, '0'); LCD_dat('/'); print_dec(ms, 2, '0'); LCD_dat('/');
    2908:	80 91 9b 05 	lds	r24, 0x059B
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	62 e0       	ldi	r22, 0x02	; 2
    2910:	40 e3       	ldi	r20, 0x30	; 48
    2912:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2916:	8f e2       	ldi	r24, 0x2F	; 47
    2918:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    291c:	80 91 99 05 	lds	r24, 0x0599
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	40 e3       	ldi	r20, 0x30	; 48
    2926:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    292a:	8f e2       	ldi	r24, 0x2F	; 47
    292c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	if (blinks == 1) print_dec(2000 + yy, 4, '0'); else { LCD_space(4); }
    2930:	80 91 24 05 	lds	r24, 0x0524
    2934:	81 30       	cpi	r24, 0x01	; 1
    2936:	51 f4       	brne	.+20     	; 0x294c <show_lcd_edit_date+0xc8>
    2938:	80 91 c6 05 	lds	r24, 0x05C6
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	80 53       	subi	r24, 0x30	; 48
    2940:	98 4f       	sbci	r25, 0xF8	; 248
    2942:	64 e0       	ldi	r22, 0x04	; 4
    2944:	40 e3       	ldi	r20, 0x30	; 48
    2946:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    294a:	08 95       	ret
    294c:	84 e0       	ldi	r24, 0x04	; 4
    294e:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    2952:	08 95       	ret

00002954 <run_edit_date>:
  }
}
//=============================================================================
//=============================================================================
void run_edit_date(unsigned char event)
{
    2954:	1f 93       	push	r17
  switch(event) {
    2956:	8b 36       	cpi	r24, 0x6B	; 107
    2958:	09 f4       	brne	.+2      	; 0x295c <run_edit_date+0x8>
    295a:	5a c0       	rjmp	.+180    	; 0x2a10 <run_edit_date+0xbc>
    295c:	8c 36       	cpi	r24, 0x6C	; 108
    295e:	48 f4       	brcc	.+18     	; 0x2972 <run_edit_date+0x1e>
    2960:	87 36       	cpi	r24, 0x67	; 103
    2962:	09 f4       	brne	.+2      	; 0x2966 <run_edit_date+0x12>
    2964:	7e c0       	rjmp	.+252    	; 0x2a62 <run_edit_date+0x10e>
    2966:	8a 36       	cpi	r24, 0x6A	; 106
    2968:	61 f1       	breq	.+88     	; 0x29c2 <run_edit_date+0x6e>
    296a:	84 36       	cpi	r24, 0x64	; 100
    296c:	09 f0       	breq	.+2      	; 0x2970 <run_edit_date+0x1c>
    296e:	9d c0       	rjmp	.+314    	; 0x2aaa <run_edit_date+0x156>
    2970:	1b c0       	rjmp	.+54     	; 0x29a8 <run_edit_date+0x54>
    2972:	8c 39       	cpi	r24, 0x9C	; 156
    2974:	61 f0       	breq	.+24     	; 0x298e <run_edit_date+0x3a>
    2976:	8d 39       	cpi	r24, 0x9D	; 157
    2978:	20 f4       	brcc	.+8      	; 0x2982 <run_edit_date+0x2e>
    297a:	8c 36       	cpi	r24, 0x6C	; 108
    297c:	09 f0       	breq	.+2      	; 0x2980 <run_edit_date+0x2c>
    297e:	95 c0       	rjmp	.+298    	; 0x2aaa <run_edit_date+0x156>
    2980:	8c c0       	rjmp	.+280    	; 0x2a9a <run_edit_date+0x146>
    2982:	80 3a       	cpi	r24, 0xA0	; 160
    2984:	71 f0       	breq	.+28     	; 0x29a2 <run_edit_date+0x4e>
    2986:	8d 3f       	cpi	r24, 0xFD	; 253
    2988:	09 f0       	breq	.+2      	; 0x298c <run_edit_date+0x38>
    298a:	8f c0       	rjmp	.+286    	; 0x2aaa <run_edit_date+0x156>
    298c:	83 c0       	rjmp	.+262    	; 0x2a94 <run_edit_date+0x140>
    case EVENT_NOKEY:
	  nokey = 0;
    298e:	10 92 25 05 	sts	0x0525, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2992:	8c e6       	ldi	r24, 0x6C	; 108
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	70 e0       	ldi	r23, 0x00	; 0
    2998:	40 e0       	ldi	r20, 0x00	; 0
    299a:	50 e0       	ldi	r21, 0x00	; 0
    299c:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    29a0:	84 c0       	rjmp	.+264    	; 0x2aaa <run_edit_date+0x156>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    29a2:	10 92 25 05 	sts	0x0525, r1
    break;
    29a6:	81 c0       	rjmp	.+258    	; 0x2aaa <run_edit_date+0x156>
    case EVENT_KEY_STANDBY:
      stb_impuls();
    29a8:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  LCD_clear();
    29ac:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    29b0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    29b4:	80 e6       	ldi	r24, 0x60	; 96
    29b6:	92 e1       	ldi	r25, 0x12	; 18
    29b8:	90 93 a6 00 	sts	0x00A6, r25
    29bc:	80 93 a5 00 	sts	0x00A5, r24
    break;
    29c0:	74 c0       	rjmp	.+232    	; 0x2aaa <run_edit_date+0x156>
    case EVENT_TIMER_SECOND:
      show_lcd_edit_date();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_date();
    29c8:	0e 94 42 14 	call	0x2884	; 0x2884 <show_lcd_edit_date>
	  if (nedit == 0) { if (dd > 0) dd--;  else dd = 31; } 
    29cc:	80 91 29 05 	lds	r24, 0x0529
    29d0:	88 23       	and	r24, r24
    29d2:	51 f4       	brne	.+20     	; 0x29e8 <run_edit_date+0x94>
    29d4:	80 91 9b 05 	lds	r24, 0x059B
    29d8:	88 23       	and	r24, r24
    29da:	11 f0       	breq	.+4      	; 0x29e0 <run_edit_date+0x8c>
    29dc:	81 50       	subi	r24, 0x01	; 1
    29de:	01 c0       	rjmp	.+2      	; 0x29e2 <run_edit_date+0x8e>
    29e0:	8f e1       	ldi	r24, 0x1F	; 31
    29e2:	80 93 9b 05 	sts	0x059B, r24
    29e6:	39 c0       	rjmp	.+114    	; 0x2a5a <run_edit_date+0x106>
	  if (nedit == 1) { if (ms > 0) ms--; else ms = 12; }
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	51 f4       	brne	.+20     	; 0x2a00 <run_edit_date+0xac>
    29ec:	80 91 99 05 	lds	r24, 0x0599
    29f0:	88 23       	and	r24, r24
    29f2:	11 f0       	breq	.+4      	; 0x29f8 <run_edit_date+0xa4>
    29f4:	81 50       	subi	r24, 0x01	; 1
    29f6:	01 c0       	rjmp	.+2      	; 0x29fa <run_edit_date+0xa6>
    29f8:	8c e0       	ldi	r24, 0x0C	; 12
    29fa:	80 93 99 05 	sts	0x0599, r24
    29fe:	2d c0       	rjmp	.+90     	; 0x2a5a <run_edit_date+0x106>
	  if (nedit == 2) { if (yy > 0) yy--; }
    2a00:	82 30       	cpi	r24, 0x02	; 2
    2a02:	59 f5       	brne	.+86     	; 0x2a5a <run_edit_date+0x106>
    2a04:	80 91 c6 05 	lds	r24, 0x05C6
    2a08:	88 23       	and	r24, r24
    2a0a:	39 f1       	breq	.+78     	; 0x2a5a <run_edit_date+0x106>
    2a0c:	81 50       	subi	r24, 0x01	; 1
    2a0e:	23 c0       	rjmp	.+70     	; 0x2a56 <run_edit_date+0x102>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_date();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2a10:	11 e0       	ldi	r17, 0x01	; 1
    2a12:	10 93 24 05 	sts	0x0524, r17
      show_lcd_edit_date();
    2a16:	0e 94 42 14 	call	0x2884	; 0x2884 <show_lcd_edit_date>
	  if (nedit == 0) { if (dd < 31) dd++;  else dd = 1; } 
    2a1a:	80 91 29 05 	lds	r24, 0x0529
    2a1e:	88 23       	and	r24, r24
    2a20:	49 f4       	brne	.+18     	; 0x2a34 <run_edit_date+0xe0>
    2a22:	80 91 9b 05 	lds	r24, 0x059B
    2a26:	8f 31       	cpi	r24, 0x1F	; 31
    2a28:	10 f4       	brcc	.+4      	; 0x2a2e <run_edit_date+0xda>
    2a2a:	8f 5f       	subi	r24, 0xFF	; 255
    2a2c:	da cf       	rjmp	.-76     	; 0x29e2 <run_edit_date+0x8e>
    2a2e:	10 93 9b 05 	sts	0x059B, r17
    2a32:	13 c0       	rjmp	.+38     	; 0x2a5a <run_edit_date+0x106>
	  if (nedit == 1) { if (ms < 12) ms++; else ms = 1; }
    2a34:	81 30       	cpi	r24, 0x01	; 1
    2a36:	41 f4       	brne	.+16     	; 0x2a48 <run_edit_date+0xf4>
    2a38:	90 91 99 05 	lds	r25, 0x0599
    2a3c:	9c 30       	cpi	r25, 0x0C	; 12
    2a3e:	e8 f6       	brcc	.-70     	; 0x29fa <run_edit_date+0xa6>
    2a40:	9f 5f       	subi	r25, 0xFF	; 255
    2a42:	90 93 99 05 	sts	0x0599, r25
    2a46:	09 c0       	rjmp	.+18     	; 0x2a5a <run_edit_date+0x106>
	  if (nedit == 2) { if (yy < TIME_YEAR_MAX) yy++; }
    2a48:	82 30       	cpi	r24, 0x02	; 2
    2a4a:	39 f4       	brne	.+14     	; 0x2a5a <run_edit_date+0x106>
    2a4c:	80 91 c6 05 	lds	r24, 0x05C6
    2a50:	83 36       	cpi	r24, 0x63	; 99
    2a52:	18 f4       	brcc	.+6      	; 0x2a5a <run_edit_date+0x106>
    2a54:	8f 5f       	subi	r24, 0xFF	; 255
    2a56:	80 93 c6 05 	sts	0x05C6, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2a5a:	8d ef       	ldi	r24, 0xFD	; 253
    2a5c:	0e 94 f5 07 	call	0xfea	; 0xfea <RTOS_deleteTask>
    2a60:	19 c0       	rjmp	.+50     	; 0x2a94 <run_edit_date+0x140>
      show_lcd_edit_date();
    break;
    case EVENT_KEY_SET:
	  if (nedit < 2) {
    2a62:	80 91 29 05 	lds	r24, 0x0529
    2a66:	82 30       	cpi	r24, 0x02	; 2
    2a68:	20 f4       	brcc	.+8      	; 0x2a72 <run_edit_date+0x11e>
	    nedit++;
    2a6a:	8f 5f       	subi	r24, 0xFF	; 255
    2a6c:	80 93 29 05 	sts	0x0529, r24
    2a70:	11 c0       	rjmp	.+34     	; 0x2a94 <run_edit_date+0x140>
	  } else {
	    nedit = 0;
    2a72:	10 92 29 05 	sts	0x0529, r1
        RTC_set_date(dd, ms, yy);
    2a76:	80 91 9b 05 	lds	r24, 0x059B
    2a7a:	60 91 99 05 	lds	r22, 0x0599
    2a7e:	40 91 c6 05 	lds	r20, 0x05C6
    2a82:	0e 94 fd 03 	call	0x7fa	; 0x7fa <RTC_set_date>
        RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2a86:	8c e6       	ldi	r24, 0x6C	; 108
    2a88:	60 e0       	ldi	r22, 0x00	; 0
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
	  }
      show_lcd_edit_date();
    2a94:	0e 94 42 14 	call	0x2884	; 0x2884 <show_lcd_edit_date>
    break;
    2a98:	08 c0       	rjmp	.+16     	; 0x2aaa <run_edit_date+0x156>
    case EVENT_KEY_MENU:
      SET_STATE(run_option);
    2a9a:	86 e7       	ldi	r24, 0x76	; 118
    2a9c:	9c e1       	ldi	r25, 0x1C	; 28
    2a9e:	90 93 a6 00 	sts	0x00A6, r25
    2aa2:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2aa6:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
    break;
  }
}
    2aaa:	1f 91       	pop	r17
    2aac:	08 95       	ret

00002aae <show_lcd_edit_alarm>:
    break;
  }
}
//=============================================================================
void show_lcd_edit_alarm(void)
{
    2aae:	0f 93       	push	r16
    2ab0:	1f 93       	push	r17
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
  uint8_t i;
  switch(nedit) {
    2ab6:	80 91 29 05 	lds	r24, 0x0529
    2aba:	82 30       	cpi	r24, 0x02	; 2
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <show_lcd_edit_alarm+0x12>
    2abe:	42 c0       	rjmp	.+132    	; 0x2b44 <show_lcd_edit_alarm+0x96>
    2ac0:	83 30       	cpi	r24, 0x03	; 3
    2ac2:	30 f4       	brcc	.+12     	; 0x2ad0 <show_lcd_edit_alarm+0x22>
    2ac4:	88 23       	and	r24, r24
    2ac6:	41 f0       	breq	.+16     	; 0x2ad8 <show_lcd_edit_alarm+0x2a>
    2ac8:	81 30       	cpi	r24, 0x01	; 1
    2aca:	09 f0       	breq	.+2      	; 0x2ace <show_lcd_edit_alarm+0x20>
    2acc:	d9 c0       	rjmp	.+434    	; 0x2c80 <show_lcd_edit_alarm+0x1d2>
    2ace:	20 c0       	rjmp	.+64     	; 0x2b10 <show_lcd_edit_alarm+0x62>
    2ad0:	8a 30       	cpi	r24, 0x0A	; 10
    2ad2:	08 f0       	brcs	.+2      	; 0x2ad6 <show_lcd_edit_alarm+0x28>
    2ad4:	d5 c0       	rjmp	.+426    	; 0x2c80 <show_lcd_edit_alarm+0x1d2>
    2ad6:	63 c0       	rjmp	.+198    	; 0x2b9e <show_lcd_edit_alarm+0xf0>
    case ALARM_ONOFF:
      LCD_SetXY(17, 1); 
    2ad8:	81 e1       	ldi	r24, 0x11	; 17
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
	  if (blinks) LCD_puts(alarm_onoff[a_onoff]); else LCD_space(3);
    2ae0:	80 91 24 05 	lds	r24, 0x0524
    2ae4:	88 23       	and	r24, r24
    2ae6:	61 f0       	breq	.+24     	; 0x2b00 <show_lcd_edit_alarm+0x52>
    2ae8:	e0 91 94 05 	lds	r30, 0x0594
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	ee 0f       	add	r30, r30
    2af0:	ff 1f       	adc	r31, r31
    2af2:	e2 52       	subi	r30, 0x22	; 34
    2af4:	fd 4f       	sbci	r31, 0xFD	; 253
    2af6:	80 81       	ld	r24, Z
    2af8:	91 81       	ldd	r25, Z+1	; 0x01
    2afa:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    2afe:	03 c0       	rjmp	.+6      	; 0x2b06 <show_lcd_edit_alarm+0x58>
    2b00:	83 e0       	ldi	r24, 0x03	; 3
    2b02:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
	  LCD_SetXY(12, 2);
    2b06:	8c e0       	ldi	r24, 0x0C	; 12
    2b08:	62 e0       	ldi	r22, 0x02	; 2
    2b0a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2b0e:	08 c0       	rjmp	.+16     	; 0x2b20 <show_lcd_edit_alarm+0x72>
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    break;
    case ALARM_HOUR:
	  LCD_SetXY(12, 2);
    2b10:	8c e0       	ldi	r24, 0x0C	; 12
    2b12:	62 e0       	ldi	r22, 0x02	; 2
    2b14:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
      if (blinks) print_dec(a_hh,2,'0'); else { LCD_dat(' '); LCD_dat(' '); }
    2b18:	80 91 24 05 	lds	r24, 0x0524
    2b1c:	88 23       	and	r24, r24
    2b1e:	41 f0       	breq	.+16     	; 0x2b30 <show_lcd_edit_alarm+0x82>
    2b20:	80 91 cb 05 	lds	r24, 0x05CB
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	62 e0       	ldi	r22, 0x02	; 2
    2b28:	40 e3       	ldi	r20, 0x30	; 48
    2b2a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2b2e:	06 c0       	rjmp	.+12     	; 0x2b3c <show_lcd_edit_alarm+0x8e>
    2b30:	80 e2       	ldi	r24, 0x20	; 32
    2b32:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2b36:	80 e2       	ldi	r24, 0x20	; 32
    2b38:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    2b3c:	8a e3       	ldi	r24, 0x3A	; 58
    2b3e:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2b42:	12 c0       	rjmp	.+36     	; 0x2b68 <show_lcd_edit_alarm+0xba>
    break;
    case ALARM_MIN:
	  LCD_SetXY(12, 2);
    2b44:	8c e0       	ldi	r24, 0x0C	; 12
    2b46:	62 e0       	ldi	r22, 0x02	; 2
    2b48:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
      print_dec(a_hh,2,'0'); LCD_dat(':');
    2b4c:	80 91 cb 05 	lds	r24, 0x05CB
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	62 e0       	ldi	r22, 0x02	; 2
    2b54:	40 e3       	ldi	r20, 0x30	; 48
    2b56:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2b5a:	8a e3       	ldi	r24, 0x3A	; 58
    2b5c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  if (blinks)  print_dec(a_mm,2,'0'); else { LCD_dat(' '); LCD_dat(' '); }
    2b60:	80 91 24 05 	lds	r24, 0x0524
    2b64:	88 23       	and	r24, r24
    2b66:	41 f0       	breq	.+16     	; 0x2b78 <show_lcd_edit_alarm+0xca>
    2b68:	80 91 9c 05 	lds	r24, 0x059C
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	62 e0       	ldi	r22, 0x02	; 2
    2b70:	40 e3       	ldi	r20, 0x30	; 48
    2b72:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2b76:	06 c0       	rjmp	.+12     	; 0x2b84 <show_lcd_edit_alarm+0xd6>
    2b78:	80 e2       	ldi	r24, 0x20	; 32
    2b7a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2b7e:	80 e2       	ldi	r24, 0x20	; 32
    2b80:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    2b84:	8a e3       	ldi	r24, 0x3A	; 58
    2b86:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	62 e0       	ldi	r22, 0x02	; 2
    2b90:	40 e3       	ldi	r20, 0x30	; 48
    2b92:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2b96:	80 e2       	ldi	r24, 0x20	; 32
    2b98:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    break;
    2b9c:	71 c0       	rjmp	.+226    	; 0x2c80 <show_lcd_edit_alarm+0x1d2>
    case ALARM_WE:
    case ALARM_TH:
    case ALARM_FR:
    case ALARM_SA:
    case ALARM_SU:
      LCD_SetXY(17, 1); 
    2b9e:	81 e1       	ldi	r24, 0x11	; 17
    2ba0:	61 e0       	ldi	r22, 0x01	; 1
    2ba2:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
	  LCD_puts(alarm_onoff[a_onoff]);
    2ba6:	e0 91 94 05 	lds	r30, 0x0594
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	ee 0f       	add	r30, r30
    2bae:	ff 1f       	adc	r31, r31
    2bb0:	e2 52       	subi	r30, 0x22	; 34
    2bb2:	fd 4f       	sbci	r31, 0xFD	; 253
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
	  LCD_SetXY(12, 2);
    2bbc:	8c e0       	ldi	r24, 0x0C	; 12
    2bbe:	62 e0       	ldi	r22, 0x02	; 2
    2bc0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
    2bc4:	80 91 cb 05 	lds	r24, 0x05CB
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	62 e0       	ldi	r22, 0x02	; 2
    2bcc:	40 e3       	ldi	r20, 0x30	; 48
    2bce:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2bd2:	8a e3       	ldi	r24, 0x3A	; 58
    2bd4:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2bd8:	80 91 9c 05 	lds	r24, 0x059C
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	62 e0       	ldi	r22, 0x02	; 2
    2be0:	40 e3       	ldi	r20, 0x30	; 48
    2be2:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2be6:	8a e3       	ldi	r24, 0x3A	; 58
    2be8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	62 e0       	ldi	r22, 0x02	; 2
    2bf2:	40 e3       	ldi	r20, 0x30	; 48
    2bf4:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2bf8:	80 e2       	ldi	r24, 0x20	; 32
    2bfa:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
	  LCD_SetXY(0, 3);
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
    2c00:	63 e0       	ldi	r22, 0x03	; 3
    2c02:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    2c06:	05 e5       	ldi	r16, 0x55	; 85
    2c08:	11 e0       	ldi	r17, 0x01	; 1
    2c0a:	c0 e0       	ldi	r28, 0x00	; 0
    2c0c:	d0 e0       	ldi	r29, 0x00	; 0
      for(i = 0; i < 7; i++) {
	    if (BitIsSet(a_wday, i)) {
    2c0e:	80 91 9a 05 	lds	r24, 0x059A
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0c 2e       	mov	r0, r28
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <show_lcd_edit_alarm+0x16e>
    2c18:	95 95       	asr	r25
    2c1a:	87 95       	ror	r24
    2c1c:	0a 94       	dec	r0
    2c1e:	e2 f7       	brpl	.-8      	; 0x2c18 <show_lcd_edit_alarm+0x16a>
    2c20:	20 91 24 05 	lds	r18, 0x0524
    2c24:	80 ff       	sbrs	r24, 0
    2c26:	0d c0       	rjmp	.+26     	; 0x2c42 <show_lcd_edit_alarm+0x194>
		  if ((blinks == 1) || (nedit - ALARM_MO != i)) LCD_puts(den_dw[i]); else { LCD_dat(' '); LCD_dat(' '); }
    2c28:	21 30       	cpi	r18, 0x01	; 1
    2c2a:	39 f0       	breq	.+14     	; 0x2c3a <show_lcd_edit_alarm+0x18c>
    2c2c:	80 91 29 05 	lds	r24, 0x0529
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	03 97       	sbiw	r24, 0x03	; 3
    2c34:	8c 17       	cp	r24, r28
    2c36:	9d 07       	cpc	r25, r29
    2c38:	91 f0       	breq	.+36     	; 0x2c5e <show_lcd_edit_alarm+0x1b0>
    2c3a:	f8 01       	movw	r30, r16
    2c3c:	80 81       	ld	r24, Z
    2c3e:	91 81       	ldd	r25, Z+1	; 0x01
    2c40:	0b c0       	rjmp	.+22     	; 0x2c58 <show_lcd_edit_alarm+0x1aa>
	    } else {
		  if ((blinks == 1) && ((nedit - ALARM_MO) == i)) { LCD_puts(MSG_NO_WDAY); } else { LCD_dat(' '); LCD_dat(' '); }
    2c42:	21 30       	cpi	r18, 0x01	; 1
    2c44:	61 f4       	brne	.+24     	; 0x2c5e <show_lcd_edit_alarm+0x1b0>
    2c46:	80 91 29 05 	lds	r24, 0x0529
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	03 97       	sbiw	r24, 0x03	; 3
    2c4e:	8c 17       	cp	r24, r28
    2c50:	9d 07       	cpc	r25, r29
    2c52:	29 f4       	brne	.+10     	; 0x2c5e <show_lcd_edit_alarm+0x1b0>
    2c54:	8e e2       	ldi	r24, 0x2E	; 46
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    2c5c:	06 c0       	rjmp	.+12     	; 0x2c6a <show_lcd_edit_alarm+0x1bc>
    2c5e:	80 e2       	ldi	r24, 0x20	; 32
    2c60:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2c64:	80 e2       	ldi	r24, 0x20	; 32
    2c66:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
		}
		if (i < 6) LCD_dat(':');
    2c6a:	c6 30       	cpi	r28, 0x06	; 6
    2c6c:	19 f0       	breq	.+6      	; 0x2c74 <show_lcd_edit_alarm+0x1c6>
    2c6e:	8a e3       	ldi	r24, 0x3A	; 58
    2c70:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2c74:	21 96       	adiw	r28, 0x01	; 1
    2c76:	0e 5f       	subi	r16, 0xFE	; 254
    2c78:	1f 4f       	sbci	r17, 0xFF	; 255
      LCD_SetXY(17, 1); 
	  LCD_puts(alarm_onoff[a_onoff]);
	  LCD_SetXY(12, 2);
      print_dec(a_hh,2,'0'); LCD_dat(':'); print_dec(a_mm,2,'0'); LCD_dat(':'); print_dec(0,2,'0'); LCD_dat(' ');
	  LCD_SetXY(0, 3);
      for(i = 0; i < 7; i++) {
    2c7a:	c7 30       	cpi	r28, 0x07	; 7
    2c7c:	d1 05       	cpc	r29, r1
    2c7e:	39 f6       	brne	.-114    	; 0x2c0e <show_lcd_edit_alarm+0x160>
		}
		if (i < 6) LCD_dat(':');
	  }
    break;
  }
}
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	08 95       	ret

00002c8a <run_edit_alarm>:
}
//=============================================================================
//=============================================================================
void run_edit_alarm(unsigned char event)
{
  switch(event) {
    2c8a:	8b 36       	cpi	r24, 0x6B	; 107
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <run_edit_alarm+0x6>
    2c8e:	57 c0       	rjmp	.+174    	; 0x2d3e <run_edit_alarm+0xb4>
    2c90:	8c 36       	cpi	r24, 0x6C	; 108
    2c92:	48 f4       	brcc	.+18     	; 0x2ca6 <run_edit_alarm+0x1c>
    2c94:	87 36       	cpi	r24, 0x67	; 103
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <run_edit_alarm+0x10>
    2c98:	a9 c0       	rjmp	.+338    	; 0x2dec <run_edit_alarm+0x162>
    2c9a:	8a 36       	cpi	r24, 0x6A	; 106
    2c9c:	61 f1       	breq	.+88     	; 0x2cf6 <run_edit_alarm+0x6c>
    2c9e:	84 36       	cpi	r24, 0x64	; 100
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <run_edit_alarm+0x1a>
    2ca2:	e6 c0       	rjmp	.+460    	; 0x2e70 <run_edit_alarm+0x1e6>
    2ca4:	1b c0       	rjmp	.+54     	; 0x2cdc <run_edit_alarm+0x52>
    2ca6:	8c 39       	cpi	r24, 0x9C	; 156
    2ca8:	61 f0       	breq	.+24     	; 0x2cc2 <run_edit_alarm+0x38>
    2caa:	8d 39       	cpi	r24, 0x9D	; 157
    2cac:	20 f4       	brcc	.+8      	; 0x2cb6 <run_edit_alarm+0x2c>
    2cae:	8c 36       	cpi	r24, 0x6C	; 108
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <run_edit_alarm+0x2a>
    2cb2:	de c0       	rjmp	.+444    	; 0x2e70 <run_edit_alarm+0x1e6>
    2cb4:	ce c0       	rjmp	.+412    	; 0x2e52 <run_edit_alarm+0x1c8>
    2cb6:	80 3a       	cpi	r24, 0xA0	; 160
    2cb8:	71 f0       	breq	.+28     	; 0x2cd6 <run_edit_alarm+0x4c>
    2cba:	8d 3f       	cpi	r24, 0xFD	; 253
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <run_edit_alarm+0x36>
    2cbe:	d8 c0       	rjmp	.+432    	; 0x2e70 <run_edit_alarm+0x1e6>
    2cc0:	c5 c0       	rjmp	.+394    	; 0x2e4c <run_edit_alarm+0x1c2>
    case EVENT_NOKEY:
	  nokey = 0;
    2cc2:	10 92 25 05 	sts	0x0525, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2cc6:	8c e6       	ldi	r24, 0x6C	; 108
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    2cd4:	08 95       	ret
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2cd6:	10 92 25 05 	sts	0x0525, r1
    break;
    2cda:	08 95       	ret
    case EVENT_KEY_STANDBY:
      stb_impuls();
    2cdc:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  LCD_clear();
    2ce0:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    2ce4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    2ce8:	80 e6       	ldi	r24, 0x60	; 96
    2cea:	92 e1       	ldi	r25, 0x12	; 18
    2cec:	90 93 a6 00 	sts	0x00A6, r25
    2cf0:	80 93 a5 00 	sts	0x00A5, r24
    break;
    2cf4:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_alarm();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_alarm();
    2cfc:	0e 94 57 15 	call	0x2aae	; 0x2aae <show_lcd_edit_alarm>
      switch(nedit) {
    2d00:	80 91 29 05 	lds	r24, 0x0529
    2d04:	82 30       	cpi	r24, 0x02	; 2
    2d06:	89 f0       	breq	.+34     	; 0x2d2a <run_edit_alarm+0xa0>
    2d08:	83 30       	cpi	r24, 0x03	; 3
    2d0a:	50 f5       	brcc	.+84     	; 0x2d60 <run_edit_alarm+0xd6>
    2d0c:	88 23       	and	r24, r24
    2d0e:	61 f1       	breq	.+88     	; 0x2d68 <run_edit_alarm+0xde>
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	09 f0       	breq	.+2      	; 0x2d16 <run_edit_alarm+0x8c>
    2d14:	67 c0       	rjmp	.+206    	; 0x2de4 <run_edit_alarm+0x15a>
        case ALARM_ONOFF:
		  a_onoff = !a_onoff;
        break;
        case ALARM_HOUR:
		  if (a_hh > 0) a_hh--; else a_hh = 23;
    2d16:	80 91 cb 05 	lds	r24, 0x05CB
    2d1a:	88 23       	and	r24, r24
    2d1c:	11 f0       	breq	.+4      	; 0x2d22 <run_edit_alarm+0x98>
    2d1e:	81 50       	subi	r24, 0x01	; 1
    2d20:	01 c0       	rjmp	.+2      	; 0x2d24 <run_edit_alarm+0x9a>
    2d22:	87 e1       	ldi	r24, 0x17	; 23
    2d24:	80 93 cb 05 	sts	0x05CB, r24
    2d28:	5d c0       	rjmp	.+186    	; 0x2de4 <run_edit_alarm+0x15a>
        break;
        case ALARM_MIN:
		  if (a_mm > 0) a_mm--; else a_mm = 59;
    2d2a:	80 91 9c 05 	lds	r24, 0x059C
    2d2e:	88 23       	and	r24, r24
    2d30:	11 f0       	breq	.+4      	; 0x2d36 <run_edit_alarm+0xac>
    2d32:	81 50       	subi	r24, 0x01	; 1
    2d34:	01 c0       	rjmp	.+2      	; 0x2d38 <run_edit_alarm+0xae>
    2d36:	8b e3       	ldi	r24, 0x3B	; 59
    2d38:	80 93 9c 05 	sts	0x059C, r24
    2d3c:	53 c0       	rjmp	.+166    	; 0x2de4 <run_edit_alarm+0x15a>
      }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_alarm();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_alarm();
    2d44:	0e 94 57 15 	call	0x2aae	; 0x2aae <show_lcd_edit_alarm>
      switch(nedit) {
    2d48:	80 91 29 05 	lds	r24, 0x0529
    2d4c:	82 30       	cpi	r24, 0x02	; 2
    2d4e:	e9 f0       	breq	.+58     	; 0x2d8a <run_edit_alarm+0x100>
    2d50:	83 30       	cpi	r24, 0x03	; 3
    2d52:	30 f4       	brcc	.+12     	; 0x2d60 <run_edit_alarm+0xd6>
    2d54:	88 23       	and	r24, r24
    2d56:	41 f0       	breq	.+16     	; 0x2d68 <run_edit_alarm+0xde>
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <run_edit_alarm+0xd4>
    2d5c:	43 c0       	rjmp	.+134    	; 0x2de4 <run_edit_alarm+0x15a>
    2d5e:	0c c0       	rjmp	.+24     	; 0x2d78 <run_edit_alarm+0xee>
    2d60:	8a 30       	cpi	r24, 0x0A	; 10
    2d62:	08 f0       	brcs	.+2      	; 0x2d66 <run_edit_alarm+0xdc>
    2d64:	3f c0       	rjmp	.+126    	; 0x2de4 <run_edit_alarm+0x15a>
    2d66:	1a c0       	rjmp	.+52     	; 0x2d9c <run_edit_alarm+0x112>
        case ALARM_ONOFF:
		  a_onoff = !a_onoff;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 91 94 05 	lds	r25, 0x0594
    2d6e:	91 11       	cpse	r25, r1
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	80 93 94 05 	sts	0x0594, r24
        break;
    2d76:	36 c0       	rjmp	.+108    	; 0x2de4 <run_edit_alarm+0x15a>
        case ALARM_HOUR:
		  if (a_hh < 23) a_hh++; else a_hh = 0;
    2d78:	80 91 cb 05 	lds	r24, 0x05CB
    2d7c:	87 31       	cpi	r24, 0x17	; 23
    2d7e:	10 f4       	brcc	.+4      	; 0x2d84 <run_edit_alarm+0xfa>
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	d0 cf       	rjmp	.-96     	; 0x2d24 <run_edit_alarm+0x9a>
    2d84:	10 92 cb 05 	sts	0x05CB, r1
    2d88:	2d c0       	rjmp	.+90     	; 0x2de4 <run_edit_alarm+0x15a>
        break;
        case ALARM_MIN:
		  if (a_mm < 59) a_mm++; else a_mm = 0;
    2d8a:	80 91 9c 05 	lds	r24, 0x059C
    2d8e:	8b 33       	cpi	r24, 0x3B	; 59
    2d90:	10 f4       	brcc	.+4      	; 0x2d96 <run_edit_alarm+0x10c>
    2d92:	8f 5f       	subi	r24, 0xFF	; 255
    2d94:	d1 cf       	rjmp	.-94     	; 0x2d38 <run_edit_alarm+0xae>
    2d96:	10 92 9c 05 	sts	0x059C, r1
    2d9a:	24 c0       	rjmp	.+72     	; 0x2de4 <run_edit_alarm+0x15a>
        case ALARM_WE:
        case ALARM_TH:
        case ALARM_FR:
        case ALARM_SA:
        case ALARM_SU:
		  if (BitIsSet(a_wday, nedit - ALARM_MO)) ClearBit(a_wday, nedit - ALARM_MO); else SetBit(a_wday, nedit - ALARM_MO);
    2d9c:	60 91 9a 05 	lds	r22, 0x059A
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	03 97       	sbiw	r24, 0x03	; 3
    2da4:	46 2f       	mov	r20, r22
    2da6:	50 e0       	ldi	r21, 0x00	; 0
    2da8:	08 2e       	mov	r0, r24
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <run_edit_alarm+0x126>
    2dac:	55 95       	asr	r21
    2dae:	47 95       	ror	r20
    2db0:	0a 94       	dec	r0
    2db2:	e2 f7       	brpl	.-8      	; 0x2dac <run_edit_alarm+0x122>
    2db4:	40 ff       	sbrs	r20, 0
    2db6:	0c c0       	rjmp	.+24     	; 0x2dd0 <run_edit_alarm+0x146>
    2db8:	41 e0       	ldi	r20, 0x01	; 1
    2dba:	50 e0       	ldi	r21, 0x00	; 0
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <run_edit_alarm+0x138>
    2dbe:	44 0f       	add	r20, r20
    2dc0:	55 1f       	adc	r21, r21
    2dc2:	8a 95       	dec	r24
    2dc4:	e2 f7       	brpl	.-8      	; 0x2dbe <run_edit_alarm+0x134>
    2dc6:	40 95       	com	r20
    2dc8:	46 23       	and	r20, r22
    2dca:	40 93 9a 05 	sts	0x059A, r20
    2dce:	0a c0       	rjmp	.+20     	; 0x2de4 <run_edit_alarm+0x15a>
    2dd0:	21 e0       	ldi	r18, 0x01	; 1
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <run_edit_alarm+0x150>
    2dd6:	22 0f       	add	r18, r18
    2dd8:	33 1f       	adc	r19, r19
    2dda:	8a 95       	dec	r24
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <run_edit_alarm+0x14c>
    2dde:	26 2b       	or	r18, r22
    2de0:	20 93 9a 05 	sts	0x059A, r18
        break;
      }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2de4:	8d ef       	ldi	r24, 0xFD	; 253
    2de6:	0e 94 f5 07 	call	0xfea	; 0xfea <RTOS_deleteTask>
    2dea:	30 c0       	rjmp	.+96     	; 0x2e4c <run_edit_alarm+0x1c2>
      show_lcd_edit_alarm();
    break;
    case EVENT_KEY_SET:
	  if (nedit < ALARM_SU) {
    2dec:	80 91 29 05 	lds	r24, 0x0529
    2df0:	89 30       	cpi	r24, 0x09	; 9
    2df2:	d0 f4       	brcc	.+52     	; 0x2e28 <run_edit_alarm+0x19e>
	    if (a_onoff == 1) {
    2df4:	90 91 94 05 	lds	r25, 0x0594
    2df8:	91 30       	cpi	r25, 0x01	; 1
    2dfa:	21 f4       	brne	.+8      	; 0x2e04 <run_edit_alarm+0x17a>
	      nedit++;
    2dfc:	8f 5f       	subi	r24, 0xFF	; 255
    2dfe:	80 93 29 05 	sts	0x0529, r24
    2e02:	09 c0       	rjmp	.+18     	; 0x2e16 <run_edit_alarm+0x18c>
        } else {
          save_alarm_param();
    2e04:	0e 94 c5 0a 	call	0x158a	; 0x158a <save_alarm_param>
          RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2e08:	8c e6       	ldi	r24, 0x6C	; 108
    2e0a:	60 e0       	ldi	r22, 0x00	; 0
    2e0c:	70 e0       	ldi	r23, 0x00	; 0
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	50 e0       	ldi	r21, 0x00	; 0
    2e12:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
		}
	    blinks = 1;
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	80 93 24 05 	sts	0x0524, r24
        show_lcd_edit_alarm();
    2e1c:	0e 94 57 15 	call	0x2aae	; 0x2aae <show_lcd_edit_alarm>
	    RTOS_deleteTask(EVENT_TIMER_SECOND);
    2e20:	8d ef       	ldi	r24, 0xFD	; 253
    2e22:	0e 94 f5 07 	call	0xfea	; 0xfea <RTOS_deleteTask>
    2e26:	09 c0       	rjmp	.+18     	; 0x2e3a <run_edit_alarm+0x1b0>
	  } else {
        save_alarm_param();
    2e28:	0e 94 c5 0a 	call	0x158a	; 0x158a <save_alarm_param>
        RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2e2c:	8c e6       	ldi	r24, 0x6C	; 108
    2e2e:	60 e0       	ldi	r22, 0x00	; 0
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
	  }
	  if (nedit >= ALARM_MO) KBD_set_type(0); else KBD_set_type(1);
    2e3a:	80 91 29 05 	lds	r24, 0x0529
    2e3e:	83 30       	cpi	r24, 0x03	; 3
    2e40:	10 f0       	brcs	.+4      	; 0x2e46 <run_edit_alarm+0x1bc>
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	01 c0       	rjmp	.+2      	; 0x2e48 <run_edit_alarm+0x1be>
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      show_lcd_edit_alarm();
    2e4c:	0e 94 57 15 	call	0x2aae	; 0x2aae <show_lcd_edit_alarm>
    break;
    2e50:	08 95       	ret
    case EVENT_KEY_MENU:
      show_lcd_edit_alarm();
    2e52:	0e 94 57 15 	call	0x2aae	; 0x2aae <show_lcd_edit_alarm>
      nokey = 0;
    2e56:	10 92 25 05 	sts	0x0525, r1
	  KBD_set_type(1);
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      SET_STATE(run_option);
    2e60:	86 e7       	ldi	r24, 0x76	; 118
    2e62:	9c e1       	ldi	r25, 0x1C	; 28
    2e64:	90 93 a6 00 	sts	0x00A6, r25
    2e68:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2e6c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
    2e70:	08 95       	ret

00002e72 <show_lcd_edit_as_wait>:
  }
}
//=============================================================================
void show_lcd_edit_as_wait(void)
{
  LCD_SetXY(15, 2); 
    2e72:	8f e0       	ldi	r24, 0x0F	; 15
    2e74:	62 e0       	ldi	r22, 0x02	; 2
    2e76:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (blinks) print_dec(old_as_wait, 2, ' '); else { LCD_dat(' '); LCD_dat(' '); }
    2e7a:	80 91 24 05 	lds	r24, 0x0524
    2e7e:	88 23       	and	r24, r24
    2e80:	41 f0       	breq	.+16     	; 0x2e92 <show_lcd_edit_as_wait+0x20>
    2e82:	80 91 c8 05 	lds	r24, 0x05C8
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	62 e0       	ldi	r22, 0x02	; 2
    2e8a:	40 e2       	ldi	r20, 0x20	; 32
    2e8c:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2e90:	06 c0       	rjmp	.+12     	; 0x2e9e <show_lcd_edit_as_wait+0x2c>
    2e92:	80 e2       	ldi	r24, 0x20	; 32
    2e94:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2e98:	80 e2       	ldi	r24, 0x20	; 32
    2e9a:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_puts(MSG_SEC); 
    2e9e:	8e ef       	ldi	r24, 0xFE	; 254
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
}
    2ea6:	08 95       	ret

00002ea8 <run_edit_as_wait>:
}
//=============================================================================
//=============================================================================
void run_edit_as_wait(unsigned char event)
{
  switch(event) {
    2ea8:	8b 36       	cpi	r24, 0x6B	; 107
    2eaa:	b9 f1       	breq	.+110    	; 0x2f1a <run_edit_as_wait+0x72>
    2eac:	8c 36       	cpi	r24, 0x6C	; 108
    2eae:	48 f4       	brcc	.+18     	; 0x2ec2 <run_edit_as_wait+0x1a>
    2eb0:	87 36       	cpi	r24, 0x67	; 103
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <run_edit_as_wait+0xe>
    2eb4:	44 c0       	rjmp	.+136    	; 0x2f3e <run_edit_as_wait+0x96>
    2eb6:	8a 36       	cpi	r24, 0x6A	; 106
    2eb8:	29 f1       	breq	.+74     	; 0x2f04 <run_edit_as_wait+0x5c>
    2eba:	84 36       	cpi	r24, 0x64	; 100
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <run_edit_as_wait+0x18>
    2ebe:	5c c0       	rjmp	.+184    	; 0x2f78 <run_edit_as_wait+0xd0>
    2ec0:	14 c0       	rjmp	.+40     	; 0x2eea <run_edit_as_wait+0x42>
    2ec2:	8c 39       	cpi	r24, 0x9C	; 156
    2ec4:	61 f0       	breq	.+24     	; 0x2ede <run_edit_as_wait+0x36>
    2ec6:	8d 39       	cpi	r24, 0x9D	; 157
    2ec8:	20 f4       	brcc	.+8      	; 0x2ed2 <run_edit_as_wait+0x2a>
    2eca:	8c 36       	cpi	r24, 0x6C	; 108
    2ecc:	09 f0       	breq	.+2      	; 0x2ed0 <run_edit_as_wait+0x28>
    2ece:	54 c0       	rjmp	.+168    	; 0x2f78 <run_edit_as_wait+0xd0>
    2ed0:	48 c0       	rjmp	.+144    	; 0x2f62 <run_edit_as_wait+0xba>
    2ed2:	80 3a       	cpi	r24, 0xA0	; 160
    2ed4:	39 f0       	breq	.+14     	; 0x2ee4 <run_edit_as_wait+0x3c>
    2ed6:	8d 3f       	cpi	r24, 0xFD	; 253
    2ed8:	09 f0       	breq	.+2      	; 0x2edc <run_edit_as_wait+0x34>
    2eda:	4e c0       	rjmp	.+156    	; 0x2f78 <run_edit_as_wait+0xd0>
    2edc:	2d c0       	rjmp	.+90     	; 0x2f38 <run_edit_as_wait+0x90>
    case EVENT_NOKEY:
	  nokey = 0;
    2ede:	10 92 25 05 	sts	0x0525, r1
    2ee2:	37 c0       	rjmp	.+110    	; 0x2f52 <run_edit_as_wait+0xaa>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2ee4:	10 92 25 05 	sts	0x0525, r1
    break;
    2ee8:	08 95       	ret
    case EVENT_KEY_STANDBY:
      stb_impuls();
    2eea:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  LCD_clear();
    2eee:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    2ef2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    2ef6:	80 e6       	ldi	r24, 0x60	; 96
    2ef8:	92 e1       	ldi	r25, 0x12	; 18
    2efa:	90 93 a6 00 	sts	0x00A6, r25
    2efe:	80 93 a5 00 	sts	0x00A5, r24
    break;
    2f02:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_as_wait();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_as_wait();
    2f0a:	0e 94 39 17 	call	0x2e72	; 0x2e72 <show_lcd_edit_as_wait>
	  if (old_as_wait > MIN_AS_WAIT) old_as_wait--;
    2f0e:	80 91 c8 05 	lds	r24, 0x05C8
    2f12:	88 23       	and	r24, r24
    2f14:	71 f0       	breq	.+28     	; 0x2f32 <run_edit_as_wait+0x8a>
    2f16:	81 50       	subi	r24, 0x01	; 1
    2f18:	0a c0       	rjmp	.+20     	; 0x2f2e <run_edit_as_wait+0x86>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_as_wait();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_as_wait();
    2f20:	0e 94 39 17 	call	0x2e72	; 0x2e72 <show_lcd_edit_as_wait>
	  if (old_as_wait < MAX_AS_WAIT) old_as_wait++;
    2f24:	80 91 c8 05 	lds	r24, 0x05C8
    2f28:	8a 30       	cpi	r24, 0x0A	; 10
    2f2a:	18 f4       	brcc	.+6      	; 0x2f32 <run_edit_as_wait+0x8a>
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	80 93 c8 05 	sts	0x05C8, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    2f32:	8d ef       	ldi	r24, 0xFD	; 253
    2f34:	0e 94 f5 07 	call	0xfea	; 0xfea <RTOS_deleteTask>
      show_lcd_edit_as_wait();
    2f38:	0e 94 39 17 	call	0x2e72	; 0x2e72 <show_lcd_edit_as_wait>
    break;
    2f3c:	08 95       	ret
    case EVENT_KEY_SET:
      nedit = 0;
    2f3e:	10 92 29 05 	sts	0x0529, r1
	  as_wait = old_as_wait;
    2f42:	80 91 c8 05 	lds	r24, 0x05C8
    2f46:	80 93 9f 05 	sts	0x059F, r24
	  save_as_wait(as_wait);
    2f4a:	0e 94 1f 0b 	call	0x163e	; 0x163e <save_as_wait>
      show_lcd_edit_as_wait();
    2f4e:	0e 94 39 17 	call	0x2e72	; 0x2e72 <show_lcd_edit_as_wait>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    2f52:	8c e6       	ldi	r24, 0x6C	; 108
    2f54:	60 e0       	ldi	r22, 0x00	; 0
    2f56:	70 e0       	ldi	r23, 0x00	; 0
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    2f60:	08 95       	ret
    case EVENT_KEY_MENU:
	  KBD_set_type(1);
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      SET_STATE(run_option);
    2f68:	86 e7       	ldi	r24, 0x76	; 118
    2f6a:	9c e1       	ldi	r25, 0x1C	; 28
    2f6c:	90 93 a6 00 	sts	0x00A6, r25
    2f70:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    2f74:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
    2f78:	08 95       	ret

00002f7a <show_lcd_edit_temp_max>:
  }
}
//=============================================================================
void show_lcd_edit_temp_max(void)
{
  LCD_SetXY(14, 2); 
    2f7a:	8e e0       	ldi	r24, 0x0E	; 14
    2f7c:	62 e0       	ldi	r22, 0x02	; 2
    2f7e:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (blinks) print_dec(old_max_temp, 2, ' '); else { LCD_dat(' '); LCD_dat(' '); }
    2f82:	80 91 24 05 	lds	r24, 0x0524
    2f86:	88 23       	and	r24, r24
    2f88:	41 f0       	breq	.+16     	; 0x2f9a <show_lcd_edit_temp_max+0x20>
    2f8a:	80 91 98 05 	lds	r24, 0x0598
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	62 e0       	ldi	r22, 0x02	; 2
    2f92:	40 e2       	ldi	r20, 0x20	; 32
    2f94:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    2f98:	06 c0       	rjmp	.+12     	; 0x2fa6 <show_lcd_edit_temp_max+0x2c>
    2f9a:	80 e2       	ldi	r24, 0x20	; 32
    2f9c:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2fa0:	80 e2       	ldi	r24, 0x20	; 32
    2fa2:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  LCD_dat('C'); LCD_space(3);
    2fa6:	83 e4       	ldi	r24, 0x43	; 67
    2fa8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    2fac:	83 e0       	ldi	r24, 0x03	; 3
    2fae:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
}
    2fb2:	08 95       	ret

00002fb4 <run_edit_temp_max>:
}
//=============================================================================
//=============================================================================
void run_edit_temp_max(unsigned char event)
{
  switch(event) {
    2fb4:	8b 36       	cpi	r24, 0x6B	; 107
    2fb6:	b9 f1       	breq	.+110    	; 0x3026 <run_edit_temp_max+0x72>
    2fb8:	8c 36       	cpi	r24, 0x6C	; 108
    2fba:	48 f4       	brcc	.+18     	; 0x2fce <run_edit_temp_max+0x1a>
    2fbc:	87 36       	cpi	r24, 0x67	; 103
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <run_edit_temp_max+0xe>
    2fc0:	44 c0       	rjmp	.+136    	; 0x304a <run_edit_temp_max+0x96>
    2fc2:	8a 36       	cpi	r24, 0x6A	; 106
    2fc4:	29 f1       	breq	.+74     	; 0x3010 <run_edit_temp_max+0x5c>
    2fc6:	84 36       	cpi	r24, 0x64	; 100
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <run_edit_temp_max+0x18>
    2fca:	5c c0       	rjmp	.+184    	; 0x3084 <run_edit_temp_max+0xd0>
    2fcc:	14 c0       	rjmp	.+40     	; 0x2ff6 <run_edit_temp_max+0x42>
    2fce:	8c 39       	cpi	r24, 0x9C	; 156
    2fd0:	61 f0       	breq	.+24     	; 0x2fea <run_edit_temp_max+0x36>
    2fd2:	8d 39       	cpi	r24, 0x9D	; 157
    2fd4:	20 f4       	brcc	.+8      	; 0x2fde <run_edit_temp_max+0x2a>
    2fd6:	8c 36       	cpi	r24, 0x6C	; 108
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <run_edit_temp_max+0x28>
    2fda:	54 c0       	rjmp	.+168    	; 0x3084 <run_edit_temp_max+0xd0>
    2fdc:	48 c0       	rjmp	.+144    	; 0x306e <run_edit_temp_max+0xba>
    2fde:	80 3a       	cpi	r24, 0xA0	; 160
    2fe0:	39 f0       	breq	.+14     	; 0x2ff0 <run_edit_temp_max+0x3c>
    2fe2:	8d 3f       	cpi	r24, 0xFD	; 253
    2fe4:	09 f0       	breq	.+2      	; 0x2fe8 <run_edit_temp_max+0x34>
    2fe6:	4e c0       	rjmp	.+156    	; 0x3084 <run_edit_temp_max+0xd0>
    2fe8:	2d c0       	rjmp	.+90     	; 0x3044 <run_edit_temp_max+0x90>
    case EVENT_NOKEY:
	  nokey = 0;
    2fea:	10 92 25 05 	sts	0x0525, r1
    2fee:	37 c0       	rjmp	.+110    	; 0x305e <run_edit_temp_max+0xaa>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    2ff0:	10 92 25 05 	sts	0x0525, r1
    break;
    2ff4:	08 95       	ret
    case EVENT_KEY_STANDBY:
      stb_impuls();
    2ff6:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  LCD_clear();
    2ffa:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    2ffe:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    3002:	80 e6       	ldi	r24, 0x60	; 96
    3004:	92 e1       	ldi	r25, 0x12	; 18
    3006:	90 93 a6 00 	sts	0x00A6, r25
    300a:	80 93 a5 00 	sts	0x00A5, r24
    break;
    300e:	08 95       	ret
    case EVENT_TIMER_SECOND:
      show_lcd_edit_temp_max();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_temp_max();
    3016:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <show_lcd_edit_temp_max>
	  if (old_max_temp > MIN_TEMP) old_max_temp--;
    301a:	80 91 98 05 	lds	r24, 0x0598
    301e:	8f 31       	cpi	r24, 0x1F	; 31
    3020:	70 f0       	brcs	.+28     	; 0x303e <run_edit_temp_max+0x8a>
    3022:	81 50       	subi	r24, 0x01	; 1
    3024:	0a c0       	rjmp	.+20     	; 0x303a <run_edit_temp_max+0x86>
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_temp_max();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_temp_max();
    302c:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <show_lcd_edit_temp_max>
	  if (old_max_temp < MAX_TEMP) old_max_temp++;
    3030:	80 91 98 05 	lds	r24, 0x0598
    3034:	85 35       	cpi	r24, 0x55	; 85
    3036:	18 f4       	brcc	.+6      	; 0x303e <run_edit_temp_max+0x8a>
    3038:	8f 5f       	subi	r24, 0xFF	; 255
    303a:	80 93 98 05 	sts	0x0598, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    303e:	8d ef       	ldi	r24, 0xFD	; 253
    3040:	0e 94 f5 07 	call	0xfea	; 0xfea <RTOS_deleteTask>
      show_lcd_edit_temp_max();
    3044:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <show_lcd_edit_temp_max>
    break;
    3048:	08 95       	ret
    case EVENT_KEY_SET:
      nedit = 0;
    304a:	10 92 29 05 	sts	0x0529, r1
	  max_temp = old_max_temp;
    304e:	80 91 98 05 	lds	r24, 0x0598
    3052:	80 93 ca 05 	sts	0x05CA, r24
      save_max_temperature(max_temp);
    3056:	0e 94 2f 0b 	call	0x165e	; 0x165e <save_max_temperature>
      show_lcd_edit_temp_max();
    305a:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <show_lcd_edit_temp_max>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    305e:	8c e6       	ldi	r24, 0x6C	; 108
    3060:	60 e0       	ldi	r22, 0x00	; 0
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	50 e0       	ldi	r21, 0x00	; 0
    3068:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    306c:	08 95       	ret
    case EVENT_KEY_MENU:
	  KBD_set_type(1);
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      SET_STATE(run_option);
    3074:	86 e7       	ldi	r24, 0x76	; 118
    3076:	9c e1       	ldi	r25, 0x1C	; 28
    3078:	90 93 a6 00 	sts	0x00A6, r25
    307c:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    3080:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
    3084:	08 95       	ret

00003086 <show_lcd_edit_stb_out>:
  }
}
//=============================================================================
void show_lcd_edit_stb_out(void)
{
  LCD_SetXY(16, 2); 
    3086:	80 e1       	ldi	r24, 0x10	; 16
    3088:	62 e0       	ldi	r22, 0x02	; 2
    308a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (blinks == 1) print_dec(stb_out, 1, ' '); else LCD_dat(' ');
    308e:	80 91 24 05 	lds	r24, 0x0524
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	41 f4       	brne	.+16     	; 0x30a6 <show_lcd_edit_stb_out+0x20>
    3096:	80 91 9d 05 	lds	r24, 0x059D
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	61 e0       	ldi	r22, 0x01	; 1
    309e:	40 e2       	ldi	r20, 0x20	; 32
    30a0:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    30a4:	08 95       	ret
    30a6:	80 e2       	ldi	r24, 0x20	; 32
    30a8:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
    30ac:	08 95       	ret

000030ae <run_edit_stb_out>:
}
//=============================================================================
//=============================================================================
void run_edit_stb_out(unsigned char event)
{
  switch(event) {
    30ae:	8b 36       	cpi	r24, 0x6B	; 107
    30b0:	d1 f1       	breq	.+116    	; 0x3126 <run_edit_stb_out+0x78>
    30b2:	8c 36       	cpi	r24, 0x6C	; 108
    30b4:	48 f4       	brcc	.+18     	; 0x30c8 <run_edit_stb_out+0x1a>
    30b6:	87 36       	cpi	r24, 0x67	; 103
    30b8:	09 f4       	brne	.+2      	; 0x30bc <run_edit_stb_out+0xe>
    30ba:	47 c0       	rjmp	.+142    	; 0x314a <run_edit_stb_out+0x9c>
    30bc:	8a 36       	cpi	r24, 0x6A	; 106
    30be:	99 f1       	breq	.+102    	; 0x3126 <run_edit_stb_out+0x78>
    30c0:	84 36       	cpi	r24, 0x64	; 100
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <run_edit_stb_out+0x18>
    30c4:	69 c0       	rjmp	.+210    	; 0x3198 <run_edit_stb_out+0xea>
    30c6:	1b c0       	rjmp	.+54     	; 0x30fe <run_edit_stb_out+0x50>
    30c8:	8c 39       	cpi	r24, 0x9C	; 156
    30ca:	61 f0       	breq	.+24     	; 0x30e4 <run_edit_stb_out+0x36>
    30cc:	8d 39       	cpi	r24, 0x9D	; 157
    30ce:	20 f4       	brcc	.+8      	; 0x30d8 <run_edit_stb_out+0x2a>
    30d0:	8c 36       	cpi	r24, 0x6C	; 108
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <run_edit_stb_out+0x28>
    30d4:	61 c0       	rjmp	.+194    	; 0x3198 <run_edit_stb_out+0xea>
    30d6:	4e c0       	rjmp	.+156    	; 0x3174 <run_edit_stb_out+0xc6>
    30d8:	80 3a       	cpi	r24, 0xA0	; 160
    30da:	71 f0       	breq	.+28     	; 0x30f8 <run_edit_stb_out+0x4a>
    30dc:	8d 3f       	cpi	r24, 0xFD	; 253
    30de:	09 f0       	breq	.+2      	; 0x30e2 <run_edit_stb_out+0x34>
    30e0:	5b c0       	rjmp	.+182    	; 0x3198 <run_edit_stb_out+0xea>
    30e2:	30 c0       	rjmp	.+96     	; 0x3144 <run_edit_stb_out+0x96>
    case EVENT_NOKEY:
	  nokey = 0;
    30e4:	10 92 25 05 	sts	0x0525, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    30e8:	8c e6       	ldi	r24, 0x6C	; 108
    30ea:	60 e0       	ldi	r22, 0x00	; 0
    30ec:	70 e0       	ldi	r23, 0x00	; 0
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	50 e0       	ldi	r21, 0x00	; 0
    30f2:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    30f6:	08 95       	ret
    case EVENT_KEY_PRESS:
	  nokey = 0;
    30f8:	10 92 25 05 	sts	0x0525, r1
    break;
    30fc:	08 95       	ret
    case EVENT_KEY_STANDBY:
      stb_impuls();
    30fe:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  LCD_clear();
    3102:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    3106:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    310a:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
    310e:	81 30       	cpi	r24, 0x01	; 1
    3110:	11 f4       	brne	.+4      	; 0x3116 <run_edit_stb_out+0x68>
    3112:	c2 9a       	sbi	0x18, 2	; 24
    3114:	01 c0       	rjmp	.+2      	; 0x3118 <run_edit_stb_out+0x6a>
    3116:	c2 98       	cbi	0x18, 2	; 24
      SET_STATE(run_standby);
    3118:	80 e6       	ldi	r24, 0x60	; 96
    311a:	92 e1       	ldi	r25, 0x12	; 18
    311c:	90 93 a6 00 	sts	0x00A6, r25
    3120:	80 93 a5 00 	sts	0x00A5, r24
    break;
    3124:	08 95       	ret
	  stb_out = !stb_out;
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_stb_out();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_stb_out();
    312c:	0e 94 43 18 	call	0x3086	; 0x3086 <show_lcd_edit_stb_out>
	  stb_out = !stb_out;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 91 9d 05 	lds	r25, 0x059D
    3136:	91 11       	cpse	r25, r1
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	80 93 9d 05 	sts	0x059D, r24
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    313e:	8d ef       	ldi	r24, 0xFD	; 253
    3140:	0e 94 f5 07 	call	0xfea	; 0xfea <RTOS_deleteTask>
      show_lcd_edit_stb_out();
    3144:	0e 94 43 18 	call	0x3086	; 0x3086 <show_lcd_edit_stb_out>
    break;
    3148:	08 95       	ret
    case EVENT_KEY_SET:
	  save_stb_out(stb_out);
    314a:	80 91 9d 05 	lds	r24, 0x059D
    314e:	0e 94 41 0b 	call	0x1682	; 0x1682 <save_stb_out>
      nedit = 0;
    3152:	10 92 29 05 	sts	0x0529, r1
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    3156:	8c e6       	ldi	r24, 0x6C	; 108
    3158:	60 e0       	ldi	r22, 0x00	; 0
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	50 e0       	ldi	r21, 0x00	; 0
    3160:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
      show_lcd_edit_stb_out();
    3164:	0e 94 43 18 	call	0x3086	; 0x3086 <show_lcd_edit_stb_out>
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    3168:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
    316c:	81 30       	cpi	r24, 0x01	; 1
    316e:	89 f0       	breq	.+34     	; 0x3192 <run_edit_stb_out+0xe4>
    3170:	c2 98       	cbi	0x18, 2	; 24
    3172:	08 95       	ret
    break;
    case EVENT_KEY_MENU:
	  KBD_set_type(1);
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
      SET_STATE(run_option);
    317a:	86 e7       	ldi	r24, 0x76	; 118
    317c:	9c e1       	ldi	r25, 0x1C	; 28
    317e:	90 93 a6 00 	sts	0x00A6, r25
    3182:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    3186:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    318a:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
    318e:	81 30       	cpi	r24, 0x01	; 1
    3190:	11 f4       	brne	.+4      	; 0x3196 <run_edit_stb_out+0xe8>
    3192:	c2 9a       	sbi	0x18, 2	; 24
    3194:	08 95       	ret
    3196:	c2 98       	cbi	0x18, 2	; 24
    3198:	08 95       	ret

0000319a <show_lcd_edit_fm_stations>:
    break;
  }
}
//=============================================================================
void show_lcd_edit_fm_stations(void)
{
    319a:	1f 93       	push	r17
  LCD_SetXY(0, 0); LCD_puts(optionmenu[OM_SET_FM_STATIONS]);
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	60 e0       	ldi	r22, 0x00	; 0
    31a0:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    31a4:	80 91 d2 02 	lds	r24, 0x02D2
    31a8:	90 91 d3 02 	lds	r25, 0x02D3
    31ac:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(0, 1); LCD_puts(MSG_CHANNEL); print_dec(channel + 1, 2, '0'); LCD_dat(' ');
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	61 e0       	ldi	r22, 0x01	; 1
    31b4:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    31b8:	8e ec       	ldi	r24, 0xCE	; 206
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    31c0:	80 91 30 05 	lds	r24, 0x0530
    31c4:	90 e0       	ldi	r25, 0x00	; 0
    31c6:	01 96       	adiw	r24, 0x01	; 1
    31c8:	62 e0       	ldi	r22, 0x02	; 2
    31ca:	40 e3       	ldi	r20, 0x30	; 48
    31cc:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    31d0:	80 e2       	ldi	r24, 0x20	; 32
    31d2:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  show_freq(); if ((nedit == FM_NORMAL_MODE) || (blinks == 1)) LCD_puts(MSG_MHZ); else LCD_space(3);
    31d6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <show_freq>
    31da:	80 91 29 05 	lds	r24, 0x0529
    31de:	88 23       	and	r24, r24
    31e0:	21 f0       	breq	.+8      	; 0x31ea <show_lcd_edit_fm_stations+0x50>
    31e2:	80 91 24 05 	lds	r24, 0x0524
    31e6:	81 30       	cpi	r24, 0x01	; 1
    31e8:	29 f4       	brne	.+10     	; 0x31f4 <show_lcd_edit_fm_stations+0x5a>
    31ea:	86 ed       	ldi	r24, 0xD6	; 214
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    31f2:	03 c0       	rjmp	.+6      	; 0x31fa <show_lcd_edit_fm_stations+0x60>
    31f4:	83 e0       	ldi	r24, 0x03	; 3
    31f6:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
  LCD_SetXY(0, 2); LCD_puts(mainmenu[MM_VOLUME]);
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	62 e0       	ldi	r22, 0x02	; 2
    31fe:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    3202:	80 91 2f 02 	lds	r24, 0x022F
    3206:	90 91 30 02 	lds	r25, 0x0230
    320a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(18, 2); print_dec(tda7313Get_Param(mmenu), 2, '0');
    320e:	82 e1       	ldi	r24, 0x12	; 18
    3210:	62 e0       	ldi	r22, 0x02	; 2
    3212:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    3216:	80 91 26 05 	lds	r24, 0x0526
    321a:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	62 e0       	ldi	r22, 0x02	; 2
    3222:	40 e3       	ldi	r20, 0x30	; 48
    3224:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
  LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	63 e0       	ldi	r22, 0x03	; 3
    322c:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    3230:	80 91 26 05 	lds	r24, 0x0526
    3234:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    3238:	18 2f       	mov	r17, r24
    323a:	80 91 26 05 	lds	r24, 0x0526
    323e:	0e 94 4f 20 	call	0x409e	; 0x409e <tda7313Get_Max_Param>
    3242:	68 2f       	mov	r22, r24
    3244:	81 2f       	mov	r24, r17
    3246:	44 e1       	ldi	r20, 0x14	; 20
    3248:	0e 94 82 01 	call	0x304	; 0x304 <LCD_progress_bar>
}
    324c:	1f 91       	pop	r17
    324e:	08 95       	ret

00003250 <run_edit_fm_stations>:
  if (blinks == 1) print_dec(stb_out, 1, ' '); else LCD_dat(' ');
}
//=============================================================================
//=============================================================================
void run_edit_fm_stations(unsigned char event)
{
    3250:	1f 93       	push	r17
  switch(event) {
    3252:	8c 39       	cpi	r24, 0x9C	; 156
    3254:	09 f4       	brne	.+2      	; 0x3258 <run_edit_fm_stations+0x8>
    3256:	6b c0       	rjmp	.+214    	; 0x332e <run_edit_fm_stations+0xde>
    3258:	8d 39       	cpi	r24, 0x9D	; 157
    325a:	e0 f4       	brcc	.+56     	; 0x3294 <run_edit_fm_stations+0x44>
    325c:	88 36       	cpi	r24, 0x68	; 104
    325e:	09 f4       	brne	.+2      	; 0x3262 <run_edit_fm_stations+0x12>
    3260:	92 c0       	rjmp	.+292    	; 0x3386 <run_edit_fm_stations+0x136>
    3262:	89 36       	cpi	r24, 0x69	; 105
    3264:	50 f4       	brcc	.+20     	; 0x327a <run_edit_fm_stations+0x2a>
    3266:	86 36       	cpi	r24, 0x66	; 102
    3268:	09 f4       	brne	.+2      	; 0x326c <run_edit_fm_stations+0x1c>
    326a:	0c c1       	rjmp	.+536    	; 0x3484 <run_edit_fm_stations+0x234>
    326c:	87 36       	cpi	r24, 0x67	; 103
    326e:	08 f0       	brcs	.+2      	; 0x3272 <run_edit_fm_stations+0x22>
    3270:	1b c1       	rjmp	.+566    	; 0x34a8 <run_edit_fm_stations+0x258>
    3272:	84 36       	cpi	r24, 0x64	; 100
    3274:	09 f0       	breq	.+2      	; 0x3278 <run_edit_fm_stations+0x28>
    3276:	85 c1       	rjmp	.+778    	; 0x3582 <run_edit_fm_stations+0x332>
    3278:	80 c0       	rjmp	.+256    	; 0x337a <run_edit_fm_stations+0x12a>
    327a:	8a 36       	cpi	r24, 0x6A	; 106
    327c:	09 f4       	brne	.+2      	; 0x3280 <run_edit_fm_stations+0x30>
    327e:	a6 c0       	rjmp	.+332    	; 0x33cc <run_edit_fm_stations+0x17c>
    3280:	8a 36       	cpi	r24, 0x6A	; 106
    3282:	08 f4       	brcc	.+2      	; 0x3286 <run_edit_fm_stations+0x36>
    3284:	95 c0       	rjmp	.+298    	; 0x33b0 <run_edit_fm_stations+0x160>
    3286:	8b 36       	cpi	r24, 0x6B	; 107
    3288:	09 f4       	brne	.+2      	; 0x328c <run_edit_fm_stations+0x3c>
    328a:	c3 c0       	rjmp	.+390    	; 0x3412 <run_edit_fm_stations+0x1c2>
    328c:	8c 36       	cpi	r24, 0x6C	; 108
    328e:	09 f0       	breq	.+2      	; 0x3292 <run_edit_fm_stations+0x42>
    3290:	78 c1       	rjmp	.+752    	; 0x3582 <run_edit_fm_stations+0x332>
    3292:	40 c1       	rjmp	.+640    	; 0x3514 <run_edit_fm_stations+0x2c4>
    3294:	8a 3a       	cpi	r24, 0xAA	; 170
    3296:	09 f4       	brne	.+2      	; 0x329a <run_edit_fm_stations+0x4a>
    3298:	41 c0       	rjmp	.+130    	; 0x331c <run_edit_fm_stations+0xcc>
    329a:	8b 3a       	cpi	r24, 0xAB	; 171
    329c:	80 f4       	brcc	.+32     	; 0x32be <run_edit_fm_stations+0x6e>
    329e:	84 3a       	cpi	r24, 0xA4	; 164
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <run_edit_fm_stations+0x54>
    32a2:	56 c0       	rjmp	.+172    	; 0x3350 <run_edit_fm_stations+0x100>
    32a4:	85 3a       	cpi	r24, 0xA5	; 165
    32a6:	20 f4       	brcc	.+8      	; 0x32b0 <run_edit_fm_stations+0x60>
    32a8:	80 3a       	cpi	r24, 0xA0	; 160
    32aa:	09 f0       	breq	.+2      	; 0x32ae <run_edit_fm_stations+0x5e>
    32ac:	6a c1       	rjmp	.+724    	; 0x3582 <run_edit_fm_stations+0x332>
    32ae:	62 c0       	rjmp	.+196    	; 0x3374 <run_edit_fm_stations+0x124>
    32b0:	85 3a       	cpi	r24, 0xA5	; 165
    32b2:	09 f4       	brne	.+2      	; 0x32b6 <run_edit_fm_stations+0x66>
    32b4:	e1 c0       	rjmp	.+450    	; 0x3478 <run_edit_fm_stations+0x228>
    32b6:	89 3a       	cpi	r24, 0xA9	; 169
    32b8:	09 f0       	breq	.+2      	; 0x32bc <run_edit_fm_stations+0x6c>
    32ba:	63 c1       	rjmp	.+710    	; 0x3582 <run_edit_fm_stations+0x332>
    32bc:	0b c0       	rjmp	.+22     	; 0x32d4 <run_edit_fm_stations+0x84>
    32be:	8c 3a       	cpi	r24, 0xAC	; 172
    32c0:	29 f1       	breq	.+74     	; 0x330c <run_edit_fm_stations+0xbc>
    32c2:	8c 3a       	cpi	r24, 0xAC	; 172
    32c4:	90 f0       	brcs	.+36     	; 0x32ea <run_edit_fm_stations+0x9a>
    32c6:	8f 3a       	cpi	r24, 0xAF	; 175
    32c8:	09 f4       	brne	.+2      	; 0x32cc <run_edit_fm_stations+0x7c>
    32ca:	2c c1       	rjmp	.+600    	; 0x3524 <run_edit_fm_stations+0x2d4>
    32cc:	8d 3f       	cpi	r24, 0xFD	; 253
    32ce:	09 f0       	breq	.+2      	; 0x32d2 <run_edit_fm_stations+0x82>
    32d0:	58 c1       	rjmp	.+688    	; 0x3582 <run_edit_fm_stations+0x332>
    32d2:	e7 c0       	rjmp	.+462    	; 0x34a2 <run_edit_fm_stations+0x252>
    case EVENT_SET_STB_OUT_ON:
      if (load_stb_out() == 1) { LED_STB_OUT_0; } else { LED_STB_OUT_1; }
    32d4:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
    32d8:	81 30       	cpi	r24, 0x01	; 1
    32da:	11 f4       	brne	.+4      	; 0x32e0 <run_edit_fm_stations+0x90>
    32dc:	c2 98       	cbi	0x18, 2	; 24
    32de:	01 c0       	rjmp	.+2      	; 0x32e2 <run_edit_fm_stations+0x92>
    32e0:	c2 9a       	sbi	0x18, 2	; 24
      RTOS_setTask(EVENT_SET_AS_WAIT_ON, 1000, 0);
    32e2:	8b ea       	ldi	r24, 0xAB	; 171
    32e4:	68 ee       	ldi	r22, 0xE8	; 232
    32e6:	73 e0       	ldi	r23, 0x03	; 3
    32e8:	18 c1       	rjmp	.+560    	; 0x351a <run_edit_fm_stations+0x2ca>
    break;
    case EVENT_SET_AS_WAIT_ON:
      LED_AC_WAIT_on();
    32ea:	c3 9a       	sbi	0x18, 3	; 24
      tuner_SetChan(tuner_GetChan(channel));
    32ec:	80 91 30 05 	lds	r24, 0x0530
    32f0:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    32f4:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
	  tda7313Set_Param(MM_VOLUME, tda7313_Load_vol_fm_edit());
    32f8:	0e 94 4a 22 	call	0x4494	; 0x4494 <tda7313_Load_vol_fm_edit>
    32fc:	68 2f       	mov	r22, r24
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	0e 94 4c 21 	call	0x4298	; 0x4298 <tda7313Set_Param>
      tda7313SetMute(0);
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
    330a:	cb c0       	rjmp	.+406    	; 0x34a2 <run_edit_fm_stations+0x252>
      show_lcd_edit_fm_stations();
    break;
    case EVENT_SET_AS_WAIT_OFF:
	  tuner_SetMute(1);
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	0e 94 fd 22 	call	0x45fa	; 0x45fa <tea5767SetMute>
      LED_AC_WAIT_off();
    3312:	c3 98       	cbi	0x18, 3	; 24
      RTOS_setTask(EVENT_SET_STB_OUT_OFF, 100, 0);
    3314:	8a ea       	ldi	r24, 0xAA	; 170
    3316:	64 e6       	ldi	r22, 0x64	; 100
    3318:	70 e0       	ldi	r23, 0x00	; 0
    331a:	ff c0       	rjmp	.+510    	; 0x351a <run_edit_fm_stations+0x2ca>
    break;
    case EVENT_SET_STB_OUT_OFF:
      if (load_stb_out() == 1) { LED_STB_OUT_1; } else { LED_STB_OUT_0; }
    331c:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
    3320:	81 30       	cpi	r24, 0x01	; 1
    3322:	11 f4       	brne	.+4      	; 0x3328 <run_edit_fm_stations+0xd8>
    3324:	c2 9a       	sbi	0x18, 2	; 24
    3326:	01 c0       	rjmp	.+2      	; 0x332a <run_edit_fm_stations+0xda>
    3328:	c2 98       	cbi	0x18, 2	; 24
      RTOS_setTask(EVENT_STOP_FM_EDIT, 0, 0);
    332a:	8f ea       	ldi	r24, 0xAF	; 175
    332c:	f4 c0       	rjmp	.+488    	; 0x3516 <run_edit_fm_stations+0x2c6>
    break;
    case EVENT_NOKEY:
	  if (nedit == FM_NORMAL_MODE) {
    332e:	80 91 29 05 	lds	r24, 0x0529
    3332:	88 23       	and	r24, r24
    3334:	41 f4       	brne	.+16     	; 0x3346 <run_edit_fm_stations+0xf6>
        RTOS_setTask(EVENT_SET_AS_WAIT_OFF, 0, 0);
    3336:	8c ea       	ldi	r24, 0xAC	; 172
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	50 e0       	ldi	r21, 0x00	; 0
    3340:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    3344:	ae c0       	rjmp	.+348    	; 0x34a2 <run_edit_fm_stations+0x252>
      } else {
	    nedit = FM_NORMAL_MODE;
    3346:	10 92 29 05 	sts	0x0529, r1
	    nokey = 0;
    334a:	10 92 25 05 	sts	0x0525, r1
    334e:	a9 c0       	rjmp	.+338    	; 0x34a2 <run_edit_fm_stations+0x252>
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_RETURN_MODE:
	  if (nedit == FM_EDIT_MODE) {
    3350:	80 91 29 05 	lds	r24, 0x0529
    3354:	81 30       	cpi	r24, 0x01	; 1
    3356:	09 f0       	breq	.+2      	; 0x335a <run_edit_fm_stations+0x10a>
    3358:	a4 c0       	rjmp	.+328    	; 0x34a2 <run_edit_fm_stations+0x252>
	    tuner_SetChannel(channel, old_chan);
    335a:	80 91 30 05 	lds	r24, 0x0530
    335e:	60 91 91 05 	lds	r22, 0x0591
    3362:	0e 94 56 23 	call	0x46ac	; 0x46ac <tuner_SetChannel>
	    tuner_SetChan(old_chan);
    3366:	80 91 91 05 	lds	r24, 0x0591
    336a:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
	    nedit = FM_NORMAL_MODE;
    336e:	10 92 29 05 	sts	0x0529, r1
    3372:	97 c0       	rjmp	.+302    	; 0x34a2 <run_edit_fm_stations+0x252>
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    3374:	10 92 25 05 	sts	0x0525, r1
    break;
    3378:	04 c1       	rjmp	.+520    	; 0x3582 <run_edit_fm_stations+0x332>
    case EVENT_KEY_STANDBY:
      stb_impuls();
    337a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  key_stb = 1;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	80 93 2b 05 	sts	0x052B, r24
    3384:	c7 c0       	rjmp	.+398    	; 0x3514 <run_edit_fm_stations+0x2c4>
    break;
    case EVENT_TIMER_SECOND:
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_UP:
	  if (nedit == FM_NORMAL_MODE) {
    3386:	80 91 29 05 	lds	r24, 0x0529
    338a:	88 23       	and	r24, r24
    338c:	09 f0       	breq	.+2      	; 0x3390 <run_edit_fm_stations+0x140>
    338e:	89 c0       	rjmp	.+274    	; 0x34a2 <run_edit_fm_stations+0x252>
	    if (channel > 0) channel--; else channel = FM_STATIONS - 1;
    3390:	80 91 30 05 	lds	r24, 0x0530
    3394:	88 23       	and	r24, r24
    3396:	11 f0       	breq	.+4      	; 0x339c <run_edit_fm_stations+0x14c>
    3398:	81 50       	subi	r24, 0x01	; 1
    339a:	01 c0       	rjmp	.+2      	; 0x339e <run_edit_fm_stations+0x14e>
    339c:	8d e1       	ldi	r24, 0x1D	; 29
    339e:	80 93 30 05 	sts	0x0530, r24
	    tuner_SetChan(tuner_GetChan(channel));
    33a2:	80 91 30 05 	lds	r24, 0x0530
    33a6:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    33aa:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
    33ae:	79 c0       	rjmp	.+242    	; 0x34a2 <run_edit_fm_stations+0x252>
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_DOWN:
	  if (nedit == FM_NORMAL_MODE) {
    33b0:	80 91 29 05 	lds	r24, 0x0529
    33b4:	88 23       	and	r24, r24
    33b6:	09 f0       	breq	.+2      	; 0x33ba <run_edit_fm_stations+0x16a>
    33b8:	74 c0       	rjmp	.+232    	; 0x34a2 <run_edit_fm_stations+0x252>
	    if (channel < FM_STATIONS - 1) channel++; else channel = 0;
    33ba:	80 91 30 05 	lds	r24, 0x0530
    33be:	8d 31       	cpi	r24, 0x1D	; 29
    33c0:	10 f4       	brcc	.+4      	; 0x33c6 <run_edit_fm_stations+0x176>
    33c2:	8f 5f       	subi	r24, 0xFF	; 255
    33c4:	ec cf       	rjmp	.-40     	; 0x339e <run_edit_fm_stations+0x14e>
    33c6:	10 92 30 05 	sts	0x0530, r1
    33ca:	eb cf       	rjmp	.-42     	; 0x33a2 <run_edit_fm_stations+0x152>
	    tuner_SetChan(tuner_GetChan(channel));
	  }
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_LEFT:
	  blinks = 1;
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_fm_stations();
    33d2:	0e 94 cd 18 	call	0x319a	; 0x319a <show_lcd_edit_fm_stations>
	  if (nedit == FM_NORMAL_MODE) {
    33d6:	80 91 29 05 	lds	r24, 0x0529
    33da:	88 23       	and	r24, r24
    33dc:	29 f4       	brne	.+10     	; 0x33e8 <run_edit_fm_stations+0x198>
	    tda7313Set_Param_down(mmenu);
    33de:	80 91 26 05 	lds	r24, 0x0526
    33e2:	0e 94 1f 21 	call	0x423e	; 0x423e <tda7313Set_Param_down>
    33e6:	22 c0       	rjmp	.+68     	; 0x342c <run_edit_fm_stations+0x1dc>
        RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
	  } else {
        if ( tuner_GetChan(channel) > FM_CHAN_MIN) tuner_SetChan(tuner_GetChan(channel) - 1);
    33e8:	80 91 30 05 	lds	r24, 0x0530
    33ec:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    33f0:	88 23       	and	r24, r24
    33f2:	39 f0       	breq	.+14     	; 0x3402 <run_edit_fm_stations+0x1b2>
    33f4:	80 91 30 05 	lds	r24, 0x0530
    33f8:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    33fc:	81 50       	subi	r24, 0x01	; 1
    33fe:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
		tuner_SetChannel(channel, tuner_GetChan(channel) - 1);
    3402:	10 91 30 05 	lds	r17, 0x0530
    3406:	81 2f       	mov	r24, r17
    3408:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    340c:	68 2f       	mov	r22, r24
    340e:	61 50       	subi	r22, 0x01	; 1
    3410:	25 c0       	rjmp	.+74     	; 0x345c <run_edit_fm_stations+0x20c>
	  }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
      show_lcd_edit_fm_stations();
    break;
    case EVENT_KEY_RIGHT:
	  blinks = 1;
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	80 93 24 05 	sts	0x0524, r24
      show_lcd_edit_fm_stations();
    3418:	0e 94 cd 18 	call	0x319a	; 0x319a <show_lcd_edit_fm_stations>
	  if (nedit == FM_NORMAL_MODE) {
    341c:	80 91 29 05 	lds	r24, 0x0529
    3420:	88 23       	and	r24, r24
    3422:	41 f4       	brne	.+16     	; 0x3434 <run_edit_fm_stations+0x1e4>
	    tda7313Set_Param_up(mmenu);
    3424:	80 91 26 05 	lds	r24, 0x0526
    3428:	0e 94 33 21 	call	0x4266	; 0x4266 <tda7313Set_Param_up>
        RTOS_setTask(EVENT_SAVE_PARAM, TIME_SAVE_PARAM, 0);
    342c:	85 ea       	ldi	r24, 0xA5	; 165
    342e:	60 ed       	ldi	r22, 0xD0	; 208
    3430:	77 e0       	ldi	r23, 0x07	; 7
    3432:	1a c0       	rjmp	.+52     	; 0x3468 <run_edit_fm_stations+0x218>
	  } else {
        if ( tuner_GetChan(channel) < FM_CHAN_MAX) tuner_SetChan(tuner_GetChan(channel) + 1);
    3434:	80 91 30 05 	lds	r24, 0x0530
    3438:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    343c:	82 3d       	cpi	r24, 0xD2	; 210
    343e:	38 f4       	brcc	.+14     	; 0x344e <run_edit_fm_stations+0x1fe>
    3440:	80 91 30 05 	lds	r24, 0x0530
    3444:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    3448:	8f 5f       	subi	r24, 0xFF	; 255
    344a:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
		tuner_SetChannel(channel, tuner_GetChan(channel) + 1);
    344e:	10 91 30 05 	lds	r17, 0x0530
    3452:	81 2f       	mov	r24, r17
    3454:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    3458:	68 2f       	mov	r22, r24
    345a:	6f 5f       	subi	r22, 0xFF	; 255
    345c:	81 2f       	mov	r24, r17
    345e:	0e 94 56 23 	call	0x46ac	; 0x46ac <tuner_SetChannel>
        RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    3462:	84 ea       	ldi	r24, 0xA4	; 164
    3464:	60 e1       	ldi	r22, 0x10	; 16
    3466:	77 e2       	ldi	r23, 0x27	; 39
    3468:	40 e0       	ldi	r20, 0x00	; 0
    346a:	50 e0       	ldi	r21, 0x00	; 0
    346c:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
	  }
	  RTOS_deleteTask(EVENT_TIMER_SECOND);
    3470:	8d ef       	ldi	r24, 0xFD	; 253
    3472:	0e 94 f5 07 	call	0xfea	; 0xfea <RTOS_deleteTask>
    3476:	15 c0       	rjmp	.+42     	; 0x34a2 <run_edit_fm_stations+0x252>
      show_lcd_edit_fm_stations();
    break;
    case EVENT_SAVE_PARAM:
      tda7313_Save_vol_fm_edit(tda7313Get_Param(0));
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	0e 94 33 20 	call	0x4066	; 0x4066 <tda7313Get_Param>
    347e:	0e 94 44 22 	call	0x4488	; 0x4488 <tda7313_Save_vol_fm_edit>
    break;
    3482:	7f c0       	rjmp	.+254    	; 0x3582 <run_edit_fm_stations+0x332>
    case EVENT_KEY_SELECT:
	  tuner_SetChannel(channel, 0xFF);
    3484:	80 91 30 05 	lds	r24, 0x0530
    3488:	6f ef       	ldi	r22, 0xFF	; 255
    348a:	0e 94 56 23 	call	0x46ac	; 0x46ac <tuner_SetChannel>
      tuner_SetChan(0xFF);
    348e:	8f ef       	ldi	r24, 0xFF	; 255
    3490:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
	  nedit = FM_NORMAL_MODE;
    3494:	10 92 29 05 	sts	0x0529, r1
      tuner_Save_stations(channel, 0xFF);
    3498:	80 91 30 05 	lds	r24, 0x0530
    349c:	6f ef       	ldi	r22, 0xFF	; 255
    349e:	0e 94 67 23 	call	0x46ce	; 0x46ce <tuner_Save_stations>
      show_lcd_edit_fm_stations();
    34a2:	0e 94 cd 18 	call	0x319a	; 0x319a <show_lcd_edit_fm_stations>
    break;
    34a6:	6d c0       	rjmp	.+218    	; 0x3582 <run_edit_fm_stations+0x332>
    case EVENT_KEY_SET:
	  if (nedit == FM_NORMAL_MODE) {
    34a8:	80 91 29 05 	lds	r24, 0x0529
    34ac:	88 23       	and	r24, r24
    34ae:	e9 f4       	brne	.+58     	; 0x34ea <run_edit_fm_stations+0x29a>
	    old_chan = tuner_GetChan(channel);
    34b0:	80 91 30 05 	lds	r24, 0x0530
    34b4:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    34b8:	80 93 91 05 	sts	0x0591, r24
	    if (old_chan > FM_CHAN_MAX) {
    34bc:	83 3d       	cpi	r24, 0xD3	; 211
    34be:	60 f0       	brcs	.+24     	; 0x34d8 <run_edit_fm_stations+0x288>
		  tuner_SetChannel(channel, get_fm_def_chan());
    34c0:	10 91 30 05 	lds	r17, 0x0530
    34c4:	0e 94 c0 23 	call	0x4780	; 0x4780 <get_fm_def_chan>
    34c8:	68 2f       	mov	r22, r24
    34ca:	81 2f       	mov	r24, r17
    34cc:	0e 94 56 23 	call	0x46ac	; 0x46ac <tuner_SetChannel>
	      tuner_SetChan(get_fm_def_chan());
    34d0:	0e 94 c0 23 	call	0x4780	; 0x4780 <get_fm_def_chan>
    34d4:	0e 94 40 23 	call	0x4680	; 0x4680 <tuner_SetChan>
		}
        RTOS_setTask(EVENT_RETURN_MODE, TIME_RETURN_VOLUME, 0);
    34d8:	84 ea       	ldi	r24, 0xA4	; 164
    34da:	60 e1       	ldi	r22, 0x10	; 16
    34dc:	77 e2       	ldi	r23, 0x27	; 39
    34de:	40 e0       	ldi	r20, 0x00	; 0
    34e0:	50 e0       	ldi	r21, 0x00	; 0
    34e2:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
        show_lcd_edit_fm_stations();
    34e6:	0e 94 cd 18 	call	0x319a	; 0x319a <show_lcd_edit_fm_stations>
	  }
	  if (nedit == FM_EDIT_MODE) {
    34ea:	80 91 29 05 	lds	r24, 0x0529
    34ee:	81 30       	cpi	r24, 0x01	; 1
    34f0:	49 f4       	brne	.+18     	; 0x3504 <run_edit_fm_stations+0x2b4>
        tuner_Save_stations(channel, tuner_GetChan(channel));
    34f2:	10 91 30 05 	lds	r17, 0x0530
    34f6:	81 2f       	mov	r24, r17
    34f8:	0e 94 36 23 	call	0x466c	; 0x466c <tuner_GetChan>
    34fc:	68 2f       	mov	r22, r24
    34fe:	81 2f       	mov	r24, r17
    3500:	0e 94 67 23 	call	0x46ce	; 0x46ce <tuner_Save_stations>
	  }
      nedit = !nedit;
    3504:	81 e0       	ldi	r24, 0x01	; 1
    3506:	90 91 29 05 	lds	r25, 0x0529
    350a:	91 11       	cpse	r25, r1
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	80 93 29 05 	sts	0x0529, r24
    break;
    3512:	37 c0       	rjmp	.+110    	; 0x3582 <run_edit_fm_stations+0x332>
    case EVENT_KEY_MENU:
      RTOS_setTask(EVENT_SET_AS_WAIT_OFF, 0, 0);
    3514:	8c ea       	ldi	r24, 0xAC	; 172
    3516:	60 e0       	ldi	r22, 0x00	; 0
    3518:	70 e0       	ldi	r23, 0x00	; 0
    351a:	40 e0       	ldi	r20, 0x00	; 0
    351c:	50 e0       	ldi	r21, 0x00	; 0
    351e:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    3522:	2f c0       	rjmp	.+94     	; 0x3582 <run_edit_fm_stations+0x332>
    case EVENT_STOP_FM_EDIT:
      LCD_clear();
    3524:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      channel = tuner_Load_channel();
    3528:	0e 94 ad 23 	call	0x475a	; 0x475a <tuner_Load_channel>
    352c:	80 93 30 05 	sts	0x0530, r24
	  tda7313SetInput(tda7313_Load_Input());
    3530:	0e 94 85 21 	call	0x430a	; 0x430a <tda7313_Load_Input>
    3534:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <tda7313SetInput>
      tda7313Set_Param_no_send(TDA_VOLUME, tda7313_Load_param(tda7313GetInput(), TDA_VOLUME)), 
    3538:	0e 94 2d 20 	call	0x405a	; 0x405a <tda7313GetInput>
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	0e 94 e7 21 	call	0x43ce	; 0x43ce <tda7313_Load_param>
    3542:	68 2f       	mov	r22, r24
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	0e 94 41 20 	call	0x4082	; 0x4082 <tda7313Set_Param_no_send>
      tda7313SetMute(1);
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
      tuner_Save_all_stations();
    3550:	0e 94 79 23 	call	0x46f2	; 0x46f2 <tuner_Save_all_stations>
	  if (key_stb == 1) {
    3554:	80 91 2b 05 	lds	r24, 0x052B
    3558:	81 30       	cpi	r24, 0x01	; 1
    355a:	59 f4       	brne	.+22     	; 0x3572 <run_edit_fm_stations+0x322>
        key_stb = 0;
    355c:	10 92 2b 05 	sts	0x052B, r1
        LCD_load_bignum();
    3560:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
        SET_STATE(run_standby);
    3564:	80 e6       	ldi	r24, 0x60	; 96
    3566:	92 e1       	ldi	r25, 0x12	; 18
    3568:	90 93 a6 00 	sts	0x00A6, r25
    356c:	80 93 a5 00 	sts	0x00A5, r24
    3570:	08 c0       	rjmp	.+16     	; 0x3582 <run_edit_fm_stations+0x332>
	  } else {
        SET_STATE(run_option);
    3572:	86 e7       	ldi	r24, 0x76	; 118
    3574:	9c e1       	ldi	r25, 0x1C	; 28
    3576:	90 93 a6 00 	sts	0x00A6, r25
    357a:	80 93 a5 00 	sts	0x00A5, r24
        show_lcd_option();
    357e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
	  }
    break;
  }
}
    3582:	1f 91       	pop	r17
    3584:	08 95       	ret

00003586 <run_alarm>:
}
//=============================================================================
//=============================================================================
void run_alarm(unsigned char event)
{
  switch(event) {
    3586:	80 3a       	cpi	r24, 0xA0	; 160
    3588:	29 f0       	breq	.+10     	; 0x3594 <run_alarm+0xe>
    358a:	8d 3f       	cpi	r24, 0xFD	; 253
    358c:	f9 f0       	breq	.+62     	; 0x35cc <run_alarm+0x46>
    358e:	84 36       	cpi	r24, 0x64	; 100
    3590:	89 f5       	brne	.+98     	; 0x35f4 <run_alarm+0x6e>
    3592:	0b c0       	rjmp	.+22     	; 0x35aa <run_alarm+0x24>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    3594:	10 92 25 05 	sts	0x0525, r1
	  LCD_clear();
    3598:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_defchar();
    359c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
	  time_alarm = 0;
    35a0:	10 92 2d 05 	sts	0x052D, r1
      SET_STATE(run_main);
    35a4:	84 e7       	ldi	r24, 0x74	; 116
    35a6:	9e e0       	ldi	r25, 0x0E	; 14
    35a8:	0c c0       	rjmp	.+24     	; 0x35c2 <run_alarm+0x3c>
    break;
    case EVENT_KEY_STANDBY:
      stb_impuls();
    35aa:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
	  LCD_clear();
    35ae:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    35b2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      tda7313SetMute(1);
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
      LED_STANDBY_on();
    35bc:	c0 98       	cbi	0x18, 0	; 24
      SET_STATE(run_standby);
    35be:	80 e6       	ldi	r24, 0x60	; 96
    35c0:	92 e1       	ldi	r25, 0x12	; 18
    35c2:	90 93 a6 00 	sts	0x00A6, r25
    35c6:	80 93 a5 00 	sts	0x00A5, r24
    break;
    35ca:	08 95       	ret
    case EVENT_TIMER_SECOND:
	  nokey = 0;
    35cc:	10 92 25 05 	sts	0x0525, r1
      if (time_alarm > 0) {
    35d0:	80 91 2d 05 	lds	r24, 0x052D
    35d4:	88 23       	and	r24, r24
    35d6:	21 f0       	breq	.+8      	; 0x35e0 <run_alarm+0x5a>
		time_alarm--;
    35d8:	81 50       	subi	r24, 0x01	; 1
    35da:	80 93 2d 05 	sts	0x052D, r24
    35de:	08 95       	ret
      } else {
	    LCD_clear();
    35e0:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
        LCD_load_defchar();
    35e4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_load_defchar>
        SET_STATE(run_main);
    35e8:	84 e7       	ldi	r24, 0x74	; 116
    35ea:	9e e0       	ldi	r25, 0x0E	; 14
    35ec:	90 93 a6 00 	sts	0x00A6, r25
    35f0:	80 93 a5 00 	sts	0x00A5, r24
    35f4:	08 95       	ret

000035f6 <check_alarm>:
    break;
  }
}
//=============================================================================
uint8_t check_alarm(void)
{
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <check_alarm+0xa>
    3600:	0f 92       	push	r0
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
  unsigned char h,m,s;
  if (a_onoff == 1) {
    3606:	80 91 94 05 	lds	r24, 0x0594
    360a:	81 30       	cpi	r24, 0x01	; 1
    360c:	21 f5       	brne	.+72     	; 0x3656 <check_alarm+0x60>
    if (BitIsSet(a_wday, RTC_dayofweek())) {
    360e:	00 91 9a 05 	lds	r16, 0x059A
    3612:	10 e0       	ldi	r17, 0x00	; 0
    3614:	0e 94 51 04 	call	0x8a2	; 0x8a2 <RTC_dayofweek>
    3618:	98 01       	movw	r18, r16
    361a:	02 c0       	rjmp	.+4      	; 0x3620 <check_alarm+0x2a>
    361c:	35 95       	asr	r19
    361e:	27 95       	ror	r18
    3620:	8a 95       	dec	r24
    3622:	e2 f7       	brpl	.-8      	; 0x361c <check_alarm+0x26>
    3624:	20 ff       	sbrs	r18, 0
    3626:	17 c0       	rjmp	.+46     	; 0x3656 <check_alarm+0x60>
      RTC_get_time(&h,&m,&s);
    3628:	ce 01       	movw	r24, r28
    362a:	01 96       	adiw	r24, 0x01	; 1
    362c:	be 01       	movw	r22, r28
    362e:	6e 5f       	subi	r22, 0xFE	; 254
    3630:	7f 4f       	sbci	r23, 0xFF	; 255
    3632:	ae 01       	movw	r20, r28
    3634:	4d 5f       	subi	r20, 0xFD	; 253
    3636:	5f 4f       	sbci	r21, 0xFF	; 255
    3638:	0e 94 be 03 	call	0x77c	; 0x77c <RTC_get_time>
	  if ((a_hh == h) && (a_mm == m) && (s == 0)) {
    363c:	90 91 cb 05 	lds	r25, 0x05CB
    3640:	89 81       	ldd	r24, Y+1	; 0x01
    3642:	98 17       	cp	r25, r24
    3644:	41 f4       	brne	.+16     	; 0x3656 <check_alarm+0x60>
    3646:	90 91 9c 05 	lds	r25, 0x059C
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	98 17       	cp	r25, r24
    364e:	19 f4       	brne	.+6      	; 0x3656 <check_alarm+0x60>
	default:
    break;
  }
}
//=============================================================================
uint8_t check_alarm(void)
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	9b 81       	ldd	r25, Y+3	; 0x03
    3654:	91 11       	cpse	r25, r1
	  if ((a_hh == h) && (a_mm == m) && (s == 0)) {
        return 1;
	  }
	} 
  }
  return 0;
    3656:	80 e0       	ldi	r24, 0x00	; 0
}
    3658:	0f 90       	pop	r0
    365a:	0f 90       	pop	r0
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	1f 91       	pop	r17
    3664:	0f 91       	pop	r16
    3666:	08 95       	ret

00003668 <set_blink>:
  }
}
//=============================================================================
void set_blink(void)
{
  blinks = !blinks;
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	90 91 24 05 	lds	r25, 0x0524
    366e:	91 11       	cpse	r25, r1
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	80 93 24 05 	sts	0x0524, r24
  if (ds_cnt_show < TIME_SHOW_DS) {
    3676:	80 91 32 05 	lds	r24, 0x0532
    367a:	80 31       	cpi	r24, 0x10	; 16
    367c:	20 f4       	brcc	.+8      	; 0x3686 <set_blink+0x1e>
    ds_cnt_show++;
    367e:	8f 5f       	subi	r24, 0xFF	; 255
    3680:	80 93 32 05 	sts	0x0532, r24
    3684:	02 c0       	rjmp	.+4      	; 0x368a <set_blink+0x22>
  } else {
    ds_cnt_show = 0;
    3686:	10 92 32 05 	sts	0x0532, r1
  }
  if (nokey < NOKEY_TIME * 2) {
    368a:	80 91 25 05 	lds	r24, 0x0525
    368e:	8c 33       	cpi	r24, 0x3C	; 60
    3690:	20 f4       	brcc	.+8      	; 0x369a <set_blink+0x32>
    nokey++;
    3692:	8f 5f       	subi	r24, 0xFF	; 255
    3694:	80 93 25 05 	sts	0x0525, r24
    3698:	09 c0       	rjmp	.+18     	; 0x36ac <set_blink+0x44>
  } else {
    ds_cnt_show = 0;
    369a:	10 92 32 05 	sts	0x0532, r1
    RTOS_setTask(EVENT_NOKEY, 0, 0);
    369e:	8c e9       	ldi	r24, 0x9C	; 156
    36a0:	60 e0       	ldi	r22, 0x00	; 0
    36a2:	70 e0       	ldi	r23, 0x00	; 0
    36a4:	40 e0       	ldi	r20, 0x00	; 0
    36a6:	50 e0       	ldi	r21, 0x00	; 0
    36a8:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
  }
  if ((check_alarm() == 1) && (main_mode != MODE_OPTIONS) && (fault_on == 0)) {
    36ac:	0e 94 fb 1a 	call	0x35f6	; 0x35f6 <check_alarm>
    36b0:	81 30       	cpi	r24, 0x01	; 1
    36b2:	b1 f5       	brne	.+108    	; 0x3720 <set_blink+0xb8>
    36b4:	80 91 31 05 	lds	r24, 0x0531
    36b8:	84 30       	cpi	r24, 0x04	; 4
    36ba:	91 f1       	breq	.+100    	; 0x3720 <set_blink+0xb8>
    36bc:	80 91 2e 05 	lds	r24, 0x052E
    36c0:	88 23       	and	r24, r24
    36c2:	71 f5       	brne	.+92     	; 0x3720 <set_blink+0xb8>
	BEEP(); 
    36c4:	97 98       	cbi	0x12, 7	; 18
    36c6:	8f e3       	ldi	r24, 0x3F	; 63
    36c8:	9c e9       	ldi	r25, 0x9C	; 156
    36ca:	01 97       	sbiw	r24, 0x01	; 1
    36cc:	f1 f7       	brne	.-4      	; 0x36ca <set_blink+0x62>
    36ce:	00 c0       	rjmp	.+0      	; 0x36d0 <set_blink+0x68>
    36d0:	00 00       	nop
    36d2:	97 9a       	sbi	0x12, 7	; 18
    time_alarm = ALARM_BEEP;
    36d4:	88 e7       	ldi	r24, 0x78	; 120
    36d6:	80 93 2d 05 	sts	0x052D, r24
    tda7313SetInput(FM_INPUT);
    36da:	82 e0       	ldi	r24, 0x02	; 2
    36dc:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <tda7313SetInput>
    tda7313_Save_Input(FM_INPUT);
    36e0:	82 e0       	ldi	r24, 0x02	; 2
    36e2:	0e 94 7f 21 	call	0x42fe	; 0x42fe <tda7313_Save_Input>
	LIGHT_on();
    36e6:	ac 9a       	sbi	0x15, 4	; 21
	if (main_mode == MODE_STANDBY) {
    36e8:	80 91 31 05 	lds	r24, 0x0531
    36ec:	88 23       	and	r24, r24
    36ee:	29 f4       	brne	.+10     	; 0x36fa <set_blink+0x92>
      tda7313SetMute(1);
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
      RTOS_setTask(EVENT_KEY_STANDBY, 0, 0);
    36f6:	84 e6       	ldi	r24, 0x64	; 100
    36f8:	07 c0       	rjmp	.+14     	; 0x3708 <set_blink+0xa0>
	} else if (main_mode == MODE_NOKEY) {
    36fa:	82 30       	cpi	r24, 0x02	; 2
    36fc:	11 f4       	brne	.+4      	; 0x3702 <set_blink+0x9a>
      RTOS_setTask(EVENT_KEY_PRESS, 0, 0);
    36fe:	80 ea       	ldi	r24, 0xA0	; 160
    3700:	03 c0       	rjmp	.+6      	; 0x3708 <set_blink+0xa0>
	} else if (main_mode == MODE_MUTE) {
    3702:	81 30       	cpi	r24, 0x01	; 1
    3704:	41 f4       	brne	.+16     	; 0x3716 <set_blink+0xae>
      RTOS_setTask(EVENT_KEY_MUTE, 0, 0);
    3706:	85 e6       	ldi	r24, 0x65	; 101
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	70 e0       	ldi	r23, 0x00	; 0
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	50 e0       	ldi	r21, 0x00	; 0
    3710:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    3714:	08 95       	ret
	} else if (main_mode == MODE_MAIN) {
    3716:	83 30       	cpi	r24, 0x03	; 3
    3718:	51 f4       	brne	.+20     	; 0x372e <set_blink+0xc6>
      show_lcd_main();
    371a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <show_lcd_main>
    371e:	08 95       	ret
	}
 	return;
  }
  RTOS_setTask(EVENT_TIMER_SECOND, 0, 0);
    3720:	8d ef       	ldi	r24, 0xFD	; 253
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	40 e0       	ldi	r20, 0x00	; 0
    3728:	50 e0       	ldi	r21, 0x00	; 0
    372a:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    372e:	08 95       	ret

00003730 <show_lcd_edit_rc5_code>:
  }
}
//=============================================================================
void show_lcd_edit_rc5_code(void)
{
  LCD_SetXY(0, 0); LCD_puts(optionmenu[OM_SET_RC5_CODE]);
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	60 e0       	ldi	r22, 0x00	; 0
    3734:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    3738:	80 91 d4 02 	lds	r24, 0x02D4
    373c:	90 91 d5 02 	lds	r25, 0x02D5
    3740:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(0, 2); LCD_puts(rc5_menu[rc5menu]);
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	62 e0       	ldi	r22, 0x02	; 2
    3748:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    374c:	e0 91 28 05 	lds	r30, 0x0528
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	ee 0f       	add	r30, r30
    3754:	ff 1f       	adc	r31, r31
    3756:	e4 51       	subi	r30, 0x14	; 20
    3758:	fc 4f       	sbci	r31, 0xFC	; 252
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
  LCD_SetXY(14, 2); 
    3762:	8e e0       	ldi	r24, 0x0E	; 14
    3764:	62 e0       	ldi	r22, 0x02	; 2
    3766:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
  if (rc5_code[RC5_CMD][rc5menu] == 0xFF) {
    376a:	e0 91 28 05 	lds	r30, 0x0528
    376e:	f0 e0       	ldi	r31, 0x00	; 0
    3770:	e0 56       	subi	r30, 0x60	; 96
    3772:	fa 4f       	sbci	r31, 0xFA	; 250
    3774:	80 81       	ld	r24, Z
    3776:	8f 3f       	cpi	r24, 0xFF	; 255
    3778:	29 f4       	brne	.+10     	; 0x3784 <show_lcd_edit_rc5_code+0x54>
    LCD_puts(MSG_NO_RC5);
    377a:	81 e3       	ldi	r24, 0x31	; 49
    377c:	91 e0       	ldi	r25, 0x01	; 1
    377e:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    3782:	05 c0       	rjmp	.+10     	; 0x378e <show_lcd_edit_rc5_code+0x5e>
  } else {
    print_dec(rc5_code[RC5_CMD][rc5menu], 2, '0');
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	62 e0       	ldi	r22, 0x02	; 2
    3788:	40 e3       	ldi	r20, 0x30	; 48
    378a:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
  }
  LCD_dat(':');
    378e:	8a e3       	ldi	r24, 0x3A	; 58
    3790:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_dat>
  if (blinks == 1) {
    3794:	80 91 24 05 	lds	r24, 0x0524
    3798:	81 30       	cpi	r24, 0x01	; 1
    379a:	79 f4       	brne	.+30     	; 0x37ba <show_lcd_edit_rc5_code+0x8a>
    if (rc5_cmd == 0xFF) {
    379c:	80 91 12 04 	lds	r24, 0x0412
    37a0:	8f 3f       	cpi	r24, 0xFF	; 255
    37a2:	29 f4       	brne	.+10     	; 0x37ae <show_lcd_edit_rc5_code+0x7e>
      LCD_puts(MSG_NO_RC5);
    37a4:	81 e3       	ldi	r24, 0x31	; 49
    37a6:	91 e0       	ldi	r25, 0x01	; 1
    37a8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
    37ac:	08 95       	ret
    } else {
      print_dec(rc5_cmd, 2, '0');
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	62 e0       	ldi	r22, 0x02	; 2
    37b2:	40 e3       	ldi	r20, 0x30	; 48
    37b4:	0e 94 8f 04 	call	0x91e	; 0x91e <print_dec>
    37b8:	08 95       	ret
    }
  } else {
    LCD_space(2);
    37ba:	82 e0       	ldi	r24, 0x02	; 2
    37bc:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    37c0:	08 95       	ret

000037c2 <run_edit_rc5_code>:
  return 0;
}
//=============================================================================
//=============================================================================
void run_edit_rc5_code(unsigned char event)
{
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	0f 92       	push	r0
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
  if (event < EVENT_RC5_CODE_MAX) {
    37cc:	83 36       	cpi	r24, 0x63	; 99
    37ce:	48 f4       	brcc	.+18     	; 0x37e2 <run_edit_rc5_code+0x20>
    blinks = 1;
    37d0:	91 e0       	ldi	r25, 0x01	; 1
    37d2:	90 93 24 05 	sts	0x0524, r25
    rc5_cmd = event;
    37d6:	80 93 12 04 	sts	0x0412, r24
    show_lcd_edit_rc5_code();
    37da:	89 83       	std	Y+1, r24	; 0x01
    37dc:	0e 94 98 1b 	call	0x3730	; 0x3730 <show_lcd_edit_rc5_code>
    37e0:	89 81       	ldd	r24, Y+1	; 0x01
  }
  switch(event) {
    37e2:	8c 36       	cpi	r24, 0x6C	; 108
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <run_edit_rc5_code+0x26>
    37e6:	6a c0       	rjmp	.+212    	; 0x38bc <run_edit_rc5_code+0xfa>
    37e8:	8d 36       	cpi	r24, 0x6D	; 109
    37ea:	78 f4       	brcc	.+30     	; 0x380a <run_edit_rc5_code+0x48>
    37ec:	87 36       	cpi	r24, 0x67	; 103
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <run_edit_rc5_code+0x30>
    37f0:	4c c0       	rjmp	.+152    	; 0x388a <run_edit_rc5_code+0xc8>
    37f2:	88 36       	cpi	r24, 0x68	; 104
    37f4:	20 f4       	brcc	.+8      	; 0x37fe <run_edit_rc5_code+0x3c>
    37f6:	84 36       	cpi	r24, 0x64	; 100
    37f8:	09 f0       	breq	.+2      	; 0x37fc <run_edit_rc5_code+0x3a>
    37fa:	74 c0       	rjmp	.+232    	; 0x38e4 <run_edit_rc5_code+0x122>
    37fc:	22 c0       	rjmp	.+68     	; 0x3842 <run_edit_rc5_code+0x80>
    37fe:	88 36       	cpi	r24, 0x68	; 104
    3800:	79 f1       	breq	.+94     	; 0x3860 <run_edit_rc5_code+0x9e>
    3802:	89 36       	cpi	r24, 0x69	; 105
    3804:	09 f0       	breq	.+2      	; 0x3808 <run_edit_rc5_code+0x46>
    3806:	6e c0       	rjmp	.+220    	; 0x38e4 <run_edit_rc5_code+0x122>
    3808:	35 c0       	rjmp	.+106    	; 0x3874 <run_edit_rc5_code+0xb2>
    380a:	80 3a       	cpi	r24, 0xA0	; 160
    380c:	b9 f0       	breq	.+46     	; 0x383c <run_edit_rc5_code+0x7a>
    380e:	81 3a       	cpi	r24, 0xA1	; 161
    3810:	20 f4       	brcc	.+8      	; 0x381a <run_edit_rc5_code+0x58>
    3812:	8c 39       	cpi	r24, 0x9C	; 156
    3814:	09 f0       	breq	.+2      	; 0x3818 <run_edit_rc5_code+0x56>
    3816:	66 c0       	rjmp	.+204    	; 0x38e4 <run_edit_rc5_code+0x122>
    3818:	07 c0       	rjmp	.+14     	; 0x3828 <run_edit_rc5_code+0x66>
    381a:	80 3b       	cpi	r24, 0xB0	; 176
    381c:	09 f4       	brne	.+2      	; 0x3820 <run_edit_rc5_code+0x5e>
    381e:	5b c0       	rjmp	.+182    	; 0x38d6 <run_edit_rc5_code+0x114>
    3820:	8d 3f       	cpi	r24, 0xFD	; 253
    3822:	09 f0       	breq	.+2      	; 0x3826 <run_edit_rc5_code+0x64>
    3824:	5f c0       	rjmp	.+190    	; 0x38e4 <run_edit_rc5_code+0x122>
    3826:	2e c0       	rjmp	.+92     	; 0x3884 <run_edit_rc5_code+0xc2>
    case EVENT_NOKEY:
	  nokey = 0;
    3828:	10 92 25 05 	sts	0x0525, r1
      RTOS_setTask(EVENT_KEY_STANDBY, 0, 0);
    382c:	84 e6       	ldi	r24, 0x64	; 100
    382e:	60 e0       	ldi	r22, 0x00	; 0
    3830:	70 e0       	ldi	r23, 0x00	; 0
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	50 e0       	ldi	r21, 0x00	; 0
    3836:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    383a:	54 c0       	rjmp	.+168    	; 0x38e4 <run_edit_rc5_code+0x122>
    case EVENT_KEY_PRESS:
	  nokey = 0;
    383c:	10 92 25 05 	sts	0x0525, r1
    break;
    3840:	51 c0       	rjmp	.+162    	; 0x38e4 <run_edit_rc5_code+0x122>
    case EVENT_KEY_STANDBY:
      stb_impuls();
    3842:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
      edit_rc5 = 0;
    3846:	10 92 2c 05 	sts	0x052C, r1
	  LCD_clear();
    384a:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    384e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    3852:	80 e6       	ldi	r24, 0x60	; 96
    3854:	92 e1       	ldi	r25, 0x12	; 18
    3856:	90 93 a6 00 	sts	0x00A6, r25
    385a:	80 93 a5 00 	sts	0x00A5, r24
    break;
    385e:	42 c0       	rjmp	.+132    	; 0x38e4 <run_edit_rc5_code+0x122>
    case EVENT_TIMER_SECOND:
      show_lcd_edit_rc5_code();
    break;
    case EVENT_KEY_UP:
	  if (rc5menu > 0) rc5menu--; else rc5menu = RC5_MENU_MAX;
    3860:	80 91 28 05 	lds	r24, 0x0528
    3864:	88 23       	and	r24, r24
    3866:	11 f0       	breq	.+4      	; 0x386c <run_edit_rc5_code+0xaa>
    3868:	81 50       	subi	r24, 0x01	; 1
    386a:	01 c0       	rjmp	.+2      	; 0x386e <run_edit_rc5_code+0xac>
    386c:	82 e1       	ldi	r24, 0x12	; 18
    386e:	80 93 28 05 	sts	0x0528, r24
    3872:	08 c0       	rjmp	.+16     	; 0x3884 <run_edit_rc5_code+0xc2>
      show_lcd_edit_rc5_code();
    break;
    case EVENT_KEY_DOWN:
	  if (rc5menu < RC5_MENU_MAX) rc5menu++; else rc5menu = 0;
    3874:	80 91 28 05 	lds	r24, 0x0528
    3878:	82 31       	cpi	r24, 0x12	; 18
    387a:	10 f4       	brcc	.+4      	; 0x3880 <run_edit_rc5_code+0xbe>
    387c:	8f 5f       	subi	r24, 0xFF	; 255
    387e:	f7 cf       	rjmp	.-18     	; 0x386e <run_edit_rc5_code+0xac>
    3880:	10 92 28 05 	sts	0x0528, r1
      show_lcd_edit_rc5_code();
    3884:	0e 94 98 1b 	call	0x3730	; 0x3730 <show_lcd_edit_rc5_code>
    break;
    3888:	2d c0       	rjmp	.+90     	; 0x38e4 <run_edit_rc5_code+0x122>
    case EVENT_KEY_SET:
	  save_rc5code_key(rc5menu, rc5_cmd);
    388a:	80 91 28 05 	lds	r24, 0x0528
    388e:	60 91 12 04 	lds	r22, 0x0412
    3892:	0e 94 85 0a 	call	0x150a	; 0x150a <save_rc5code_key>
      LCD_SetXY(4, 3); LCD_puts(MSG_SAVE_RC5);
    3896:	84 e0       	ldi	r24, 0x04	; 4
    3898:	63 e0       	ldi	r22, 0x03	; 3
    389a:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    389e:	84 e3       	ldi	r24, 0x34	; 52
    38a0:	91 e0       	ldi	r25, 0x01	; 1
    38a2:	0e 94 28 01 	call	0x250	; 0x250 <LCD_puts>
      RTOS_setTask(EVENT_CLEAR, 500, 0);
    38a6:	80 eb       	ldi	r24, 0xB0	; 176
    38a8:	64 ef       	ldi	r22, 0xF4	; 244
    38aa:	71 e0       	ldi	r23, 0x01	; 1
    38ac:	40 e0       	ldi	r20, 0x00	; 0
    38ae:	50 e0       	ldi	r21, 0x00	; 0
    38b0:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
      rc5_cmd = 0xFF;
    38b4:	8f ef       	ldi	r24, 0xFF	; 255
    38b6:	80 93 12 04 	sts	0x0412, r24
    break;
    38ba:	14 c0       	rjmp	.+40     	; 0x38e4 <run_edit_rc5_code+0x122>
    case EVENT_KEY_MENU:
	  save_rc5code();
    38bc:	0e 94 97 0a 	call	0x152e	; 0x152e <save_rc5code>
      edit_rc5 = 0;
    38c0:	10 92 2c 05 	sts	0x052C, r1
      SET_STATE(run_option);
    38c4:	86 e7       	ldi	r24, 0x76	; 118
    38c6:	9c e1       	ldi	r25, 0x1C	; 28
    38c8:	90 93 a6 00 	sts	0x00A6, r25
    38cc:	80 93 a5 00 	sts	0x00A5, r24
      show_lcd_option();
    38d0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
    break;
    38d4:	07 c0       	rjmp	.+14     	; 0x38e4 <run_edit_rc5_code+0x122>
    case EVENT_CLEAR:
      LCD_SetXY(0, 3); LCD_space(20);
    38d6:	80 e0       	ldi	r24, 0x00	; 0
    38d8:	63 e0       	ldi	r22, 0x03	; 3
    38da:	0e 94 3c 01 	call	0x278	; 0x278 <LCD_SetXY>
    38de:	84 e1       	ldi	r24, 0x14	; 20
    38e0:	0e 94 c9 01 	call	0x392	; 0x392 <LCD_space>
    break;
  }
}
    38e4:	0f 90       	pop	r0
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	08 95       	ret

000038ec <run_option>:
  LCD_SetXY(0, 3); LCD_progress_bar(tda7313Get_Param(mmenu), tda7313Get_Max_Param(mmenu), 20);
}
//=============================================================================
void run_option(unsigned char event)
{
  switch(event) {
    38ec:	8c 36       	cpi	r24, 0x6C	; 108
    38ee:	09 f4       	brne	.+2      	; 0x38f2 <run_option+0x6>
    38f0:	00 c1       	rjmp	.+512    	; 0x3af2 <run_option+0x206>
    38f2:	8d 36       	cpi	r24, 0x6D	; 109
    38f4:	78 f4       	brcc	.+30     	; 0x3914 <run_option+0x28>
    38f6:	87 36       	cpi	r24, 0x67	; 103
    38f8:	09 f4       	brne	.+2      	; 0x38fc <run_option+0x10>
    38fa:	42 c0       	rjmp	.+132    	; 0x3980 <run_option+0x94>
    38fc:	88 36       	cpi	r24, 0x68	; 104
    38fe:	20 f4       	brcc	.+8      	; 0x3908 <run_option+0x1c>
    3900:	84 36       	cpi	r24, 0x64	; 100
    3902:	09 f0       	breq	.+2      	; 0x3906 <run_option+0x1a>
    3904:	04 c1       	rjmp	.+520    	; 0x3b0e <run_option+0x222>
    3906:	21 c0       	rjmp	.+66     	; 0x394a <run_option+0x5e>
    3908:	88 36       	cpi	r24, 0x68	; 104
    390a:	29 f1       	breq	.+74     	; 0x3956 <run_option+0x6a>
    390c:	89 36       	cpi	r24, 0x69	; 105
    390e:	09 f0       	breq	.+2      	; 0x3912 <run_option+0x26>
    3910:	fe c0       	rjmp	.+508    	; 0x3b0e <run_option+0x222>
    3912:	2b c0       	rjmp	.+86     	; 0x396a <run_option+0x7e>
    3914:	89 3a       	cpi	r24, 0xA9	; 169
    3916:	09 f4       	brne	.+2      	; 0x391a <run_option+0x2e>
    3918:	d7 c0       	rjmp	.+430    	; 0x3ac8 <run_option+0x1dc>
    391a:	8a 3a       	cpi	r24, 0xAA	; 170
    391c:	30 f4       	brcc	.+12     	; 0x392a <run_option+0x3e>
    391e:	8c 39       	cpi	r24, 0x9C	; 156
    3920:	59 f0       	breq	.+22     	; 0x3938 <run_option+0x4c>
    3922:	80 3a       	cpi	r24, 0xA0	; 160
    3924:	09 f0       	breq	.+2      	; 0x3928 <run_option+0x3c>
    3926:	f3 c0       	rjmp	.+486    	; 0x3b0e <run_option+0x222>
    3928:	0d c0       	rjmp	.+26     	; 0x3944 <run_option+0x58>
    392a:	8b 3a       	cpi	r24, 0xAB	; 171
    392c:	09 f4       	brne	.+2      	; 0x3930 <run_option+0x44>
    392e:	df c0       	rjmp	.+446    	; 0x3aee <run_option+0x202>
    3930:	8d 3f       	cpi	r24, 0xFD	; 253
    3932:	09 f0       	breq	.+2      	; 0x3936 <run_option+0x4a>
    3934:	ec c0       	rjmp	.+472    	; 0x3b0e <run_option+0x222>
    3936:	21 c0       	rjmp	.+66     	; 0x397a <run_option+0x8e>
    case EVENT_NOKEY:
      main_mode = MODE_NOKEY;
    3938:	82 e0       	ldi	r24, 0x02	; 2
    393a:	80 93 31 05 	sts	0x0531, r24
	  nokey = 0;
    393e:	10 92 25 05 	sts	0x0525, r1
    3942:	05 c0       	rjmp	.+10     	; 0x394e <run_option+0x62>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    break;
    case EVENT_KEY_PRESS:
	  nokey = 0;
    3944:	10 92 25 05 	sts	0x0525, r1
    break;
    3948:	08 95       	ret
    case EVENT_KEY_STANDBY:
      stb_impuls();
    394a:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <stb_impuls>
      RTOS_setTask(EVENT_KEY_MENU, 0, 0);
    394e:	8c e6       	ldi	r24, 0x6C	; 108
    3950:	60 e0       	ldi	r22, 0x00	; 0
    3952:	70 e0       	ldi	r23, 0x00	; 0
    3954:	c7 c0       	rjmp	.+398    	; 0x3ae4 <run_option+0x1f8>
    break;
    case EVENT_TIMER_SECOND:
      show_lcd_option();
    break;
    case EVENT_KEY_UP:
	  if (omenu > 0) omenu--; else omenu = OPTION_MAX;
    3956:	80 91 27 05 	lds	r24, 0x0527
    395a:	88 23       	and	r24, r24
    395c:	11 f0       	breq	.+4      	; 0x3962 <run_option+0x76>
    395e:	81 50       	subi	r24, 0x01	; 1
    3960:	01 c0       	rjmp	.+2      	; 0x3964 <run_option+0x78>
    3962:	87 e0       	ldi	r24, 0x07	; 7
    3964:	80 93 27 05 	sts	0x0527, r24
    3968:	08 c0       	rjmp	.+16     	; 0x397a <run_option+0x8e>
      show_lcd_option();
    break;
    case EVENT_KEY_DOWN:
	  if (omenu < OPTION_MAX) omenu++; else omenu = 0;
    396a:	80 91 27 05 	lds	r24, 0x0527
    396e:	87 30       	cpi	r24, 0x07	; 7
    3970:	10 f4       	brcc	.+4      	; 0x3976 <run_option+0x8a>
    3972:	8f 5f       	subi	r24, 0xFF	; 255
    3974:	f7 cf       	rjmp	.-18     	; 0x3964 <run_option+0x78>
    3976:	10 92 27 05 	sts	0x0527, r1
      show_lcd_option();
    397a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <show_lcd_option>
    break;
    397e:	08 95       	ret
    case EVENT_KEY_SET:
      nedit = 0;
    3980:	10 92 29 05 	sts	0x0529, r1
      switch(omenu) {
    3984:	80 91 27 05 	lds	r24, 0x0527
    3988:	83 30       	cpi	r24, 0x03	; 3
    398a:	09 f4       	brne	.+2      	; 0x398e <run_option+0xa2>
    398c:	44 c0       	rjmp	.+136    	; 0x3a16 <run_option+0x12a>
    398e:	84 30       	cpi	r24, 0x04	; 4
    3990:	28 f4       	brcc	.+10     	; 0x399c <run_option+0xb0>
    3992:	81 30       	cpi	r24, 0x01	; 1
    3994:	09 f1       	breq	.+66     	; 0x39d8 <run_option+0xec>
    3996:	82 30       	cpi	r24, 0x02	; 2
    3998:	80 f5       	brcc	.+96     	; 0x39fa <run_option+0x10e>
    399a:	0d c0       	rjmp	.+26     	; 0x39b6 <run_option+0xca>
    399c:	85 30       	cpi	r24, 0x05	; 5
    399e:	09 f4       	brne	.+2      	; 0x39a2 <run_option+0xb6>
    39a0:	53 c0       	rjmp	.+166    	; 0x3a48 <run_option+0x15c>
    39a2:	85 30       	cpi	r24, 0x05	; 5
    39a4:	08 f4       	brcc	.+2      	; 0x39a8 <run_option+0xbc>
    39a6:	43 c0       	rjmp	.+134    	; 0x3a2e <run_option+0x142>
    39a8:	86 30       	cpi	r24, 0x06	; 6
    39aa:	09 f4       	brne	.+2      	; 0x39ae <run_option+0xc2>
    39ac:	5d c0       	rjmp	.+186    	; 0x3a68 <run_option+0x17c>
    39ae:	87 30       	cpi	r24, 0x07	; 7
    39b0:	09 f0       	breq	.+2      	; 0x39b4 <run_option+0xc8>
    39b2:	ad c0       	rjmp	.+346    	; 0x3b0e <run_option+0x222>
    39b4:	79 c0       	rjmp	.+242    	; 0x3aa8 <run_option+0x1bc>
        case OM_SET_TIME:
          RTC_get_time(&hh, &mm, &ss);
    39b6:	89 ec       	ldi	r24, 0xC9	; 201
    39b8:	95 e0       	ldi	r25, 0x05	; 5
    39ba:	62 e9       	ldi	r22, 0x92	; 146
    39bc:	75 e0       	ldi	r23, 0x05	; 5
    39be:	47 e9       	ldi	r20, 0x97	; 151
    39c0:	55 e0       	ldi	r21, 0x05	; 5
    39c2:	0e 94 be 03 	call	0x77c	; 0x77c <RTC_get_time>
          SET_STATE(run_edit_time);
    39c6:	85 ea       	ldi	r24, 0xA5	; 165
    39c8:	93 e1       	ldi	r25, 0x13	; 19
    39ca:	90 93 a6 00 	sts	0x00A6, r25
    39ce:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_time();
    39d2:	0e 94 4f 13 	call	0x269e	; 0x269e <show_lcd_edit_time>
        break;
    39d6:	08 95       	ret
        case OM_SET_DATE:
          RTC_get_date(&dd, &ms, &yy);
    39d8:	8b e9       	ldi	r24, 0x9B	; 155
    39da:	95 e0       	ldi	r25, 0x05	; 5
    39dc:	69 e9       	ldi	r22, 0x99	; 153
    39de:	75 e0       	ldi	r23, 0x05	; 5
    39e0:	46 ec       	ldi	r20, 0xC6	; 198
    39e2:	55 e0       	ldi	r21, 0x05	; 5
    39e4:	0e 94 89 03 	call	0x712	; 0x712 <RTC_get_date>
          SET_STATE(run_edit_date);
    39e8:	8a ea       	ldi	r24, 0xAA	; 170
    39ea:	94 e1       	ldi	r25, 0x14	; 20
    39ec:	90 93 a6 00 	sts	0x00A6, r25
    39f0:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_date();
    39f4:	0e 94 42 14 	call	0x2884	; 0x2884 <show_lcd_edit_date>
        break;
    39f8:	08 95       	ret
        case OM_SET_ALARM:
          KBD_set_type(0);
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
          load_alarm_param();
    3a00:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <load_alarm_param>
          SET_STATE(run_edit_alarm);
    3a04:	85 e4       	ldi	r24, 0x45	; 69
    3a06:	96 e1       	ldi	r25, 0x16	; 22
    3a08:	90 93 a6 00 	sts	0x00A6, r25
    3a0c:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_alarm();
    3a10:	0e 94 57 15 	call	0x2aae	; 0x2aae <show_lcd_edit_alarm>
        break;
    3a14:	08 95       	ret
        case OM_SET_STANBY_OUT:
		  KBD_set_type(0);
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
          SET_STATE(run_edit_stb_out);
    3a1c:	87 e5       	ldi	r24, 0x57	; 87
    3a1e:	98 e1       	ldi	r25, 0x18	; 24
    3a20:	90 93 a6 00 	sts	0x00A6, r25
    3a24:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_stb_out();
    3a28:	0e 94 43 18 	call	0x3086	; 0x3086 <show_lcd_edit_stb_out>
        break;
    3a2c:	08 95       	ret
        case OM_SET_TEMP_MAX:
		  old_max_temp = max_temp;
    3a2e:	80 91 ca 05 	lds	r24, 0x05CA
    3a32:	80 93 98 05 	sts	0x0598, r24
          SET_STATE(run_edit_temp_max);
    3a36:	8a ed       	ldi	r24, 0xDA	; 218
    3a38:	97 e1       	ldi	r25, 0x17	; 23
    3a3a:	90 93 a6 00 	sts	0x00A6, r25
    3a3e:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_temp_max();
    3a42:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <show_lcd_edit_temp_max>
        break;
    3a46:	08 95       	ret
        case OM_SET_AS_TIME_ON:
		  KBD_set_type(0);
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	0e 94 5c 05 	call	0xab8	; 0xab8 <KBD_set_type>
		  old_as_wait = as_wait;
    3a4e:	80 91 9f 05 	lds	r24, 0x059F
    3a52:	80 93 c8 05 	sts	0x05C8, r24
          SET_STATE(run_edit_as_wait);
    3a56:	84 e5       	ldi	r24, 0x54	; 84
    3a58:	97 e1       	ldi	r25, 0x17	; 23
    3a5a:	90 93 a6 00 	sts	0x00A6, r25
    3a5e:	80 93 a5 00 	sts	0x00A5, r24
          show_lcd_edit_as_wait();
    3a62:	0e 94 39 17 	call	0x2e72	; 0x2e72 <show_lcd_edit_as_wait>
        break;
    3a66:	08 95       	ret
        case OM_SET_FM_STATIONS:
	      LCD_clear();
    3a68:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
          channel = 0;
    3a6c:	10 92 30 05 	sts	0x0530, r1
		  key_stb = 0;
    3a70:	10 92 2b 05 	sts	0x052B, r1
          tda7313SetMute(1);
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	0e 94 66 21 	call	0x42cc	; 0x42cc <tda7313SetMute>
		  tda7313SetInput(FM_INPUT);
    3a7a:	82 e0       	ldi	r24, 0x02	; 2
    3a7c:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <tda7313SetInput>
	      tda7313Set_Param(MM_VOLUME, 0);
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	60 e0       	ldi	r22, 0x00	; 0
    3a84:	0e 94 4c 21 	call	0x4298	; 0x4298 <tda7313Set_Param>
          SET_STATE(run_edit_fm_stations);
    3a88:	88 e2       	ldi	r24, 0x28	; 40
    3a8a:	99 e1       	ldi	r25, 0x19	; 25
    3a8c:	90 93 a6 00 	sts	0x00A6, r25
    3a90:	80 93 a5 00 	sts	0x00A5, r24
          RTOS_setTask(EVENT_SET_STB_OUT_ON, 0, 0);
    3a94:	89 ea       	ldi	r24, 0xA9	; 169
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	70 e0       	ldi	r23, 0x00	; 0
    3a9a:	40 e0       	ldi	r20, 0x00	; 0
    3a9c:	50 e0       	ldi	r21, 0x00	; 0
    3a9e:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
		  show_lcd_edit_fm_stations();
    3aa2:	0e 94 cd 18 	call	0x319a	; 0x319a <show_lcd_edit_fm_stations>
        break;
    3aa6:	08 95       	ret
        case OM_SET_RC5_CODE:
	      LCD_clear();
    3aa8:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
		  rc5menu = KEY_STANDBY;
    3aac:	10 92 28 05 	sts	0x0528, r1
		  edit_rc5 = 1;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	80 93 2c 05 	sts	0x052C, r24
          SET_STATE(run_edit_rc5_code);
    3ab6:	81 ee       	ldi	r24, 0xE1	; 225
    3ab8:	9b e1       	ldi	r25, 0x1B	; 27
    3aba:	90 93 a6 00 	sts	0x00A6, r25
    3abe:	80 93 a5 00 	sts	0x00A5, r24
		  show_lcd_edit_rc5_code();
    3ac2:	0e 94 98 1b 	call	0x3730	; 0x3730 <show_lcd_edit_rc5_code>
        break;
    3ac6:	08 95       	ret
      }
    break;
    case EVENT_SET_STB_OUT_ON:
      if (load_stb_out() == 1) { LED_STB_OUT_0; } else { LED_STB_OUT_1; }
    3ac8:	0e 94 47 0b 	call	0x168e	; 0x168e <load_stb_out>
    3acc:	81 30       	cpi	r24, 0x01	; 1
    3ace:	11 f4       	brne	.+4      	; 0x3ad4 <run_option+0x1e8>
    3ad0:	c2 98       	cbi	0x18, 2	; 24
    3ad2:	01 c0       	rjmp	.+2      	; 0x3ad6 <run_option+0x1ea>
    3ad4:	c2 9a       	sbi	0x18, 2	; 24
      RTOS_setTask(EVENT_SET_AS_WAIT_ON, (as_wait * 200), 0);
    3ad6:	60 91 9f 05 	lds	r22, 0x059F
    3ada:	88 ec       	ldi	r24, 0xC8	; 200
    3adc:	68 9f       	mul	r22, r24
    3ade:	b0 01       	movw	r22, r0
    3ae0:	11 24       	eor	r1, r1
    3ae2:	8b ea       	ldi	r24, 0xAB	; 171
    3ae4:	40 e0       	ldi	r20, 0x00	; 0
    3ae6:	50 e0       	ldi	r21, 0x00	; 0
    3ae8:	0e 94 18 07 	call	0xe30	; 0xe30 <RTOS_setTask>
    break;
    3aec:	08 95       	ret
    case EVENT_SET_AS_WAIT_ON:
	  LED_AC_WAIT_on();
    3aee:	c3 9a       	sbi	0x18, 3	; 24
    break;
    3af0:	08 95       	ret
    case EVENT_KEY_MENU:
      main_mode = MODE_STANDBY;
    3af2:	10 92 31 05 	sts	0x0531, r1
	  omenu = 0;
    3af6:	10 92 27 05 	sts	0x0527, r1
	  LCD_clear();
    3afa:	0e 94 49 01 	call	0x292	; 0x292 <LCD_clear>
      LCD_load_bignum();
    3afe:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_load_bignum>
      SET_STATE(run_standby);
    3b02:	80 e6       	ldi	r24, 0x60	; 96
    3b04:	92 e1       	ldi	r25, 0x12	; 18
    3b06:	90 93 a6 00 	sts	0x00A6, r25
    3b0a:	80 93 a5 00 	sts	0x00A5, r24
    3b0e:	08 95       	ret

00003b10 <ds18x20SendBit>:
  return ret;
}
//=============================================================================
static void ds18x20SendBit(uint8_t bit)
{
  cli();
    3b10:	f8 94       	cli
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;						/* Pin as output (0) */
    3b12:	bc 9a       	sbi	0x17, 4	; 23
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
    3b14:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b16:	90 e2       	ldi	r25, 0x20	; 32
    3b18:	9a 95       	dec	r25
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <ds18x20SendBit+0x8>
  _delay_us(6);
  if (!bit)	_delay_us(54);
    3b1c:	88 23       	and	r24, r24
    3b1e:	31 f4       	brne	.+12     	; 0x3b2c <ds18x20SendBit+0x1c>
    3b20:	e7 ed       	ldi	r30, 0xD7	; 215
    3b22:	f0 e0       	ldi	r31, 0x00	; 0
    3b24:	31 97       	sbiw	r30, 0x01	; 1
    3b26:	f1 f7       	brne	.-4      	; 0x3b24 <ds18x20SendBit+0x14>
    3b28:	00 c0       	rjmp	.+0      	; 0x3b2a <ds18x20SendBit+0x1a>
    3b2a:	00 00       	nop
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
    3b2c:	bc 98       	cbi	0x17, 4	; 23
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
    3b2e:	c4 9a       	sbi	0x18, 4	; 24
    3b30:	f5 e3       	ldi	r31, 0x35	; 53
    3b32:	fa 95       	dec	r31
    3b34:	f1 f7       	brne	.-4      	; 0x3b32 <ds18x20SendBit+0x22>
    3b36:	00 00       	nop
  _delay_us(10);
  if (bit) _delay_us(54);
    3b38:	88 23       	and	r24, r24
    3b3a:	31 f0       	breq	.+12     	; 0x3b48 <ds18x20SendBit+0x38>
    3b3c:	87 ed       	ldi	r24, 0xD7	; 215
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	f1 f7       	brne	.-4      	; 0x3b40 <ds18x20SendBit+0x30>
    3b44:	00 c0       	rjmp	.+0      	; 0x3b46 <ds18x20SendBit+0x36>
    3b46:	00 00       	nop
  sei();
    3b48:	78 94       	sei
  return;
}
    3b4a:	08 95       	ret

00003b4c <ds18x20SendByte>:
  sei();
  return ret;
}
//=============================================================================
static void ds18x20SendByte(uint8_t byte)
{
    3b4c:	0f 93       	push	r16
    3b4e:	1f 93       	push	r17
    3b50:	08 2f       	mov	r16, r24
    3b52:	18 e0       	ldi	r17, 0x08	; 8
  uint8_t i;
  for (i = 0; i < 8; i++) {
	ds18x20SendBit(byte & 0x01);
    3b54:	80 2f       	mov	r24, r16
    3b56:	81 70       	andi	r24, 0x01	; 1
    3b58:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <ds18x20SendBit>
	byte >>= 1;
    3b5c:	06 95       	lsr	r16
    3b5e:	11 50       	subi	r17, 0x01	; 1
}
//=============================================================================
static void ds18x20SendByte(uint8_t byte)
{
  uint8_t i;
  for (i = 0; i < 8; i++) {
    3b60:	c9 f7       	brne	.-14     	; 0x3b54 <ds18x20SendByte+0x8>
	ds18x20SendBit(byte & 0x01);
	byte >>= 1;
  }
  return;
}
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	08 95       	ret

00003b68 <ds18x20GetBit>:
}

static uint8_t ds18x20GetBit(void)
{
  uint8_t ret;
  cli();
    3b68:	f8 94       	cli
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;						/* Pin as output (0) */
    3b6a:	bc 9a       	sbi	0x17, 4	; 23
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
    3b6c:	c4 98       	cbi	0x18, 4	; 24
    3b6e:	80 e2       	ldi	r24, 0x20	; 32
    3b70:	8a 95       	dec	r24
    3b72:	f1 f7       	brne	.-4      	; 0x3b70 <ds18x20GetBit+0x8>
  _delay_us(6);										/* Strob */
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
    3b74:	bc 98       	cbi	0x17, 4	; 23
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
    3b76:	c4 9a       	sbi	0x18, 4	; 24
    3b78:	e0 e3       	ldi	r30, 0x30	; 48
    3b7a:	ea 95       	dec	r30
    3b7c:	f1 f7       	brne	.-4      	; 0x3b7a <ds18x20GetBit+0x12>
  _delay_us(9);
  ret = PIN(ONE_WIRE) & ONE_WIRE_LINE;
    3b7e:	86 b3       	in	r24, 0x16	; 22
    3b80:	eb ed       	ldi	r30, 0xDB	; 219
    3b82:	f0 e0       	ldi	r31, 0x00	; 0
    3b84:	31 97       	sbiw	r30, 0x01	; 1
    3b86:	f1 f7       	brne	.-4      	; 0x3b84 <ds18x20GetBit+0x1c>
    3b88:	00 c0       	rjmp	.+0      	; 0x3b8a <ds18x20GetBit+0x22>
    3b8a:	00 00       	nop
  _delay_us(55);
  sei();
    3b8c:	78 94       	sei
  return ret;
}
    3b8e:	80 71       	andi	r24, 0x10	; 16
    3b90:	08 95       	ret

00003b92 <ds18x20IsOnBus>:
static uint8_t devCount = 0;
//=============================================================================
static uint8_t ds18x20IsOnBus(void)
{
  uint8_t ret;
  cli();
    3b92:	f8 94       	cli
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;						/* Pin as output (0) */
    3b94:	bc 9a       	sbi	0x17, 4	; 23
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
    3b96:	c4 98       	cbi	0x18, 4	; 24
    3b98:	8f e7       	ldi	r24, 0x7F	; 127
    3b9a:	97 e0       	ldi	r25, 0x07	; 7
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <ds18x20IsOnBus+0xa>
    3ba0:	00 c0       	rjmp	.+0      	; 0x3ba2 <ds18x20IsOnBus+0x10>
    3ba2:	00 00       	nop
  _delay_us(480);										/* Reset */
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
    3ba4:	bc 98       	cbi	0x17, 4	; 23
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
    3ba6:	c4 9a       	sbi	0x18, 4	; 24
    3ba8:	e7 e1       	ldi	r30, 0x17	; 23
    3baa:	f1 e0       	ldi	r31, 0x01	; 1
    3bac:	31 97       	sbiw	r30, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <ds18x20IsOnBus+0x1a>
    3bb0:	00 c0       	rjmp	.+0      	; 0x3bb2 <ds18x20IsOnBus+0x20>
    3bb2:	00 00       	nop
  _delay_us(70);										/* Wait for response */
  ret = !(PIN(ONE_WIRE) & ONE_WIRE_LINE);
    3bb4:	96 b3       	in	r25, 0x16	; 22
    3bb6:	e7 e6       	ldi	r30, 0x67	; 103
    3bb8:	f6 e0       	ldi	r31, 0x06	; 6
    3bba:	31 97       	sbiw	r30, 0x01	; 1
    3bbc:	f1 f7       	brne	.-4      	; 0x3bba <ds18x20IsOnBus+0x28>
    3bbe:	00 c0       	rjmp	.+0      	; 0x3bc0 <ds18x20IsOnBus+0x2e>
    3bc0:	00 00       	nop
  _delay_us(410);
  sei();
    3bc2:	78 94       	sei
  PORT(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Set active 0 */
  _delay_us(480);										/* Reset */
  DDR(ONE_WIRE) &= ~ONE_WIRE_LINE;					/* Pin as input (1) */
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;					/* Enable pull-up resitor */
  _delay_us(70);										/* Wait for response */
  ret = !(PIN(ONE_WIRE) & ONE_WIRE_LINE);
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	94 fd       	sbrc	r25, 4
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
  _delay_us(410);
  sei();
  return ret;
}
    3bca:	08 95       	ret

00003bcc <ds18x20GetAddress>:
  return;
}
//=============================================================================
uint8_t ds18x20GetAddress(uint8_t num, uint8_t c)
{
  if (num > devCount) return 0;
    3bcc:	90 91 34 05 	lds	r25, 0x0534
    3bd0:	98 17       	cp	r25, r24
    3bd2:	90 f0       	brcs	.+36     	; 0x3bf8 <ds18x20GetAddress+0x2c>
  if (c > 8) return 0;
    3bd4:	69 30       	cpi	r22, 0x09	; 9
    3bd6:	90 f4       	brcc	.+36     	; 0x3bfc <ds18x20GetAddress+0x30>
  return (devs[num - 1].id[c]);
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	fc 01       	movw	r30, r24
    3bde:	24 e0       	ldi	r18, 0x04	; 4
    3be0:	ee 0f       	add	r30, r30
    3be2:	ff 1f       	adc	r31, r31
    3be4:	2a 95       	dec	r18
    3be6:	e1 f7       	brne	.-8      	; 0x3be0 <ds18x20GetAddress+0x14>
    3be8:	e8 0f       	add	r30, r24
    3bea:	f9 1f       	adc	r31, r25
    3bec:	eb 5c       	subi	r30, 0xCB	; 203
    3bee:	fa 4f       	sbci	r31, 0xFA	; 250
    3bf0:	e6 0f       	add	r30, r22
    3bf2:	f1 1d       	adc	r31, r1
    3bf4:	81 85       	ldd	r24, Z+9	; 0x09
    3bf6:	08 95       	ret
  return;
}
//=============================================================================
uint8_t ds18x20GetAddress(uint8_t num, uint8_t c)
{
  if (num > devCount) return 0;
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	08 95       	ret
  if (c > 8) return 0;
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
  return (devs[num - 1].id[c]);
}
    3bfe:	08 95       	ret

00003c00 <ds18x20SearchDevices>:
  }
  return newDeviation;
}
//=============================================================================
void ds18x20SearchDevices(void)
{
    3c00:	af 92       	push	r10
    3c02:	bf 92       	push	r11
    3c04:	cf 92       	push	r12
    3c06:	df 92       	push	r13
    3c08:	ef 92       	push	r14
    3c0a:	ff 92       	push	r15
    3c0c:	0f 93       	push	r16
    3c0e:	1f 93       	push	r17
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
  uint8_t lastDeviation;
  uint8_t count = 0;
  /* Reset addresses */
  for (i = 0; i < DS18X20_MAX_DEV; i++)
	for (j = 0; j < DS18X20_ID_LEN; j++)
	  devs[i].id[j] = 0x00;
    3c14:	10 92 3e 05 	sts	0x053E, r1
    3c18:	10 92 3f 05 	sts	0x053F, r1
    3c1c:	10 92 40 05 	sts	0x0540, r1
    3c20:	10 92 41 05 	sts	0x0541, r1
    3c24:	10 92 42 05 	sts	0x0542, r1
    3c28:	10 92 43 05 	sts	0x0543, r1
    3c2c:	10 92 44 05 	sts	0x0544, r1
    3c30:	10 92 45 05 	sts	0x0545, r1
    3c34:	10 92 4f 05 	sts	0x054F, r1
    3c38:	10 92 50 05 	sts	0x0550, r1
    3c3c:	10 92 51 05 	sts	0x0551, r1
    3c40:	10 92 52 05 	sts	0x0552, r1
    3c44:	10 92 53 05 	sts	0x0553, r1
    3c48:	10 92 54 05 	sts	0x0554, r1
    3c4c:	10 92 55 05 	sts	0x0555, r1
    3c50:	10 92 56 05 	sts	0x0556, r1
    3c54:	10 92 60 05 	sts	0x0560, r1
    3c58:	10 92 61 05 	sts	0x0561, r1
    3c5c:	10 92 62 05 	sts	0x0562, r1
    3c60:	10 92 63 05 	sts	0x0563, r1
    3c64:	10 92 64 05 	sts	0x0564, r1
    3c68:	10 92 65 05 	sts	0x0565, r1
    3c6c:	10 92 66 05 	sts	0x0566, r1
    3c70:	10 92 67 05 	sts	0x0567, r1
    3c74:	10 92 71 05 	sts	0x0571, r1
    3c78:	10 92 72 05 	sts	0x0572, r1
    3c7c:	10 92 73 05 	sts	0x0573, r1
    3c80:	10 92 74 05 	sts	0x0574, r1
    3c84:	10 92 75 05 	sts	0x0575, r1
    3c88:	10 92 76 05 	sts	0x0576, r1
    3c8c:	10 92 77 05 	sts	0x0577, r1
    3c90:	10 92 78 05 	sts	0x0578, r1
    3c94:	cc 24       	eor	r12, r12
    3c96:	bb 24       	eor	r11, r11
    3c98:	8e e3       	ldi	r24, 0x3E	; 62
    3c9a:	95 e0       	ldi	r25, 0x05	; 5
    3c9c:	8c 01       	movw	r16, r24
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	f8 01       	movw	r30, r16
	/* Search all sensors */
  newID = devs[0].id;
  lastDeviation = 0;
  currentID = newID;
  do {
    for (j = 0; j < DS18X20_ID_LEN; j++)
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
      newID[j] = currentID[j];
    3ca4:	9d 91       	ld	r25, X+
    3ca6:	91 93       	st	Z+, r25
	/* Search all sensors */
  newID = devs[0].id;
  lastDeviation = 0;
  currentID = newID;
  do {
    for (j = 0; j < DS18X20_ID_LEN; j++)
    3ca8:	8f 5f       	subi	r24, 0xFF	; 255
    3caa:	88 30       	cpi	r24, 0x08	; 8
    3cac:	d9 f7       	brne	.-10     	; 0x3ca4 <ds18x20SearchDevices+0xa4>
      newID[j] = currentID[j];
  	  if (!ds18x20IsOnBus()) {
    3cae:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <ds18x20IsOnBus>
    3cb2:	88 23       	and	r24, r24
    3cb4:	19 f4       	brne	.+6      	; 0x3cbc <ds18x20SearchDevices+0xbc>
	    devCount = 0;
    3cb6:	10 92 34 05 	sts	0x0534, r1
	    return;
    3cba:	50 c0       	rjmp	.+160    	; 0x3d5c <ds18x20SearchDevices+0x15c>
  uint8_t newDeviation = 0;
  uint8_t bitMask = 0x01;
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
    3cbc:	80 ef       	ldi	r24, 0xF0	; 240
    3cbe:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <ds18x20SendByte>
    3cc2:	e8 01       	movw	r28, r16
}
//=============================================================================
static uint8_t ds18x20SearchRom(uint8_t *bitPattern, uint8_t lastDeviation)
{
  uint8_t currBit;
  uint8_t newDeviation = 0;
    3cc4:	dd 24       	eor	r13, r13
  uint8_t bitMask = 0x01;
    3cc6:	ff 24       	eor	r15, r15
    3cc8:	f3 94       	inc	r15
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
  /* Walk through all 64 bits */
  for (currBit = 0; currBit < DS18X20_ID_LEN * 8; currBit++)
    3cca:	ee 24       	eor	r14, r14
  {
	/* Read bit from bus twice. */
	bitA = ds18x20GetBit();
    3ccc:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <ds18x20GetBit>
    3cd0:	a8 2e       	mov	r10, r24
	bitB = ds18x20GetBit();
    3cd2:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <ds18x20GetBit>
	if (bitA && bitB) {								/* Both bits 1 = ERROR */
    3cd6:	aa 20       	and	r10, r10
    3cd8:	19 f0       	breq	.+6      	; 0x3ce0 <ds18x20SearchDevices+0xe0>
    3cda:	88 23       	and	r24, r24
    3cdc:	81 f0       	breq	.+32     	; 0x3cfe <ds18x20SearchDevices+0xfe>
    3cde:	27 c0       	rjmp	.+78     	; 0x3d2e <ds18x20SearchDevices+0x12e>
	  return 0xFF;
	} else if (!(bitA || bitB)) {					/* Both bits 0 */
    3ce0:	88 23       	and	r24, r24
    3ce2:	81 f4       	brne	.+32     	; 0x3d04 <ds18x20SearchDevices+0x104>
	  if (currBit == lastDeviation) {				/* Select 1 if device has been selected */
    3ce4:	eb 14       	cp	r14, r11
    3ce6:	59 f0       	breq	.+22     	; 0x3cfe <ds18x20SearchDevices+0xfe>
    3ce8:	98 81       	ld	r25, Y
	  *bitPattern |= bitMask;
	  } else if (currBit > lastDeviation) {		/* Select 0 if no, and remember device */
    3cea:	be 14       	cp	r11, r14
    3cec:	28 f4       	brcc	.+10     	; 0x3cf8 <ds18x20SearchDevices+0xf8>
	    (*bitPattern) &= ~bitMask;
    3cee:	8f 2d       	mov	r24, r15
    3cf0:	80 95       	com	r24
    3cf2:	89 23       	and	r24, r25
    3cf4:	88 83       	st	Y, r24
    3cf6:	0c c0       	rjmp	.+24     	; 0x3d10 <ds18x20SearchDevices+0x110>
	    newDeviation = currBit;
	  } else if (!(*bitPattern & bitMask)) {		 /* Otherwise just remember device */
    3cf8:	9f 21       	and	r25, r15
    3cfa:	51 f0       	breq	.+20     	; 0x3d10 <ds18x20SearchDevices+0x110>
    3cfc:	0a c0       	rjmp	.+20     	; 0x3d12 <ds18x20SearchDevices+0x112>
	    newDeviation = currBit;
	  }
    } else { /* Bits differ */
	  if (bitA) *bitPattern |= bitMask; else *bitPattern &= ~bitMask;
    3cfe:	88 81       	ld	r24, Y
    3d00:	8f 29       	or	r24, r15
    3d02:	04 c0       	rjmp	.+8      	; 0x3d0c <ds18x20SearchDevices+0x10c>
    3d04:	9f 2d       	mov	r25, r15
    3d06:	90 95       	com	r25
    3d08:	88 81       	ld	r24, Y
    3d0a:	89 23       	and	r24, r25
    3d0c:	88 83       	st	Y, r24
    3d0e:	01 c0       	rjmp	.+2      	; 0x3d12 <ds18x20SearchDevices+0x112>
	  if (currBit == lastDeviation) {				/* Select 1 if device has been selected */
	  *bitPattern |= bitMask;
	  } else if (currBit > lastDeviation) {		/* Select 0 if no, and remember device */
	    (*bitPattern) &= ~bitMask;
	    newDeviation = currBit;
	  } else if (!(*bitPattern & bitMask)) {		 /* Otherwise just remember device */
    3d10:	de 2c       	mov	r13, r14
	  }
    } else { /* Bits differ */
	  if (bitA) *bitPattern |= bitMask; else *bitPattern &= ~bitMask;
    }
    /* Send the selected bit to the bus. */
    ds18x20SendBit(*bitPattern & bitMask);
    3d12:	88 81       	ld	r24, Y
    3d14:	8f 21       	and	r24, r15
    3d16:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <ds18x20SendBit>
    /* Adjust bitMask and bitPattern pointer. */
    bitMask <<= 1;
    3d1a:	ff 0c       	add	r15, r15
    if (!bitMask)
    3d1c:	19 f4       	brne	.+6      	; 0x3d24 <ds18x20SearchDevices+0x124>
    {
	  bitMask = 0x01;
	  bitPattern++;
    3d1e:	21 96       	adiw	r28, 0x01	; 1
    ds18x20SendBit(*bitPattern & bitMask);
    /* Adjust bitMask and bitPattern pointer. */
    bitMask <<= 1;
    if (!bitMask)
    {
	  bitMask = 0x01;
    3d20:	ff 24       	eor	r15, r15
    3d22:	f3 94       	inc	r15
  uint8_t bitA;
  uint8_t bitB;
  /* Send SEARCH ROM command on the bus */
  ds18x20SendByte(DS18X20_CMD_SEARCH_ROM);
  /* Walk through all 64 bits */
  for (currBit = 0; currBit < DS18X20_ID_LEN * 8; currBit++)
    3d24:	e3 94       	inc	r14
    3d26:	8e 2d       	mov	r24, r14
    3d28:	80 34       	cpi	r24, 0x40	; 64
    3d2a:	81 f6       	brne	.-96     	; 0x3ccc <ds18x20SearchDevices+0xcc>
    3d2c:	02 c0       	rjmp	.+4      	; 0x3d32 <ds18x20SearchDevices+0x132>
  {
	/* Read bit from bus twice. */
	bitA = ds18x20GetBit();
	bitB = ds18x20GetBit();
	if (bitA && bitB) {								/* Both bits 1 = ERROR */
	  return 0xFF;
    3d2e:	dd 24       	eor	r13, r13
    3d30:	da 94       	dec	r13
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
	  count++;
    3d32:	c3 94       	inc	r12
	  newID=devs[count].id;
  } while (lastDeviation != 0);
    3d34:	dd 20       	and	r13, r13
    3d36:	81 f0       	breq	.+32     	; 0x3d58 <ds18x20SearchDevices+0x158>
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
	  count++;
	  newID=devs[count].id;
    3d38:	8c 2d       	mov	r24, r12
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	9c 01       	movw	r18, r24
    3d3e:	44 e0       	ldi	r20, 0x04	; 4
    3d40:	22 0f       	add	r18, r18
    3d42:	33 1f       	adc	r19, r19
    3d44:	4a 95       	dec	r20
    3d46:	e1 f7       	brne	.-8      	; 0x3d40 <ds18x20SearchDevices+0x140>
    3d48:	28 0f       	add	r18, r24
    3d4a:	39 1f       	adc	r19, r25
  	  if (!ds18x20IsOnBus()) {
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
	  currentID = newID;
    3d4c:	c8 01       	movw	r24, r16
      newID[j] = currentID[j];
  	  if (!ds18x20IsOnBus()) {
	    devCount = 0;
	    return;
	  }
	  lastDeviation = ds18x20SearchRom(newID, lastDeviation);
    3d4e:	bd 2c       	mov	r11, r13
	  currentID = newID;
	  count++;
	  newID=devs[count].id;
    3d50:	89 01       	movw	r16, r18
    3d52:	02 5c       	subi	r16, 0xC2	; 194
    3d54:	1a 4f       	sbci	r17, 0xFA	; 250
    3d56:	a3 cf       	rjmp	.-186    	; 0x3c9e <ds18x20SearchDevices+0x9e>
  } while (lastDeviation != 0);
  devCount = count;
    3d58:	c0 92 34 05 	sts	0x0534, r12
  return;
}
    3d5c:	df 91       	pop	r29
    3d5e:	cf 91       	pop	r28
    3d60:	1f 91       	pop	r17
    3d62:	0f 91       	pop	r16
    3d64:	ff 90       	pop	r15
    3d66:	ef 90       	pop	r14
    3d68:	df 90       	pop	r13
    3d6a:	cf 90       	pop	r12
    3d6c:	bf 90       	pop	r11
    3d6e:	af 90       	pop	r10
    3d70:	08 95       	ret

00003d72 <ds18x20Process>:
//=============================================================================
uint8_t ds18x20Process(void)
{
    3d72:	af 92       	push	r10
    3d74:	bf 92       	push	r11
    3d76:	cf 92       	push	r12
    3d78:	df 92       	push	r13
    3d7a:	ef 92       	push	r14
    3d7c:	ff 92       	push	r15
    3d7e:	0f 93       	push	r16
    3d80:	1f 93       	push	r17
    3d82:	df 93       	push	r29
    3d84:	cf 93       	push	r28
    3d86:	0f 92       	push	r0
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
static void ds18x20GetAllTemps()
{
  uint8_t i, j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
    3d8c:	ff 24       	eor	r15, r15
    3d8e:	5a c0       	rjmp	.+180    	; 0x3e44 <ds18x20Process+0xd2>
  {
	if (ds18x20IsOnBus())
    3d90:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <ds18x20IsOnBus>
    3d94:	88 23       	and	r24, r24
    3d96:	09 f4       	brne	.+2      	; 0x3d9a <ds18x20Process+0x28>
    3d98:	54 c0       	rjmp	.+168    	; 0x3e42 <ds18x20Process+0xd0>
}
//=============================================================================
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
    3d9a:	85 e5       	ldi	r24, 0x55	; 85
    3d9c:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <ds18x20SendByte>
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
    3da0:	8f 2d       	mov	r24, r15
    3da2:	90 e0       	ldi	r25, 0x00	; 0
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
    3da4:	6c 01       	movw	r12, r24
    3da6:	e4 e0       	ldi	r30, 0x04	; 4
    3da8:	cc 0c       	add	r12, r12
    3daa:	dd 1c       	adc	r13, r13
    3dac:	ea 95       	dec	r30
    3dae:	e1 f7       	brne	.-8      	; 0x3da8 <ds18x20Process+0x36>
    3db0:	c8 0e       	add	r12, r24
    3db2:	d9 1e       	adc	r13, r25
    3db4:	8e e3       	ldi	r24, 0x3E	; 62
    3db6:	95 e0       	ldi	r25, 0x05	; 5
    3db8:	c8 0e       	add	r12, r24
    3dba:	d9 1e       	adc	r13, r25
    3dbc:	08 e0       	ldi	r16, 0x08	; 8
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
  for (i = 0; i < 8; i++)
	ds18x20SendByte(dev->id[i]);
    3dbe:	d6 01       	movw	r26, r12
    3dc0:	8d 91       	ld	r24, X+
    3dc2:	6d 01       	movw	r12, r26
    3dc4:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <ds18x20SendByte>
    3dc8:	01 50       	subi	r16, 0x01	; 1
//=============================================================================
static void ds18x20Select(ds18x20Dev *dev)
{
  uint8_t i;
  ds18x20SendByte(DS18X20_CMD_MATCH_ROM);
  for (i = 0; i < 8; i++)
    3dca:	c9 f7       	brne	.-14     	; 0x3dbe <ds18x20Process+0x4c>
  for (i = 0; i < devCount; i++)
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
    3dcc:	8e eb       	ldi	r24, 0xBE	; 190
    3dce:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <ds18x20SendByte>
    3dd2:	79 e7       	ldi	r23, 0x79	; 121
    3dd4:	a7 2e       	mov	r10, r23
    3dd6:	75 e0       	ldi	r23, 0x05	; 5
    3dd8:	b7 2e       	mov	r11, r23
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
    3dda:	85 01       	movw	r16, r10
  {
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
    3ddc:	ee 24       	eor	r14, r14
    3dde:	68 e0       	ldi	r22, 0x08	; 8
    3de0:	d6 2e       	mov	r13, r22
}
//=============================================================================
static uint8_t ds18x20GetByte(void)
{
  uint8_t i, ret;
  ret = 0;
    3de2:	90 e0       	ldi	r25, 0x00	; 0
  for (i = 0; i < 8; i++) {
	ret >>= 1;
    3de4:	96 95       	lsr	r25
	if (ds18x20GetBit()) ret |= 0x80;
    3de6:	99 83       	std	Y+1, r25	; 0x01
    3de8:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <ds18x20GetBit>
    3dec:	99 81       	ldd	r25, Y+1	; 0x01
    3dee:	81 11       	cpse	r24, r1
    3df0:	90 68       	ori	r25, 0x80	; 128
    3df2:	da 94       	dec	r13
//=============================================================================
static uint8_t ds18x20GetByte(void)
{
  uint8_t i, ret;
  ret = 0;
  for (i = 0; i < 8; i++) {
    3df4:	b9 f7       	brne	.-18     	; 0x3de4 <ds18x20Process+0x72>
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
	  for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
		arr[j] = ds18x20GetByte();
    3df6:	f8 01       	movw	r30, r16
    3df8:	91 93       	st	Z+, r25
    3dfa:	8f 01       	movw	r16, r30

static __inline__ uint8_t
_crc_ibutton_update(uint8_t __crc, uint8_t __data)
{
	uint8_t __i, __pattern;
	__asm__ __volatile__ (
    3dfc:	e9 26       	eor	r14, r25
    3dfe:	88 e0       	ldi	r24, 0x08	; 8
    3e00:	9c e8       	ldi	r25, 0x8C	; 140
    3e02:	e6 94       	lsr	r14
    3e04:	08 f4       	brcc	.+2      	; 0x3e08 <ds18x20Process+0x96>
    3e06:	e9 26       	eor	r14, r25
    3e08:	8a 95       	dec	r24
    3e0a:	d9 f7       	brne	.-10     	; 0x3e02 <ds18x20Process+0x90>
	if (ds18x20IsOnBus())
	{
 	  ds18x20Select(&devs[i]);
	  ds18x20SendByte(DS18X20_CMD_READ_SCRATCH);
  	  crc = 0;
	  for (j = 0; j < DS18X20_SCRATCH_LEN; j++) {
    3e0c:	f5 e0       	ldi	r31, 0x05	; 5
    3e0e:	02 38       	cpi	r16, 0x82	; 130
    3e10:	1f 07       	cpc	r17, r31
    3e12:	29 f7       	brne	.-54     	; 0x3dde <ds18x20Process+0x6c>
		arr[j] = ds18x20GetByte();
		crc = _crc_ibutton_update(crc, arr[j]);
	  }
  	  if (crc == 0)
    3e14:	ee 20       	and	r14, r14
    3e16:	a9 f4       	brne	.+42     	; 0x3e42 <ds18x20Process+0xd0>
	  {
		for (j = 0; j < DS18X20_SCRATCH_LEN; j++)  devs[i].sp[j] = arr[j];
    3e18:	8f 2d       	mov	r24, r15
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
  } while (lastDeviation != 0);
  devCount = count;
  return;
}
//=============================================================================
uint8_t ds18x20Process(void)
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	54 e0       	ldi	r21, 0x04	; 4
    3e20:	ee 0f       	add	r30, r30
    3e22:	ff 1f       	adc	r31, r31
    3e24:	5a 95       	dec	r21
    3e26:	e1 f7       	brne	.-8      	; 0x3e20 <ds18x20Process+0xae>
    3e28:	e8 0f       	add	r30, r24
    3e2a:	f9 1f       	adc	r31, r25
    3e2c:	eb 5c       	subi	r30, 0xCB	; 203
    3e2e:	fa 4f       	sbci	r31, 0xFA	; 250
		arr[j] = ds18x20GetByte();
		crc = _crc_ibutton_update(crc, arr[j]);
	  }
  	  if (crc == 0)
	  {
		for (j = 0; j < DS18X20_SCRATCH_LEN; j++)  devs[i].sp[j] = arr[j];
    3e30:	d5 01       	movw	r26, r10
    3e32:	8d 91       	ld	r24, X+
    3e34:	5d 01       	movw	r10, r26
    3e36:	81 93       	st	Z+, r24
    3e38:	b2 e8       	ldi	r27, 0x82	; 130
    3e3a:	ab 16       	cp	r10, r27
    3e3c:	b5 e0       	ldi	r27, 0x05	; 5
    3e3e:	bb 06       	cpc	r11, r27
    3e40:	b9 f7       	brne	.-18     	; 0x3e30 <ds18x20Process+0xbe>
static void ds18x20GetAllTemps()
{
  uint8_t i, j;
  uint8_t crc;
  static uint8_t arr[DS18X20_SCRATCH_LEN];
  for (i = 0; i < devCount; i++)
    3e42:	f3 94       	inc	r15
    3e44:	80 91 34 05 	lds	r24, 0x0534
    3e48:	f8 16       	cp	r15, r24
    3e4a:	08 f4       	brcc	.+2      	; 0x3e4e <ds18x20Process+0xdc>
    3e4c:	a1 cf       	rjmp	.-190    	; 0x3d90 <ds18x20Process+0x1e>
//=============================================================================
uint8_t ds18x20Process(void)
{
  ds18x20GetAllTemps();
  /* Convert temperature */
  if (ds18x20IsOnBus())
    3e4e:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <ds18x20IsOnBus>
    3e52:	88 23       	and	r24, r24
    3e54:	41 f0       	breq	.+16     	; 0x3e66 <ds18x20Process+0xf4>
  return;
}
//=============================================================================
static void ds18x20ConvertTemp(void)
{
  ds18x20SendByte(DS18X20_CMD_SKIP_ROM);
    3e56:	8c ec       	ldi	r24, 0xCC	; 204
    3e58:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <ds18x20SendByte>
  ds18x20SendByte(DS18X20_CMD_CONVERT);
    3e5c:	84 e4       	ldi	r24, 0x44	; 68
    3e5e:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <ds18x20SendByte>
#ifdef DS18X20_PARASITE_POWER
  /* Set active 1 on port for at least 750ms as parasitic power */
  PORT(ONE_WIRE) |= ONE_WIRE_LINE;
    3e62:	c4 9a       	sbi	0x18, 4	; 24
  DDR(ONE_WIRE) |= ONE_WIRE_LINE;
    3e64:	bc 9a       	sbi	0x17, 4	; 23
  ds18x20GetAllTemps();
  /* Convert temperature */
  if (ds18x20IsOnBus())
	ds18x20ConvertTemp();
  return devCount;
}
    3e66:	80 91 34 05 	lds	r24, 0x0534
    3e6a:	0f 90       	pop	r0
    3e6c:	cf 91       	pop	r28
    3e6e:	df 91       	pop	r29
    3e70:	1f 91       	pop	r17
    3e72:	0f 91       	pop	r16
    3e74:	ff 90       	pop	r15
    3e76:	ef 90       	pop	r14
    3e78:	df 90       	pop	r13
    3e7a:	cf 90       	pop	r12
    3e7c:	bf 90       	pop	r11
    3e7e:	af 90       	pop	r10
    3e80:	08 95       	ret

00003e82 <ds18x20GetTemp>:
//=============================================================================
int16_t ds18x20GetTemp(uint8_t num)
{
  int16_t ret = devs[num].temp;
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	fc 01       	movw	r30, r24
    3e86:	b4 e0       	ldi	r27, 0x04	; 4
    3e88:	ee 0f       	add	r30, r30
    3e8a:	ff 1f       	adc	r31, r31
    3e8c:	ba 95       	dec	r27
    3e8e:	e1 f7       	brne	.-8      	; 0x3e88 <ds18x20GetTemp+0x6>
    3e90:	e8 0f       	add	r30, r24
    3e92:	f9 1f       	adc	r31, r25
    3e94:	eb 5c       	subi	r30, 0xCB	; 203
    3e96:	fa 4f       	sbci	r31, 0xFA	; 250
    3e98:	60 81       	ld	r22, Z
    3e9a:	71 81       	ldd	r23, Z+1	; 0x01
  if (devs[num].id[0] == 0x28) /* DS18B20 */
    3e9c:	81 85       	ldd	r24, Z+9	; 0x09
    3e9e:	88 32       	cpi	r24, 0x28	; 40
    3ea0:	61 f4       	brne	.+24     	; 0x3eba <ds18x20GetTemp+0x38>
	ret = ret * 5 / 8;
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	88 0f       	add	r24, r24
    3ea6:	99 1f       	adc	r25, r25
    3ea8:	88 0f       	add	r24, r24
    3eaa:	99 1f       	adc	r25, r25
    3eac:	86 0f       	add	r24, r22
    3eae:	97 1f       	adc	r25, r23
    3eb0:	68 e0       	ldi	r22, 0x08	; 8
    3eb2:	70 e0       	ldi	r23, 0x00	; 0
    3eb4:	0e 94 0f 24 	call	0x481e	; 0x481e <__divmodhi4>
    3eb8:	09 c0       	rjmp	.+18     	; 0x3ecc <ds18x20GetTemp+0x4a>
  else if (devs[num].id[0] == 0x10) /* DS18S20 */
    3eba:	80 31       	cpi	r24, 0x10	; 16
    3ebc:	39 f4       	brne	.+14     	; 0x3ecc <ds18x20GetTemp+0x4a>
	ret = ret * 5;
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	88 0f       	add	r24, r24
    3ec2:	99 1f       	adc	r25, r25
    3ec4:	88 0f       	add	r24, r24
    3ec6:	99 1f       	adc	r25, r25
    3ec8:	68 0f       	add	r22, r24
    3eca:	79 1f       	adc	r23, r25
	/* Return value is in 0.1В°C units */
  return ret;
}
    3ecc:	cb 01       	movw	r24, r22
    3ece:	08 95       	ret

00003ed0 <ds18x20GetDevCount>:
//=============================================================================
uint8_t ds18x20GetDevCount(void)
{
  return devCount;
}
    3ed0:	80 91 34 05 	lds	r24, 0x0534
    3ed4:	08 95       	ret

00003ed6 <RC5_init>:
static uint8_t nbits;
static uint8_t nint;
//=============================================================================
void RC5_init(uint8_t addr)
{
  nint  = 0; nbits = 0; rc5.flip = -1; rc5_addr = addr;
    3ed6:	10 92 84 05 	sts	0x0584, r1
    3eda:	10 92 85 05 	sts	0x0585, r1
    3ede:	9f ef       	ldi	r25, 0xFF	; 255
    3ee0:	90 93 ce 05 	sts	0x05CE, r25
    3ee4:	80 93 86 05 	sts	0x0586, r24
        
#if (RC5_PRESCALE==1024)
  TCCR0 = (1 << CS02) | (1 << CS00);
    3ee8:	85 e0       	ldi	r24, 0x05	; 5
    3eea:	83 bf       	out	0x33, r24	; 51
  TCCR0 = (1 << CS01) | (1 << CS00);
#else
#error This RC5_PRESCALE is not supported
#endif /* RC5_PRESCALE */
#if (RC5_INT == RC5_INT0)               
  MCUCR = (MCUCR | (1 << ISC01)) & ~ (1 << ISC00);
    3eec:	85 b7       	in	r24, 0x35	; 53
    3eee:	8c 7f       	andi	r24, 0xFC	; 252
    3ef0:	82 60       	ori	r24, 0x02	; 2
    3ef2:	85 bf       	out	0x35, r24	; 53
  GIFR = (1 << INTF0);
    3ef4:	80 e4       	ldi	r24, 0x40	; 64
    3ef6:	8a bf       	out	0x3a, r24	; 58
  GICR |= (1 << INT0);
    3ef8:	8b b7       	in	r24, 0x3b	; 59
    3efa:	80 64       	ori	r24, 0x40	; 64
    3efc:	8b bf       	out	0x3b, r24	; 59
  GIFR = (1 << INTF1);
  GICR |= (1 << INT1);
#else
#error please define RC5_INT
#endif /* RC5_INT */
}
    3efe:	08 95       	ret

00003f00 <__vector_11>:
//=============================================================================
ISR(TIMER0_OVF_vect)
{
    3f00:	1f 92       	push	r1
    3f02:	0f 92       	push	r0
    3f04:	0f b6       	in	r0, 0x3f	; 63
    3f06:	0f 92       	push	r0
    3f08:	11 24       	eor	r1, r1
    3f0a:	2f 93       	push	r18
    3f0c:	3f 93       	push	r19
    3f0e:	4f 93       	push	r20
    3f10:	8f 93       	push	r24
    3f12:	9f 93       	push	r25
  TIMSK &= ~(1 << TOIE0);
    3f14:	89 b7       	in	r24, 0x39	; 57
    3f16:	8e 7f       	andi	r24, 0xFE	; 254
    3f18:	89 bf       	out	0x39, r24	; 57
  uint8_t _nbits = nbits;
    3f1a:	20 91 85 05 	lds	r18, 0x0585
  code_t _code = code;
    3f1e:	80 91 82 05 	lds	r24, 0x0582
    3f22:	90 91 83 05 	lds	r25, 0x0583

  if (26 == _nbits)
    3f26:	2a 31       	cpi	r18, 0x1A	; 26
    3f28:	19 f4       	brne	.+6      	; 0x3f30 <__vector_11+0x30>
  {
    _nbits++; _code.w <<= 1;
    3f2a:	88 0f       	add	r24, r24
    3f2c:	99 1f       	adc	r25, r25
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <__vector_11+0x34>
  }
  if (27 == _nbits && _code.b[1] >= 0x30 /* AGC == 3 */ && 0 > rc5.flip)
    3f30:	2b 31       	cpi	r18, 0x1B	; 27
    3f32:	f9 f4       	brne	.+62     	; 0x3f72 <__vector_11+0x72>
    3f34:	90 33       	cpi	r25, 0x30	; 48
    3f36:	e8 f0       	brcs	.+58     	; 0x3f72 <__vector_11+0x72>
    3f38:	20 91 ce 05 	lds	r18, 0x05CE
    3f3c:	27 ff       	sbrs	r18, 7
    3f3e:	19 c0       	rjmp	.+50     	; 0x3f72 <__vector_11+0x72>
  {
    uint8_t _rc5_code;
    uint8_t _rc5_addr;
    /* we do the bit manipulation stuff by hand, because of code size */
    _rc5_code = _code.b[0] & 0x3f; /* 0b00111111 : #0..#5 */
    3f40:	48 2f       	mov	r20, r24
    _code.w <<= 2;
    3f42:	88 0f       	add	r24, r24
    3f44:	99 1f       	adc	r25, r25
    3f46:	88 0f       	add	r24, r24
    3f48:	99 1f       	adc	r25, r25
    _rc5_addr = _code.b[1] & 0x1f; /* 0b00011111 : #6..#10 */
    3f4a:	29 2f       	mov	r18, r25
    3f4c:	2f 71       	andi	r18, 0x1F	; 31
    if (rc5_addr & 0x80 || rc5_addr == _rc5_addr)
    3f4e:	30 91 86 05 	lds	r19, 0x0586
    3f52:	37 fd       	sbrc	r19, 7
    3f54:	02 c0       	rjmp	.+4      	; 0x3f5a <__vector_11+0x5a>
    3f56:	32 17       	cp	r19, r18
    3f58:	61 f4       	brne	.+24     	; 0x3f72 <__vector_11+0x72>
  if (27 == _nbits && _code.b[1] >= 0x30 /* AGC == 3 */ && 0 > rc5.flip)
  {
    uint8_t _rc5_code;
    uint8_t _rc5_addr;
    /* we do the bit manipulation stuff by hand, because of code size */
    _rc5_code = _code.b[0] & 0x3f; /* 0b00111111 : #0..#5 */
    3f5a:	84 2f       	mov	r24, r20
    3f5c:	8f 73       	andi	r24, 0x3F	; 63
    _code.w <<= 2;
    _rc5_addr = _code.b[1] & 0x1f; /* 0b00011111 : #6..#10 */
    if (rc5_addr & 0x80 || rc5_addr == _rc5_addr)
    {
      rc5.code = _rc5_code + 1;
    3f5e:	8f 5f       	subi	r24, 0xFF	; 255
    3f60:	80 93 cc 05 	sts	0x05CC, r24
      rc5.addr = _rc5_addr;
    3f64:	20 93 cd 05 	sts	0x05CD, r18
      signed char flip = 0;
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	95 ff       	sbrs	r25, 5
    3f6c:	80 e0       	ldi	r24, 0x00	; 0
      if (_code.b[1] & 0x20) /* 0b00100000 : #11 */ flip = 1;
      rc5.flip = flip;
    3f6e:	80 93 ce 05 	sts	0x05CE, r24
    }
  }
  nint = 0;
    3f72:	10 92 84 05 	sts	0x0584, r1
  nbits = 0;
    3f76:	10 92 85 05 	sts	0x0585, r1
#if (RC5_INT == RC5_INT0)               
  MCUCR = (MCUCR | (1 << ISC01)) & ~ (1 << ISC00);
    3f7a:	85 b7       	in	r24, 0x35	; 53
    3f7c:	8c 7f       	andi	r24, 0xFC	; 252
    3f7e:	82 60       	ori	r24, 0x02	; 2
    3f80:	85 bf       	out	0x35, r24	; 53
  GIFR = (1 << INTF0);
    3f82:	80 e4       	ldi	r24, 0x40	; 64
    3f84:	8a bf       	out	0x3a, r24	; 58
  GICR |= (1 << INT0);
    3f86:	8b b7       	in	r24, 0x3b	; 59
    3f88:	80 64       	ori	r24, 0x40	; 64
    3f8a:	8b bf       	out	0x3b, r24	; 59
#elif (RC5_INT == RC5_INT1)             
  MCUCR = (MCUCR | (1 << ISC11)) & ~ (1 << ISC10);
  GIFR = (1 << INTF1);
  GICR |= (1 << INT1);
#endif
}
    3f8c:	9f 91       	pop	r25
    3f8e:	8f 91       	pop	r24
    3f90:	4f 91       	pop	r20
    3f92:	3f 91       	pop	r19
    3f94:	2f 91       	pop	r18
    3f96:	0f 90       	pop	r0
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	0f 90       	pop	r0
    3f9c:	1f 90       	pop	r1
    3f9e:	18 95       	reti

00003fa0 <__vector_1>:
#if (RC5_INT == RC5_INT0)               
ISR(INT0_vect)
#elif (RC5_INT == RC5_INT1)             
ISR(INT1_vect)
#endif /* RC5_INT */
{
    3fa0:	1f 92       	push	r1
    3fa2:	0f 92       	push	r0
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	0f 92       	push	r0
    3fa8:	11 24       	eor	r1, r1
    3faa:	2f 93       	push	r18
    3fac:	3f 93       	push	r19
    3fae:	4f 93       	push	r20
    3fb0:	5f 93       	push	r21
    3fb2:	6f 93       	push	r22
    3fb4:	7f 93       	push	r23
    3fb6:	8f 93       	push	r24
    3fb8:	9f 93       	push	r25
  if (rc5.flip == -1)
    3fba:	80 91 ce 05 	lds	r24, 0x05CE
    3fbe:	8f 3f       	cpi	r24, 0xFF	; 255
    3fc0:	09 f0       	breq	.+2      	; 0x3fc4 <__vector_1+0x24>
    3fc2:	3e c0       	rjmp	.+124    	; 0x4040 <__vector_1+0xa0>
  {
  code_t _code = code;
    3fc4:	80 91 82 05 	lds	r24, 0x0582
    3fc8:	90 91 83 05 	lds	r25, 0x0583
  uint8_t _nint = nint;
    3fcc:	30 91 84 05 	lds	r19, 0x0584
  uint8_t tcnt0 = TCNT0;
    3fd0:	22 b7       	in	r18, 0x32	; 50
  TCNT0 = 0;
    3fd2:	12 be       	out	0x32, r1	; 50
        
  if (0 == _nint)
    3fd4:	33 23       	and	r19, r19
    3fd6:	61 f4       	brne	.+24     	; 0x3ff0 <__vector_1+0x50>
  {
  /* INTx on both edges */
#if (RC5_INT == RC5_INT0)               
   MCUCR = (MCUCR | (1 << ISC00)) & ~ (1 << ISC01);
    3fd8:	85 b7       	in	r24, 0x35	; 53
    3fda:	8c 7f       	andi	r24, 0xFC	; 252
    3fdc:	81 60       	ori	r24, 0x01	; 1
    3fde:	85 bf       	out	0x35, r24	; 53
#elif (RC5_INT == RC5_INT1)             
   MCUCR = (MCUCR | (1 << ISC10)) & ~ (1 << ISC11);
#endif /* RC5_INT */
      
  TIFR = (1 << TOV0);
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	88 bf       	out	0x38, r24	; 56
  TIMSK |= (1 << TOIE0);
    3fe4:	89 b7       	in	r24, 0x39	; 57
    3fe6:	81 60       	ori	r24, 0x01	; 1
    3fe8:	89 bf       	out	0x39, r24	; 57
  _code.w = 0;
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	21 c0       	rjmp	.+66     	; 0x4032 <__vector_1+0x92>
  } else {
    /* Number of bits of the just elapsed period */
    uint8_t n = 1;
    /* Bits received so far */
    uint8_t _nbits = nbits;
    3ff0:	60 91 85 05 	lds	r22, 0x0585
    /* is TCNT0 close to RC5_TICKS or RC5_TICKS/2 ? */
    if (tcnt0 > RC5_TICKS + RC5_DELTA)
    3ff4:	20 32       	cpi	r18, 0x20	; 32
    3ff6:	b8 f4       	brcc	.+46     	; 0x4026 <__vector_1+0x86>
      goto invalid;
    else if (tcnt0 < RC5_TICKS/2 - RC5_DELTA)
    3ff8:	29 30       	cpi	r18, 0x09	; 9
    3ffa:	a8 f0       	brcs	.+42     	; 0x4026 <__vector_1+0x86>
      goto invalid;
    else if (tcnt0 > RC5_TICKS - RC5_DELTA)
    3ffc:	28 31       	cpi	r18, 0x18	; 24
    3ffe:	20 f4       	brcc	.+8      	; 0x4008 <__vector_1+0x68>
      n = 2;
    else if (tcnt0 > RC5_TICKS/2 + RC5_DELTA)
    4000:	22 31       	cpi	r18, 0x12	; 18
    4002:	88 f4       	brcc	.+34     	; 0x4026 <__vector_1+0x86>
  TIFR = (1 << TOV0);
  TIMSK |= (1 << TOIE0);
  _code.w = 0;
  } else {
    /* Number of bits of the just elapsed period */
    uint8_t n = 1;
    4004:	21 e0       	ldi	r18, 0x01	; 1
    4006:	01 c0       	rjmp	.+2      	; 0x400a <__vector_1+0x6a>
    if (tcnt0 > RC5_TICKS + RC5_DELTA)
      goto invalid;
    else if (tcnt0 < RC5_TICKS/2 - RC5_DELTA)
      goto invalid;
    else if (tcnt0 > RC5_TICKS - RC5_DELTA)
      n = 2;
    4008:	22 e0       	ldi	r18, 0x02	; 2
    400a:	56 2f       	mov	r21, r22
    400c:	42 2f       	mov	r20, r18
    /* store the just received 1 or 2 bits */
    do {
      _nbits++;
      if (_nbits & 1)
      {
        _code.w <<= 1; _code.b[0] |= _nint & 1;
    400e:	73 2f       	mov	r23, r19
    4010:	71 70       	andi	r23, 0x01	; 1
      n = 2;
    else if (tcnt0 > RC5_TICKS/2 + RC5_DELTA)
      goto invalid;
    /* store the just received 1 or 2 bits */
    do {
      _nbits++;
    4012:	5f 5f       	subi	r21, 0xFF	; 255
      if (_nbits & 1)
    4014:	50 ff       	sbrs	r21, 0
    4016:	03 c0       	rjmp	.+6      	; 0x401e <__vector_1+0x7e>
      {
        _code.w <<= 1; _code.b[0] |= _nint & 1;
    4018:	88 0f       	add	r24, r24
    401a:	99 1f       	adc	r25, r25
    401c:	87 2b       	or	r24, r23
      }
    } // end do
    while (--n);
    401e:	41 50       	subi	r20, 0x01	; 1
    4020:	c1 f7       	brne	.-16     	; 0x4012 <__vector_1+0x72>
    4022:	26 0f       	add	r18, r22
    4024:	04 c0       	rjmp	.+8      	; 0x402e <__vector_1+0x8e>
    if (0)
    {
      invalid:
      /* disable INTx, run into Overflow0 */
#if (RC5_INT == RC5_INT0)               
     GICR &= ~(1 << INT0);
    4026:	2b b7       	in	r18, 0x3b	; 59
    4028:	2f 7b       	andi	r18, 0xBF	; 191
    402a:	2b bf       	out	0x3b, r18	; 59
#elif (RC5_INT == RC5_INT1)             
     GICR &= ~(1 << INT1);
#endif /* RC5_INT */
     _nbits = 0;
    402c:	20 e0       	ldi	r18, 0x00	; 0
   }
   nbits = _nbits;
    402e:	20 93 85 05 	sts	0x0585, r18
  }
  code = _code; nint = 1 + _nint;
    4032:	90 93 83 05 	sts	0x0583, r25
    4036:	80 93 82 05 	sts	0x0582, r24
    403a:	3f 5f       	subi	r19, 0xFF	; 255
    403c:	30 93 84 05 	sts	0x0584, r19
  }
}
    4040:	9f 91       	pop	r25
    4042:	8f 91       	pop	r24
    4044:	7f 91       	pop	r23
    4046:	6f 91       	pop	r22
    4048:	5f 91       	pop	r21
    404a:	4f 91       	pop	r20
    404c:	3f 91       	pop	r19
    404e:	2f 91       	pop	r18
    4050:	0f 90       	pop	r0
    4052:	0f be       	out	0x3f, r0	; 63
    4054:	0f 90       	pop	r0
    4056:	1f 90       	pop	r1
    4058:	18 95       	reti

0000405a <tda7313GetInput>:
unsigned char tda7313_def_param[] = { TDA_VOLUME_DEF, TDA_ATTENS_ALL_DEF, TDA_BASS_DEF, TDA_TREBLE, TDA_ATTENS_FL_DEF, TDA_ATTENS_FR_DEF, TDA_ATTENS_RL_DEF, TDA_ATTENS_RR_DEF};
//=============================================================================
uint8_t tda7313GetInput(void)
{
  return _input;
}
    405a:	80 91 8d 04 	lds	r24, 0x048D
    405e:	08 95       	ret

00004060 <tda7313GetLoudness>:
//=============================================================================
uint8_t tda7313GetLoudness(void)
{
  return _loudness;
}
    4060:	80 91 8c 04 	lds	r24, 0x048C
    4064:	08 95       	ret

00004066 <tda7313Get_Param>:
  tda7313Send_Param();
}
//=============================================================================
uint8_t tda7313Get_Param(uint8_t param)
{
  return tda7313_param[_input][param];
    4066:	e0 91 8d 04 	lds	r30, 0x048D
    406a:	f0 e0       	ldi	r31, 0x00	; 0
    406c:	93 e0       	ldi	r25, 0x03	; 3
    406e:	ee 0f       	add	r30, r30
    4070:	ff 1f       	adc	r31, r31
    4072:	9a 95       	dec	r25
    4074:	e1 f7       	brne	.-8      	; 0x406e <tda7313Get_Param+0x8>
    4076:	e8 0f       	add	r30, r24
    4078:	f1 1d       	adc	r31, r1
    407a:	e0 5b       	subi	r30, 0xB0	; 176
    407c:	fb 4f       	sbci	r31, 0xFB	; 251
}
    407e:	80 81       	ld	r24, Z
    4080:	08 95       	ret

00004082 <tda7313Set_Param_no_send>:
//=============================================================================
void tda7313Set_Param_no_send(uint8_t param, uint8_t val)
{
  tda7313_param[_input][param] = val;
    4082:	e0 91 8d 04 	lds	r30, 0x048D
    4086:	f0 e0       	ldi	r31, 0x00	; 0
    4088:	23 e0       	ldi	r18, 0x03	; 3
    408a:	ee 0f       	add	r30, r30
    408c:	ff 1f       	adc	r31, r31
    408e:	2a 95       	dec	r18
    4090:	e1 f7       	brne	.-8      	; 0x408a <tda7313Set_Param_no_send+0x8>
    4092:	e8 0f       	add	r30, r24
    4094:	f1 1d       	adc	r31, r1
    4096:	e0 5b       	subi	r30, 0xB0	; 176
    4098:	fb 4f       	sbci	r31, 0xFB	; 251
    409a:	60 83       	st	Z, r22
}
    409c:	08 95       	ret

0000409e <tda7313Get_Max_Param>:
  tda7313Send_Param();
}
//=============================================================================
uint8_t tda7313Get_Max_Param(uint8_t param)
{
  return tda7313_max_param[param];
    409e:	ec e6       	ldi	r30, 0x6C	; 108
    40a0:	f4 e0       	ldi	r31, 0x04	; 4
    40a2:	e8 0f       	add	r30, r24
    40a4:	f1 1d       	adc	r31, r1
}
    40a6:	80 81       	ld	r24, Z
    40a8:	08 95       	ret

000040aa <tda7313Send_Param>:
//=============================================================================
void tda7313Send_Param(void)
{
    40aa:	1f 93       	push	r17
  unsigned char sw_reg = TDA7313_SW, val;
  // Volume
  I2C_start();
    40ac:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    40b0:	88 e8       	ldi	r24, 0x88	; 136
    40b2:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  val = tda7313_param[_input][TDA_VOLUME];
    40b6:	e0 91 8d 04 	lds	r30, 0x048D
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	13 e0       	ldi	r17, 0x03	; 3
    40be:	ee 0f       	add	r30, r30
    40c0:	ff 1f       	adc	r31, r31
    40c2:	1a 95       	dec	r17
    40c4:	e1 f7       	brne	.-8      	; 0x40be <tda7313Send_Param+0x14>
    40c6:	e0 5b       	subi	r30, 0xB0	; 176
    40c8:	fb 4f       	sbci	r31, 0xFB	; 251
    40ca:	90 81       	ld	r25, Z
uint8_t tda7313Get_Max_Param(uint8_t param)
{
  return tda7313_max_param[param];
}
//=============================================================================
void tda7313Send_Param(void)
    40cc:	89 2f       	mov	r24, r25
    40ce:	81 95       	neg	r24
  unsigned char sw_reg = TDA7313_SW, val;
  // Volume
  I2C_start();
  I2C_write(TDA7313_I2C_ADDR);
  val = tda7313_param[_input][TDA_VOLUME];
  I2C_write(TDA7313_VOLUME + 0x3F - (val + val));
    40d0:	89 1b       	sub	r24, r25
    40d2:	81 5c       	subi	r24, 0xC1	; 193
    40d4:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    40d8:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens
  val = tda7313_param[_input][TDA_ATTENS_ALL];
    40dc:	e0 91 8d 04 	lds	r30, 0x048D
  sw_reg += tda7313_attens[val] + _input;
    40e0:	1e 2f       	mov	r17, r30
    40e2:	10 5c       	subi	r17, 0xC0	; 192
  I2C_write(TDA7313_I2C_ADDR);
  val = tda7313_param[_input][TDA_VOLUME];
  I2C_write(TDA7313_VOLUME + 0x3F - (val + val));
  I2C_stop();
  // Attens
  val = tda7313_param[_input][TDA_ATTENS_ALL];
    40e4:	f0 e0       	ldi	r31, 0x00	; 0
    40e6:	b3 e0       	ldi	r27, 0x03	; 3
    40e8:	ee 0f       	add	r30, r30
    40ea:	ff 1f       	adc	r31, r31
    40ec:	ba 95       	dec	r27
    40ee:	e1 f7       	brne	.-8      	; 0x40e8 <tda7313Send_Param+0x3e>
    40f0:	e0 5b       	subi	r30, 0xB0	; 176
    40f2:	fb 4f       	sbci	r31, 0xFB	; 251
  sw_reg += tda7313_attens[val] + _input;
    40f4:	e1 81       	ldd	r30, Z+1	; 0x01
    40f6:	f0 e0       	ldi	r31, 0x00	; 0
    40f8:	e8 59       	subi	r30, 0x98	; 152
    40fa:	fb 4f       	sbci	r31, 0xFB	; 251
    40fc:	80 81       	ld	r24, Z
    40fe:	18 0f       	add	r17, r24
  if (_loudness) sw_reg &= ~(1 << TDA7313_LONDNESS_BIT); else sw_reg |= (1 << TDA7313_LONDNESS_BIT);
    4100:	80 91 8c 04 	lds	r24, 0x048C
    4104:	88 23       	and	r24, r24
    4106:	11 f0       	breq	.+4      	; 0x410c <tda7313Send_Param+0x62>
    4108:	1b 7f       	andi	r17, 0xFB	; 251
    410a:	01 c0       	rjmp	.+2      	; 0x410e <tda7313Send_Param+0x64>
    410c:	14 60       	ori	r17, 0x04	; 4
  I2C_start();
    410e:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    4112:	88 e8       	ldi	r24, 0x88	; 136
    4114:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(sw_reg);
    4118:	81 2f       	mov	r24, r17
    411a:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    411e:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens Front Left
  val = tda7313_param[_input][TDA_ATTENS_FL];
    4122:	e0 91 8d 04 	lds	r30, 0x048D
    4126:	f0 e0       	ldi	r31, 0x00	; 0
    4128:	a3 e0       	ldi	r26, 0x03	; 3
    412a:	ee 0f       	add	r30, r30
    412c:	ff 1f       	adc	r31, r31
    412e:	aa 95       	dec	r26
    4130:	e1 f7       	brne	.-8      	; 0x412a <tda7313Send_Param+0x80>
    4132:	e0 5b       	subi	r30, 0xB0	; 176
    4134:	fb 4f       	sbci	r31, 0xFB	; 251
    4136:	14 81       	ldd	r17, Z+4	; 0x04
  I2C_start();
    4138:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    413c:	88 e8       	ldi	r24, 0x88	; 136
    413e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_FRONT_LEFT + (TDA7313_MAX_ATTENS - val));
    4142:	8f e9       	ldi	r24, 0x9F	; 159
    4144:	81 1b       	sub	r24, r17
    4146:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    414a:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens Front Right
  val = tda7313_param[_input][TDA_ATTENS_FR];
    414e:	e0 91 8d 04 	lds	r30, 0x048D
    4152:	f0 e0       	ldi	r31, 0x00	; 0
    4154:	73 e0       	ldi	r23, 0x03	; 3
    4156:	ee 0f       	add	r30, r30
    4158:	ff 1f       	adc	r31, r31
    415a:	7a 95       	dec	r23
    415c:	e1 f7       	brne	.-8      	; 0x4156 <tda7313Send_Param+0xac>
    415e:	e0 5b       	subi	r30, 0xB0	; 176
    4160:	fb 4f       	sbci	r31, 0xFB	; 251
    4162:	15 81       	ldd	r17, Z+5	; 0x05
  I2C_start();
    4164:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    4168:	88 e8       	ldi	r24, 0x88	; 136
    416a:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_FRONT_RIGHT + (TDA7313_MAX_ATTENS - val));
    416e:	8f eb       	ldi	r24, 0xBF	; 191
    4170:	81 1b       	sub	r24, r17
    4172:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    4176:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens Rear Left
  val = tda7313_param[_input][TDA_ATTENS_RL];
    417a:	e0 91 8d 04 	lds	r30, 0x048D
    417e:	f0 e0       	ldi	r31, 0x00	; 0
    4180:	63 e0       	ldi	r22, 0x03	; 3
    4182:	ee 0f       	add	r30, r30
    4184:	ff 1f       	adc	r31, r31
    4186:	6a 95       	dec	r22
    4188:	e1 f7       	brne	.-8      	; 0x4182 <tda7313Send_Param+0xd8>
    418a:	e0 5b       	subi	r30, 0xB0	; 176
    418c:	fb 4f       	sbci	r31, 0xFB	; 251
    418e:	16 81       	ldd	r17, Z+6	; 0x06
  I2C_start();
    4190:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    4194:	88 e8       	ldi	r24, 0x88	; 136
    4196:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_REAR_LEFT + (TDA7313_MAX_ATTENS - val));
    419a:	8f ed       	ldi	r24, 0xDF	; 223
    419c:	81 1b       	sub	r24, r17
    419e:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    41a2:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Attens Rear Right
  val = tda7313_param[_input][TDA_ATTENS_RR];
    41a6:	e0 91 8d 04 	lds	r30, 0x048D
    41aa:	f0 e0       	ldi	r31, 0x00	; 0
    41ac:	53 e0       	ldi	r21, 0x03	; 3
    41ae:	ee 0f       	add	r30, r30
    41b0:	ff 1f       	adc	r31, r31
    41b2:	5a 95       	dec	r21
    41b4:	e1 f7       	brne	.-8      	; 0x41ae <tda7313Send_Param+0x104>
    41b6:	e0 5b       	subi	r30, 0xB0	; 176
    41b8:	fb 4f       	sbci	r31, 0xFB	; 251
    41ba:	17 81       	ldd	r17, Z+7	; 0x07
  I2C_start();
    41bc:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    41c0:	88 e8       	ldi	r24, 0x88	; 136
    41c2:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_REAR_RIGHT + (TDA7313_MAX_ATTENS - val));
    41c6:	81 2f       	mov	r24, r17
    41c8:	80 95       	com	r24
    41ca:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    41ce:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Bass
  val = tda7313_param[_input][TDA_BASS];
    41d2:	e0 91 8d 04 	lds	r30, 0x048D
    41d6:	f0 e0       	ldi	r31, 0x00	; 0
    41d8:	43 e0       	ldi	r20, 0x03	; 3
    41da:	ee 0f       	add	r30, r30
    41dc:	ff 1f       	adc	r31, r31
    41de:	4a 95       	dec	r20
    41e0:	e1 f7       	brne	.-8      	; 0x41da <tda7313Send_Param+0x130>
    41e2:	e0 5b       	subi	r30, 0xB0	; 176
    41e4:	fb 4f       	sbci	r31, 0xFB	; 251
    41e6:	12 81       	ldd	r17, Z+2	; 0x02
  I2C_start();
    41e8:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    41ec:	88 e8       	ldi	r24, 0x88	; 136
    41ee:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_BASS + tda7313_bass_treb[val]);
    41f2:	e1 2f       	mov	r30, r17
    41f4:	f0 e0       	ldi	r31, 0x00	; 0
    41f6:	ec 58       	subi	r30, 0x8C	; 140
    41f8:	fb 4f       	sbci	r31, 0xFB	; 251
    41fa:	80 81       	ld	r24, Z
    41fc:	80 5a       	subi	r24, 0xA0	; 160
    41fe:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    4202:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  // Treble
  val = tda7313_param[_input][TDA_TREBLE];
    4206:	e0 91 8d 04 	lds	r30, 0x048D
    420a:	f0 e0       	ldi	r31, 0x00	; 0
    420c:	33 e0       	ldi	r19, 0x03	; 3
    420e:	ee 0f       	add	r30, r30
    4210:	ff 1f       	adc	r31, r31
    4212:	3a 95       	dec	r19
    4214:	e1 f7       	brne	.-8      	; 0x420e <tda7313Send_Param+0x164>
    4216:	e0 5b       	subi	r30, 0xB0	; 176
    4218:	fb 4f       	sbci	r31, 0xFB	; 251
    421a:	13 81       	ldd	r17, Z+3	; 0x03
  I2C_start();
    421c:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TDA7313_I2C_ADDR);
    4220:	88 e8       	ldi	r24, 0x88	; 136
    4222:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_write(TDA7313_TREBLE + tda7313_bass_treb[val]);
    4226:	e1 2f       	mov	r30, r17
    4228:	f0 e0       	ldi	r31, 0x00	; 0
    422a:	ec 58       	subi	r30, 0x8C	; 140
    422c:	fb 4f       	sbci	r31, 0xFB	; 251
    422e:	80 81       	ld	r24, Z
    4230:	80 59       	subi	r24, 0x90	; 144
    4232:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
  I2C_stop();
    4236:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
}
    423a:	1f 91       	pop	r17
    423c:	08 95       	ret

0000423e <tda7313Set_Param_down>:
  tda7313Send_Param();
}
//=============================================================================
void tda7313Set_Param_down(uint8_t param)
{
  if (tda7313_param[_input][param] > 0) tda7313_param[_input][param] = tda7313_param[_input][param] - 1;
    423e:	e0 91 8d 04 	lds	r30, 0x048D
    4242:	f0 e0       	ldi	r31, 0x00	; 0
    4244:	93 e0       	ldi	r25, 0x03	; 3
    4246:	ee 0f       	add	r30, r30
    4248:	ff 1f       	adc	r31, r31
    424a:	9a 95       	dec	r25
    424c:	e1 f7       	brne	.-8      	; 0x4246 <tda7313Set_Param_down+0x8>
    424e:	e8 0f       	add	r30, r24
    4250:	f1 1d       	adc	r31, r1
    4252:	e0 5b       	subi	r30, 0xB0	; 176
    4254:	fb 4f       	sbci	r31, 0xFB	; 251
    4256:	80 81       	ld	r24, Z
    4258:	88 23       	and	r24, r24
    425a:	11 f0       	breq	.+4      	; 0x4260 <tda7313Set_Param_down+0x22>
    425c:	81 50       	subi	r24, 0x01	; 1
    425e:	80 83       	st	Z, r24
  tda7313Send_Param();
    4260:	0e 94 55 20 	call	0x40aa	; 0x40aa <tda7313Send_Param>
}
    4264:	08 95       	ret

00004266 <tda7313Set_Param_up>:
  tda7313Send_Param();
}
//=============================================================================
void tda7313Set_Param_up(uint8_t param)
{
  if (tda7313_param[_input][param] < tda7313_max_param[param]) tda7313_param[_input][param] = tda7313_param[_input][param] + 1;
    4266:	e0 91 8d 04 	lds	r30, 0x048D
    426a:	f0 e0       	ldi	r31, 0x00	; 0
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	23 e0       	ldi	r18, 0x03	; 3
    4270:	ee 0f       	add	r30, r30
    4272:	ff 1f       	adc	r31, r31
    4274:	2a 95       	dec	r18
    4276:	e1 f7       	brne	.-8      	; 0x4270 <tda7313Set_Param_up+0xa>
    4278:	e8 0f       	add	r30, r24
    427a:	f9 1f       	adc	r31, r25
    427c:	e0 5b       	subi	r30, 0xB0	; 176
    427e:	fb 4f       	sbci	r31, 0xFB	; 251
    4280:	20 81       	ld	r18, Z
    4282:	84 59       	subi	r24, 0x94	; 148
    4284:	9b 4f       	sbci	r25, 0xFB	; 251
    4286:	dc 01       	movw	r26, r24
    4288:	8c 91       	ld	r24, X
    428a:	28 17       	cp	r18, r24
    428c:	10 f4       	brcc	.+4      	; 0x4292 <tda7313Set_Param_up+0x2c>
    428e:	2f 5f       	subi	r18, 0xFF	; 255
    4290:	20 83       	st	Z, r18
  tda7313Send_Param();
    4292:	0e 94 55 20 	call	0x40aa	; 0x40aa <tda7313Send_Param>
}
    4296:	08 95       	ret

00004298 <tda7313Set_Param>:
  tda7313_param[_input][param] = val;
}
//=============================================================================
void tda7313Set_Param(uint8_t param, uint8_t val)
{
  tda7313_param[_input][param] = val;
    4298:	e0 91 8d 04 	lds	r30, 0x048D
    429c:	f0 e0       	ldi	r31, 0x00	; 0
    429e:	33 e0       	ldi	r19, 0x03	; 3
    42a0:	ee 0f       	add	r30, r30
    42a2:	ff 1f       	adc	r31, r31
    42a4:	3a 95       	dec	r19
    42a6:	e1 f7       	brne	.-8      	; 0x42a0 <tda7313Set_Param+0x8>
    42a8:	e8 0f       	add	r30, r24
    42aa:	f1 1d       	adc	r31, r1
    42ac:	e0 5b       	subi	r30, 0xB0	; 176
    42ae:	fb 4f       	sbci	r31, 0xFB	; 251
    42b0:	60 83       	st	Z, r22
  tda7313Send_Param();
    42b2:	0e 94 55 20 	call	0x40aa	; 0x40aa <tda7313Send_Param>
}
    42b6:	08 95       	ret

000042b8 <tda7313SetInput>:
  tda7313Send_Param();
}
//=============================================================================
void tda7313SetInput(uint8_t in)
{
  _input = in;
    42b8:	80 93 8d 04 	sts	0x048D, r24
  tda7313Send_Param();
    42bc:	0e 94 55 20 	call	0x40aa	; 0x40aa <tda7313Send_Param>
}
    42c0:	08 95       	ret

000042c2 <tda7313SetLoudness>:
  return _loudness;
}
//=============================================================================
void tda7313SetLoudness(uint8_t loudness)
{
  _loudness = loudness;
    42c2:	80 93 8c 04 	sts	0x048C, r24
  tda7313Send_Param();
    42c6:	0e 94 55 20 	call	0x40aa	; 0x40aa <tda7313Send_Param>
}
    42ca:	08 95       	ret

000042cc <tda7313SetMute>:
  I2C_stop();
}
//=============================================================================
void tda7313SetMute(uint8_t val)
{
  if (val) {
    42cc:	88 23       	and	r24, r24
    42ce:	a1 f0       	breq	.+40     	; 0x42f8 <tda7313SetMute+0x2c>
    I2C_start();
    42d0:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
    I2C_write(TDA7313_I2C_ADDR);
    42d4:	88 e8       	ldi	r24, 0x88	; 136
    42d6:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_write(TDA7313_FRONT_LEFT | TDA7313_MUTE);
    42da:	8f e9       	ldi	r24, 0x9F	; 159
    42dc:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_write(TDA7313_FRONT_RIGHT | TDA7313_MUTE);
    42e0:	8f eb       	ldi	r24, 0xBF	; 191
    42e2:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_write(TDA7313_REAR_LEFT | TDA7313_MUTE);
    42e6:	8f ed       	ldi	r24, 0xDF	; 223
    42e8:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_write(TDA7313_REAR_RIGHT | TDA7313_MUTE);
    42ec:	8f ef       	ldi	r24, 0xFF	; 255
    42ee:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    I2C_stop();
    42f2:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
    42f6:	08 95       	ret
  } else {
    tda7313Send_Param();
    42f8:	0e 94 55 20 	call	0x40aa	; 0x40aa <tda7313Send_Param>
    42fc:	08 95       	ret

000042fe <tda7313_Save_Input>:
  tda7313_Load_Input();
  tda7313_Load_Loudness();
}
//=============================================================================
void tda7313_Save_Input(uint8_t in)
{
    42fe:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)TDA_INPUT_ADDR, in);
    4300:	80 e8       	ldi	r24, 0x80	; 128
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
}
    4308:	08 95       	ret

0000430a <tda7313_Load_Input>:
//=============================================================================
uint8_t tda7313_Load_Input(void)
{
  _input = eeprom_read_byte((uint8_t*)TDA_INPUT_ADDR);
    430a:	80 e8       	ldi	r24, 0x80	; 128
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
    4312:	80 93 8d 04 	sts	0x048D, r24
  if (_input > TDA7313_IN_CNT - 1) _input = 0;
    4316:	83 30       	cpi	r24, 0x03	; 3
    4318:	10 f0       	brcs	.+4      	; 0x431e <tda7313_Load_Input+0x14>
    431a:	10 92 8d 04 	sts	0x048D, r1
  return _input;
}
    431e:	80 91 8d 04 	lds	r24, 0x048D
    4322:	08 95       	ret

00004324 <tda7313_Save_Loudness>:
//=============================================================================
void tda7313_Save_Loudness(uint8_t loud)
{
    4324:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)TDA_LOUDNESS_ADDR, loud);
    4326:	81 e8       	ldi	r24, 0x81	; 129
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
}
    432e:	08 95       	ret

00004330 <tda7313_Load_Loudness>:
//=============================================================================
uint8_t tda7313_Load_Loudness(void)
{
  _loudness = eeprom_read_byte((uint8_t*)TDA_LOUDNESS_ADDR);
    4330:	81 e8       	ldi	r24, 0x81	; 129
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
    4338:	80 93 8c 04 	sts	0x048C, r24
  if (_loudness > 2) _loudness = 1;
    433c:	83 30       	cpi	r24, 0x03	; 3
    433e:	18 f0       	brcs	.+6      	; 0x4346 <tda7313_Load_Loudness+0x16>
    4340:	81 e0       	ldi	r24, 0x01	; 1
    4342:	80 93 8c 04 	sts	0x048C, r24
  return _loudness;
}
    4346:	80 91 8c 04 	lds	r24, 0x048C
    434a:	08 95       	ret

0000434c <tda7313_Save_param>:
//=============================================================================
void tda7313_Save_param(uint8_t in, uint8_t param)
{
  switch (in)
    434c:	81 30       	cpi	r24, 0x01	; 1
    434e:	71 f0       	breq	.+28     	; 0x436c <tda7313_Save_param+0x20>
    4350:	81 30       	cpi	r24, 0x01	; 1
    4352:	18 f0       	brcs	.+6      	; 0x435a <tda7313_Save_param+0xe>
    4354:	82 30       	cpi	r24, 0x02	; 2
    4356:	f9 f4       	brne	.+62     	; 0x4396 <tda7313_Save_param+0x4a>
    4358:	14 c0       	rjmp	.+40     	; 0x4382 <tda7313_Save_param+0x36>
  {
    case 0:
      eeprom_write_byte((uint8_t*)(TDA_PARAM_ADDR_IN1 + param), tda7313_param[0][param]);
    435a:	86 2f       	mov	r24, r22
    435c:	90 e0       	ldi	r25, 0x00	; 0
    435e:	fc 01       	movw	r30, r24
    4360:	e0 5b       	subi	r30, 0xB0	; 176
    4362:	fb 4f       	sbci	r31, 0xFB	; 251
    4364:	80 5b       	subi	r24, 0xB0	; 176
    4366:	9f 4f       	sbci	r25, 0xFF	; 255
    4368:	60 81       	ld	r22, Z
    436a:	08 c0       	rjmp	.+16     	; 0x437c <tda7313_Save_param+0x30>
    break;
    case 1:
      eeprom_write_byte((uint8_t*)(TDA_PARAM_ADDR_IN2 + param), tda7313_param[1][param]);
    436c:	86 2f       	mov	r24, r22
    436e:	90 e0       	ldi	r25, 0x00	; 0
    4370:	fc 01       	movw	r30, r24
    4372:	e0 5b       	subi	r30, 0xB0	; 176
    4374:	fb 4f       	sbci	r31, 0xFB	; 251
    4376:	80 5a       	subi	r24, 0xA0	; 160
    4378:	9f 4f       	sbci	r25, 0xFF	; 255
    437a:	60 85       	ldd	r22, Z+8	; 0x08
    437c:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
    break;
    4380:	08 95       	ret
    case 2:
      eeprom_write_byte((uint8_t*)(TDA_PARAM_ADDR_IN3 + param), tda7313_param[2][param]);
    4382:	86 2f       	mov	r24, r22
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	fc 01       	movw	r30, r24
    4388:	e0 5b       	subi	r30, 0xB0	; 176
    438a:	fb 4f       	sbci	r31, 0xFB	; 251
    438c:	80 59       	subi	r24, 0x90	; 144
    438e:	9f 4f       	sbci	r25, 0xFF	; 255
    4390:	60 89       	ldd	r22, Z+16	; 0x10
    4392:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
    4396:	08 95       	ret

00004398 <tda7313_Save_all_param>:
    tda7313Send_Param();
  }
}
//=============================================================================
void tda7313_Save_all_param(void)
{
    4398:	1f 93       	push	r17
  unsigned char i;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    439a:	10 e0       	ldi	r17, 0x00	; 0
  {
    tda7313_Save_param(0, i);
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	61 2f       	mov	r22, r17
    43a0:	0e 94 a6 21 	call	0x434c	; 0x434c <tda7313_Save_param>
    tda7313_Save_param(1, i);
    43a4:	81 e0       	ldi	r24, 0x01	; 1
    43a6:	61 2f       	mov	r22, r17
    43a8:	0e 94 a6 21 	call	0x434c	; 0x434c <tda7313_Save_param>
    tda7313_Save_param(2, i);
    43ac:	82 e0       	ldi	r24, 0x02	; 2
    43ae:	61 2f       	mov	r22, r17
    43b0:	0e 94 a6 21 	call	0x434c	; 0x434c <tda7313_Save_param>
}
//=============================================================================
void tda7313_Save_all_param(void)
{
  unsigned char i;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    43b4:	1f 5f       	subi	r17, 0xFF	; 255
    43b6:	18 30       	cpi	r17, 0x08	; 8
    43b8:	89 f7       	brne	.-30     	; 0x439c <tda7313_Save_all_param+0x4>
  {
    tda7313_Save_param(0, i);
    tda7313_Save_param(1, i);
    tda7313_Save_param(2, i);
  }
  tda7313_Save_Input(_input);
    43ba:	80 91 8d 04 	lds	r24, 0x048D
    43be:	0e 94 7f 21 	call	0x42fe	; 0x42fe <tda7313_Save_Input>
  tda7313_Save_Loudness(_loudness);
    43c2:	80 91 8c 04 	lds	r24, 0x048C
    43c6:	0e 94 92 21 	call	0x4324	; 0x4324 <tda7313_Save_Loudness>
}
    43ca:	1f 91       	pop	r17
    43cc:	08 95       	ret

000043ce <tda7313_Load_param>:
}
//=============================================================================
uint8_t tda7313_Load_param(uint8_t in, uint8_t param)
{
  uint8_t ret = 0;
  switch (in)
    43ce:	81 30       	cpi	r24, 0x01	; 1
    43d0:	51 f0       	breq	.+20     	; 0x43e6 <tda7313_Load_param+0x18>
    43d2:	81 30       	cpi	r24, 0x01	; 1
    43d4:	18 f0       	brcs	.+6      	; 0x43dc <tda7313_Load_param+0xe>
    43d6:	82 30       	cpi	r24, 0x02	; 2
    43d8:	91 f4       	brne	.+36     	; 0x43fe <tda7313_Load_param+0x30>
    43da:	0a c0       	rjmp	.+20     	; 0x43f0 <tda7313_Load_param+0x22>
  {
    case 0:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN1 + param));
    43dc:	86 2f       	mov	r24, r22
    43de:	90 e0       	ldi	r25, 0x00	; 0
    43e0:	80 5b       	subi	r24, 0xB0	; 176
    43e2:	9f 4f       	sbci	r25, 0xFF	; 255
    43e4:	09 c0       	rjmp	.+18     	; 0x43f8 <tda7313_Load_param+0x2a>
    break;
    case 1:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN2 + param));
    43e6:	86 2f       	mov	r24, r22
    43e8:	90 e0       	ldi	r25, 0x00	; 0
    43ea:	80 5a       	subi	r24, 0xA0	; 160
    43ec:	9f 4f       	sbci	r25, 0xFF	; 255
    43ee:	04 c0       	rjmp	.+8      	; 0x43f8 <tda7313_Load_param+0x2a>
    break;
    case 2:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN3 + param));
    43f0:	86 2f       	mov	r24, r22
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	80 59       	subi	r24, 0x90	; 144
    43f6:	9f 4f       	sbci	r25, 0xFF	; 255
    43f8:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
    break;
    43fc:	08 95       	ret
  }
}
//=============================================================================
uint8_t tda7313_Load_param(uint8_t in, uint8_t param)
{
  uint8_t ret = 0;
    43fe:	80 e0       	ldi	r24, 0x00	; 0
    case 2:
      ret = eeprom_read_byte((uint8_t*)(TDA_PARAM_ADDR_IN3 + param));
    break;
  }
  return ret;
}
    4400:	08 95       	ret

00004402 <tda7313_Load_all_param>:
  tda7313_Save_Input(_input);
  tda7313_Save_Loudness(_loudness);
}
//=============================================================================
void tda7313_Load_all_param(void)
{
    4402:	cf 92       	push	r12
    4404:	df 92       	push	r13
    4406:	ef 92       	push	r14
    4408:	ff 92       	push	r15
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	cf 93       	push	r28
    4410:	df 93       	push	r29
  unsigned char i, param;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    4412:	4c e6       	ldi	r20, 0x6C	; 108
    4414:	e4 2e       	mov	r14, r20
    4416:	44 e0       	ldi	r20, 0x04	; 4
    4418:	f4 2e       	mov	r15, r20
    441a:	04 e8       	ldi	r16, 0x84	; 132
    441c:	14 e0       	ldi	r17, 0x04	; 4
    441e:	c0 e5       	ldi	r28, 0x50	; 80
    4420:	d4 e0       	ldi	r29, 0x04	; 4
    4422:	dd 24       	eor	r13, r13
  {
    param = tda7313_Load_param(0, i);
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	6d 2d       	mov	r22, r13
    4428:	0e 94 e7 21 	call	0x43ce	; 0x43ce <tda7313_Load_param>
	if (param > tda7313_max_param[i]) tda7313_param[0][i] = tda7313_def_param[i]; else tda7313_param[0][i] = param;
    442c:	f7 01       	movw	r30, r14
    442e:	c1 90       	ld	r12, Z+
    4430:	7f 01       	movw	r14, r30
    4432:	c8 16       	cp	r12, r24
    4434:	10 f4       	brcc	.+4      	; 0x443a <tda7313_Load_all_param+0x38>
    4436:	f8 01       	movw	r30, r16
    4438:	80 81       	ld	r24, Z
    443a:	88 83       	st	Y, r24
    param = tda7313_Load_param(1, i);
    443c:	81 e0       	ldi	r24, 0x01	; 1
    443e:	6d 2d       	mov	r22, r13
    4440:	0e 94 e7 21 	call	0x43ce	; 0x43ce <tda7313_Load_param>
	if (param > tda7313_max_param[i]) tda7313_param[1][i] = tda7313_def_param[i]; else tda7313_param[1][i] = param;
    4444:	c8 16       	cp	r12, r24
    4446:	10 f4       	brcc	.+4      	; 0x444c <tda7313_Load_all_param+0x4a>
    4448:	f8 01       	movw	r30, r16
    444a:	80 81       	ld	r24, Z
    444c:	88 87       	std	Y+8, r24	; 0x08
    param = tda7313_Load_param(2, i);
    444e:	82 e0       	ldi	r24, 0x02	; 2
    4450:	6d 2d       	mov	r22, r13
    4452:	0e 94 e7 21 	call	0x43ce	; 0x43ce <tda7313_Load_param>
	if (param > tda7313_max_param[i]) tda7313_param[2][i] = tda7313_def_param[i]; else tda7313_param[2][i] = param;
    4456:	c8 16       	cp	r12, r24
    4458:	10 f4       	brcc	.+4      	; 0x445e <tda7313_Load_all_param+0x5c>
    445a:	f8 01       	movw	r30, r16
    445c:	80 81       	ld	r24, Z
    445e:	88 8b       	std	Y+16, r24	; 0x10
}
//=============================================================================
void tda7313_Load_all_param(void)
{
  unsigned char i, param;
  for(i = 0; i < TDA_MAX_PARAM; i++)
    4460:	d3 94       	inc	r13
    4462:	0f 5f       	subi	r16, 0xFF	; 255
    4464:	1f 4f       	sbci	r17, 0xFF	; 255
    4466:	21 96       	adiw	r28, 0x01	; 1
    4468:	fd 2d       	mov	r31, r13
    446a:	f8 30       	cpi	r31, 0x08	; 8
    446c:	d9 f6       	brne	.-74     	; 0x4424 <tda7313_Load_all_param+0x22>
    param = tda7313_Load_param(1, i);
	if (param > tda7313_max_param[i]) tda7313_param[1][i] = tda7313_def_param[i]; else tda7313_param[1][i] = param;
    param = tda7313_Load_param(2, i);
	if (param > tda7313_max_param[i]) tda7313_param[2][i] = tda7313_def_param[i]; else tda7313_param[2][i] = param;
  }
  tda7313_Load_Input();
    446e:	0e 94 85 21 	call	0x430a	; 0x430a <tda7313_Load_Input>
  tda7313_Load_Loudness();
    4472:	0e 94 98 21 	call	0x4330	; 0x4330 <tda7313_Load_Loudness>
}
    4476:	df 91       	pop	r29
    4478:	cf 91       	pop	r28
    447a:	1f 91       	pop	r17
    447c:	0f 91       	pop	r16
    447e:	ff 90       	pop	r15
    4480:	ef 90       	pop	r14
    4482:	df 90       	pop	r13
    4484:	cf 90       	pop	r12
    4486:	08 95       	ret

00004488 <tda7313_Save_vol_fm_edit>:
  }
  return ret;
}
//=============================================================================
void tda7313_Save_vol_fm_edit(uint8_t vol)
{
    4488:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)FM_VOLUME_EDIT_ADDR, vol);
    448a:	87 e1       	ldi	r24, 0x17	; 23
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
}
    4492:	08 95       	ret

00004494 <tda7313_Load_vol_fm_edit>:
//=============================================================================
uint8_t tda7313_Load_vol_fm_edit(void)
{
  uint8_t v;
  v = eeprom_read_byte((uint8_t*)FM_VOLUME_EDIT_ADDR);
    4494:	87 e1       	ldi	r24, 0x17	; 23
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  if (v > tda7313_max_param[TDA_VOLUME]) {
    449c:	90 91 6c 04 	lds	r25, 0x046C
    44a0:	98 17       	cp	r25, r24
    44a2:	20 f4       	brcc	.+8      	; 0x44ac <tda7313_Load_vol_fm_edit+0x18>
    v = TDA_VOLUME_DEF;
    tda7313_Save_vol_fm_edit(v);
    44a4:	88 e1       	ldi	r24, 0x18	; 24
    44a6:	0e 94 44 22 	call	0x4488	; 0x4488 <tda7313_Save_vol_fm_edit>
uint8_t tda7313_Load_vol_fm_edit(void)
{
  uint8_t v;
  v = eeprom_read_byte((uint8_t*)FM_VOLUME_EDIT_ADDR);
  if (v > tda7313_max_param[TDA_VOLUME]) {
    v = TDA_VOLUME_DEF;
    44aa:	88 e1       	ldi	r24, 0x18	; 24
    tda7313_Save_vol_fm_edit(v);
  }
  return v;
}
    44ac:	08 95       	ret

000044ae <tea5767WriteI2C>:
static uint8_t wrBuf[5];
static uint8_t rdBuf[5];
static uint8_t ctrl = 0x79;
//=============================================================================
static void tea5767WriteI2C(void)
{
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
  uint8_t i;
  I2C_start();
    44b2:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TEA5767_I2C_ADDR);
    44b6:	80 ec       	ldi	r24, 0xC0	; 192
    44b8:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    44bc:	c7 e8       	ldi	r28, 0x87	; 135
    44be:	d5 e0       	ldi	r29, 0x05	; 5
  for (i = 0; i < sizeof(wrBuf); i++)
	I2C_write(wrBuf[i]);
    44c0:	89 91       	ld	r24, Y+
    44c2:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
static void tea5767WriteI2C(void)
{
  uint8_t i;
  I2C_start();
  I2C_write(TEA5767_I2C_ADDR);
  for (i = 0; i < sizeof(wrBuf); i++)
    44c6:	85 e0       	ldi	r24, 0x05	; 5
    44c8:	cc 38       	cpi	r28, 0x8C	; 140
    44ca:	d8 07       	cpc	r29, r24
    44cc:	c9 f7       	brne	.-14     	; 0x44c0 <tea5767WriteI2C+0x12>
	I2C_write(wrBuf[i]);
  I2C_stop();
    44ce:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  return;
}
    44d2:	df 91       	pop	r29
    44d4:	cf 91       	pop	r28
    44d6:	08 95       	ret

000044d8 <tea5767Init>:
//=============================================================================
void tea5767Init(uint8_t tea5767Ctrl)
{
  ctrl = tea5767Ctrl;
    44d8:	80 93 8e 04 	sts	0x048E, r24
  wrBuf[0] = TEA5767_MUTE;
    44dc:	90 e8       	ldi	r25, 0x80	; 128
    44de:	90 93 87 05 	sts	0x0587, r25
  wrBuf[1] = 0;
    44e2:	10 92 88 05 	sts	0x0588, r1
  wrBuf[2] = TEA5767_HLSI;
    44e6:	90 e1       	ldi	r25, 0x10	; 16
    44e8:	90 93 89 05 	sts	0x0589, r25
  wrBuf[3] = 0;
    44ec:	10 92 8a 05 	sts	0x058A, r1
  if (ctrl & TEA5767_CTRL_HCC)
    44f0:	86 ff       	sbrs	r24, 6
    44f2:	03 c0       	rjmp	.+6      	; 0x44fa <tea5767Init+0x22>
	wrBuf[3] |= TEA5767_HCC;
    44f4:	94 e0       	ldi	r25, 0x04	; 4
    44f6:	90 93 8a 05 	sts	0x058A, r25
  if (ctrl & TEA5767_CTRL_SNC)
    44fa:	85 ff       	sbrs	r24, 5
    44fc:	05 c0       	rjmp	.+10     	; 0x4508 <tea5767Init+0x30>
	wrBuf[3] |= TEA5767_SNC;
    44fe:	90 91 8a 05 	lds	r25, 0x058A
    4502:	92 60       	ori	r25, 0x02	; 2
    4504:	90 93 8a 05 	sts	0x058A, r25
  if (ctrl & TEA5767_CTRL_SMUTE)
    4508:	84 ff       	sbrs	r24, 4
    450a:	05 c0       	rjmp	.+10     	; 0x4516 <tea5767Init+0x3e>
	wrBuf[3] |= TEA5767_SMUTE;
    450c:	90 91 8a 05 	lds	r25, 0x058A
    4510:	98 60       	ori	r25, 0x08	; 8
    4512:	90 93 8a 05 	sts	0x058A, r25
  if (ctrl & TEA5767_CTRL_BL)
    4516:	82 ff       	sbrs	r24, 2
    4518:	05 c0       	rjmp	.+10     	; 0x4524 <tea5767Init+0x4c>
	wrBuf[3] |= TEA5767_BL;
    451a:	90 91 8a 05 	lds	r25, 0x058A
    451e:	90 62       	ori	r25, 0x20	; 32
    4520:	90 93 8a 05 	sts	0x058A, r25
  if (ctrl & TEA5767_CTRL_XTAL)
    4524:	80 ff       	sbrs	r24, 0
    4526:	05 c0       	rjmp	.+10     	; 0x4532 <tea5767Init+0x5a>
	wrBuf[3] |= TEA5767_XTAL;
    4528:	90 91 8a 05 	lds	r25, 0x058A
    452c:	90 61       	ori	r25, 0x10	; 16
    452e:	90 93 8a 05 	sts	0x058A, r25
  wrBuf[4] = 0;
    4532:	10 92 8b 05 	sts	0x058B, r1
  if (ctrl & TEA5767_CTRL_DTC)
    4536:	83 ff       	sbrs	r24, 3
    4538:	03 c0       	rjmp	.+6      	; 0x4540 <tea5767Init+0x68>
	wrBuf[4] |= TEA5767_DTC;
    453a:	90 e4       	ldi	r25, 0x40	; 64
    453c:	90 93 8b 05 	sts	0x058B, r25
  if (ctrl & TEA5767_CTRL_PLLREF)
    4540:	81 ff       	sbrs	r24, 1
    4542:	05 c0       	rjmp	.+10     	; 0x454e <tea5767Init+0x76>
	wrBuf[4] |= TEA5767_PLLREF;
    4544:	80 91 8b 05 	lds	r24, 0x058B
    4548:	80 68       	ori	r24, 0x80	; 128
    454a:	80 93 8b 05 	sts	0x058B, r24
    454e:	08 95       	ret

00004550 <tea5767SetFreq>:
  return;
}
//=============================================================================
void tea5767SetFreq(uint16_t freq, uint8_t mono)
{
    4550:	1f 93       	push	r17
    4552:	16 2f       	mov	r17, r22
  uint16_t div;
  uint32_t fq = (uint32_t)freq * 10000 + 225000;
    4554:	bc 01       	movw	r22, r24
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	20 e1       	ldi	r18, 0x10	; 16
    455c:	37 e2       	ldi	r19, 0x27	; 39
    455e:	40 e0       	ldi	r20, 0x00	; 0
    4560:	50 e0       	ldi	r21, 0x00	; 0
    4562:	0e 94 d0 23 	call	0x47a0	; 0x47a0 <__mulsi3>
    4566:	68 51       	subi	r22, 0x18	; 24
    4568:	71 49       	sbci	r23, 0x91	; 145
    456a:	8c 4f       	sbci	r24, 0xFC	; 252
    456c:	9f 4f       	sbci	r25, 0xFF	; 255
  if (ctrl & TEA5767_CTRL_XTAL)
    456e:	20 91 8e 04 	lds	r18, 0x048E
    4572:	20 ff       	sbrs	r18, 0
    4574:	09 c0       	rjmp	.+18     	; 0x4588 <tea5767SetFreq+0x38>
	div = fq / 8192;
    4576:	2d e0       	ldi	r18, 0x0D	; 13
    4578:	96 95       	lsr	r25
    457a:	87 95       	ror	r24
    457c:	77 95       	ror	r23
    457e:	67 95       	ror	r22
    4580:	2a 95       	dec	r18
    4582:	d1 f7       	brne	.-12     	; 0x4578 <tea5767SetFreq+0x28>
    4584:	9b 01       	movw	r18, r22
    4586:	06 c0       	rjmp	.+12     	; 0x4594 <tea5767SetFreq+0x44>
  else
	div = fq / 12500;
    4588:	24 ed       	ldi	r18, 0xD4	; 212
    458a:	30 e3       	ldi	r19, 0x30	; 48
    458c:	40 e0       	ldi	r20, 0x00	; 0
    458e:	50 e0       	ldi	r21, 0x00	; 0
    4590:	0e 94 22 24 	call	0x4844	; 0x4844 <__udivmodsi4>
  wrBuf[0] &= 0xC0;
  wrBuf[0] |= (div >> 8) & 0x3F;
    4594:	3f 73       	andi	r19, 0x3F	; 63
  uint32_t fq = (uint32_t)freq * 10000 + 225000;
  if (ctrl & TEA5767_CTRL_XTAL)
	div = fq / 8192;
  else
	div = fq / 12500;
  wrBuf[0] &= 0xC0;
    4596:	80 91 87 05 	lds	r24, 0x0587
    459a:	80 7c       	andi	r24, 0xC0	; 192
  wrBuf[0] |= (div >> 8) & 0x3F;
    459c:	38 2b       	or	r19, r24
    459e:	30 93 87 05 	sts	0x0587, r19
  wrBuf[1] = div & 0xFF;
    45a2:	20 93 88 05 	sts	0x0588, r18
    45a6:	80 91 89 05 	lds	r24, 0x0589
  if (mono)
    45aa:	11 23       	and	r17, r17
    45ac:	11 f0       	breq	.+4      	; 0x45b2 <tea5767SetFreq+0x62>
	wrBuf[2] |= TEA5767_MS;
    45ae:	88 60       	ori	r24, 0x08	; 8
    45b0:	01 c0       	rjmp	.+2      	; 0x45b4 <tea5767SetFreq+0x64>
  else
	wrBuf[2] &= ~TEA5767_MS;
    45b2:	87 7f       	andi	r24, 0xF7	; 247
    45b4:	80 93 89 05 	sts	0x0589, r24
  tea5767WriteI2C();
    45b8:	0e 94 57 22 	call	0x44ae	; 0x44ae <tea5767WriteI2C>
  return;
}
    45bc:	1f 91       	pop	r17
    45be:	08 95       	ret

000045c0 <tea5767ReadStatus>:
//=============================================================================
uint8_t *tea5767ReadStatus(void)
{
    45c0:	cf 93       	push	r28
    45c2:	df 93       	push	r29
  uint8_t i;
  I2C_start();
    45c4:	0e 94 6f 02 	call	0x4de	; 0x4de <I2C_start>
  I2C_write(TEA5767_I2C_ADDR | I2C_READ);
    45c8:	81 ec       	ldi	r24, 0xC1	; 193
    45ca:	0e 94 b8 02 	call	0x570	; 0x570 <I2C_write>
    45ce:	cc e8       	ldi	r28, 0x8C	; 140
    45d0:	d5 e0       	ldi	r29, 0x05	; 5
  for (i = 0; i < sizeof(rdBuf) - 1; i++)
	rdBuf[i] = I2C_read(I2C_ACK);
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
    45d8:	89 93       	st	Y+, r24
uint8_t *tea5767ReadStatus(void)
{
  uint8_t i;
  I2C_start();
  I2C_write(TEA5767_I2C_ADDR | I2C_READ);
  for (i = 0; i < sizeof(rdBuf) - 1; i++)
    45da:	85 e0       	ldi	r24, 0x05	; 5
    45dc:	c0 39       	cpi	r28, 0x90	; 144
    45de:	d8 07       	cpc	r29, r24
    45e0:	c1 f7       	brne	.-16     	; 0x45d2 <tea5767ReadStatus+0x12>
	rdBuf[i] = I2C_read(I2C_ACK);
  rdBuf[sizeof(rdBuf) - 1] = I2C_read(I2C_NOACK);
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	0e 94 fe 02 	call	0x5fc	; 0x5fc <I2C_read>
    45e8:	80 93 90 05 	sts	0x0590, r24
  I2C_stop();
    45ec:	0e 94 86 02 	call	0x50c	; 0x50c <I2C_stop>
  return rdBuf;
}
    45f0:	ce 01       	movw	r24, r28
    45f2:	04 97       	sbiw	r24, 0x04	; 4
    45f4:	df 91       	pop	r29
    45f6:	cf 91       	pop	r28
    45f8:	08 95       	ret

000045fa <tea5767SetMute>:
//=============================================================================
void tea5767SetMute(uint8_t mute)
{
    45fa:	90 91 87 05 	lds	r25, 0x0587
  if (mute)
    45fe:	88 23       	and	r24, r24
    4600:	11 f0       	breq	.+4      	; 0x4606 <tea5767SetMute+0xc>
	wrBuf[0] |= TEA5767_MUTE;
    4602:	90 68       	ori	r25, 0x80	; 128
    4604:	01 c0       	rjmp	.+2      	; 0x4608 <tea5767SetMute+0xe>
  else
	wrBuf[0] &= ~TEA5767_MUTE;
    4606:	9f 77       	andi	r25, 0x7F	; 127
    4608:	90 93 87 05 	sts	0x0587, r25
  tea5767WriteI2C();
    460c:	0e 94 57 22 	call	0x44ae	; 0x44ae <tea5767WriteI2C>
  return;
}
    4610:	08 95       	ret

00004612 <tea5767PowerOn>:
//=============================================================================
void tea5767PowerOn(void)
{
  wrBuf[0] &= ~TEA5767_MUTE;
    4612:	80 91 87 05 	lds	r24, 0x0587
    4616:	8f 77       	andi	r24, 0x7F	; 127
    4618:	80 93 87 05 	sts	0x0587, r24
  wrBuf[3] &= ~TEA5767_STBY;
    461c:	80 91 8a 05 	lds	r24, 0x058A
    4620:	8f 7b       	andi	r24, 0xBF	; 191
    4622:	80 93 8a 05 	sts	0x058A, r24
  return;
}
    4626:	08 95       	ret

00004628 <tea5767PowerOff>:
//=============================================================================
void tea5767PowerOff(void)
{
  wrBuf[3] |= TEA5767_STBY;
    4628:	80 91 8a 05 	lds	r24, 0x058A
    462c:	80 64       	ori	r24, 0x40	; 64
    462e:	80 93 8a 05 	sts	0x058A, r24
  tea5767SetMute(1);
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	0e 94 fd 22 	call	0x45fa	; 0x45fa <tea5767SetMute>
  return;
}
    4638:	08 95       	ret

0000463a <tuner_Init_stations>:
//=============================================================================
#if (TUNER == TUX032)
#endif
//=============================================================================
void tuner_Init_stations(void)
{
    463a:	ef ec       	ldi	r30, 0xCF	; 207
    463c:	f5 e0       	ldi	r31, 0x05	; 5
  uint8_t i;
  for (i = 0; i < FM_STATIONS; i++) fm_stations[i] = 0xFF;
    463e:	8f ef       	ldi	r24, 0xFF	; 255
    4640:	81 93       	st	Z+, r24
    4642:	95 e0       	ldi	r25, 0x05	; 5
    4644:	ed 3e       	cpi	r30, 0xED	; 237
    4646:	f9 07       	cpc	r31, r25
    4648:	d9 f7       	brne	.-10     	; 0x4640 <tuner_Init_stations+0x6>
}
    464a:	08 95       	ret

0000464c <tuner_ChanToFreq>:
//=============================================================================
uint16_t tuner_ChanToFreq(uint8_t chan)
{
  return (FM_FREQ_MIN + (chan * 10));
    464c:	2a e0       	ldi	r18, 0x0A	; 10
    464e:	82 9f       	mul	r24, r18
    4650:	90 01       	movw	r18, r0
    4652:	11 24       	eor	r1, r1
    4654:	24 50       	subi	r18, 0x04	; 4
    4656:	3e 4d       	sbci	r19, 0xDE	; 222
}
    4658:	c9 01       	movw	r24, r18
    465a:	08 95       	ret

0000465c <tuner_FreqToChan>:
//=============================================================================
uint8_t tuner_FreqToChan(uint16_t freq)
{
  return ((freq - FM_FREQ_MIN) / 10);
    465c:	8c 5f       	subi	r24, 0xFC	; 252
    465e:	91 42       	sbci	r25, 0x21	; 33
    4660:	6a e0       	ldi	r22, 0x0A	; 10
    4662:	70 e0       	ldi	r23, 0x00	; 0
    4664:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <__udivmodhi4>
}
    4668:	86 2f       	mov	r24, r22
    466a:	08 95       	ret

0000466c <tuner_GetChan>:
//=============================================================================
uint8_t tuner_GetChan(uint8_t channel)
{
  if (channel < FM_STATIONS) {
    466c:	8e 31       	cpi	r24, 0x1E	; 30
    466e:	30 f4       	brcc	.+12     	; 0x467c <tuner_GetChan+0x10>
    return fm_stations[channel];
    4670:	e8 2f       	mov	r30, r24
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	e1 53       	subi	r30, 0x31	; 49
    4676:	fa 4f       	sbci	r31, 0xFA	; 250
    4678:	80 81       	ld	r24, Z
    467a:	08 95       	ret
  } else return 0;
    467c:	80 e0       	ldi	r24, 0x00	; 0
}
    467e:	08 95       	ret

00004680 <tuner_SetChan>:
//=============================================================================
void tuner_SetChan(uint8_t chan)
{
    4680:	1f 93       	push	r17
    4682:	18 2f       	mov	r17, r24
  if (chan <= FM_CHAN_MAX) {
    4684:	83 3d       	cpi	r24, 0xD3	; 211
    4686:	68 f4       	brcc	.+26     	; 0x46a2 <tuner_SetChan+0x22>
    tuner_SetMute(0);
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	0e 94 fd 22 	call	0x45fa	; 0x45fa <tea5767SetMute>
  for (i = 0; i < FM_STATIONS; i++) fm_stations[i] = 0xFF;
}
//=============================================================================
uint16_t tuner_ChanToFreq(uint8_t chan)
{
  return (FM_FREQ_MIN + (chan * 10));
    468e:	8a e0       	ldi	r24, 0x0A	; 10
    4690:	18 9f       	mul	r17, r24
    4692:	c0 01       	movw	r24, r0
    4694:	11 24       	eor	r1, r1
//=============================================================================
void tuner_SetChan(uint8_t chan)
{
  if (chan <= FM_CHAN_MAX) {
    tuner_SetMute(0);
    tuner_SetFreq(tuner_ChanToFreq(chan), 0);
    4696:	84 50       	subi	r24, 0x04	; 4
    4698:	9e 4d       	sbci	r25, 0xDE	; 222
    469a:	60 e0       	ldi	r22, 0x00	; 0
    469c:	0e 94 a8 22 	call	0x4550	; 0x4550 <tea5767SetFreq>
    46a0:	03 c0       	rjmp	.+6      	; 0x46a8 <tuner_SetChan+0x28>
  } else {
    tuner_SetMute(1);
    46a2:	81 e0       	ldi	r24, 0x01	; 1
    46a4:	0e 94 fd 22 	call	0x45fa	; 0x45fa <tea5767SetMute>
  }
}
    46a8:	1f 91       	pop	r17
    46aa:	08 95       	ret

000046ac <tuner_SetChannel>:
//=============================================================================
void tuner_SetChannel(uint8_t channel, uint8_t chan)
{
  if ((channel < FM_STATIONS) && (chan <= FM_CHAN_MAX)) {
    46ac:	8e 31       	cpi	r24, 0x1E	; 30
    46ae:	40 f4       	brcc	.+16     	; 0x46c0 <tuner_SetChannel+0x14>
    46b0:	63 3d       	cpi	r22, 0xD3	; 211
    46b2:	30 f4       	brcc	.+12     	; 0x46c0 <tuner_SetChannel+0x14>
    fm_stations[channel] = chan;
    46b4:	e8 2f       	mov	r30, r24
    46b6:	f0 e0       	ldi	r31, 0x00	; 0
    46b8:	e1 53       	subi	r30, 0x31	; 49
    46ba:	fa 4f       	sbci	r31, 0xFA	; 250
    46bc:	60 83       	st	Z, r22
    46be:	08 95       	ret
  } else {
    fm_stations[channel] = 0xFF;
    46c0:	e8 2f       	mov	r30, r24
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	e1 53       	subi	r30, 0x31	; 49
    46c6:	fa 4f       	sbci	r31, 0xFA	; 250
    46c8:	8f ef       	ldi	r24, 0xFF	; 255
    46ca:	80 83       	st	Z, r24
    46cc:	08 95       	ret

000046ce <tuner_Save_stations>:
  }
}
//=============================================================================
void tuner_Save_stations(uint8_t channel, uint8_t chan)
{
  if ((channel < FM_STATIONS) && (chan <= FM_CHAN_MAX)) {
    46ce:	8e 31       	cpi	r24, 0x1E	; 30
    46d0:	50 f4       	brcc	.+20     	; 0x46e6 <tuner_Save_stations+0x18>
    46d2:	63 3d       	cpi	r22, 0xD3	; 211
    46d4:	40 f4       	brcc	.+16     	; 0x46e6 <tuner_Save_stations+0x18>
    fm_stations[channel] = chan;
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	fc 01       	movw	r30, r24
    46da:	e1 53       	subi	r30, 0x31	; 49
    46dc:	fa 4f       	sbci	r31, 0xFA	; 250
    46de:	60 83       	st	Z, r22
    eeprom_write_byte((uint8_t*)FM_CHANEL_ALL_ADDR + channel, fm_stations[channel]);
    46e0:	80 96       	adiw	r24, 0x20	; 32
    46e2:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
    46e6:	08 95       	ret

000046e8 <tuner_Load_stations>:
  }
}
//=============================================================================
uint8_t tuner_Load_stations(uint8_t channel)
{
  return eeprom_read_byte((uint8_t*)FM_CHANEL_ALL_ADDR + channel);
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	80 96       	adiw	r24, 0x20	; 32
    46ec:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
}
    46f0:	08 95       	ret

000046f2 <tuner_Save_all_stations>:
//=============================================================================
void tuner_Save_all_stations(void)
{
    46f2:	0f 93       	push	r16
    46f4:	1f 93       	push	r17
    46f6:	cf 93       	push	r28
    46f8:	df 93       	push	r29
    46fa:	0f ec       	ldi	r16, 0xCF	; 207
    46fc:	15 e0       	ldi	r17, 0x05	; 5
    46fe:	c0 e2       	ldi	r28, 0x20	; 32
    4700:	d0 e0       	ldi	r29, 0x00	; 0
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
  {
    eeprom_write_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i, fm_stations[i]);
    4702:	f8 01       	movw	r30, r16
    4704:	61 91       	ld	r22, Z+
    4706:	8f 01       	movw	r16, r30
    4708:	ce 01       	movw	r24, r28
    470a:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
    470e:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void tuner_Save_all_stations(void)
{
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
    4710:	ce 33       	cpi	r28, 0x3E	; 62
    4712:	d1 05       	cpc	r29, r1
    4714:	b1 f7       	brne	.-20     	; 0x4702 <tuner_Save_all_stations+0x10>
  {
    eeprom_write_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i, fm_stations[i]);
  }
}
    4716:	df 91       	pop	r29
    4718:	cf 91       	pop	r28
    471a:	1f 91       	pop	r17
    471c:	0f 91       	pop	r16
    471e:	08 95       	ret

00004720 <tuner_Load_all_stations>:
//=============================================================================
void tuner_Load_all_stations(void)
{
    4720:	0f 93       	push	r16
    4722:	1f 93       	push	r17
    4724:	cf 93       	push	r28
    4726:	df 93       	push	r29
    4728:	0f ec       	ldi	r16, 0xCF	; 207
    472a:	15 e0       	ldi	r17, 0x05	; 5
    472c:	c0 e2       	ldi	r28, 0x20	; 32
    472e:	d0 e0       	ldi	r29, 0x00	; 0
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
  {
    fm_stations[i] = eeprom_read_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i);
    4730:	ce 01       	movw	r24, r28
    4732:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
    4736:	f8 01       	movw	r30, r16
    4738:	81 93       	st	Z+, r24
    473a:	8f 01       	movw	r16, r30
    473c:	21 96       	adiw	r28, 0x01	; 1
}
//=============================================================================
void tuner_Load_all_stations(void)
{
  unsigned char i;
  for(i = 0; i < FM_STATIONS; i++)
    473e:	ce 33       	cpi	r28, 0x3E	; 62
    4740:	d1 05       	cpc	r29, r1
    4742:	b1 f7       	brne	.-20     	; 0x4730 <tuner_Load_all_stations+0x10>
  {
    fm_stations[i] = eeprom_read_byte((uint8_t*)FM_CHANEL_ALL_ADDR + i);
  }
}
    4744:	df 91       	pop	r29
    4746:	cf 91       	pop	r28
    4748:	1f 91       	pop	r17
    474a:	0f 91       	pop	r16
    474c:	08 95       	ret

0000474e <tuner_Save_channel>:
//=============================================================================
void tuner_Save_channel(uint8_t channel)
{
    474e:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)FM_STATION_ADDR, channel);
    4750:	80 e1       	ldi	r24, 0x10	; 16
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
}
    4758:	08 95       	ret

0000475a <tuner_Load_channel>:
//=============================================================================
uint8_t tuner_Load_channel(void)
{
  unsigned char i;
  i = eeprom_read_byte((uint8_t*)FM_STATION_ADDR);
    475a:	80 e1       	ldi	r24, 0x10	; 16
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
  if (i > FM_STATIONS) i = 0;
    4762:	8f 31       	cpi	r24, 0x1F	; 31
    4764:	08 f0       	brcs	.+2      	; 0x4768 <tuner_Load_channel+0xe>
    4766:	80 e0       	ldi	r24, 0x00	; 0
  return i;
}
    4768:	08 95       	ret

0000476a <tuner_Save_volume>:
//=============================================================================
void tuner_Save_volume(uint8_t vol)
{
    476a:	68 2f       	mov	r22, r24
  eeprom_write_byte((uint8_t*)FM_VOLUME_ADDR, vol);
    476c:	81 e1       	ldi	r24, 0x11	; 17
    476e:	90 e0       	ldi	r25, 0x00	; 0
    4770:	0e 94 4c 24 	call	0x4898	; 0x4898 <__eewr_byte_m32>
}
    4774:	08 95       	ret

00004776 <tuner_Load_volume>:
//=============================================================================
uint8_t tuner_Load_volume(void)
{
  return eeprom_read_byte((uint8_t*)FM_VOLUME_ADDR);
    4776:	81 e1       	ldi	r24, 0x11	; 17
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	0e 94 44 24 	call	0x4888	; 0x4888 <__eerd_byte_m32>
}
    477e:	08 95       	ret

00004780 <get_fm_def_chan>:
{
  uint8_t ret = FM_CHAN_DEF, chan_max = 0, i;
  for(i = 0; i < FM_STATIONS; i++)
  {
    if (fm_stations[i] <= FM_CHAN_MAX) {
	  if (fm_stations[i] >= chan_max) {
    4780:	ef ec       	ldi	r30, 0xCF	; 207
    4782:	f5 e0       	ldi	r31, 0x05	; 5
  return eeprom_read_byte((uint8_t*)FM_VOLUME_ADDR);
}
//=============================================================================
uint8_t get_fm_def_chan(void)
{
  uint8_t ret = FM_CHAN_DEF, chan_max = 0, i;
    4784:	90 e0       	ldi	r25, 0x00	; 0
    4786:	80 e0       	ldi	r24, 0x00	; 0
  for(i = 0; i < FM_STATIONS; i++)
  {
    if (fm_stations[i] <= FM_CHAN_MAX) {
    4788:	21 91       	ld	r18, Z+
    478a:	23 3d       	cpi	r18, 0xD3	; 211
    478c:	20 f4       	brcc	.+8      	; 0x4796 <get_fm_def_chan+0x16>
	  if (fm_stations[i] >= chan_max) {
    478e:	29 17       	cp	r18, r25
    4790:	10 f0       	brcs	.+4      	; 0x4796 <get_fm_def_chan+0x16>
    4792:	92 2f       	mov	r25, r18
    4794:	82 2f       	mov	r24, r18
}
//=============================================================================
uint8_t get_fm_def_chan(void)
{
  uint8_t ret = FM_CHAN_DEF, chan_max = 0, i;
  for(i = 0; i < FM_STATIONS; i++)
    4796:	25 e0       	ldi	r18, 0x05	; 5
    4798:	ed 3e       	cpi	r30, 0xED	; 237
    479a:	f2 07       	cpc	r31, r18
    479c:	a9 f7       	brne	.-22     	; 0x4788 <get_fm_def_chan+0x8>
	    ret = fm_stations[i];
	  }
	}
  }
  return ret;
}
    479e:	08 95       	ret

000047a0 <__mulsi3>:
    47a0:	62 9f       	mul	r22, r18
    47a2:	d0 01       	movw	r26, r0
    47a4:	73 9f       	mul	r23, r19
    47a6:	f0 01       	movw	r30, r0
    47a8:	82 9f       	mul	r24, r18
    47aa:	e0 0d       	add	r30, r0
    47ac:	f1 1d       	adc	r31, r1
    47ae:	64 9f       	mul	r22, r20
    47b0:	e0 0d       	add	r30, r0
    47b2:	f1 1d       	adc	r31, r1
    47b4:	92 9f       	mul	r25, r18
    47b6:	f0 0d       	add	r31, r0
    47b8:	83 9f       	mul	r24, r19
    47ba:	f0 0d       	add	r31, r0
    47bc:	74 9f       	mul	r23, r20
    47be:	f0 0d       	add	r31, r0
    47c0:	65 9f       	mul	r22, r21
    47c2:	f0 0d       	add	r31, r0
    47c4:	99 27       	eor	r25, r25
    47c6:	72 9f       	mul	r23, r18
    47c8:	b0 0d       	add	r27, r0
    47ca:	e1 1d       	adc	r30, r1
    47cc:	f9 1f       	adc	r31, r25
    47ce:	63 9f       	mul	r22, r19
    47d0:	b0 0d       	add	r27, r0
    47d2:	e1 1d       	adc	r30, r1
    47d4:	f9 1f       	adc	r31, r25
    47d6:	bd 01       	movw	r22, r26
    47d8:	cf 01       	movw	r24, r30
    47da:	11 24       	eor	r1, r1
    47dc:	08 95       	ret

000047de <__udivmodqi4>:
    47de:	99 1b       	sub	r25, r25
    47e0:	79 e0       	ldi	r23, 0x09	; 9
    47e2:	04 c0       	rjmp	.+8      	; 0x47ec <__udivmodqi4_ep>

000047e4 <__udivmodqi4_loop>:
    47e4:	99 1f       	adc	r25, r25
    47e6:	96 17       	cp	r25, r22
    47e8:	08 f0       	brcs	.+2      	; 0x47ec <__udivmodqi4_ep>
    47ea:	96 1b       	sub	r25, r22

000047ec <__udivmodqi4_ep>:
    47ec:	88 1f       	adc	r24, r24
    47ee:	7a 95       	dec	r23
    47f0:	c9 f7       	brne	.-14     	; 0x47e4 <__udivmodqi4_loop>
    47f2:	80 95       	com	r24
    47f4:	08 95       	ret

000047f6 <__udivmodhi4>:
    47f6:	aa 1b       	sub	r26, r26
    47f8:	bb 1b       	sub	r27, r27
    47fa:	51 e1       	ldi	r21, 0x11	; 17
    47fc:	07 c0       	rjmp	.+14     	; 0x480c <__udivmodhi4_ep>

000047fe <__udivmodhi4_loop>:
    47fe:	aa 1f       	adc	r26, r26
    4800:	bb 1f       	adc	r27, r27
    4802:	a6 17       	cp	r26, r22
    4804:	b7 07       	cpc	r27, r23
    4806:	10 f0       	brcs	.+4      	; 0x480c <__udivmodhi4_ep>
    4808:	a6 1b       	sub	r26, r22
    480a:	b7 0b       	sbc	r27, r23

0000480c <__udivmodhi4_ep>:
    480c:	88 1f       	adc	r24, r24
    480e:	99 1f       	adc	r25, r25
    4810:	5a 95       	dec	r21
    4812:	a9 f7       	brne	.-22     	; 0x47fe <__udivmodhi4_loop>
    4814:	80 95       	com	r24
    4816:	90 95       	com	r25
    4818:	bc 01       	movw	r22, r24
    481a:	cd 01       	movw	r24, r26
    481c:	08 95       	ret

0000481e <__divmodhi4>:
    481e:	97 fb       	bst	r25, 7
    4820:	09 2e       	mov	r0, r25
    4822:	07 26       	eor	r0, r23
    4824:	0a d0       	rcall	.+20     	; 0x483a <__divmodhi4_neg1>
    4826:	77 fd       	sbrc	r23, 7
    4828:	04 d0       	rcall	.+8      	; 0x4832 <__divmodhi4_neg2>
    482a:	e5 df       	rcall	.-54     	; 0x47f6 <__udivmodhi4>
    482c:	06 d0       	rcall	.+12     	; 0x483a <__divmodhi4_neg1>
    482e:	00 20       	and	r0, r0
    4830:	1a f4       	brpl	.+6      	; 0x4838 <__divmodhi4_exit>

00004832 <__divmodhi4_neg2>:
    4832:	70 95       	com	r23
    4834:	61 95       	neg	r22
    4836:	7f 4f       	sbci	r23, 0xFF	; 255

00004838 <__divmodhi4_exit>:
    4838:	08 95       	ret

0000483a <__divmodhi4_neg1>:
    483a:	f6 f7       	brtc	.-4      	; 0x4838 <__divmodhi4_exit>
    483c:	90 95       	com	r25
    483e:	81 95       	neg	r24
    4840:	9f 4f       	sbci	r25, 0xFF	; 255
    4842:	08 95       	ret

00004844 <__udivmodsi4>:
    4844:	a1 e2       	ldi	r26, 0x21	; 33
    4846:	1a 2e       	mov	r1, r26
    4848:	aa 1b       	sub	r26, r26
    484a:	bb 1b       	sub	r27, r27
    484c:	fd 01       	movw	r30, r26
    484e:	0d c0       	rjmp	.+26     	; 0x486a <__udivmodsi4_ep>

00004850 <__udivmodsi4_loop>:
    4850:	aa 1f       	adc	r26, r26
    4852:	bb 1f       	adc	r27, r27
    4854:	ee 1f       	adc	r30, r30
    4856:	ff 1f       	adc	r31, r31
    4858:	a2 17       	cp	r26, r18
    485a:	b3 07       	cpc	r27, r19
    485c:	e4 07       	cpc	r30, r20
    485e:	f5 07       	cpc	r31, r21
    4860:	20 f0       	brcs	.+8      	; 0x486a <__udivmodsi4_ep>
    4862:	a2 1b       	sub	r26, r18
    4864:	b3 0b       	sbc	r27, r19
    4866:	e4 0b       	sbc	r30, r20
    4868:	f5 0b       	sbc	r31, r21

0000486a <__udivmodsi4_ep>:
    486a:	66 1f       	adc	r22, r22
    486c:	77 1f       	adc	r23, r23
    486e:	88 1f       	adc	r24, r24
    4870:	99 1f       	adc	r25, r25
    4872:	1a 94       	dec	r1
    4874:	69 f7       	brne	.-38     	; 0x4850 <__udivmodsi4_loop>
    4876:	60 95       	com	r22
    4878:	70 95       	com	r23
    487a:	80 95       	com	r24
    487c:	90 95       	com	r25
    487e:	9b 01       	movw	r18, r22
    4880:	ac 01       	movw	r20, r24
    4882:	bd 01       	movw	r22, r26
    4884:	cf 01       	movw	r24, r30
    4886:	08 95       	ret

00004888 <__eerd_byte_m32>:
    4888:	e1 99       	sbic	0x1c, 1	; 28
    488a:	fe cf       	rjmp	.-4      	; 0x4888 <__eerd_byte_m32>
    488c:	9f bb       	out	0x1f, r25	; 31
    488e:	8e bb       	out	0x1e, r24	; 30
    4890:	e0 9a       	sbi	0x1c, 0	; 28
    4892:	99 27       	eor	r25, r25
    4894:	8d b3       	in	r24, 0x1d	; 29
    4896:	08 95       	ret

00004898 <__eewr_byte_m32>:
    4898:	26 2f       	mov	r18, r22

0000489a <__eewr_r18_m32>:
    489a:	e1 99       	sbic	0x1c, 1	; 28
    489c:	fe cf       	rjmp	.-4      	; 0x489a <__eewr_r18_m32>
    489e:	9f bb       	out	0x1f, r25	; 31
    48a0:	8e bb       	out	0x1e, r24	; 30
    48a2:	2d bb       	out	0x1d, r18	; 29
    48a4:	0f b6       	in	r0, 0x3f	; 63
    48a6:	f8 94       	cli
    48a8:	e2 9a       	sbi	0x1c, 2	; 28
    48aa:	e1 9a       	sbi	0x1c, 1	; 28
    48ac:	0f be       	out	0x3f, r0	; 63
    48ae:	01 96       	adiw	r24, 0x01	; 1
    48b0:	08 95       	ret

000048b2 <_exit>:
    48b2:	f8 94       	cli

000048b4 <__stop_program>:
    48b4:	ff cf       	rjmp	.-2      	; 0x48b4 <__stop_program>
